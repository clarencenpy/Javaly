{ 
    "_id" : "ZD2AvCcRQpvnpq2vN", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : true, 
    "code" : "public static int power(int b, int e) {\n    return (int) Math.pow(b, e);\n}", 
    "status" : "PASS", 
    "activeTime" : 9.7, 
    "totalActiveTime" : 32.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T11:12:15.974+0000"), 
            "code" : "public static int power(int b, int e) {\n    return (int) Math.power(b, e);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(23)
        }, 
        {
            "date" : ISODate("2016-01-01T11:12:25.704+0000"), 
            "code" : "public static int power(int b, int e) {\n    return (int) Math.pow(b, e);\n}", 
            "status" : "PASS", 
            "activeTime" : 9.7
        }
    ]
}
{ 
    "_id" : "4WFNY82JXaCd5ZEPL", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : true, 
    "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter c = supermarket.getCounter(counterNumber);\n    if(c != null){\n        return c.setCashier(cashier);\n    }\n    return false;\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 94.3, 
    "totalActiveTime" : 268.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T11:18:30.297+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter c = supermarket.getCounter(counterNumber);\n    if(c != null){\n        return c.setCashier(cashier);\n    }\n    return false;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 150.8
        }, 
        {
            "date" : ISODate("2016-01-01T11:18:58.352+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter c = supermarket.getCounter(counterNumber);\n    if(c != null){\n        return c.setCashier(cashier);\n    }\n    return false;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 14.8
        }, 
        {
            "date" : ISODate("2016-01-02T08:54:18.727+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter counterID = supermarket.getCounter(counterNumber);\n    boolean successfulAssignment = false;\n    \n    if (counterID.getCashier() == null) {\n        counterID.setCashier(cashier);\n        successfulAssignment = true;\n    }\n    return successfulAssignment;\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-01-02T08:55:53.169+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter c = supermarket.getCounter(counterNumber);\n    if(c != null){\n        return c.setCashier(cashier);\n    }\n    return false;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 94.3
        }
    ]
}
{ 
    "_id" : "QWZK7HgKjxFvjwhJw", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "DHJCfuTKczYDW6ste", 
    "completed" : false
}
{ 
    "_id" : "tidnboJkGL2frTjXA", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false
}
{ 
    "_id" : "YP6iiXmvRxY7mFkbD", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : true, 
    "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int count = 0;\n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            if(c.getNumCustomersInQueue() == 0){\n                count++;\n            }\n        }\n        \n    }\n    return count;\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 416.8, 
    "totalActiveTime" : 416.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T11:35:10.013+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int count = 0;\n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            if(c.getNumCustomersInQueue() == 0){\n                count++;\n            }\n        }\n        \n    }\n    return count;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 416.8
        }
    ]
}
{ 
    "_id" : "smRLhzSbzpnLDLFxm", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "BXHwNBWSnpHzCd5Hq", 
    "completed" : true, 
    "code" : "public class Tester {\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 10.3, 
    "totalActiveTime" : 18.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T16:25:58.492+0000"), 
            "code" : "public class Tester {\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.6
        }, 
        {
            "date" : ISODate("2016-01-01T16:26:35.056+0000"), 
            "code" : "public class Tester {\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 10.3
        }
    ]
}
{ 
    "_id" : "25JmGcMa2XKvZWKCw", 
    "userId" : "kKd3iyvrsAiChKGGc", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false
}
{ 
    "_id" : "DjErDzZXznA8Cq5nH", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "xDfNfEq2fazixRvqR", 
    "completed" : true, 
    "code" : "public static int addPositive(int a, int b) {\n    if (a <= 0 || b <= 0) {\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
    "status" : "PASS", 
    "activeTime" : 74.4, 
    "totalActiveTime" : 74.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T18:44:30.656+0000"), 
            "code" : "public static int addPositive(int a, int b) {\n    if (a <= 0 || b <= 0) {\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "PASS", 
            "activeTime" : 74.4
        }
    ], 
    "updatedAt" : ISODate("2016-01-07T07:31:54.470+0000")
}
{ 
    "_id" : "kmwuiR8FrAxcyF84i", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : true, 
    "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter counter = supermarket.getCounter(counterNumber);\n    if (counter == null) {\n        return false;\n    }\n    if (counter.getCashier() != null) {\n        return false;\n    } else {\n        counter.setCashier(cashier);\n        return true;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(247), 
    "totalActiveTime" : NumberInt(247), 
    "history" : [
        {
            "date" : ISODate("2016-01-02T07:15:19.312+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter counter = supermarket.getCounter(counterNumber);\n    if (counter == null) {\n        return false;\n    }\n    if (counter.getCashier() != null) {\n        return false;\n    } else {\n        counter.setCashier(cashier);\n        return true;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(247)
        }
    ]
}
{ 
    "_id" : "TWgyjb73uJ5i3LEkG", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false
}
{ 
    "_id" : "JoCF2gPFWwLFNKt3J", 
    "userId" : "gQomari3k2A3ydXcs", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false
}
{ 
    "_id" : "aHE9pNWxrA8DZNugJ", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : false
}
{ 
    "_id" : "qc6zsNQW2aSfHyYpH", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : true, 
    "code" : "public static String  retrieveStatusOfAllCounters(Supermarket supermarket) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        sb.append(i + \"-\");\n        if(c != null){\n            if(c.getCashier() != null){\n                sb.append(\"open\");\n            } else{\n                sb.append(\"closed\");\n            }\n        } else {\n            sb.append(\"closed\");\n        }\n        if(i != supermarket.getNumCounters()){\n            sb.append(\", \");\n        }\n    }\n    sb.append(\"]\");\n    return sb.toString();\n}", 
    "status" : "PASS", 
    "activeTime" : 128.6, 
    "totalActiveTime" : 759.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T11:48:25.194+0000"), 
            "code" : "public static String  retrieveStatusOfAllCounters(Supermarket supermarket) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        sb.append(i + \"-\");\n        if(c != null){\n            if(c.getCashier() != null){\n                sb.append(\"open\");\n            } else{\n                sb.append(\"closed\");\n            }\n        } else {\n            sb.append(\"closed\");\n        }\n        if(i != supermarket.getNumCounters()){\n            sb.append(\", \");\n        }\n    }\n    sb.append(\"]\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 602.5
        }, 
        {
            "date" : ISODate("2016-01-01T11:48:36.052+0000"), 
            "code" : "public static String  retrieveStatusOfAllCounters(Supermarket supermarket) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        sb.append(i + \"-\");\n        if(c != null){\n            if(c.getCashier() != null){\n                sb.append(\"open\");\n            } else{\n                sb.append(\"closed\");\n            }\n        } else {\n            sb.append(\"closed\");\n        }\n        if(i != supermarket.getNumCounters()){\n            sb.append(\", \");\n        }\n    }\n    sb.append(\"]\");\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(11)
        }, 
        {
            "date" : ISODate("2016-01-01T11:49:05.933+0000"), 
            "code" : "public static String  retrieveStatusOfAllCounters(Supermarket supermarket) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        sb.append(i + \"-\");\n        if(c != null){\n            if(c.getCashier() != null){\n                sb.append(\"open\");\n            } else{\n                sb.append(\"closed\");\n            }\n        } else {\n            sb.append(\"closed\");\n        }\n        if(i != supermarket.getNumCounters()){\n            sb.append(\", \");\n        }\n    }\n    sb.append(\"]\");\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-01-01T11:51:30.312+0000"), 
            "code" : "public static String  retrieveStatusOfAllCounters(Supermarket supermarket) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        sb.append(i + \"-\");\n        if(c != null){\n            if(c.getCashier() != null){\n                sb.append(\"open\");\n            } else{\n                sb.append(\"closed\");\n            }\n        } else {\n            sb.append(\"closed\");\n        }\n        if(i != supermarket.getNumCounters()){\n            sb.append(\", \");\n        }\n    }\n    sb.append(\"]\");\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 128.6
        }
    ]
}
{ 
    "_id" : "42rHTgNAZZ5wEphiu", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "xsTmbTMhHzWKFwzSw", 
    "completed" : true, 
    "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            int numSeniors = 0;\n            for(int j = 1; j <= c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus.getAge() >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
    "status" : "PASS", 
    "activeTime" : 26.5, 
    "totalActiveTime" : 639.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T11:59:09.386+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i < supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            int numSeniors = 0;\n            for(int j = 1; j < c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 431.8
        }, 
        {
            "date" : ISODate("2016-01-01T11:59:20.938+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i < supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            int numSeniors = 0;\n            for(int j = 1; j < c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus.getAge() >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-01-01T11:59:41.602+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            int numSeniors = 0;\n            for(int j = 1; j <= c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus.getAge() >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
            "status" : "PASS", 
            "activeTime" : 19.9
        }, 
        {
            "date" : ISODate("2016-01-01T12:00:41.583+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            int numSeniors = 0;\n            for(int j = 1; j <= c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus.getAge() >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
            "status" : "PASS", 
            "activeTime" : 52.6
        }, 
        {
            "date" : ISODate("2016-01-03T09:01:39.109+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != nll){\n            int numSeniors = 0;\n            for(int j = 1; j <= c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus.getAge() >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 80.3
        }, 
        {
            "date" : ISODate("2016-01-03T09:09:08.553+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != nll){\n            int numSeniors = 0;\n            for(int j = 1; j <= c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus.getAge() >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.1
        }, 
        {
            "date" : ISODate("2016-01-03T09:09:13.264+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            int numSeniors = 0;\n            for(int j = 1; j <= c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus.getAge() >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
            "status" : "PASS", 
            "activeTime" : 4.6
        }, 
        {
            "date" : ISODate("2016-01-03T09:09:49.596+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            int numSeniors = 0;\n            for(int j = 1; j <= c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus.getAge() >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
            "status" : "PASS", 
            "activeTime" : 26.5
        }
    ]
}
{ 
    "_id" : "x9mJLFe7nND7xM4nB", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : true, 
    "code" : "public static String printPattern(String word, char ch){\n    if(word == null){\n        return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++){\n        char c = word.charAt(i);\n        sb.append(c);\n        if(i != word.length() - 1){\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}", 
    "status" : "PASS", 
    "activeTime" : 41.6, 
    "totalActiveTime" : 1186.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T12:22:02.605+0000"), 
            "code" : "public static String printPattern(String word, char ch){\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++){\n        char c = word.charAt(i);\n        sb.append(c);\n        if(i != word.length() - 1){\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(1022)
        }, 
        {
            "date" : ISODate("2016-01-01T12:23:05.130+0000"), 
            "code" : "public static String printPattern(String word, char ch){\n    if(word == null){\n        return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++){\n        char c = word.charAt(i);\n        sb.append(c);\n        if(i != word.length() - 1){\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 59.9
        }, 
        {
            "date" : ISODate("2016-01-01T12:25:06.992+0000"), 
            "code" : "public static String printPattern(String word, char ch){\n    if(word == null){\n        //return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++){\n        char c = word.charAt(i);\n        sb.append(c);\n        if(i != word.length() - 1){\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}", 
            "status" : "FAIL", 
            "activeTime" : 63.2
        }, 
        {
            "date" : ISODate("2016-01-01T12:45:35.340+0000"), 
            "code" : "public static String printPattern(String word, char ch){\n    if(word == null){\n        return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++){\n        char c = word.charAt(i);\n        sb.append(c);\n        if(i != word.length() - 1){\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 41.6
        }
    ]
}
{ 
    "_id" : "epXKR9LwzDpcCGWXD", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "ovCgAccuGWHny3ZXc", 
    "completed" : true, 
    "code" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if((i+j) % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        if(i != row - 1){\n            System.out.println(\"\");\n        }\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(26), 
    "totalActiveTime" : 1539.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T13:09:42.460+0000"), 
            "code" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if(j % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        System.out.println(\"\");\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 922.7
        }, 
        {
            "date" : ISODate("2016-01-01T13:10:12.888+0000"), 
            "code" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if(j % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        System.out.println(\"\");\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.9
        }, 
        {
            "date" : ISODate("2016-01-01T13:12:11.017+0000"), 
            "code" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if(j % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        if(i != row - 1){\n            System.out.println(\"\");\n        }\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 110.4
        }, 
        {
            "date" : ISODate("2016-01-01T13:12:16.943+0000"), 
            "code" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if(j % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        if(i != row - 1){\n            System.out.println(\"\");\n        }\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-01-01T13:13:09.735+0000"), 
            "code" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if((i+j) % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        if(i != row - 1){\n            System.out.println(\"\");\n        }\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 52.2
        }, 
        {
            "date" : ISODate("2016-01-01T13:20:49.580+0000"), 
            "code" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if((i+j) % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        if(i != row - 1){\n            System.out.println(\"\");\n        }\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 401.2
        }, 
        {
            "date" : ISODate("2016-01-01T13:21:14.141+0000"), 
            "code" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if((i+j) % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        if(i != row - 1){\n            System.out.println(\"\");\n        }\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 10.7
        }, 
        {
            "date" : ISODate("2016-04-24T11:29:12.104+0000"), 
            "code" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if((i+j) % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        if(i != row - 1){\n            System.out.println(\"\");\n        }\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(26)
        }
    ], 
    "updatedAt" : ISODate("2016-04-24T11:29:12.105+0000")
}
{ 
    "_id" : "AAYJ3HkZBpaSTjQz9", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "ccZ7suBHz7fcjm6sk", 
    "completed" : true, 
    "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage) {\n    return null;\n}", 
    "status" : "FAIL", 
    "activeTime" : 2.3, 
    "totalActiveTime" : 1745.3999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T13:36:43.776+0000"), 
            "code" : "public static String tranlsateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.setDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        sb.append(translator.decode(cipher));\n    }\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(835)
        }, 
        {
            "date" : ISODate("2016-01-01T13:37:24.260+0000"), 
            "code" : "public static String tranlsateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.setDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        sb.append(translator.decode(cipher));\n    }\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.1
        }, 
        {
            "date" : ISODate("2016-01-01T13:37:43.468+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.setDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        sb.append(translator.decode(cipher));\n    }\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.2
        }, 
        {
            "date" : ISODate("2016-01-01T13:38:07.603+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        sb.append(translator.decode(cipher));\n    }\n    return sb.toString();\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.4
        }, 
        {
            "date" : ISODate("2016-01-01T13:39:20.593+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 73.1
        }, 
        {
            "date" : ISODate("2016-01-01T13:40:27.291+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 26.3
        }, 
        {
            "date" : ISODate("2016-01-01T13:44:20.867+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 202.7
        }, 
        {
            "date" : ISODate("2016-01-01T13:44:50.896+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 15.2
        }, 
        {
            "date" : ISODate("2016-01-01T15:48:19.658+0000"), 
            "code" : "public static String translateMessag(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 179.9
        }, 
        {
            "date" : ISODate("2016-01-01T15:58:33.150+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 118.5
        }, 
        {
            "date" : ISODate("2016-01-01T15:59:43.404+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String ciphe = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 66.3
        }, 
        {
            "date" : ISODate("2016-01-01T16:00:08.119+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 24.8
        }, 
        {
            "date" : ISODate("2016-01-01T16:00:18.219+0000"), 
            "code" : "public tatic String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.1
        }, 
        {
            "date" : ISODate("2016-01-01T16:00:32.156+0000"), 
            "code" : "static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-01-01T16:00:38.715+0000"), 
            "code" : "String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.9
        }, 
        {
            "date" : ISODate("2016-01-01T16:00:57.532+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 18.5
        }, 
        {
            "date" : ISODate("2016-01-01T16:02:32.262+0000"), 
            "code" : "public static String translatage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 74.9
        }, 
        {
            "date" : ISODate("2016-01-01T17:13:08.366+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage){\n    Scanner sc = new Scanner(secretMessage);\n    sc.useDelimiter(\"\\\\|\");\n    StringBuilder sb = new StringBuilder();\n    while(sc.hasNext()){\n        String cipher = sc.next();\n        if(cipher.isEmpty()){\n            sb.append(\" \");\n        } else{\n            sb.append(translator.decode(cipher));       \n        }\n    }\n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 27.8
        }, 
        {
            "date" : ISODate("2016-01-02T15:48:38.604+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage) {\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 4.8
        }, 
        {
            "date" : ISODate("2016-01-02T15:48:40.563+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage) {\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 2.3
        }
    ]
}
{ 
    "_id" : "ngyeuy94AQaKfbHeW", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 14.4, 
    "totalActiveTime" : 886.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T16:17:23.509+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 421.7
        }, 
        {
            "date" : ISODate("2016-01-01T16:18:34.688+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.9
        }, 
        {
            "date" : ISODate("2016-01-01T16:18:42.047+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.4
        }, 
        {
            "date" : ISODate("2016-01-01T16:19:15.961+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.8
        }, 
        {
            "date" : ISODate("2016-01-01T16:20:52.657+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.3
        }, 
        {
            "date" : ISODate("2016-01-01T16:28:32.898+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 139.5
        }, 
        {
            "date" : ISODate("2016-01-01T16:28:46.363+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-01-01T16:29:40.049+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(37)
        }, 
        {
            "date" : ISODate("2016-01-01T16:30:11.304+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.2
        }, 
        {
            "date" : ISODate("2016-01-01T16:31:19.213+0000"), 
            "code" : "public class Marketer{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.5
        }, 
        {
            "date" : ISODate("2016-01-01T17:11:10.538+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(62)
        }, 
        {
            "date" : ISODate("2016-01-01T17:12:00.309+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 19.1
        }, 
        {
            "date" : ISODate("2016-01-02T08:48:32.066+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 65.2
        }, 
        {
            "date" : ISODate("2016-01-02T08:52:15.217+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 14.4
        }
    ]
}
{ 
    "_id" : "eq5hundtsYBLXegGA", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "xDfNfEq2fazixRvqR", 
    "completed" : true, 
    "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <= 0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(215), 
    "totalActiveTime" : 1308.3999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-01T17:56:18.817+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <=0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "PASS", 
            "activeTime" : 561.5
        }, 
        {
            "date" : ISODate("2016-01-01T17:56:30.217+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <=0){\n        //throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "PASS", 
            "activeTime" : 11.4
        }, 
        {
            "date" : ISODate("2016-01-01T18:32:15.054+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <=0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "FAIL", 
            "activeTime" : 80.8
        }, 
        {
            "date" : ISODate("2016-01-01T18:32:44.981+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <=0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "FAIL", 
            "activeTime" : 29.9
        }, 
        {
            "date" : ISODate("2016-01-01T18:32:56.759+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <=0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n        \n    }\n    return a + b;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-01-01T18:33:38.190+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <= 0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n        \n    }\n    return a + b;\n}", 
            "status" : "FAIL", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-01-01T18:38:48.689+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <= 0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\")\n    }\n    return a + b;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 147.2
        }, 
        {
            "date" : ISODate("2016-01-01T18:38:53.476+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <= 0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "FAIL", 
            "activeTime" : 4.6
        }, 
        {
            "date" : ISODate("2016-01-01T18:40:09.135+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <= 0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "PASS", 
            "activeTime" : 50.2
        }, 
        {
            "date" : ISODate("2016-01-01T18:42:18.589+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <= 0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "PASS", 
            "activeTime" : 73.4
        }, 
        {
            "date" : ISODate("2016-01-01T18:45:10.281+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <= 0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(104)
        }, 
        {
            "date" : ISODate("2016-01-01T18:55:35.718+0000"), 
            "code" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <= 0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(215)
        }
    ]
}
{ 
    "_id" : "Hb6au2Jr5RTK85q6b", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : true, 
    "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n    int noQueue = 0;\n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getNumCustomersInQueue() == 0) {\n            noQueue++;\n        }\n    }\n    return noQueue;\n}", 
    "status" : "PASS", 
    "activeTime" : 166.7, 
    "totalActiveTime" : 166.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T07:18:40.481+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n    int noQueue = 0;\n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getNumCustomersInQueue() == 0) {\n            noQueue++;\n        }\n    }\n    return noQueue;\n}", 
            "status" : "PASS", 
            "activeTime" : 166.7
        }
    ]
}
{ 
    "_id" : "vBRD7WE7HZfa9Fuje", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : true, 
    "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    String toReturn = \"[\";\n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        String status = \"open\";\n        if (counter.getCashier() == null) {\n            status = \"closed\";\n        }\n        toReturn = toReturn + i + \"-\" + status;\n        if (i+1 > supermarket.getNumCounters()) {\n            toReturn = toReturn + \"]\";\n        } else {\n            toReturn = toReturn + \", \";\n        }\n    }\n    return toReturn;\n}", 
    "status" : "PASS", 
    "activeTime" : 11.6, 
    "totalActiveTime" : 332.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T07:24:36.420+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    String toReturn = \"[\";\n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        String status = open;\n        if (counter.getCashier() == null) {\n            status = closed;\n        }\n        toReturn = toReturn + i + \"-\" + status;\n        if (i+1 > supermarket.getNumCounters()) {\n            toReturn = toReturn + \"]\";\n        } else {\n            toReturn = toReturn + \",\";\n        }\n    }\n    return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 300.5
        }, 
        {
            "date" : ISODate("2016-01-02T07:24:57.405+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    String toReturn = \"[\";\n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        String status = \"open\";\n        if (counter.getCashier() == null) {\n            status = \"closed\";\n        }\n        toReturn = toReturn + i + \"-\" + status;\n        if (i+1 > supermarket.getNumCounters()) {\n            toReturn = toReturn + \"]\";\n        } else {\n            toReturn = toReturn + \",\";\n        }\n    }\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-01-02T07:25:08.939+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    String toReturn = \"[\";\n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        String status = \"open\";\n        if (counter.getCashier() == null) {\n            status = \"closed\";\n        }\n        toReturn = toReturn + i + \"-\" + status;\n        if (i+1 > supermarket.getNumCounters()) {\n            toReturn = toReturn + \"]\";\n        } else {\n            toReturn = toReturn + \", \";\n        }\n    }\n    return toReturn;\n}", 
            "status" : "PASS", 
            "activeTime" : 11.6
        }
    ]
}
{ 
    "_id" : "kR5QbTh7FTybM2H2x", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "xsTmbTMhHzWKFwzSw", 
    "completed" : true, 
    "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int toReturn = -1;\n    double percentage = 0;\n    \n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        int snr = 0;\n        for (int j = 1; j <= counter.getNumCustomersInQueue(); j++) {\n            Customer customer = counter.getCustomerAtPosition(j);\n            if (customer.getAge() >= 60) {\n                snr++;\n            }\n        }\n        double currentPercentage = (double) snr / counter.getNumCustomersInQueue();\n        if (currentPercentage > percentage) {\n            percentage = currentPercentage;\n            toReturn = counter.getId();\n        }\n    }\n    return toReturn;\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(347), 
    "totalActiveTime" : NumberInt(347), 
    "history" : [
        {
            "date" : ISODate("2016-01-02T07:32:09.852+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int toReturn = -1;\n    double percentage = 0;\n    \n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        int snr = 0;\n        for (int j = 1; j <= counter.getNumCustomersInQueue(); j++) {\n            Customer customer = counter.getCustomerAtPosition(j);\n            if (customer.getAge() >= 60) {\n                snr++;\n            }\n        }\n        double currentPercentage = (double) snr / counter.getNumCustomersInQueue();\n        if (currentPercentage > percentage) {\n            percentage = currentPercentage;\n            toReturn = counter.getId();\n        }\n    }\n    return toReturn;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(347)
        }
    ]
}
{ 
    "_id" : "6BM7vcoQHfu6qR92i", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : true, 
    "code" : "public static String printPattern(String word, char ch) {\n    String toReturn = \"\";\n    \n    if (word == null || word.length() == 0) {\n        return toReturn;\n    }\n    \n    for (int i = 0; i < word.length(); i++) {\n        toReturn += \"\" + word.charAt(i);\n        if (i+1 < word.length()) {\n            toReturn += \"\" + ch;\n        }\n    }\n    return toReturn;\n}", 
    "status" : "PASS", 
    "activeTime" : 89.6, 
    "totalActiveTime" : 316.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T07:35:09.309+0000"), 
            "code" : "public static String printPattern(String word, char ch) {\n    String toReturn = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        toReturn += \"\" + word.charAt(i);\n        toReturn += \"\" + ch;\n    }\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 159.2
        }, 
        {
            "date" : ISODate("2016-01-02T07:36:20.988+0000"), 
            "code" : "public static String printPattern(String word, char ch) {\n    String toReturn = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        toReturn += \"\" + word.charAt(i);\n        if (i+1 < word.length()) {\n            toReturn += \"\" + ch;\n        }\n    }\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 67.6
        }, 
        {
            "date" : ISODate("2016-01-02T07:37:53.426+0000"), 
            "code" : "public static String printPattern(String word, char ch) {\n    String toReturn = \"\";\n    \n    if (word == null || word.length() == 0) {\n        return toReturn;\n    }\n    \n    for (int i = 0; i < word.length(); i++) {\n        toReturn += \"\" + word.charAt(i);\n        if (i+1 < word.length()) {\n            toReturn += \"\" + ch;\n        }\n    }\n    return toReturn;\n}", 
            "status" : "PASS", 
            "activeTime" : 89.6
        }
    ]
}
{ 
    "_id" : "SfFPtdREa7jD4JDZn", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "xDfNfEq2fazixRvqR", 
    "completed" : false
}
{ 
    "_id" : "6QkeiDzdLqD6Sa2Hv", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "ovCgAccuGWHny3ZXc", 
    "completed" : false
}
{ 
    "_id" : "bmtsN3KfanHPDHNbH", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : false
}
{ 
    "_id" : "kPMgLkt7uYro6zYng", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "xDfNfEq2fazixRvqR", 
    "completed" : false
}
{ 
    "_id" : "wJqrW9cMrz4j6NvEw", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "vR7wCjPDTy9XSjYiv", 
    "completed" : false
}
{ 
    "_id" : "R3AJp3ZdG4TZqzgui", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "4xhRcdNx5YDQACSyn", 
    "completed" : false
}
{ 
    "_id" : "jD4q28s2iYDoJ9Ebh", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "wWzA6YXwiAtpChfYs", 
    "completed" : false
}
{ 
    "_id" : "yMeXLX8AqgEPjBeYL", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : false
}
{ 
    "_id" : "vknarwiCdHXtBdRh7", 
    "userId" : "Zf8vYjbZgY643E4iA", 
    "questionId" : "ovCgAccuGWHny3ZXc", 
    "completed" : false
}
{ 
    "_id" : "hJjXakrLrWG5wFmjr", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false
}
{ 
    "_id" : "vjKDRtXqYotWa7Hka", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "4xhRcdNx5YDQACSyn", 
    "completed" : false
}
{ 
    "_id" : "fjnAvHTb9MjvTDHPK", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "wWzA6YXwiAtpChfYs", 
    "completed" : false
}
{ 
    "_id" : "Be2uS75P3M3zx5ZmL", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : false
}
{ 
    "_id" : "BSBpCMgpLTt8JgtHf", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "boxJennKMpdxAJWvY", 
    "completed" : false
}
{ 
    "_id" : "JQbFmSECHDB84JY7j", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "WwWBx6tXuhhJiNobG", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-06T08:45:09.514+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:45:09.514+0000")
}
{ 
    "_id" : "QgBEjDmzPMc9xcmKS", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "N7EFeaYxKcxDW8Fqw", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-10T12:57:10.151+0000"), 
    "updatedAt" : ISODate("2016-01-10T14:58:42.093+0000")
}
{ 
    "_id" : "vYonX7Pkm5jB2tbAb", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "ovCgAccuGWHny3ZXc", 
    "completed" : true, 
    "code" : "public static void printCheckerBoard(String word, int r, int c) {\n    String stars = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        stars += \"*\";\n    }\n    \n    for (int i = 1; i <= r; i++) {\n        if (i % 2 == 1) {\n            for (int j = 1; j < c; j+=2) {\n                System.out.print(stars);\n                System.out.print(word);\n                if(j+2 == c) {\n                    System.out.print(stars);\n                }\n            }\n        } else {\n            for (int j = 1; j < c; j+=2) {\n                System.out.print(word);\n                System.out.print(stars);\n                if (j+2 == c) {\n                    System.out.print(word);\n                }\n            }\n        }\n        System.out.println();\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 91.9, 
    "totalActiveTime" : 697.2, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T07:42:28.429+0000"), 
            "code" : "public void printCheckerBoard(String word, int r, int c) {\n    String stars = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        stars += \"*\";\n    }\n    \n    for (int i = 0; i < r; i++) {\n        for (int j = 0; j < c; j++) {\n            System.out.print(word);\n            System.out.print(stars);\n        }\n        System.out.println();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 259.6
        }, 
        {
            "date" : ISODate("2016-01-02T07:42:36.282+0000"), 
            "code" : "public static void printCheckerBoard(String word, int r, int c) {\n    String stars = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        stars += \"*\";\n    }\n    \n    for (int i = 0; i < r; i++) {\n        for (int j = 0; j < c; j++) {\n            System.out.print(word);\n            System.out.print(stars);\n        }\n        System.out.println();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.6
        }, 
        {
            "date" : ISODate("2016-01-02T07:46:52.125+0000"), 
            "code" : "public static void printCheckerBoard(String word, int r, int c) {\n    String stars = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        stars += \"*\";\n    }\n    \n    for (int i = 1; i <= r; i++) {\n        if (i % 2 == 1) {\n            for (int j = 1; j <= c; j+=2) {\n                System.out.print(stars);\n                System.out.print(word);\n                if(j+1 == c) {\n                    System.out.print(stars);\n                }\n            }\n        } else {\n            for (int j = 1; j <= c; j+=2) {\n                System.out.print(word);\n                System.out.print(stars);\n                if (j+1 == c) {\n                    System.out.print(word);\n                }\n            }\n        }\n        System.out.println();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 233.5
        }, 
        {
            "date" : ISODate("2016-01-02T07:47:39.187+0000"), 
            "code" : "public static void printCheckerBoard(String word, int r, int c) {\n    String stars = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        stars += \"*\";\n    }\n    \n    for (int i = 1; i <= r; i++) {\n        if (i % 2 == 1) {\n            for (int j = 1; j <= c; j+=2) {\n                System.out.print(stars);\n                System.out.print(word);\n                //if(j+1 == c) {\n                  //  System.out.print(stars);\n                //}\n            }\n        } else {\n            for (int j = 1; j <= c; j+=2) {\n                System.out.print(word);\n                System.out.print(stars);\n                //if (j+1 == c) {\n                  //  System.out.print(word);\n                //}\n            }\n        }\n        System.out.println();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(45)
        }, 
        {
            "date" : ISODate("2016-01-02T07:48:27.505+0000"), 
            "code" : "public static void printCheckerBoard(String word, int r, int c) {\n    String stars = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        stars += \"*\";\n    }\n    \n    for (int i = 1; i <= r; i++) {\n        if (i % 2 == 1) {\n            for (int j = 0; j <= c; j+=2) {\n                System.out.print(stars);\n                System.out.print(word);\n                //if(j+1 == c) {\n                  //  System.out.print(stars);\n                //}\n            }\n        } else {\n            for (int j = 0; j <= c; j+=2) {\n                System.out.print(word);\n                System.out.print(stars);\n                //if (j+1 == c) {\n                  //  System.out.print(word);\n                //}\n            }\n        }\n        System.out.println();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 47.4
        }, 
        {
            "date" : ISODate("2016-01-02T07:48:39.673+0000"), 
            "code" : "public static void printCheckerBoard(String word, int r, int c) {\n    String stars = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        stars += \"*\";\n    }\n    \n    for (int i = 1; i <= r; i++) {\n        if (i % 2 == 1) {\n            for (int j = 1; j <= c; j+=2) {\n                System.out.print(stars);\n                System.out.print(word);\n                //if(j+1 == c) {\n                  //  System.out.print(stars);\n                //}\n            }\n        } else {\n            for (int j = 1; j <= c; j+=2) {\n                System.out.print(word);\n                System.out.print(stars);\n                //if (j+1 == c) {\n                  //  System.out.print(word);\n                //}\n            }\n        }\n        System.out.println();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.2
        }, 
        {
            "date" : ISODate("2016-01-02T07:50:13.804+0000"), 
            "code" : "public static void printCheckerBoard(String word, int r, int c) {\n    String stars = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        stars += \"*\";\n    }\n    \n    for (int i = 1; i <= r; i++) {\n        if (i % 2 == 1) {\n            for (int j = 1; j < c; j+=2) {\n                System.out.print(stars);\n                System.out.print(word);\n                if(j+2 == c) {\n                    System.out.print(stars);\n                }\n            }\n        } else {\n            for (int j = 1; j < c; j+=2) {\n                System.out.print(word);\n                System.out.print(stars);\n                if (j+2 == c) {\n                    System.out.print(word);\n                }\n            }\n        }\n        System.out.println();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 91.9
        }
    ]
}
{ 
    "_id" : "KzZJ4nLx29xy6okuv", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "ccZ7suBHz7fcjm6sk", 
    "completed" : true, 
    "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    //extract each String that is separated by '|'\n    //decode the String\n    //store in toReturn container\n    \n    String toReturn = \"\";\n    \n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        if (indexOfPipe != -1) {\n            String secret = secretMessage.substring(i, indexOfPipe);\n            char ch = messageTranslator.decode(secret);\n            if (ch == '#') {\n                ch = ' ';\n            }\n            toReturn += \"\" + ch;\n            secretMessage = secretMessage.substring(indexOfPipe+1);\n        } else {\n            char ch = messageTranslator.decode(secretMessage);\n            toReturn += \"\" + ch;\n            break;\n        }\n    }\n    //toReturn.replaceAll(\"#\", \" \");\n    return toReturn;\n}", 
    "status" : "PASS", 
    "activeTime" : 84.9, 
    "totalActiveTime" : 912.0999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T07:57:43.130+0000"), 
            "code" : "public static void translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String toPrint = \"\";\n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        String secret = secretMessage.substring(i, indexOfPipe);\n        toPrint += \"\" + messageTranslator.decode(secret);\n        secretMessage = secretMessage.substring(indexOfPipe+1);\n    }\n    System.out.println(toPrint);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 358.2
        }, 
        {
            "date" : ISODate("2016-01-02T07:58:03.238+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String toPrint = \"\";\n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        String secret = secretMessage.substring(i, indexOfPipe);\n        toPrint += \"\" + messageTranslator.decode(secret);\n        secretMessage = secretMessage.substring(indexOfPipe+1);\n    }\n    return toPrint;\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.9
        }, 
        {
            "date" : ISODate("2016-01-02T08:04:42.236+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    //extract each String that is separated by '|'\n    //decode the String\n    //store in toReturn container\n    \n    String toReturn = \"\";\n    \n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        if (indexOfPipe != -1) {\n            String secret = secretMessage.substring(i, indexOfPipe);\n            char ch = messageTranslator.decode(secret);\n            toReturn += \"\" + ch;\n            secretMessage = secretMessage.substring(indexOfPipe+1);\n        } else {\n            char ch = messageTranslator.decode(secretMessage);\n            toReturn += \"\" + ch;\n            return toReturn;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 334.6
        }, 
        {
            "date" : ISODate("2016-01-02T08:05:04.383+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    //extract each String that is separated by '|'\n    //decode the String\n    //store in toReturn container\n    \n    String toReturn = \"\";\n    \n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        if (indexOfPipe != -1) {\n            String secret = secretMessage.substring(i, indexOfPipe);\n            char ch = messageTranslator.decode(secret);\n            toReturn += \"\" + ch;\n            secretMessage = secretMessage.substring(indexOfPipe+1);\n        } else {\n            char ch = messageTranslator.decode(secretMessage);\n            toReturn += \"\" + ch;\n            break;\n        }\n    }\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-01-02T08:06:08.230+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    //extract each String that is separated by '|'\n    //decode the String\n    //store in toReturn container\n    \n    String toReturn = \"\";\n    \n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        if (indexOfPipe != -1) {\n            String secret = secretMessage.substring(i, indexOfPipe);\n            char ch = messageTranslator.decode(secret);\n            toReturn += \"\" + ch;\n            secretMessage = secretMessage.substring(indexOfPipe+1);\n        } else {\n            char ch = messageTranslator.decode(secretMessage);\n            toReturn += \"\" + ch;\n            break;\n        }\n    }\n    toReturn.replaceAll(\"#\", \" \");\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 52.5
        }, 
        {
            "date" : ISODate("2016-01-02T08:06:28.359+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    //extract each String that is separated by '|'\n    //decode the String\n    //store in toReturn container\n    \n    String toReturn = \"\";\n    \n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        if (indexOfPipe != -1) {\n            String secret = secretMessage.substring(i, indexOfPipe);\n            char ch = messageTranslator.decode(secret);\n            toReturn += \"\" + ch;\n            secretMessage = secretMessage.substring(indexOfPipe+1);\n        } else {\n            char ch = messageTranslator.decode(secretMessage);\n            toReturn += \"\" + ch;\n            break;\n        }\n    }\n    toReturn.replaceAll(\"#\", \" \");\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.4
        }, 
        {
            "date" : ISODate("2016-01-02T08:06:43.598+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    //extract each String that is separated by '|'\n    //decode the String\n    //store in toReturn container\n    \n    String toReturn = \"\";\n    \n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        if (indexOfPipe != -1) {\n            String secret = secretMessage.substring(i, indexOfPipe);\n            char ch = messageTranslator.decode(secret);\n            toReturn += \"\" + ch;\n            secretMessage = secretMessage.substring(indexOfPipe+1);\n        } else {\n            char ch = messageTranslator.decode(secretMessage);\n            toReturn += \"\" + ch;\n            break;\n        }\n    }\n    //toReturn.replaceAll(\"#\", \" \");\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-01-02T08:06:57.398+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    //extract each String that is separated by '|'\n    //decode the String\n    //store in toReturn container\n    \n    String toReturn = \"\";\n    \n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        if (indexOfPipe != -1) {\n            String secret = secretMessage.substring(i, indexOfPipe);\n            char ch = messageTranslator.decode(secret);\n            toReturn += \"\" + ch;\n            secretMessage = secretMessage.substring(indexOfPipe+1);\n        } else {\n            char ch = messageTranslator.decode(secretMessage);\n            toReturn += \"\" + ch;\n            break;\n        }\n    }\n    toReturn.replaceAll(\"#\", \" \");\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-01-02T08:08:29.956+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    //extract each String that is separated by '|'\n    //decode the String\n    //store in toReturn container\n    \n    String toReturn = \"\";\n    \n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        if (indexOfPipe != -1) {\n            String secret = secretMessage.substring(i, indexOfPipe);\n            char ch = messageTranslator.decode(secret);\n            if (ch == '#') {\n                ch = ' ';\n            }\n            toReturn += \"\" + ch;\n            secretMessage = secretMessage.substring(indexOfPipe+1);\n        } else {\n            char ch = messageTranslator.decode(secretMessage);\n            toReturn += \"\" + ch;\n            break;\n        }\n    }\n    //toReturn.replaceAll(\"#\", \" \");\n    return toReturn;\n}", 
            "status" : "PASS", 
            "activeTime" : 84.9
        }
    ]
}
{ 
    "_id" : "o3Z7xyYksdysDwvx4", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : true, 
    "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n       \n        boolean assignmentSuccess = false;\n        if (supermarket.getCounter(counterNumber) != null) {\n            Counter toAssign = supermarket.getCounter(counterNumber);\n            if (toAssign.setCashier(cashier)) {\n                toAssign.setCashier(cashier);\n                assignmentSuccess = true;\n            }\n        }\n        return assignmentSuccess;\n    }", 
    "status" : "PASS", 
    "activeTime" : 13.4, 
    "totalActiveTime" : 539.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T08:47:26.890+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter counterID = supermarket.getCounter(counterNumber);\n    if (counterID.getCashier() == null) {\n        counterID.setCashier(cashier);\n    }\n    return true;\n    else {\n        return false;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 310.6
        }, 
        {
            "date" : ISODate("2016-01-02T08:48:31.674+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter counterID = supermarket.getCounter(counterNumber);\n    boolean successfulAssignment = false;\n    if (counterID.getCashier() == null) {\n        counterID.setCashier(cashier);\n        successfulAssignment = true;\n    }\n    return successfulAssignment;\n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.9
        }, 
        {
            "date" : ISODate("2016-01-02T08:48:41.323+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter counterID = supermarket.getCounter(counterNumber);\n    boolean successfulAssignment = false;\n    if (counterID.getCashier() == null) {\n        counterID.setCashier(cashier);\n        successfulAssignment = true;\n    }\n    return successfulAssignment;\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 9.4
        }, 
        {
            "date" : ISODate("2016-01-02T08:51:53.497+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter counterID = supermarket.getCounter(counterNumber);\n    boolean successfulAssignment = false;\n    \n    if (counterID.getCashier() == null) {\n        counterID.setCashier(cashier);\n        successfulAssignment = true;\n    }\n    return successfulAssignment;\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 141.1
        }, 
        {
            "date" : ISODate("2016-01-02T09:07:23.021+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n       \n        boolean assignmentSuccess = false;\n        if (supermarket.getCounter(counterNumber) != null) {\n            Counter toAssign = supermarket.getCounter(counterNumber);\n            if (toAssign.setCashier(cashier)) {\n                toAssign.setCashier(cashier);\n                assignmentSuccess = true;\n            }\n        }\n        return assignmentSuccess;\n    }", 
            "status" : "PASS", 
            "activeTime" : 13.4
        }
    ], 
    "updatedAt" : ISODate("2016-01-07T07:27:12.453+0000")
}
{ 
    "_id" : "QmPKSx4WxzYyhHEy4", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : true, 
    "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n        int CnoQ = 0;\n        for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n            Counter c = supermarket.getCounter(i);\n            if (c.getNumCustomersInQueue() == 0) {\n                CnoQ++;\n            }\n        }\n        return CnoQ;\n    }", 
    "status" : "PASS", 
    "activeTime" : 43.6, 
    "totalActiveTime" : 294.2, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T09:00:26.221+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n    int numCounters = supermarket.getNumCounters();\n    int noQueueCounters = 0;\n    for (int i = 0 ; i < numCounters ; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getNumCustomersInQueue() == 0) {\n            noQueueCounter++;\n        }\n    }\n    return noQueueCounters;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 242.2
        }, 
        {
            "date" : ISODate("2016-01-02T09:00:34.826+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n    int numCounters = supermarket.getNumCounters();\n    int noQueueCounters = 0;\n    for (int i = 0 ; i < numCounters ; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getNumCustomersInQueue() == 0) {\n            noQueueCounters++;\n        }\n    }\n    return noQueueCounters;\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.4
        }, 
        {
            "date" : ISODate("2016-01-02T09:19:10.664+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n        int CnoQ = 0;\n        for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n            Counter c = supermarket.getCounter(i);\n            if (c.getNumCustomersInQueue() == 0) {\n                CnoQ++;\n            }\n        }\n        return CnoQ;\n    }", 
            "status" : "PASS", 
            "activeTime" : 43.6
        }
    ]
}
{ 
    "_id" : "EMqKC538oa4XREmao", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : true, 
    "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    if (supermarket.getCounter(counterNumber) != null) {\n        Counter counter = supermarket.getCounter(counterNumber);\n        boolean isTaken = counter.setCashier(cashier);\n        if (isTaken) {\n            return true;\n        }\n    }\n    return false;\n}", 
    "status" : "PASS", 
    "activeTime" : 241.6, 
    "totalActiveTime" : 241.6, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T14:02:29.706+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    if (supermarket.getCounter(counterNumber) != null) {\n        Counter counter = supermarket.getCounter(counterNumber);\n        boolean isTaken = counter.setCashier(cashier);\n        if (isTaken) {\n            return true;\n        }\n    }\n    return false;\n}", 
            "status" : "PASS", 
            "activeTime" : 241.6
        }
    ]
}
{ 
    "_id" : "WoAT7mZ7DX7CWRP6H", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : true, 
    "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n    int numOfCounters = supermarket.getNumCounters();\n    int numOfEmptyCounters = 0;\n    for (int i = 1; i <= numOfCounters; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getNumCustomersInQueue() == 0) {\n            numOfEmptyCounters++;\n        }\n    }\n    return numOfEmptyCounters;\n}", 
    "status" : "PASS", 
    "activeTime" : 202.2, 
    "totalActiveTime" : 202.2, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T14:06:56.396+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n    int numOfCounters = supermarket.getNumCounters();\n    int numOfEmptyCounters = 0;\n    for (int i = 1; i <= numOfCounters; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getNumCustomersInQueue() == 0) {\n            numOfEmptyCounters++;\n        }\n    }\n    return numOfEmptyCounters;\n}", 
            "status" : "PASS", 
            "activeTime" : 202.2
        }
    ]
}
{ 
    "_id" : "LteMHJGjdYenr2a8S", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : true, 
    "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int totalCounters = supermarket.getNumCounters();\n    String status = \"[\";\n    if (supermarket.getCounter(1).getCashier() == null) {\n        status += \"1-closed\";\n    }\n    else {\n        status += \"1-open\";\n    }\n    if (totalCounters > 1) {\n        for (int i = 2; i <= totalCounters; i++) {\n            Counter counter = supermarket.getCounter(i);\n            if (counter.getCashier() == null) {\n                status += \", \" + i + \"-closed\";\n                continue;\n            }\n            status += \", \" + i + \"-open\";\n        }\n    }\n    status += \"]\";\n    return status;\n}", 
    "status" : "PASS", 
    "activeTime" : 16.1, 
    "totalActiveTime" : 526.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T14:15:55.895+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int totalCounters = supermarket.getNumCounters();\n    String status = \"[\";\n    if (supermarket.getCounter(1).getCashier() == null) {\n        status += \"1-closed\";\n    }\n    else {\n        status += \"1-open\";\n    }\n    if (totalCounters > 1) {\n        for (int i = 2; i <= totalCounters; i++) {\n            Counter counter = supermarket.getCounter(i);\n            if (counter.getCashier() == null) {\n                status += \", \" + i + \"-closed\";\n                continue;\n            }\n            status += \", \" + i + \"-open\"\n        }\n    }\n    status += \"]\";\n    return status;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 510.4
        }, 
        {
            "date" : ISODate("2016-01-02T14:16:14.595+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int totalCounters = supermarket.getNumCounters();\n    String status = \"[\";\n    if (supermarket.getCounter(1).getCashier() == null) {\n        status += \"1-closed\";\n    }\n    else {\n        status += \"1-open\";\n    }\n    if (totalCounters > 1) {\n        for (int i = 2; i <= totalCounters; i++) {\n            Counter counter = supermarket.getCounter(i);\n            if (counter.getCashier() == null) {\n                status += \", \" + i + \"-closed\";\n                continue;\n            }\n            status += \", \" + i + \"-open\";\n        }\n    }\n    status += \"]\";\n    return status;\n}", 
            "status" : "PASS", 
            "activeTime" : 16.1
        }
    ]
}
{ 
    "_id" : "rMsmhbtSiEBSmduRi", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "xsTmbTMhHzWKFwzSw", 
    "completed" : true, 
    "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int id = -1;\n    int totalCounters = supermarket.getNumCounters();\n    double percentage = 0.0;\n    for (int i = 1; i <= totalCounters; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() != null) {\n            int queue = counter.getNumCustomersInQueue();\n            if (queue > 0) {\n                int num = 0;\n                for (int j = 1; j <= queue; j++) {\n                    Customer customer = counter.getCustomerAtPosition(j);\n                    if (customer.getAge() >= 60) {\n                        num++;\n                    }\n                }\n                double current = (double)num / (double)queue;\n                if (percentage == 0.0 && num > 0) {\n                    percentage = current;\n                    id = i;\n                }\n                else {\n                    if (current > percentage) {\n                        id = i;\n                    }\n                }\n            }\n        }\n    }\n    return id;\n}", 
    "status" : "PASS", 
    "activeTime" : 39.8, 
    "totalActiveTime" : 586.6999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T14:25:05.581+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int id = -1;\n    int totalCounters = supermarket.getNumCounters();\n    double percentage = 0.0;\n    for (int i = 1; i <= totalCounters; i++) {\n        Counter counter = supermarket.getCounter(i);\n        int queue = counter.getNumCustomersInQueue();\n        if (queue > 0) {\n            int num = 0;\n            for (int j = 1; j <= queue; j++) {\n                Customer customer = counter.getCustomerAtPosition(j);\n                if (customer.getAge() >= 60) {\n                    num++;\n                }\n            }\n            double current = (double)num / (double)queue;\n            if (percentage == 0.0) {\n                percentage = current;\n                id = i;\n            }\n            else {\n                if (current > percentage) {\n                    id = i;\n                }\n            }\n        }\n    }\n    return id;\n}", 
            "status" : "FAIL", 
            "activeTime" : 457.7
        }, 
        {
            "date" : ISODate("2016-01-02T14:26:40.598+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int id = -1;\n    int totalCounters = supermarket.getNumCounters();\n    double percentage = 0.0;\n    for (int i = 1; i <= totalCounters; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() != null) {\n            int queue = counter.getNumCustomersInQueue();\n            if (queue > 0) {\n                int num = 0;\n                for (int j = 1; j <= queue; j++) {\n                    Customer customer = counter.getCustomerAtPosition(j);\n                    if (customer.getAge() >= 60) {\n                        num++;\n                    }\n                }\n                double current = (double)num / (double)queue;\n                if (percentage == 0.0) {\n                    percentage = current;\n                    id = i;\n                }\n                else {\n                    if (current > percentage) {\n                        id = i;\n                    }\n                }\n            }\n        }\n    }\n    return id;\n}", 
            "status" : "FAIL", 
            "activeTime" : 89.2
        }, 
        {
            "date" : ISODate("2016-01-02T14:27:25.893+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int id = -1;\n    int totalCounters = supermarket.getNumCounters();\n    double percentage = 0.0;\n    for (int i = 1; i <= totalCounters; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() != null) {\n            int queue = counter.getNumCustomersInQueue();\n            if (queue > 0) {\n                int num = 0;\n                for (int j = 1; j <= queue; j++) {\n                    Customer customer = counter.getCustomerAtPosition(j);\n                    if (customer.getAge() >= 60) {\n                        num++;\n                    }\n                }\n                double current = (double)num / (double)queue;\n                if (percentage == 0.0 && num > 0) {\n                    percentage = current;\n                    id = i;\n                }\n                else {\n                    if (current > percentage) {\n                        id = i;\n                    }\n                }\n            }\n        }\n    }\n    return id;\n}", 
            "status" : "PASS", 
            "activeTime" : 39.8
        }
    ]
}
{ 
    "_id" : "JwFMhgKMdusmXuutY", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : true, 
    "code" : "public static String printPattern(String word, char ch) {\n    if (word != null && !word.equals(\"\")) {\n        String results = \"\";\n        if (word.length() > 1) {\n            results += \"\" + word.charAt(0);\n            for (int i = 1; i < word.length(); i++) {\n                char c = word.charAt(i);\n                results += \"\" + ch + c;\n            }\n            return results;\n        }\n        else {\n            return word;\n        }\n    }\n    return \"\";\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(68), 
    "totalActiveTime" : 339.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T14:32:53.397+0000"), 
            "code" : "public static String printPattern(String word, char ch) {\n    if (word != null && !word.equals(\"\")) {\n        String results = \"\";\n        if (word.length() > 1) {\n            for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n                results += \"\" + c + ch;\n            }\n            return results;\n        }\n        else {\n            return word;\n        }\n    }\n    return \"\";\n}", 
            "status" : "FAIL", 
            "activeTime" : 271.5
        }, 
        {
            "date" : ISODate("2016-01-02T14:34:01.477+0000"), 
            "code" : "public static String printPattern(String word, char ch) {\n    if (word != null && !word.equals(\"\")) {\n        String results = \"\";\n        if (word.length() > 1) {\n            results += \"\" + word.charAt(0);\n            for (int i = 1; i < word.length(); i++) {\n                char c = word.charAt(i);\n                results += \"\" + ch + c;\n            }\n            return results;\n        }\n        else {\n            return word;\n        }\n    }\n    return \"\";\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(68)
        }
    ]
}
{ 
    "_id" : "a6HodXyH9nxwCc2CX", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "ovCgAccuGWHny3ZXc", 
    "completed" : true, 
    "code" : "public static void printCheckerBoard(String word, int r, int c) {\n    for (int i = 0; i < r; i++) {\n        int len = word.length();\n        String starStr = \"\";\n        for (int j = 0; j < len; j++) {\n            starStr += \"*\";\n        }\n        if (i % 2 == 0) {\n            for (int j = 0; j < c; j++) {\n                if (j % 2 == 0) {\n                    System.out.print(starStr);    \n                }\n                else {\n                    System.out.print(word);\n                }\n            } \n        }\n        else {\n            for (int j = 0; j < c; j++) {\n                if (j % 2 == 0) {\n                    System.out.print(word);    \n                }\n                else {\n                    System.out.print(starStr);\n                }\n            }  \n        }\n        System.out.println();\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 457.5, 
    "totalActiveTime" : 457.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T14:42:54.948+0000"), 
            "code" : "public static void printCheckerBoard(String word, int r, int c) {\n    for (int i = 0; i < r; i++) {\n        int len = word.length();\n        String starStr = \"\";\n        for (int j = 0; j < len; j++) {\n            starStr += \"*\";\n        }\n        if (i % 2 == 0) {\n            for (int j = 0; j < c; j++) {\n                if (j % 2 == 0) {\n                    System.out.print(starStr);    \n                }\n                else {\n                    System.out.print(word);\n                }\n            } \n        }\n        else {\n            for (int j = 0; j < c; j++) {\n                if (j % 2 == 0) {\n                    System.out.print(word);    \n                }\n                else {\n                    System.out.print(starStr);\n                }\n            }  \n        }\n        System.out.println();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 457.5
        }
    ]
}
{ 
    "_id" : "f8pj9tNAwjGZaM7tW", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "ccZ7suBHz7fcjm6sk", 
    "completed" : true, 
    "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2);\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                if (messageTranslator.decode(currentChar) != '#') {\n                    message += messageTranslator.decode(currentChar);\n                }\n                else {\n                    message += \" \";\n                }\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1);   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
    "status" : "PASS", 
    "activeTime" : 5.4, 
    "totalActiveTime" : 589.1999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-02T15:48:25.668+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2, secretMessage.length());\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                message += messageTranslator.decode(currentChar);\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1, secretMessage.length());   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.2
        }, 
        {
            "date" : ISODate("2016-01-02T15:48:28.360+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2, secretMessage.length());\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                message += messageTranslator.decode(currentChar);\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1, secretMessage.length());   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.7
        }, 
        {
            "date" : ISODate("2016-01-02T15:48:30.763+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage) {\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 82.1
        }, 
        {
            "date" : ISODate("2016-01-02T15:48:32.671+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage) {\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 4.3
        }, 
        {
            "date" : ISODate("2016-01-02T15:48:34.670+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage) {\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(13)
        }, 
        {
            "date" : ISODate("2016-01-02T15:48:36.702+0000"), 
            "code" : "public static String translateMessage(MessageTranslator translator, String secretMessage) {\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.4
        }, 
        {
            "date" : ISODate("2016-01-02T15:52:52.385+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2, secretMessage.length());\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                message += messageTranslator.decode(currentChar);\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1, secretMessage.length());   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "FAIL", 
            "activeTime" : 108.6
        }, 
        {
            "date" : ISODate("2016-01-02T15:56:56.537+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2);\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                message += messageTranslator.decode(currentChar);\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1);   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(157)
        }, 
        {
            "date" : ISODate("2016-01-02T15:57:43.681+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2);\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                message += messageTranslator.decode(currentChar);\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1);   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "FAIL", 
            "activeTime" : 47.1
        }, 
        {
            "date" : ISODate("2016-01-02T15:57:54.838+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") || secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2);\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                message += messageTranslator.decode(currentChar);\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1);   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-01-02T15:58:08.235+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2);\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                message += messageTranslator.decode(currentChar);\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1);   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-01-02T15:59:15.625+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2);\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                if (messageTranslator.decode(currentChar) != '#') {\n                    message += messageTranslator.decode(currentChar);\n                }\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1);   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "FAIL", 
            "activeTime" : 65.8
        }, 
        {
            "date" : ISODate("2016-01-02T16:00:00.446+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2);\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                if (messageTranslator.decode(currentChar) != '#') {\n                    message += messageTranslator.decode(currentChar);\n                }\n                else {\n                    message += \" \";\n                }\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1);   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "PASS", 
            "activeTime" : 44.8
        }, 
        {
            "date" : ISODate("2016-01-02T16:01:09.630+0000"), 
            "code" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2);\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                if (messageTranslator.decode(currentChar) != '#') {\n                    message += messageTranslator.decode(currentChar);\n                }\n                else {\n                    message += \" \";\n                }\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1);   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
            "status" : "PASS", 
            "activeTime" : 5.4
        }
    ]
}
{ 
    "_id" : "aHCmcBsWn9EpZ7zcd", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "4xhRcdNx5YDQACSyn", 
    "completed" : true, 
    "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(i+\" \");\n            else\n              System.out.print(i);\n        }\n}", 
    "status" : "PASS", 
    "activeTime" : 194.1, 
    "totalActiveTime" : 1626.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-03T06:51:27.257+0000"), 
            "code" : "public static void printOddNumber(int a, int b) {\n    for (int i = a; i <=b; i++)\n        if (i % 2 != 0) \n            System.out.print(\"[\"+i+\"]\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 67.6
        }, 
        {
            "date" : ISODate("2016-01-03T06:54:53.100+0000"), 
            "code" : "public static void printOddNumber(int a, int b) {\n    for (int i = a; i <=b; i++)\n        if (i % 2 != 0) \n            System.out.print(\"[\"+i+\"]\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 122.3
        }, 
        {
            "date" : ISODate("2016-01-03T06:57:00.106+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    for (int i = a; i <=b; i++)\n        if (i % 2 != 0) \n            System.out.print(\"[\"+i+\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 96.1
        }, 
        {
            "date" : ISODate("2016-01-03T06:57:11.291+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    for (int i = a; i <=b; i++)\n        if (i % 2 != 0) \n            System.out.print(\"[\"+i+\"] \");\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-01-03T06:58:35.747+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    for (int i = a; i <b; i++)\n        if (i % 2 != 0) \n            System.out.print(\"[\"+i+\"] \");\n    \n    if (b % 2 != 0 && b != a)\n        System.out.print(\"[\"+b+\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(61)
        }, 
        {
            "date" : ISODate("2016-01-03T07:00:09.414+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    for (int i = a; i < b; i++)\n        if (i % 2 != 0) \n            System.out.print(\"[\"+i+\"] \");\n    \n    if (b % 2 != 0 && b != a)\n        System.out.print(\"[\"+b+\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 59.7
        }, 
        {
            "date" : ISODate("2016-01-03T07:01:38.383+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a == b)\n        System.out.print(\"[\"+b+\"]\");\n    else {\n        for (int i = a; i < b; i++)\n            if (i % 2 != 0) \n                System.out.print(\"[\"+i+\"] \");\n    \n        if (b % 2 != 0 && b != a)\n            System.out.print(\"[\"+b+\"]\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 55.9
        }, 
        {
            "date" : ISODate("2016-01-03T07:10:35.387+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.print(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i < b; i++)\n        if (i % 2 != 0) \n            System.out.print(\" [\"+i+\"]\");\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 106.4
        }, 
        {
            "date" : ISODate("2016-01-03T07:11:01.570+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.print(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) \n            System.out.print(\" [\"+i+\"]\");\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 23.2
        }, 
        {
            "date" : ISODate("2016-01-03T07:19:04.952+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.print(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(\" [\"+i+\"]\");\n            else\n              System.out.print(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 295.9
        }, 
        {
            "date" : ISODate("2016-01-03T07:19:19.144+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.print(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.println(\" [\"+i+\"]\");\n            else\n              System.out.println(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-01-03T07:19:22.291+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.print(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.println(\" [\"+i+\"]\");\n            else\n              System.out.println(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 1.6
        }, 
        {
            "date" : ISODate("2016-01-03T07:19:26.288+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.print(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.println(\" [\"+i+\"]\");\n            else\n              System.out.println(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(4)
        }, 
        {
            "date" : ISODate("2016-01-03T07:19:29.765+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.println(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.println(\" [\"+i+\"]\");\n            else\n              System.out.println(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 3.5
        }, 
        {
            "date" : ISODate("2016-01-03T07:19:35.596+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.println(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.println(\"[\"+i+\"]\");\n            else\n              System.out.println(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-01-03T07:20:41.740+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.print(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(\" [\"+i+\"]\");\n            else\n              System.out.print(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 60.7
        }, 
        {
            "date" : ISODate("2016-01-03T07:23:06.909+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    if (a % 2 != 0)\n        System.out.print(\"[\"+a+\"]\");\n    a++;\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(\" [\"+i+\"]\");\n            else\n              System.out.print(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.8
        }, 
        {
            "date" : ISODate("2016-01-03T07:24:10.011+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(\" [\"+i+\"]\");\n            else\n              System.out.print(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 37.8
        }, 
        {
            "date" : ISODate("2016-01-03T07:24:18.675+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(\"[\"+i+\"] \");\n            else\n              System.out.print(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-01-03T07:24:43.597+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(\"[\"+i+\"] \");\n            else\n              System.out.print(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.8
        }, 
        {
            "date" : ISODate("2016-01-03T07:26:10.618+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = b;\n        a = temp;\n        b = a;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(\"[\"+i+\"] \");\n            else\n              System.out.print(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.7
        }, 
        {
            "date" : ISODate("2016-01-03T07:26:56.783+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(\"[\"+i+\"] \");\n            else\n              System.out.print(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "PASS", 
            "activeTime" : 42.5
        }, 
        {
            "date" : ISODate("2016-01-03T07:30:49.913+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(\"[\"+i+\"] \");\n            else\n              System.out.print(\"[\"+i+\"]\");\n        }\n}", 
            "status" : "PASS", 
            "activeTime" : 54.6
        }, 
        {
            "date" : ISODate("2016-01-04T06:17:51.895+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(i+\" \");\n            else\n              System.out.print(i);\n        }\n}", 
            "status" : "PASS", 
            "activeTime" : 222.9
        }, 
        {
            "date" : ISODate("2016-01-04T11:21:01.111+0000"), 
            "code" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(i+\" \");\n            else\n              System.out.print(i);\n        }\n}", 
            "status" : "PASS", 
            "activeTime" : 194.1
        }
    ]
}
{ 
    "_id" : "Aju4gL3XfPXk5Abth", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "4xhRcdNx5YDQACSyn", 
    "completed" : true, 
    "code" : "public static void printOddNumbers(int a, int b){\n    if(a > b){\n        b = a ^ b;\n        a = b ^ a;\n        b = a ^ b;\n    }\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n            if(a != b && b % 2 != 0){\n                System.out.print(\" \");\n            }\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(29), 
    "totalActiveTime" : 389.2999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-03T13:34:14.289+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    for(;a < b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"] \");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 152.7
        }, 
        {
            "date" : ISODate("2016-01-03T13:34:26.710+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"] \");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.4
        }, 
        {
            "date" : ISODate("2016-01-03T13:34:50.030+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n        }\n        if(a != b){\n            System.out.print(\" \");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 23.2
        }, 
        {
            "date" : ISODate("2016-01-03T13:35:59.764+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    if(a > b){\n        b = a ^ b;\n        a = b ^ a;\n    }\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n        }\n        if(a != b){\n            System.out.print(\" \");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 69.5
        }, 
        {
            "date" : ISODate("2016-01-03T13:36:27.059+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    if(a > b){\n        b = a ^ b;\n        a = b ^ a;\n    }\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n        }\n        if(a != b){\n            System.out.print(\"\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 26.9
        }, 
        {
            "date" : ISODate("2016-01-03T13:36:47.367+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    if(a > b){\n        b = a ^ b;\n        a = b ^ a;\n    }\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n            if(a != b){\n                System.out.print(\"\");\n            }\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.9
        }, 
        {
            "date" : ISODate("2016-01-03T13:37:32.750+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    if(a > b){\n        b = a ^ b;\n        a = b ^ a;\n    }\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n            if(a != b){\n                System.out.print(\"\");\n            }\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.9
        }, 
        {
            "date" : ISODate("2016-01-03T13:37:36.187+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    if(a > b){\n        b = a ^ b;\n        a = b ^ a;\n    }\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n            if(a != b){\n                System.out.print(\" \");\n            }\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 3.5
        }, 
        {
            "date" : ISODate("2016-01-03T13:38:12.116+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    if(a > b){\n        b = a ^ b;\n        a = b ^ a;\n        b = a ^ b;\n    }\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n            if(a != b){\n                System.out.print(\" \");\n            }\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.3
        }, 
        {
            "date" : ISODate("2016-01-03T13:40:20.216+0000"), 
            "code" : "public static void printOddNumbers(int a, int b){\n    if(a > b){\n        b = a ^ b;\n        a = b ^ a;\n        b = a ^ b;\n    }\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n            if(a != b && b % 2 != 0){\n                System.out.print(\" \");\n            }\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(29)
        }
    ]
}
{ 
    "_id" : "Dq8nkbBtmYmjBw4S5", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "wWzA6YXwiAtpChfYs", 
    "completed" : true, 
    "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));   \n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(12), 
    "totalActiveTime" : 2027.6999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-01-03T07:55:41.227+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 648.3
        }, 
        {
            "date" : ISODate("2016-01-03T07:57:05.003+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.9
        }, 
        {
            "date" : ISODate("2016-01-03T07:58:39.863+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 69.6
        }, 
        {
            "date" : ISODate("2016-01-03T07:59:37.067+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.1
        }, 
        {
            "date" : ISODate("2016-01-03T08:00:37.070+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.5
        }, 
        {
            "date" : ISODate("2016-01-03T08:04:31.823+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 132.1
        }, 
        {
            "date" : ISODate("2016-01-03T08:05:30.210+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(52)
        }, 
        {
            "date" : ISODate("2016-01-03T08:10:40.026+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 139.3
        }, 
        {
            "date" : ISODate("2016-01-03T16:20:38.956+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 211.2
        }, 
        {
            "date" : ISODate("2016-01-03T16:22:17.935+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 71.5
        }, 
        {
            "date" : ISODate("2016-01-03T16:28:32.581+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 75.5
        }, 
        {
            "date" : ISODate("2016-01-03T16:29:16.849+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.8
        }, 
        {
            "date" : ISODate("2016-01-03T16:30:31.708+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-01-03T16:32:09.469+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 58.9
        }, 
        {
            "date" : ISODate("2016-01-03T16:32:34.697+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-01-03T16:33:43.452+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "PASS", 
            "activeTime" : 47.1
        }, 
        {
            "date" : ISODate("2016-01-03T16:35:00.026+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(50)
        }, 
        {
            "date" : ISODate("2016-01-03T16:36:08.348+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.8
        }, 
        {
            "date" : ISODate("2016-01-03T16:36:27.195+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "PASS", 
            "activeTime" : 10.7
        }, 
        {
            "date" : ISODate("2016-01-03T16:39:40.960+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 92.8
        }, 
        {
            "date" : ISODate("2016-01-03T16:40:13.606+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    System.out.println(s);\n}", 
            "status" : "FAIL", 
            "activeTime" : 30.6
        }, 
        {
            "date" : ISODate("2016-01-03T16:42:14.391+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i));\n        else\n            System.out.print(s.charAt(i));   \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 116.6
        }, 
        {
            "date" : ISODate("2016-01-03T16:42:26.578+0000"), 
            "code" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));   \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(12)
        }
    ]
}
{ 
    "_id" : "4Y3BTCFezbyjrjJZu", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++)\n        System.out.println(\"Hello World!\");\n}", 
    "status" : "PASS", 
    "activeTime" : 29.8, 
    "totalActiveTime" : 779.5999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-03T16:27:33.772+0000"), 
            "code" : "public static void helloWorld() {\n    System.out.println(\"Hello World!\");\n}", 
            "status" : "PASS", 
            "activeTime" : 96.5
        }, 
        {
            "date" : ISODate("2016-01-03T16:46:27.533+0000"), 
            "code" : "public static void helloWorld() {\n    System.out.println(\"Hello World!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 185.5
        }, 
        {
            "date" : ISODate("2016-01-03T16:46:40.190+0000"), 
            "code" : "public static void helloWorld(int n) {\n    System.out.println(\"Hello World!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.6
        }, 
        {
            "date" : ISODate("2016-01-03T16:47:59.472+0000"), 
            "code" : "public static void helloWorld(int n) {\n    System.out.println(\"Hello World!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.4
        }, 
        {
            "date" : ISODate("2016-01-03T16:49:06.111+0000"), 
            "code" : "public static void helloWorld(int n) {\n    System.out.println(\"Hello World!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.4
        }, 
        {
            "date" : ISODate("2016-01-03T16:49:50.985+0000"), 
            "code" : "public static void helloWorld(int n) {\n    System.out.println(\"Hello World!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 30.8
        }, 
        {
            "date" : ISODate("2016-01-03T16:50:24.793+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++)\n        System.out.println(\"Hello World!\");\n}", 
            "status" : "PASS", 
            "activeTime" : 33.7
        }, 
        {
            "date" : ISODate("2016-01-04T05:26:42.394+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++)\n        System.out.println(\"Hello World!\");\n}", 
            "status" : "PASS", 
            "activeTime" : 341.9
        }, 
        {
            "date" : ISODate("2016-01-04T05:28:38.159+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++)\n        System.out.println(\"Hello World!\");\n}", 
            "status" : "PASS", 
            "activeTime" : 29.8
        }
    ], 
    "updatedAt" : ISODate("2016-01-10T09:33:50.514+0000")
}
{ 
    "_id" : "hKw3rJqsm9AH8c8sS", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "boxJennKMpdxAJWvY", 
    "completed" : true, 
    "code" : "public static void printMonths(int n) {\n    String[] months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    int count = 0;\n    for (String s : months)\n        if (s.length() <= n) {\n            System.out.println(s);\n            count++;\n        }\n    if (count == 0)\n        System.out.println(\"Cannot find any months.\");\n}", 
    "status" : "PASS", 
    "activeTime" : 200.1, 
    "totalActiveTime" : 1310.1000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-03T17:04:53.440+0000"), 
            "code" : "public static void printMonths(int n) {\n    String months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    for (String s : months)\n        if (s.length() <= n)\n            System.out.println(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 683.6
        }, 
        {
            "date" : ISODate("2016-01-03T17:05:05.407+0000"), 
            "code" : "public static void printMonths(int n) {\n    String[] months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    for (String s : months)\n        if (s.length() <= n)\n            System.out.println(s);\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-01-03T17:09:35.348+0000"), 
            "code" : "public static void printMonths(int n) {\n    String[] months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    for (String s : months)\n        if (s.length() <= n)\n            System.out.println(s);\n}", 
            "status" : "FAIL", 
            "activeTime" : 249.8
        }, 
        {
            "date" : ISODate("2016-01-03T17:10:27.401+0000"), 
            "code" : "public static void printMonths(int n) {\n    String[] months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    for (String s : months)\n        if (s.length() <= n)\n            System.out.println(s);\n}", 
            "status" : "FAIL", 
            "activeTime" : 51.1
        }, 
        {
            "date" : ISODate("2016-01-03T17:11:14.179+0000"), 
            "code" : "public static void printMonths(int n) {\n    String[] months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    for (String s : months)\n        if (s.length() <= n)\n            System.out.println(s);\n}", 
            "status" : "PASS", 
            "activeTime" : 45.9
        }, 
        {
            "date" : ISODate("2016-01-03T17:12:30.823+0000"), 
            "code" : "public static void printMonths(int n) {\n    String[] months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    for (String s : months)\n        if (s.length() <= n)\n            System.out.println(s);\n}", 
            "status" : "PASS", 
            "activeTime" : 67.9
        }, 
        {
            "date" : ISODate("2016-01-04T06:26:25.848+0000"), 
            "code" : "public static void printMonths(int n) {\n    String[] months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    int count = 0;\n    for (String s : months)\n        if (s.length() <= n) {\n            System.out.println(s);\n            count++;\n        }\n    if (count == 0)\n        System.out.println(\"Cannot find any months.\");\n}", 
            "status" : "PASS", 
            "activeTime" : 200.1
        }
    ]
}
{ 
    "_id" : "Qj7hFXRhR88PhvwH9", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "vR7wCjPDTy9XSjYiv", 
    "completed" : true, 
    "code" : "public static void computeAge(String s) {\n    String[] strArr = s.split(\"/\");\n    int year = Calendar.getInstance().get(Calendar.YEAR);\n    System.out.println(year - Integer.parseInt(strArr[2]));\n}", 
    "status" : "PASS", 
    "activeTime" : 19.2, 
    "totalActiveTime" : 511.29999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-01-03T17:24:34.166+0000"), 
            "code" : "public static void computeAge(String s) {\n    String[] strArr = s.split(\"/\");\n    System.out.println(2016 - Integer.parseInt(strArr[2]));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 443.7
        }, 
        {
            "date" : ISODate("2016-01-03T17:25:41.561+0000"), 
            "code" : "public static void computeAge(String s) {\n    String[] strArr = s.split(\"/\");\n    System.out.println(2016 - Integer.parseInt(strArr[2]));\n}", 
            "status" : "PASS", 
            "activeTime" : 23.7
        }, 
        {
            "date" : ISODate("2016-01-03T17:27:08.606+0000"), 
            "code" : "public static void computeAge(String s) {\n    String[] strArr = s.split(\"/\");\n    int year = Calendar.getInstance().get(Calendar.YEAR);\n    System.out.println(year - Integer.parseInt(strArr[2]));\n}", 
            "status" : "PASS", 
            "activeTime" : 24.7
        }, 
        {
            "date" : ISODate("2016-01-03T17:28:05.661+0000"), 
            "code" : "public static void computeAge(String s) {\n    String[] strArr = s.split(\"/\");\n    int year = Calendar.getInstance().get(Calendar.YEAR);\n    System.out.println(year - Integer.parseInt(strArr[2]));\n}", 
            "status" : "PASS", 
            "activeTime" : 19.2
        }
    ]
}
{ 
    "_id" : "eepvu9tXNia7GRu5E", 
    "userId" : "Zf8vYjbZgY643E4iA", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : true, 
    "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    if (supermarket.getNumCounters() >= counterNumber){\n        Counter temp = supermarket.getCounter(counterNumber);\n        return temp.setCashier(cashier);\n    } else {\n        return false;\n    }\n    \n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 7.6, 
    "totalActiveTime" : 371.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T04:37:59.058+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    if (supermarket.getNumCounters() >= counterNumber){\n        Counter temp = supermarket.getCounter(counterNumber);\n        return temp.setCashier(Cashier);\n    } else {\n        return false;\n    }\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 364.2
        }, 
        {
            "date" : ISODate("2016-01-04T04:38:06.891+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    if (supermarket.getNumCounters() >= counterNumber){\n        Counter temp = supermarket.getCounter(counterNumber);\n        return temp.setCashier(cashier);\n    } else {\n        return false;\n    }\n    \n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 7.6
        }
    ]
}
{ 
    "_id" : "kR5oc2rA2FpRgEJ79", 
    "userId" : "Zf8vYjbZgY643E4iA", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : true, 
    "code" : "public static String printPattern(String word, char ch){\n    if (word == null || word.length() == 0){\n        return \"\";\n    }\n    String output = \"\";\n    output += word.charAt(0);\n    for (int i = 1; i < word.length(); i++){\n        output += ch;\n        output += word.charAt(i);\n    }\n    \n    return output;\n}", 
    "status" : "PASS", 
    "activeTime" : 249.9, 
    "totalActiveTime" : 249.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T04:42:16.934+0000"), 
            "code" : "public static String printPattern(String word, char ch){\n    if (word == null || word.length() == 0){\n        return \"\";\n    }\n    String output = \"\";\n    output += word.charAt(0);\n    for (int i = 1; i < word.length(); i++){\n        output += ch;\n        output += word.charAt(i);\n    }\n    \n    return output;\n}", 
            "status" : "PASS", 
            "activeTime" : 249.9
        }
    ]
}
{ 
    "_id" : "xwTmLq2B3cvZHv5wk", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "vR7wCjPDTy9XSjYiv", 
    "completed" : false
}
{ 
    "_id" : "RPyuFWgqtbyR2FbKF", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "5gXzMfYCaNdrX3GcB", 
    "completed" : false, 
    "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 10.3, 
    "totalActiveTime" : 1342.2999999999997, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T04:40:13.784+0000"), 
            "code" : "public static int add(int input)\n{\n    int sum=0;\n    for(i=0;i<imput.len;i++)\n    {\n        sum=sum+input[i];\n    }\n    \n    return sum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 217.5
        }, 
        {
            "date" : ISODate("2016-01-04T04:42:29.324+0000"), 
            "code" : "Class Adder\n{\n    public static int add(int input)\n    {\n        int sum=0;\n        for(i=0;i<imput.len;i++)\n        {\n            sum=sum+input[i];\n        }\n    return sum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(60)
        }, 
        {
            "date" : ISODate("2016-01-04T04:42:42.919+0000"), 
            "code" : "public Class Adder\n{\n    public static int add(int input)\n    {\n        int sum=0;\n        for(i=0;i<imput.len;i++)\n        {\n            sum=sum+input[i];\n        }\n    return sum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-01-04T06:08:25.040+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 960.5
        }, 
        {
            "date" : ISODate("2016-01-04T06:09:23.172+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.2
        }, 
        {
            "date" : ISODate("2016-01-04T06:11:25.270+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.1
        }, 
        {
            "date" : ISODate("2016-01-04T06:12:20.842+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.1
        }, 
        {
            "date" : ISODate("2016-01-04T06:15:42.963+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.3
        }
    ]
}
{ 
    "_id" : "n7KDReeaTt3ZfziWW", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "pZRPSvfmBKQdhfu3r", 
    "completed" : true, 
    "code" : "public static void Test()\n{\n    System.out.println(\"Test\");\n}", 
    "status" : "PASS", 
    "activeTime" : 123.4, 
    "totalActiveTime" : 123.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T06:14:51.617+0000"), 
            "code" : "public static void Test()\n{\n    System.out.println(\"Test\");\n}", 
            "status" : "PASS", 
            "activeTime" : 123.4
        }
    ]
}
{ 
    "_id" : "AuSivP3rR5WgMsri5", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "TteKpMvfMf6Zyb6Lr", 
    "completed" : false, 
    "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum);\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 71.5, 
    "totalActiveTime" : 108.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T06:17:53.715+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.9
        }, 
        {
            "date" : ISODate("2016-01-04T06:20:28.636+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 71.5
        }
    ]
}
{ 
    "_id" : "sjBSZ5xmjgkdpCZQY", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "ep4qDccZAv8NBcrG8", 
    "completed" : true, 
    "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
    "status" : "PASS", 
    "activeTime" : 4.1, 
    "totalActiveTime" : 1098.1000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T06:37:48.061+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    System.out.println(in.reverse());\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 435.5
        }, 
        {
            "date" : ISODate("2016-01-04T06:39:11.625+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i-- )\n         reversestring = reversestring + original.charAt(i);\n \n      System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 65.5
        }, 
        {
            "date" : ISODate("2016-01-04T06:40:46.086+0000"), 
            "code" : "public static void ReverseString(String[] in)\n{\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i-- )\n         reversestring = reversestring + in[i];\n \n      System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.6
        }, 
        {
            "date" : ISODate("2016-01-04T06:40:58.769+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i-- )\n         reversestring = reversestring + in[i];\n \n      System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-01-04T06:41:35.996+0000"), 
            "code" : "import java.util.*;\npublic static void ReverseString(String in)\n{\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i-- )\n         reversestring = reversestring + original.charAt(i);;\n \n      System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.2
        }, 
        {
            "date" : ISODate("2016-01-04T06:42:00.147+0000"), 
            "code" : "import java.util.*;\n\npublic static void ReverseString(String in)\n{\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i-- )\n         reversestring = reversestring + original.charAt(i);\n    \n    System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.2
        }, 
        {
            "date" : ISODate("2016-01-04T06:42:29.007+0000"), 
            "code" : "import java.util.*;\n\npublic static void ReverseString(String in)\n{\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i-- )\n         reversestring = reversestring + original.charAt(i);\n    \n    System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.2
        }, 
        {
            "date" : ISODate("2016-01-04T06:42:59.363+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i-- )\n         reversestring = reversestring + original.charAt(i);\n    \n    System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.2
        }, 
        {
            "date" : ISODate("2016-01-04T06:45:30.587+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i-- )\n         reversestring = reversestring +in.charAt(i);\n    \n    System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 57.1
        }, 
        {
            "date" : ISODate("2016-01-04T06:46:09.324+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    string re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i-- )\n         re = re +in.charAt(i);\n    \n    System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.8
        }, 
        {
            "date" : ISODate("2016-01-04T06:46:29.795+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    string re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.6
        }, 
        {
            "date" : ISODate("2016-01-04T06:47:14.253+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    string re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.4
        }, 
        {
            "date" : ISODate("2016-01-04T06:47:35.120+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(\"Reverse of entered string is: \"+reversestring);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.2
        }, 
        {
            "date" : ISODate("2016-01-04T06:47:47.941+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "PASS", 
            "activeTime" : 12.6
        }, 
        {
            "date" : ISODate("2016-01-04T06:53:30.778+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "PASS", 
            "activeTime" : 145.1
        }, 
        {
            "date" : ISODate("2016-01-04T06:54:31.431+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "PASS", 
            "activeTime" : 21.7
        }, 
        {
            "date" : ISODate("2016-01-04T06:57:34.609+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "PASS", 
            "activeTime" : 47.7
        }, 
        {
            "date" : ISODate("2016-01-04T07:14:03.264+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "PASS", 
            "activeTime" : 10.5
        }, 
        {
            "date" : ISODate("2016-01-04T07:19:35.796+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "PASS", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-01-04T11:01:36.421+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "PASS", 
            "activeTime" : 21.5
        }, 
        {
            "date" : ISODate("2016-01-04T11:01:40.496+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "PASS", 
            "activeTime" : 4.1
        }
    ], 
    "updatedAt" : ISODate("2016-01-07T08:17:40.766+0000")
}
{ 
    "_id" : "oo6QRDuPREKYXQgov", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "ep4qDccZAv8NBcrG8", 
    "completed" : false
}
{ 
    "_id" : "EdFioMgTwzHWMohJu", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "o9p8yiQG4cxBThyNz", 
    "completed" : false, 
    "code" : "public static int CalAvg(int[] array){ //1st method\n        int total =0;\n        int avg = total / array.length;\n        return avg;\n\n    }", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 15.1, 
    "totalActiveTime" : 714.9000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T07:04:45.911+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 195.2
        }, 
        {
            "date" : ISODate("2016-01-04T07:05:29.902+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-01-04T07:07:50.096+0000"), 
            "code" : "public static void CalAvgScore(int input[])\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 77.8
        }, 
        {
            "date" : ISODate("2016-01-04T07:08:07.591+0000"), 
            "code" : "public static void CalAvgScore(int input[])\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.2
        }, 
        {
            "date" : ISODate("2016-01-04T07:08:18.111+0000"), 
            "code" : "public static void CalAvgScore(int [] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.5
        }, 
        {
            "date" : ISODate("2016-01-04T07:08:23.873+0000"), 
            "code" : "public static void CalAvgScore(int [] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.7
        }, 
        {
            "date" : ISODate("2016-01-04T07:08:29.917+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.1
        }, 
        {
            "date" : ISODate("2016-01-04T07:09:48.717+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 65.8
        }, 
        {
            "date" : ISODate("2016-01-04T07:11:17.867+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 84.1
        }, 
        {
            "date" : ISODate("2016-01-04T07:11:56.867+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n{\n    int sum=0;\n    for(i=0;i<input.length;i++)\n    {\n        sum=sum+input[i];\n    }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.5
        }, 
        {
            "date" : ISODate("2016-01-04T07:12:04.363+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n{\n    int sum=0;\n    for(i=0;i<input.length;i++)\n    {\n        sum=sum+input[i];\n    }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.5
        }, 
        {
            "date" : ISODate("2016-01-04T07:12:49.711+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n{\n   int sum=0;\n    for(i=0;i<input.length;i++)\n    {\n        sum=sum+input[i];\n    }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.4
        }, 
        {
            "date" : ISODate("2016-01-04T07:13:41.297+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n{\n   int sum=0;\n   for(int i=0;i<input.length;i++)\n    {\n        sum=sum+input[i];\n    }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.9
        }, 
        {
            "date" : ISODate("2016-01-04T07:14:22.921+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-01-04T07:15:09.478+0000"), 
            "code" : "public static float CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n  return (sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.6
        }, 
        {
            "date" : ISODate("2016-01-04T07:15:51.453+0000"), 
            "code" : "public static float CalAvgScore(int[] input)\n    {\n      int sum=0;\n      for(i=0;i<input.length;i++)\n      {\n          sum=sum+input[i];\n      }\n     float avg=(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(41)
        }, 
        {
            "date" : ISODate("2016-01-04T07:17:45.099+0000"), 
            "code" : "public static int CalAvgScore(int[] array){ //1st method\n        int total =0;\n        int avg = total / array.length;\n        return avg;\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(30)
        }, 
        {
            "date" : ISODate("2016-01-04T07:18:00.180+0000"), 
            "code" : "public static int CalAvg(int[] array){ //1st method\n        int total =0;\n        int avg = total / array.length;\n        return avg;\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.1
        }
    ]
}
{ 
    "_id" : "Q2R7Nnv7fsvP5KNvr", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "xsTmbTMhHzWKFwzSw", 
    "completed" : false
}
{ 
    "_id" : "TpYdTS8EpQ6QoMS6r", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "ccZ7suBHz7fcjm6sk", 
    "completed" : false, 
    "code" : "public static void translateMessage(MessageTranslator a, String b) {\n    \n      \n    \n    \n    \n\n      \n        \n    }", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 18.8, 
    "totalActiveTime" : 404.6, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T07:45:31.368+0000"), 
            "code" : "public static void test() {}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.7
        }, 
        {
            "date" : ISODate("2016-01-04T07:46:23.652+0000"), 
            "code" : "public static void test() {\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.4
        }, 
        {
            "date" : ISODate("2016-01-04T07:46:41.428+0000"), 
            "code" : "public static void test() {\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.7
        }, 
        {
            "date" : ISODate("2016-01-04T07:46:46.117+0000"), 
            "code" : "public static void test() {\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.7
        }, 
        {
            "date" : ISODate("2016-01-04T07:47:06.076+0000"), 
            "code" : "public static void test() {\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(20)
        }, 
        {
            "date" : ISODate("2016-01-04T07:47:14.212+0000"), 
            "code" : "public static void test() {\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-01-04T07:58:36.804+0000"), 
            "code" : "public static void translateMessage() {\n    \n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 62.7
        }, 
        {
            "date" : ISODate("2016-01-04T07:58:39.636+0000"), 
            "code" : "public static void translateMessage() {\n    \n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.7
        }, 
        {
            "date" : ISODate("2016-01-04T07:58:59.108+0000"), 
            "code" : "public static void translateMessage(String a, String b) {\n    \n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-01-04T08:00:25.300+0000"), 
            "code" : "public static void translateMessage(String a, String b) {\n    \n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.4
        }, 
        {
            "date" : ISODate("2016-01-04T08:00:31.756+0000"), 
            "code" : "public static void translateMessage(String a, String b) {\n    \n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.4
        }, 
        {
            "date" : ISODate("2016-01-04T08:01:43.610+0000"), 
            "code" : "public static void translateMessage(MessageTranslator a, String b) {\n    \n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 66.4
        }, 
        {
            "date" : ISODate("2016-01-04T08:02:19.280+0000"), 
            "code" : "public static void translateMessage(MessageTranslator a, String b) {\n    \n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.4
        }, 
        {
            "date" : ISODate("2016-01-04T08:02:28.263+0000"), 
            "code" : "public static void translateMessage(MessageTranslator a, String b) {\n    \n        return 0;\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-01-04T08:03:02.816+0000"), 
            "code" : "public static String translateMessage(MessageTranslator a, String b) {\n    \n      \n    \n    \n    \n\\  \n      \n        return \"\";\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.6
        }, 
        {
            "date" : ISODate("2016-01-04T08:03:12.153+0000"), 
            "code" : "public static String translateMessage(MessageTranslator a, String b) {\n    \n      \n    \n    \n    \n\n      \n        return \"\";\n    }", 
            "status" : "FAIL", 
            "activeTime" : 9.2
        }, 
        {
            "date" : ISODate("2016-01-04T08:03:30.756+0000"), 
            "code" : "public static void translateMessage(MessageTranslator a, String b) {\n    \n      \n    \n    \n    \n\n      \n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.8
        }
    ]
}
{ 
    "_id" : "fgzpq5hBgtNTnaham", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "LjKCNwu2tEYd8T4JP", 
    "completed" : true, 
    "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(26), 
    "totalActiveTime" : 774.1999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T07:19:04.457+0000"), 
            "code" : "public static int CalAvg(int[] array){ //1st method\n        int total =0;\n        int avg = total / array.length;\n        return avg;\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-01-04T07:21:02.939+0000"), 
            "code" : "public static void CalAvg()\n  {\n      System.put.println(\"Hello\");\n  }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 42.3
        }, 
        {
            "date" : ISODate("2016-01-04T07:21:10.056+0000"), 
            "code" : "public static void CalAvg()\n  {\n      System.out.println(\"Hello\");\n  }", 
            "status" : "PASS", 
            "activeTime" : NumberInt(7)
        }, 
        {
            "date" : ISODate("2016-01-04T07:22:01.134+0000"), 
            "code" : "public static void CalAvg((int[] array)\n  {\n      System.out.println(\"Hello\");\n  }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-01-04T07:25:24.258+0000"), 
            "code" : "public static void CalAvg((int[] array)\n  {\n      System.out.println(\"Hello\");\n  }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.8
        }, 
        {
            "date" : ISODate("2016-01-04T07:25:30.731+0000"), 
            "code" : "public static void CalAvg(int[] array)\n  {\n      System.out.println(\"Hello\");\n  }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.5
        }, 
        {
            "date" : ISODate("2016-01-04T07:25:34.485+0000"), 
            "code" : "public static void CalAvg(int[] array)\n  {\n      System.out.println(\"Hello\");\n  }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.8
        }, 
        {
            "date" : ISODate("2016-01-04T07:26:30.659+0000"), 
            "code" : "public static void CalAvg1(int[] array)\n  {\n      System.out.println(\"Hello\");\n  }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.6
        }, 
        {
            "date" : ISODate("2016-01-04T07:29:37.044+0000"), 
            "code" : "public static void CalAvg1(ArrayList<Integer> array)\n  {\n      System.out.println(\"Hello\");\n  }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.1
        }, 
        {
            "date" : ISODate("2016-01-04T07:30:31.964+0000"), 
            "code" : "public static void CalAvg1(ArrayList<Integer> array)\n  {\n      System.out.println(\"Hello\");\n  }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(17)
        }, 
        {
            "date" : ISODate("2016-01-04T07:30:46.940+0000"), 
            "code" : "public static void CalAvg1(int[] scores)\n  {\n      System.out.println(\"Hello\");\n  }", 
            "status" : "PASS", 
            "activeTime" : 14.9
        }, 
        {
            "date" : ISODate("2016-01-04T07:32:18.093+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-01-04T07:32:26.336+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.3
        }, 
        {
            "date" : ISODate("2016-01-04T07:32:37.784+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.6
        }, 
        {
            "date" : ISODate("2016-01-04T07:32:47.289+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "PASS", 
            "activeTime" : 9.3
        }, 
        {
            "date" : ISODate("2016-01-04T07:59:57.508+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "PASS", 
            "activeTime" : 2.1
        }, 
        {
            "date" : ISODate("2016-01-04T08:00:41.768+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.8
        }, 
        {
            "date" : ISODate("2016-01-04T08:05:26.505+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    System.out.printf(\"%.2f\",sum/input.length);\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.3
        }, 
        {
            "date" : ISODate("2016-01-04T08:06:18.837+0000"), 
            "code" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        DecimalFormat df = new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        System.out.println(df.format(decimalNumber));\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.9
        }, 
        {
            "date" : ISODate("2016-01-04T08:07:44.036+0000"), 
            "code" : "public static float CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    return sum/input.length;\n}", 
            "status" : "FAIL", 
            "activeTime" : 43.5
        }, 
        {
            "date" : ISODate("2016-01-04T08:08:11.860+0000"), 
            "code" : "public static float CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n    return sum/input.length;\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.7
        }, 
        {
            "date" : ISODate("2016-01-04T08:08:48.901+0000"), 
            "code" : "public static double CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        return avg;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(37)
        }, 
        {
            "date" : ISODate("2016-01-04T08:09:22.053+0000"), 
            "code" : "public static double CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        return avg;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(11)
        }, 
        {
            "date" : ISODate("2016-01-04T08:09:45.445+0000"), 
            "code" : "public static double CalAvgScore(int[] input)\n    {\n        float sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        return avg;\n}", 
            "status" : "FAIL", 
            "activeTime" : 23.4
        }, 
        {
            "date" : ISODate("2016-01-04T08:11:33.018+0000"), 
            "code" : "public static double CalAvgScore(float[] input)\n    {\n        float sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        return avg;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 70.8
        }, 
        {
            "date" : ISODate("2016-01-04T08:11:56.375+0000"), 
            "code" : "public static double CalAvgScore(float[] input)\n    {\n        float sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        return avg;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(8)
        }, 
        {
            "date" : ISODate("2016-01-04T08:12:21.036+0000"), 
            "code" : "public static double CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        return avg;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.8
        }, 
        {
            "date" : ISODate("2016-01-04T08:12:40.652+0000"), 
            "code" : "public static double CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        return avg;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(6)
        }, 
        {
            "date" : ISODate("2016-01-04T08:15:53.759+0000"), 
            "code" : "public static double CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        return avg;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(28)
        }, 
        {
            "date" : ISODate("2016-01-04T08:18:01.147+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.9
        }, 
        {
            "date" : ISODate("2016-01-04T08:18:20.893+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.3
        }, 
        {
            "date" : ISODate("2016-01-04T08:18:41.198+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "PASS", 
            "activeTime" : 8.4
        }, 
        {
            "date" : ISODate("2016-01-04T08:20:08.878+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.9
        }, 
        {
            "date" : ISODate("2016-01-04T08:20:38.766+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "PASS", 
            "activeTime" : 8.3
        }, 
        {
            "date" : ISODate("2016-01-04T08:24:01.870+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "PASS", 
            "activeTime" : 1.6
        }, 
        {
            "date" : ISODate("2016-01-04T10:53:53.293+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(30)
        }, 
        {
            "date" : ISODate("2016-01-04T11:02:44.452+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "PASS", 
            "activeTime" : 35.7
        }, 
        {
            "date" : ISODate("2016-01-04T11:02:47.156+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "PASS", 
            "activeTime" : 2.7
        }, 
        {
            "date" : ISODate("2016-01-07T08:06:50.498+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(8)
        }, 
        {
            "date" : ISODate("2016-01-07T08:07:35.716+0000"), 
            "code" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(26)
        }
    ], 
    "updatedAt" : ISODate("2016-01-07T08:17:42.367+0000")
}
{ 
    "_id" : "fAiT32eCyx7ryurYT", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "Q6ZNCsxjmBCvxvcMF", 
    "completed" : true, 
    "code" : "public static void CheckTriangleType(int a,int b, int c)\n{\n    if(a==b&&b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    else if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    }", 
    "status" : "PASS", 
    "activeTime" : 44.8, 
    "totalActiveTime" : 374.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T09:01:40.554+0000"), 
            "code" : "public static void CheckTriangleType(double a,double b, double c)\n{\n    if(a==b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    els if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 132.1
        }, 
        {
            "date" : ISODate("2016-01-04T09:01:51.856+0000"), 
            "code" : "public static void CheckTriangleType(double a,double b, double c)\n{\n    if(a==b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    else if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-01-04T09:02:03.162+0000"), 
            "code" : "public static void CheckTriangleType(double a,double b, double c)\n{\n    if(a==b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    else if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-01-04T09:05:22.806+0000"), 
            "code" : "public static void CheckTriangleType(int a,int b, int c)\n{\n    if(a==b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    else if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 76.8
        }, 
        {
            "date" : ISODate("2016-01-04T09:06:26.699+0000"), 
            "code" : "public static void CheckTriangleType(int a,int b, int c)\n{\n    if(a==b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    else if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-01-04T09:06:44.688+0000"), 
            "code" : "public static void CheckTriangleType(int a,int b, int c)\n{\n    if(a==b&&b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    else if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    }", 
            "status" : "PASS", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-01-04T10:27:06.072+0000"), 
            "code" : "public static void CheckTriangleType(int a,int b, int c)\n{\n    if(a==b&&b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    else if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    }", 
            "status" : "PASS", 
            "activeTime" : 58.9
        }, 
        {
            "date" : ISODate("2016-01-04T11:00:55.714+0000"), 
            "code" : "public static void CheckTriangleType(int a,int b, int c)\n{\n    if(a==b&&b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    else if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    }", 
            "status" : "PASS", 
            "activeTime" : 44.8
        }
    ], 
    "updatedAt" : ISODate("2016-01-07T08:17:42.371+0000")
}
{ 
    "_id" : "CPAEn5MFNc4LzDqfE", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "yM4PGW8ucjJXZfkZh", 
    "completed" : true, 
    "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
    "status" : "PASS", 
    "activeTime" : 19.6, 
    "totalActiveTime" : 1793.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T10:47:41.524+0000"), 
            "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
            "status" : "FAIL", 
            "activeTime" : 1354.4
        }, 
        {
            "date" : ISODate("2016-01-04T10:53:22.258+0000"), 
            "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
            "status" : "FAIL", 
            "activeTime" : 221.8
        }, 
        {
            "date" : ISODate("2016-01-04T10:54:29.838+0000"), 
            "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
            "status" : "FAIL", 
            "activeTime" : 35.9
        }, 
        {
            "date" : ISODate("2016-01-04T10:55:06.488+0000"), 
            "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
            "status" : "FAIL", 
            "activeTime" : 25.6
        }, 
        {
            "date" : ISODate("2016-01-04T10:55:43.876+0000"), 
            "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
            "status" : "PASS", 
            "activeTime" : 23.9
        }, 
        {
            "date" : ISODate("2016-01-04T10:56:28.329+0000"), 
            "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
            "status" : "PASS", 
            "activeTime" : 25.7
        }, 
        {
            "date" : ISODate("2016-01-04T11:05:43.656+0000"), 
            "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
            "status" : "FAIL", 
            "activeTime" : 35.3
        }, 
        {
            "date" : ISODate("2016-01-04T11:11:00.845+0000"), 
            "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
            "status" : "PASS", 
            "activeTime" : 51.6
        }, 
        {
            "date" : ISODate("2016-01-07T06:57:49.845+0000"), 
            "code" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
            "status" : "PASS", 
            "activeTime" : 19.6
        }
    ], 
    "updatedAt" : ISODate("2016-01-07T08:17:40.762+0000")
}
{ 
    "_id" : "o7F3QoWz2x9n9RtTW", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "ep4qDccZAv8NBcrG8", 
    "completed" : false
}
{ 
    "_id" : "SbmAzuetNitGi86BF", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "yM4PGW8ucjJXZfkZh", 
    "completed" : false
}
{ 
    "_id" : "SzsDo9sMEby3xZkiu", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "yM4PGW8ucjJXZfkZh", 
    "completed" : false
}
{ 
    "_id" : "rrEmzNHEfcr5XSxNX", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "yM4PGW8ucjJXZfkZh", 
    "completed" : false
}
{ 
    "_id" : "YFF5kH3b65C6kJxWC", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "LjKCNwu2tEYd8T4JP", 
    "completed" : false
}
{ 
    "_id" : "b8ZXuQoPTQDdwgN8a", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "ep4qDccZAv8NBcrG8", 
    "completed" : false
}
{ 
    "_id" : "2PefzLZCBH2EBGFKB", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "Q6ZNCsxjmBCvxvcMF", 
    "completed" : false
}
{ 
    "_id" : "uYr6pTtLe3jePAkek", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "LjKCNwu2tEYd8T4JP", 
    "completed" : false
}
{ 
    "_id" : "3BQuqcv2ESxoegXx9", 
    "userId" : "83sR4z6favCnL8oBj", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false
}
{ 
    "_id" : "HegBFgwrpBQ9YgCFW", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "vR7wCjPDTy9XSjYiv", 
    "completed" : false
}
{ 
    "_id" : "ZZoNqytEsnYkX5tF2", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "xsTmbTMhHzWKFwzSw", 
    "completed" : false
}
{ 
    "_id" : "3k5gfXmr7bjPCKw5z", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "ccZ7suBHz7fcjm6sk", 
    "completed" : false
}
{ 
    "_id" : "sXqBaSuYvimnJtq52"
}
{ 
    "_id" : "8KGgPiiD8tLvhKXDF", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "Q6ZNCsxjmBCvxvcMF", 
    "completed" : false
}
{ 
    "_id" : "cpf6Na5m2uh9eHF4e", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "code" : "static void  helloWorld(int number)\n{ //HI!\n for(int i =0;i<number;i+=1)\n {\n System.out.println(\"Hello World!\");\n }\n}", 
    "status" : "PASS", 
    "activeTime" : 52.8, 
    "totalActiveTime" : 823.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-04T04:06:53.845+0000"), 
            "code" : "static void  helloWorld(int number)\n{\n for(int i =0;i<number;i++)\n {\n System.out.println(\"Hello World!);\n }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 94.4
        }, 
        {
            "date" : ISODate("2016-01-04T04:07:10.633+0000"), 
            "code" : "static void  helloWorld(int number)\n{\n for(int i =0;i<number;i++)\n {\n System.out.println(\"Hello World!\");\n }\n}", 
            "status" : "PASS", 
            "activeTime" : 16.5
        }, 
        {
            "date" : ISODate("2016-01-04T04:33:26.038+0000"), 
            "code" : "static void  helloWorld(int number)\n{\n for(int i =0;i<number;i++)\n {\n System.out.println(\"Hello World!\");\n }\n}", 
            "status" : "PASS", 
            "activeTime" : 570.2
        }, 
        {
            "date" : ISODate("2016-01-05T07:25:55.318+0000"), 
            "code" : "static void  helloWorld(int number)\n{\n for(int i =0;i<number;i++)\n {\n System.out.println(\"Hello World!\");\n }\n}", 
            "status" : "PASS", 
            "activeTime" : 89.9
        }, 
        {
            "date" : ISODate("2016-01-05T08:11:16.225+0000"), 
            "code" : "static void  helloWorld(int number)\n{ //HI!\n for(int i =0;i<number;i+=1)\n {\n System.out.println(\"Hello World!\");\n }\n}", 
            "status" : "PASS", 
            "activeTime" : 52.8
        }
    ]
}
{ 
    "_id" : "bqy2vNTnyezZ4hTjH", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : false
}
{ 
    "_id" : "XcrY6EhacBKhsGcAs", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : false
}
{ 
    "_id" : "JCfAMTMKrWSRuE3Zb", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "Q6ZNCsxjmBCvxvcMF", 
    "completed" : false
}
{ 
    "_id" : "Rikv379BsQnfcP4fB", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-05T15:23:56.768+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:27:12.458+0000")
}
{ 
    "_id" : "aBjkkxrTPtu8GTHrJ", 
    "userId" : "5ncPQugL7uzRKQC92", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T03:50:25.854+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:42:57.939+0000"), 
    "code" : "public static void helloWorld(int n) {\nfor (int i=0; i<n;i++) {\n    System.out.println(\"Hello World!\");\n}\n}", 
    "status" : "PASS", 
    "activeTime" : 47.4, 
    "totalActiveTime" : 47.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T03:51:15.448+0000"), 
            "code" : "public static void helloWorld(int n) {\nfor (int i=0; i<n;i++) {\n    System.out.println(\"Hello World!\");\n}\n}", 
            "status" : "PASS", 
            "activeTime" : 47.4
        }
    ]
}
{ 
    "_id" : "PKkrqCmDeogdnJFAJ", 
    "userId" : "JK86fgJYarKfzNwm3", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:19:31.756+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:27:50.292+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n;i++){\n            System.out.println(\"Hello World!\");\n        }   \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 124.3, 
    "totalActiveTime" : 252.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:21:42.232+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n<0){\n        return;\n    }\n    \n    for(int i=0; i<n;i++){\n        System.out.println(\"Hello World!\");\n    }    \n}", 
            "status" : "PASS", 
            "activeTime" : 128.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:50.292+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n;i++){\n            System.out.println(\"Hello World!\");\n        }   \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 124.3
        }
    ]
}
{ 
    "_id" : "7ap7fA2a59ppsYacT", 
    "userId" : "Jwbt3mY2jSquRwffY", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:19:56.775+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:23:09.572+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 1; i <= n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 52.2, 
    "totalActiveTime" : 168.0, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:22:13.180+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 1; i <= n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 115.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:23:09.571+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 1; i <= n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 52.2
        }
    ]
}
{ 
    "_id" : "ssfnSdiBntafRN9La", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:54.557+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:22:44.485+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 47.8, 
    "totalActiveTime" : 47.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:22:44.484+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 47.8
        }
    ]
}
{ 
    "_id" : "3jpNnHcNcjrJnLWZj", 
    "userId" : "bJDQkS9S3h5HZyMFb", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:50.040+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:23:47.023+0000"), 
    "code" : "public static void helloWorld (int n) {\n    if(n >= 0){\n        for (int x = 0; x < n; x ++){\n            System.out.println(\"Hello World!\");\n        }\n    }  \n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 32.9, 
    "totalActiveTime" : 174.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:22:20.534+0000"), 
            "code" : "public static void helloWorld (int n) {\n    if (n > 0) {\n        for (int x = 0; x < n; x ++){\n            System.out.println(\"Hello World!\")\n        }\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 88.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:22:30.953+0000"), 
            "code" : "public static void helloWorld (int n) {\n    if (n > 0) {\n        for (int x = 0; x < n; x ++){\n            System.out.println(\"Hello World!\");\n        }\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:22:51.758+0000"), 
            "code" : "public static void helloWorld (int n) {\n    if (n > 0) {\n        for (int x = 0; x < n; x ++){\n            System.out.println(\"Hello World!\");\n        }\n        \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 21.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:23:14.122+0000"), 
            "code" : "public static void helloWorld (int n) {\n\n        for (int x = 0; x < n; x ++){\n            System.out.println(\"Hello World!\");\n        }\n        \n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 22.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:23:47.022+0000"), 
            "code" : "public static void helloWorld (int n) {\n    if(n >= 0){\n        for (int x = 0; x < n; x ++){\n            System.out.println(\"Hello World!\");\n        }\n    }  \n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 32.9
        }
    ]
}
{ 
    "_id" : "o5Mnw6okqBBXnPmEK", 
    "userId" : "mmCxiA2YzfycnEeGz", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:20.813+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:23:11.706+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int x = 0; x < n ; x++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 8.7, 
    "totalActiveTime" : 91.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:23:02.497+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int x = 0; x < n ; x++){\n        system.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:23:11.706+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int x = 0; x < n ; x++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 8.7
        }
    ]
}
{ 
    "_id" : "a3dzSb8JEavXaHMFf", 
    "userId" : "gongAwtmzJGF3LYDh", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:50.087+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:24:02.726+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n < 0){\n        return;\n    }else{\n        for(int i = 1; i <= n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 190.5, 
    "totalActiveTime" : 190.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:24:02.726+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n < 0){\n        return;\n    }else{\n        for(int i = 1; i <= n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 190.5
        }
    ]
}
{ 
    "_id" : "xeJKFzv2DaieutLzN", 
    "userId" : "oPPnyeyEb8HK9xTLE", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:41.353+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:24:46.847+0000"), 
    "code" : "public static void helloWorld(int n) {\n    int count = Math.abs(n);\n    for(int i = 0; i < count; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 12.6, 
    "totalActiveTime" : 168.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:22:27.352+0000"), 
            "code" : "public static void helloWorld(int n) {\n    int count = Math.abs(n);\n    for(int i = 0; i < count; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 78.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:23:52.818+0000"), 
            "code" : "public static void helloWorld(int n) {\n    int count = Math.abs(n);\n    for(int i = 0; i < count; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 58.6
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:34.371+0000"), 
            "code" : "public static void helloWorld(int n) {\n    int count = Math.abs(n);\n    for(int i = 0; i < count; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:46.847+0000"), 
            "code" : "public static void helloWorld(int n) {\n    int count = Math.abs(n);\n    for(int i = 0; i < count; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 12.6
        }
    ]
}
{ 
    "_id" : "g34mpfsiT4RDEAreg", 
    "userId" : "eztrku6WiYRkLjadk", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:47.255+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:26:49.337+0000"), 
    "code" : "public static void main(String [] args){\n        helloWorld(8);\n    }\n    public static void helloWorld(int n){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n            \n    }", 
    "status" : "PASS", 
    "activeTime" : 52.8, 
    "totalActiveTime" : 267.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:24:28.705+0000"), 
            "code" : "public class Hello{\n    public static void main(String [] args){\n        public static void helloWorld(int n){\n            for (int i = 0; i < n; i++){\n                System.out.println(\"Hellow World!\");\n            }\n            \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 156.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:35.423+0000"), 
            "code" : "public class Hello{\n    public static void main(String [] args){\n        public static void helloWorld(int n){\n            for (int i = 0; i < n; i++){\n                System.out.println(\"Hello World!\");\n            }\n            \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:27.647+0000"), 
            "code" : "public class Hello{\n    public static void main(String [] args){\n        helloWorld(8);\n    }\n    public static void helloWorld(int n){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n            \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(52)
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:49.336+0000"), 
            "code" : "public static void main(String [] args){\n        helloWorld(8);\n    }\n    public static void helloWorld(int n){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n            \n    }", 
            "status" : "PASS", 
            "activeTime" : 52.8
        }
    ]
}
{ 
    "_id" : "88vHSs3pnL3acdcJe", 
    "userId" : "xAu89GpA2WxoX6yzo", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:17.316+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:26:40.565+0000"), 
    "status" : "PASS", 
    "activeTime" : 11.6, 
    "totalActiveTime" : 257.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:20:35.243+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(16)
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:32.158+0000"), 
            "code" : "public class helloWorld {\n\tpublic static void main(String[] args) {\n\t\thelloWorld(5);\n\t}\n\tpublic static helloWorld(int n){\n\t    for(int i = 0; i < n; i++){\n\t        System.out.println(\"Hello World!\");\n\t    }\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 158.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:41.972+0000"), 
            "code" : "public class helloWorld {\n\tpublic static void main(String[] args) {\n\t\thelloWorld(5);\n\t}\n\tpublic static helloWorld(int n){\n\t    for(int i = 0; i < n; i++){\n\t        System.out.println(\"Hello World!\");\n\t    }\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:04.999+0000"), 
            "code" : "public static void main(String[] args) {\n\t\thelloWorld(5);\n\t}\n\tpublic static helloWorld(int n){\n\t    for(int i = 0; i < n; i++){\n\t        System.out.println(\"Hello World!\");\n\t    }\n\t}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:21.451+0000"), 
            "code" : "public static helloWorld(int n){\n\t    for(int i = 0; i < n; i++){\n\t        System.out.println(\"Hello World!\");\n\t    }\n\t}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:42.627+0000"), 
            "code" : "public static void helloWorld(int n){\n\t    for(int i = 0; i < n; i++){\n\t        System.out.println(\"Hello World!\");\n\t    }\n\t}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:40.564+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 11.6
        }
    ], 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}"
}
{ 
    "_id" : "qmrGmXuxjoxKQQRNi", 
    "userId" : "kaDZjDvE5BcDPjWcq", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:53.067+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:28:46.757+0000"), 
    "code" : "public static void helloWorld (int x){\n    for (int i = 0; i < x; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 131.2, 
    "totalActiveTime" : 307.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:24:53.948+0000"), 
            "code" : "public class test {\n    public static void main (String[] args){\n        helloWorld(2);\n    }\n    public void helloWorld (int x){\n        for (int i = 0; i < x; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 176.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:46.757+0000"), 
            "code" : "public static void helloWorld (int x){\n    for (int i = 0; i < x; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 131.2
        }
    ]
}
{ 
    "_id" : "r7F9SxNsiyKo6SPuw", 
    "userId" : "irrvwjcTePd4SpvEH", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:29.964+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:25:00.727+0000"), 
    "code" : "public static void helloWorld (int n){\n    if(n>=0){\n\n        for(int i =0;i<n;i++){\n            System.out.println(\"Hello World!\");\n            \n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 39.5, 
    "totalActiveTime" : 206.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:22:13.294+0000"), 
            "code" : "public static void helloWorld (int n){\n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");\n        \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 92.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:20.140+0000"), 
            "code" : "public static void helloWorld (int n){\n    if(n<0){\n        break;\n    }\n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 74.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:00.726+0000"), 
            "code" : "public static void helloWorld (int n){\n    if(n>=0){\n\n        for(int i =0;i<n;i++){\n            System.out.println(\"Hello World!\");\n            \n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 39.5
        }
    ]
}
{ 
    "_id" : "ZPDD3QxNJNftreA9W", 
    "userId" : "ygYWJxcpYuGzwJgxD", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:30.155+0000"), 
    "updatedAt" : ISODate("2016-01-06T07:46:14.724+0000"), 
    "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 18.4, 
    "totalActiveTime" : 294.49999999999994, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:21:58.812+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 86.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:35.180+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:43.627+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:01.833+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:31.046+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-01-06T07:45:23.988+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 93.8
        }, 
        {
            "date" : ISODate("2016-01-06T07:45:56.404+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello Wold!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 32.4
        }, 
        {
            "date" : ISODate("2016-01-06T07:46:14.724+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 18.4
        }
    ]
}
{ 
    "_id" : "wJQJzJRxCsCeHbwot", 
    "userId" : "qqdgdohxLDJhyFhW6", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:06.696+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:28:28.057+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 15.8, 
    "totalActiveTime" : 411.09999999999997, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:22:32.342+0000"), 
            "code" : "public clcass helloWorld{\n    public static void main(String args[]){\n        helloWorld(5);\n    }\n    \n    public static void helloWorld(int n){\n        for(int i =0; i<n ;i++){\n            System.out.println(\"Hello World!\");\n        }\n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(83)
        }, 
        {
            "date" : ISODate("2016-01-06T04:22:57.060+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String args[]){\n        helloWorld(5);\n    }\n    \n    public static void helloWorld(int n){\n        for(int i =0; i<n ;i++){\n            System.out.println(\"Hello World!\");\n        }\n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:23:53.564+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String args[]){\n        helloWorld(5);\n    }\n    \n    public static void helloWorld(int n){\n        \n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.6
        }, 
        {
            "date" : ISODate("2016-01-06T04:23:56.396+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String args[]){\n        helloWorld(5);\n    }\n    \n    public static void helloWorld(int n){\n        \n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:08.962+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String args[]){\n        \n    }\n    \n    public static void helloWorld(int n){\n        for(int i =0; i<n ;i++){\n            System.out.println(\"Hello World!\");\n        }\n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.6
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:38.724+0000"), 
            "code" : "public static void helloWorld(int n){\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:02.463+0000"), 
            "code" : "public static void helloWorld(int n){\n    System.out.println(\"Hello World!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:10.531+0000"), 
            "code" : "public static void main(){\n    helloWorld(5);\n}\n\npublic static void helloWorld(int n){\n    for(int i =0;i<ni++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 67.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:21.253+0000"), 
            "code" : "public static void main(){\n    helloWorld(5);\n}\n\npublic static void helloWorld(int n){\n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 11.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:36.325+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 14.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:59.264+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!a\");    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 65.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:12.036+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!a\");    \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:28.056+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 15.8
        }
    ]
}
{ 
    "_id" : "huy6niyWkrRAqKkBK", 
    "userId" : "GxxmuhzndKTMqmrQv", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:13.827+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:28:01.534+0000"), 
    "status" : "PASS", 
    "activeTime" : 91.4, 
    "totalActiveTime" : 315.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:21:28.668+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:21:45.598+0000"), 
            "code" : "public static void main\n{\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:09.115+0000"), 
            "code" : "public static void helloWorld(int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 194.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:01.534+0000"), 
            "code" : "public static void helloWorld(int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 91.4
        }
    ], 
    "code" : "public static void helloWorld(int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        System.out.println(\"Hello World!\");\n    }\n}"
}
{ 
    "_id" : "rTKLEAiJiWnAugPyi", 
    "userId" : "PHCk5MRzg4Y2LY7iF", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:00.845+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:36:02.020+0000"), 
    "code" : "public static void helloWorld(int n) {\n        for (int i=0 ; i<n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 152.8, 
    "totalActiveTime" : 393.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:25:12.825+0000"), 
            "code" : "import java.util.*;\npublic class helloWorld {\n    public static void main(String[] args) {\n        helloWorld(3);\n        \n        \n    }\n    \n    public static void helloWorld(int n) {\n        for (int i=0 ; i<n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(222)
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:31.301+0000"), 
            "code" : "public static void main(String[] args) {\n        helloWorld(3);\n        \n        \n    }\n    \n    public static void helloWorld(int n) {\n        for (int i=0 ; i<n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 18.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:36:02.020+0000"), 
            "code" : "public static void helloWorld(int n) {\n        for (int i=0 ; i<n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 152.8
        }
    ]
}
{ 
    "_id" : "485FrHELN3xrJfc9Q", 
    "userId" : "Yaj7YvgTvcEPGbfAY", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:03.702+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:28:02.741+0000"), 
    "code" : "public static void helloWorld(int n){\n    \n    for(int i=0;i<n;i++){\n        System.out.println(\"Hello World!\");\n    } \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 75.7, 
    "totalActiveTime" : 364.00000000000006, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:23:32.675+0000"), 
            "code" : "public class Mystery{\n    public static void helloWorld(int n){\n        if(n>0){\n            for(int i=0;i<n;i++){\n                System.out.println(\"Hello World\");\n            } \n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(147)
        }, 
        {
            "date" : ISODate("2016-01-06T04:23:55.499+0000"), 
            "code" : "public static void helloWorld(int n){\n        if(n>0){\n            for(int i=0;i<n;i++){\n                System.out.println(\"Hello World\");\n            } \n        }\n    }", 
            "status" : "FAIL", 
            "activeTime" : 22.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:32.666+0000"), 
            "code" : "public static void helloWorld(int n){\n        if(n>0){\n            for(int i=0;i<n;i++){\n                System.out.println(\"Hello World!\");\n            } \n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:55.348+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        } \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 23.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:17.208+0000"), 
            "code" : "public static void helloWorld(int n){\n    //if(n>0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        } \n    //}\n}", 
            "status" : "PASS", 
            "activeTime" : 21.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:24.988+0000"), 
            "code" : "public static void helloWorld(int n){\n    //if(n>0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        } \n    //}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:39.365+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        } \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:46.348+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        } \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:56.285+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        } \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 10.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:02.740+0000"), 
            "code" : "public static void helloWorld(int n){\n    \n    for(int i=0;i<n;i++){\n        System.out.println(\"Hello World!\");\n    } \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 75.7
        }
    ]
}
{ 
    "_id" : "iQw6othRyNbrEBkYz", 
    "userId" : "ePfoGkY8kqhTSyLLY", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:23:59.209+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:30:30.245+0000"), 
    "code" : "public static void helloWorld(int n) {\n    for ( int i = 0 ; i < n ; i++ ) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 9.1, 
    "totalActiveTime" : 161.6, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:25:41.757+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for ( int i = 0 ; i < n ; i++ ) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 91.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:30:21.008+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for ( int i = 0 ; i < n ; i++ ) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(61)
        }, 
        {
            "date" : ISODate("2016-01-06T04:30:30.244+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for ( int i = 0 ; i < n ; i++ ) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.1
        }
    ]
}
{ 
    "_id" : "cahCYZ27DjL43y7To", 
    "userId" : "syTcfQGx6fjYD2DBD", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:23:59.580+0000"), 
    "updatedAt" : ISODate("2016-01-07T16:23:42.916+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n>0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 20.4, 
    "totalActiveTime" : 137.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:26:02.289+0000"), 
            "code" : "public static helloWorld(int n){\n    if(n>0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 117.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:22.365+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 20.4
        }
    ]
}
{ 
    "_id" : "rZeg5B28m2XjqQvmS", 
    "userId" : "AQRmNB6CFhFYkGMXp", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:26.697+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:27:00.213+0000"), 
    "code" : "public static void helloWorld(int num){\n    for (int i = 0; i< num; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 31.7, 
    "totalActiveTime" : 339.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:24:56.249+0000"), 
            "code" : "public static void helloWorld{\n    System.out.print(\"Enter integer:\");\n    int num = sc.nextInt();\n    while (num <=0){\n        System.out.print(\"Enter integer:\");\n        num = sc.nextInt();\n    }\n    for (int i = 0; i< num; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(237)
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:04.779+0000"), 
            "code" : "public static void helloWorld(int num){\n    for (int i = 0; i< num; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.6
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:23.094+0000"), 
            "code" : "public static helloWorld(int num){\n    for (int i = 0; i< num; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(19)
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:00.213+0000"), 
            "code" : "public static void helloWorld(int num){\n    for (int i = 0; i< num; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 31.7
        }
    ]
}
{ 
    "_id" : "GnnEqbp4BtKyoJMes", 
    "userId" : "deNytmPanwMx89S32", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:19:58.866+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:28:52.464+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 1; i <= n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 45.2, 
    "totalActiveTime" : 114.10000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:26:34.950+0000"), 
            "code" : "public void helloWorld(int n){\n    if(n >= 0){\n        for(int i = 1; i >= n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:07.432+0000"), 
            "code" : "public static void helloWorld(int n){\n    \n        for(int i = 1; i <= n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 46.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:52.464+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 1; i <= n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 45.2
        }
    ]
}
{ 
    "_id" : "9iF9CS2CRaASHR7YH", 
    "userId" : "uRgc5J6RJWEYcCCZL", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:37.492+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:32:22.021+0000"), 
    "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 148.4, 
    "totalActiveTime" : 511.29999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:25:22.577+0000"), 
            "code" : "import ava.util.Scanner;\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n =s.nextInt();\n        printHello(n);\n    }\n    \n    public void printHello(int n) {\n        for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(241)
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:58.132+0000"), 
            "code" : "import ava.util.Scanner;\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        printHello(n);\n    }\n    \n    public void printHello(int n) {\n        for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:07.934+0000"), 
            "code" : "import java.util.Scanner;\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        printHello(n);\n    }\n    \n    public void printHello(int n) {\n        for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:45.269+0000"), 
            "code" : "import java.util.Scanner;\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        printHello(n);\n    }\n    \n    public static void printHello(int n) {\n        for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:15.984+0000"), 
            "code" : "public static void printHello(int n) {\n    for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:29.589+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-01-06T04:32:22.020+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 148.4
        }
    ]
}
{ 
    "_id" : "RTczWWbscp78DHW7G", 
    "userId" : "Fkhs6HExYed55kD3M", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:22:52.205+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:26:55.685+0000"), 
    "code" : "public static void helloWorld(int n){\n        for(int k=0;k<n;k++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 52.6, 
    "totalActiveTime" : 223.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:24:00.791+0000"), 
            "code" : "public static void main (String[]args){\n    \n    System.out.println(\"Hello World!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 66.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:47.472+0000"), 
            "code" : "int n=1;\n    \n    for(int k=0;k<n;k++){\n        System.out.println(\"Hello World!\");\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(94)
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:56.997+0000"), 
            "code" : "int n=1;\n    \n    for(int k=0;k<n;k++){\n        System.out.println(\"Hello World!\");\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:55.685+0000"), 
            "code" : "public static void helloWorld(int n){\n        for(int k=0;k<n;k++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 52.6
        }
    ]
}
{ 
    "_id" : "jvc6hFf2P7LWtaiKB", 
    "userId" : "HxRQyLBNbT6ioztcb", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:42.182+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:35:27.493+0000"), 
    "code" : "public static void helloWorld(int n) {\n\n        for(int i=1;i<=n;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 40.8, 
    "totalActiveTime" : 612.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:23:10.348+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String[]args){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 125.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:53.689+0000"), 
            "code" : "public class HelloWorld {\n\n    public static void main(String[] args) {\n        // Prints \"Hello, World\" to the terminal window.\n        System.out.println(\"Hello, World\");\n    }\n\n}\n\n\n\n/*\n\npublic class HelloWorld{\n    public static void main(String[]args){\n        System.out.println(\"Hello World!\");\n    }\n}\n*/", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 67.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:05.264+0000"), 
            "code" : "public class HelloWorld {\n\n    public static void main(String[] args) {\n        // Prints \"Hello, World\" to the terminal window.\n        System.out.println(\"Hello, World\");\n    }\n\n}\n\n\n\n/*\n\npublic class HelloWorld{\n    public static void main(String[]args){\n        System.out.println(\"Hello World!\");\n    }\n}\n*/", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:10.574+0000"), 
            "code" : "public class HelloWorld {\n\n    public static void main(String[] args) {\n        // Prints \"Hello, World\" to the terminal window.\n       // System.out.println(\"Hello, World\");\n    }\n\n}\n\n\n\n/*\n\npublic class HelloWorld{\n    public static void main(String[]args){\n        System.out.println(\"Hello World!\");\n    }\n}\n*/", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:13.011+0000"), 
            "code" : "public class HelloWorld {\n\n    public static void main(String[] args) {\n        // Prints \"Hello, World\" to the terminal window.\n       // System.out.println(\"Hello, World\");\n       int x=2;\n       \n    }\n\n}\n\n\n\n/*\n\npublic class HelloWorld{\n    public static void main(String[]args){\n        System.out.println(\"Hello World!\");\n    }\n}\n*/", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:15.373+0000"), 
            "code" : "public class HelloWorld {\n\n    public static void main(String[] args) {\n        // Prints \"Hello, World\" to the terminal window.\n        System.out.println(\"Hello, World\");\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 73.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:35.845+0000"), 
            "code" : "public class HelloWorld {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World\");\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-01-06T04:33:51.492+0000"), 
            "code" : "public class HelloWorld {\n\n    public static void main(String[] args) {\n        int n=3;\n        for(int i=1;i<=3;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 136.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:34:46.177+0000"), 
            "code" : "public static void helloWorld(int n) {\n        this.n=3;\n        for(int i=1;i<=3;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 54.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:35:27.492+0000"), 
            "code" : "public static void helloWorld(int n) {\n\n        for(int i=1;i<=n;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 40.8
        }
    ]
}
{ 
    "_id" : "hj7ZApYsqCKSWhXpK", 
    "userId" : "8tdkkT7ppwShevv6z", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:22:20.971+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:27:19.481+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n>0){\n      for(int i = 0; i < n; i++){\n          System.out.println(\"Hello World!\");\n      }  \n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(63), 
    "totalActiveTime" : 244.60000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:25:49.503+0000"), 
            "code" : "public static helloWorld(int n){\n    if(n>0){\n      for(int i = 0; i < n; i++){\n          System.out.println(\"Hello World!\");\n      }  \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 173.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:57.047+0000"), 
            "code" : "public static helloWorld(int n){\n    if(n>0){\n      for(int i = 0; i < n; i++){\n          System.out.println(\"Hello World!\");\n      }  \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:19.480+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>0){\n      for(int i = 0; i < n; i++){\n          System.out.println(\"Hello World!\");\n      }  \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(63)
        }
    ]
}
{ 
    "_id" : "tmQ4hyeWQa6LWoTNe", 
    "userId" : "NNWqGaLJp79xqMKyo", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:34.347+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:31:41.765+0000"), 
    "code" : "public static void helloWorld(int n){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 10.7, 
    "totalActiveTime" : 544.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:25:50.241+0000"), 
            "code" : "import java.util.*;\npublic class HelloWorld {\n    public static void main (String [] args){\n        int n = 0;\n        do{\n            System.out.print(\"Enter integer: \");\n            Scanner sc = new Scanner(System.in);\n            n = sc.nextInt();\n        }while(n<1);\n        print(\"Hello World!\", n);\n    }\n    public static void print(String name, int n){\n        for(int i=0; i<n; i++){\n            System.out.println(name);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 288.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:29.324+0000"), 
            "code" : "import java.util.*;\npublic class HelloWorld {\n    public static void main (String [] args){\n        int n = 0;\n        do{\n            System.out.print(\"Enter integer: \");\n            Scanner sc = new Scanner(System.in);\n            n = sc.nextInt();\n        }while(n<1);\n        print(\"Hello World!\", n);\n    }\n    public static void print(String name, int n){\n        for(int i=0; i<n; i++){\n            System.out.println(name);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 72.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:44.470+0000"), 
            "code" : "import java.util.*;\npublic class HelloWorld {\n    public static void main (String [] args){\n        int n = 0;\n        do{\n            System.out.print(\"Enter integer: \");\n            Scanner sc = new Scanner(System.in);\n            n = sc.nextInt();\n        }while(n<=0);\n        print(\"Hello World!\", n);\n    }\n    public static void print(String name, int n){\n        for(int i=0; i<n; i++){\n            System.out.println(name);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:34.828+0000"), 
            "code" : "import java.util.Scanner;\npublic class HelloWorld {\n    public static void main (String [] args){\n        int n = 0;\n        do{\n            System.out.print(\"Enter integer: \");\n            Scanner sc = new Scanner(System.in);\n            n = sc.nextInt();\n        }while(n<=0);\n        print(\"Hello World!\", n);\n    }\n    public static void print(String name, int n){\n        for(int i=0; i<n; i++){\n            System.out.println(name);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:30:57.869+0000"), 
            "code" : "public static void print(String name, int n){\n        for(int i=0; i<n; i++){\n            System.out.println(name);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:29.724+0000"), 
            "code" : "public static void helloWorld(int n){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:41.765+0000"), 
            "code" : "public static void helloWorld(int n){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 10.7
        }
    ]
}
{ 
    "_id" : "W4HTpniNBxj4jzyfP", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:16.901+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:28:36.785+0000"), 
    "code" : "public static void helloWorld(int k){\n    \n    if(k>=1){\n        for(int i= 1;i<=k;i++){\n            System.out.println(\"Hello World!\");\n            \n        }\n        \n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 28.1, 
    "totalActiveTime" : 306.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:27:25.242+0000"), 
            "code" : "public static void helloWorld(int k){\n    \n    if(k>=1){\n        for(int i= 0;i<=k;i++){\n            System.out.println(\"Hello World!\")\n            \n        }\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 266.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:36.889+0000"), 
            "code" : "public static void helloWorld(int k){\n    \n    if(k>=1){\n        for(int i= 0;i<=k;i++){\n            System.out.println(\"Hello World!\");\n            \n        }\n        \n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:36.784+0000"), 
            "code" : "public static void helloWorld(int k){\n    \n    if(k>=1){\n        for(int i= 1;i<=k;i++){\n            System.out.println(\"Hello World!\");\n            \n        }\n        \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 28.1
        }
    ]
}
{ 
    "_id" : "9C7eGWWKu9HSXXfer", 
    "userId" : "gTtxiT2P5stbcskjT", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:23:19.612+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:29:09.902+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 2.9, 
    "totalActiveTime" : 313.29999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:26:07.480+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class helloWorld{\n    public static void main(String args[]){\n        Scanner sc = new Scanner();\n        int n = sc.nextInt();\n        sc.nextLine();\n        \n        for(int i = 0; i <= n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 155.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:23.492+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i <= n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 134.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:43.836+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.6
        }, 
        {
            "date" : ISODate("2016-01-06T04:29:09.902+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.9
        }
    ]
}
{ 
    "_id" : "6TCavHC6ZfXtYwvyG", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:24.594+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:32:46.206+0000"), 
    "code" : "public static void helloWorld(int x){\n    if(x >= 0){\n\t    for(int i = 0; i < x; i++){\n\t        System.out.println(\"Hello World!\");\n\t        \n\t    }\n    }    \n\t    \n}", 
    "status" : "PASS", 
    "activeTime" : 59.1, 
    "totalActiveTime" : 549.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:25:21.661+0000"), 
            "code" : "public class Test{\n\tpublic\tstatic\tvoid\tmain(String[]\targs)\t{\n\t       \n\t    helloWorld(3); \n\t        \n\t    }\n\t    \n\t    \n\t}\n\tpublic void helloWorld(int x){\n\t    for(int i = 0; i < x; i++){\n\t        System.out.println(\"Hello World\");\n\t        \n\t    }\n\t}    \n\t    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 255.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:02.928+0000"), 
            "code" : "public class Test{\n\tpublic\tstatic\tvoid\tmain(String[]\targs)\t{\n\t       \n\t    helloWorld(3); \n\t        \n\t    }\n\t    \n\t    \n\t}\n\tpublic static void helloWorld(int x){\n\t    for(int i = 0; i < x; i++){\n\t        System.out.println(\"Hello World\");\n\t        \n\t    }\n\t}    \n\t    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:26:32.128+0000"), 
            "code" : "public class Test{\n\tpublic\tstatic\tvoid\tmain(String[]\targs)\t{\n\t       \n\t    helloWorld(3); \n\t        \n\t    \n\t    \n\t    \n\t}\n\tpublic static void helloWorld(int x){\n\t    for(int i = 0; i < x; i++){\n\t        System.out.println(\"Hello World\");\n\t        \n\t    }\n\t}    \n\t    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:44.213+0000"), 
            "code" : "public static void helloWorld(int x){\n\t for(int i = 0; i < x; i++){\n\t    System.out.println(\"Hello World\");\n\t        \n\t }\n\t    \n\t    \n}", 
            "status" : "FAIL", 
            "activeTime" : 65.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:29:10.725+0000"), 
            "code" : "public static void helloWorld(int x){\n    if(n > = 0){\n\t    for(int i = 0; i < x; i++){\n\t        System.out.println(\"Hello World\");\n\t        \n\t    }\n    }    \n\t    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 78.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:29:22.796+0000"), 
            "code" : "public static void helloWorld(int x){\n    if(n >= 0){\n\t    for(int i = 0; i < x; i++){\n\t        System.out.println(\"Hello World\");\n\t        \n\t    }\n    }    \n\t    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:29:35.381+0000"), 
            "code" : "public static void helloWorld(int x){\n    if(x >= 0){\n\t    for(int i = 0; i < x; i++){\n\t        System.out.println(\"Hello World\");\n\t        \n\t    }\n    }    \n\t    \n}", 
            "status" : "FAIL", 
            "activeTime" : 12.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:32:46.206+0000"), 
            "code" : "public static void helloWorld(int x){\n    if(x >= 0){\n\t    for(int i = 0; i < x; i++){\n\t        System.out.println(\"Hello World!\");\n\t        \n\t    }\n    }    \n\t    \n}", 
            "status" : "PASS", 
            "activeTime" : 59.1
        }
    ]
}
{ 
    "_id" : "q6bSHCKQ9uzcSncqB", 
    "userId" : "dttmwWTXpP7m8dRep", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:22:03.740+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:31:46.805+0000"), 
    "code" : "public static void helloWorld (int n){\n    if(n >= 0) {\n        for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    } else {\n        System.out.println(\"Input must be positive!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(15), 
    "totalActiveTime" : 502.29999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:27:45.112+0000"), 
            "code" : "public static void helloworld (int i){\n    if(i < 0) {\n        for(int n = 0; n < i; n++) {\n            System.out.println(\"Hello World!\");\n        }\n    } else {\n        System.out.println(\"Input must be positive!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(321)
        }, 
        {
            "date" : ISODate("2016-01-06T04:29:41.764+0000"), 
            "code" : "public static void helloworld (int i){\n    if(i >= 0) {\n        for(int n = 0; n < i; n++) {\n            System.out.println(\"Hello World!\");\n        }\n    } else {\n        System.out.println(\"Input must be positive!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(70)
        }, 
        {
            "date" : ISODate("2016-01-06T04:30:02.381+0000"), 
            "code" : "public static void helloworld (int i){\n    if(i >= 0) {\n        for(int n = 0; n < i; n++) {\n            System.out.println(\"Hello World!\");\n        }\n    } else {\n        System.out.println(\"Input must be positive!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:30.628+0000"), 
            "code" : "public static void helloworld (int n){\n    if(n >= 0) {\n        for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    } else {\n        System.out.println(\"Input must be positive!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 75.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:46.804+0000"), 
            "code" : "public static void helloWorld (int n){\n    if(n >= 0) {\n        for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    } else {\n        System.out.println(\"Input must be positive!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(15)
        }
    ]
}
{ 
    "_id" : "2W5sNrqtxc48FQktp", 
    "userId" : "fzFhAfCHiwc4842pK", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:26:12.392+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:31:37.489+0000"), 
    "code" : "public static void helloWorld(int n){\n    \n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 33.2, 
    "totalActiveTime" : 271.40000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:28:50.636+0000"), 
            "code" : "public static int helloWorld(int n){\n    for(int i =0;i++;i<n){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 118.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:58.740+0000"), 
            "code" : "public static int helloWorld(int n){\n    for(int i =0;i++;i<n){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:29:23.932+0000"), 
            "code" : "public static int helloWorld(int n){\n    \n    for(int i =0;i++;i<n){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.6
        }, 
        {
            "date" : ISODate("2016-01-06T04:30:37.060+0000"), 
            "code" : "public static void helloWorld(int n){\n    \n    for(int i =0;i++;i<n){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 61.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:02.740+0000"), 
            "code" : "public static void helloWorld(int n){\n    \n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 25.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:37.488+0000"), 
            "code" : "public static void helloWorld(int n){\n    \n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.2
        }
    ]
}
{ 
    "_id" : "8HrS2ZqQ6yffkgmBc", 
    "userId" : "npFvwTrBtJqZaqBnz", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:19:50.620+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:32:58.377+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n >= 0){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }else{\n        System.out.println(\"Error found.\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 9.7, 
    "totalActiveTime" : 194.2, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:22:13.829+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n >= 0){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }else{\n        System.out.println(\"Error found.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 118.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:32:48.580+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n >= 0){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }else{\n        System.out.println(\"Error found.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 66.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:32:58.377+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n >= 0){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }else{\n        System.out.println(\"Error found.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.7
        }
    ]
}
{ 
    "_id" : "8RsyboSdycnQKPSbg", 
    "userId" : "AQE3C864LiYQeAJvX", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:49.179+0000"), 
    "updatedAt" : ISODate("2016-01-06T06:06:36.790+0000"), 
    "code" : "public static void helloWorld(int n){\n       \n    for (int i = 1; i <=n; i++){\n        System.out.println(\"Hello World!\");\n    }\n\n}", 
    "status" : "PASS", 
    "activeTime" : 3.1, 
    "totalActiveTime" : 621.5999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:22:56.394+0000"), 
            "code" : "public class helloWorld{\n    public static main String []\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 61.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:40.459+0000"), 
            "code" : "public class helloWorld{\n    public static void main (String []args){\n        \n    for (int i =0; i <=n; i++){\n        System.out.println(\"Hello World!\")\n    }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 259.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:29:19.260+0000"), 
            "code" : "public class helloWorld{\n    public static void main (String []args){\n    \n    int i =5;    \n    for (i =0; i <=n; i++){\n        System.out.println(\"Hello World!\")\n    }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:29:25.653+0000"), 
            "code" : "public class helloWorld{\n    public static void main (String []args){\n    \n    int i =5;    \n    for (i =0; i <=n; i++){\n        System.out.println(\"Hello World!\")\n    }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:33.688+0000"), 
            "code" : "public class helloWorld{\n    public static void main (String []args){\n    \n    int i =5;    \n    for (i =0; i <=n; i++){\n        System.out.println(\"Hello World!\")\n    }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 110.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:58.629+0000"), 
            "code" : "public void printLine(){\n    int i =5;    \n    for (i =0; i <=n; i++){\n        System.out.println(\"Hello World!\")\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:32:28.852+0000"), 
            "code" : "public void printLine(){\n    int i =5;    \n    for (i =0; i <=n; i++){\n        System.out.println(\"Hello World!\")\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:32:51.780+0000"), 
            "code" : "public void printLine(){\n    int i =5;    \n    for (i =0; i <=n; i++){\n        System.out.println(\"Hello World!\")\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:34:04.742+0000"), 
            "code" : "public void helloWorld(int n){\n    int n =5;    \n    for (n =0; n <=n; n++){\n        System.out.println(\"Hello World!\")\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 54.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:34:17.108+0000"), 
            "code" : "public static void helloWorld(int n){\n    int n =5;    \n    for (n =0; n <=n; n++){\n        System.out.println(\"Hello World!\")\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:34:33.252+0000"), 
            "code" : "public static void helloWorld(int n){\n    int n =5;    \n    for (n =0; n <=n; n++){\n        System.out.println(\"Hello World!\");\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.9
        }, 
        {
            "date" : ISODate("2016-01-06T06:06:36.789+0000"), 
            "code" : "public static void helloWorld(int n){\n       \n    for (int i = 1; i <=n; i++){\n        System.out.println(\"Hello World!\");\n    }\n\n}", 
            "status" : "PASS", 
            "activeTime" : 3.1
        }
    ]
}
{ 
    "_id" : "enLBQammzsfXw25NJ", 
    "userId" : "9MC3eGkXAs3uq2roA", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:23:54.663+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:35:16.308+0000"), 
    "code" : "public static void helloWorld(int n){\n        if(n >=0){\n            for(int i=0;i<n;i++){\n                System.out.println(\"Hello World!\");\n            }\n        }\n    \n    }", 
    "status" : "PASS", 
    "activeTime" : 22.3, 
    "totalActiveTime" : 528.6999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:31:47.589+0000"), 
            "code" : "public static void helloWorld(int n){\n    while(n >=0){\n        System.out.println(\"Hello World!\");\n        n--\n    }\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(320)
        }, 
        {
            "date" : ISODate("2016-01-06T04:32:08.164+0000"), 
            "code" : "public static void helloWorld(int n){\n    while(n >=0){\n        System.out.println(\"Hello World!\");\n        n--\n    }\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(21)
        }, 
        {
            "date" : ISODate("2016-01-06T04:34:09.860+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n >=0){\n        for(i=0;i<=n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 121.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:34:21.700+0000"), 
            "code" : "public static void helloWorld(int n){\n        if(n >=0){\n            for(i=0;i<=n;i++){\n                System.out.println(\"Hello World!\");\n            }\n        }\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:34:54.278+0000"), 
            "code" : "public static void helloWorld(int n){\n        if(n >=0){\n            for(int i=0;i<=n;i++){\n                System.out.println(\"Hello World!\");\n            }\n        }\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 32.3
        }, 
        {
            "date" : ISODate("2016-01-06T04:35:16.308+0000"), 
            "code" : "public static void helloWorld(int n){\n        if(n >=0){\n            for(int i=0;i<n;i++){\n                System.out.println(\"Hello World!\");\n            }\n        }\n    \n    }", 
            "status" : "PASS", 
            "activeTime" : 22.3
        }
    ]
}
{ 
    "_id" : "fPv5iLkcXNvpRN8ab", 
    "userId" : "83sR4z6favCnL8oBj", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:39:00.500+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:40:15.733+0000"), 
    "code" : "public static void helloWorld(int n) {\n    if (n >= 0) {\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(16), 
    "totalActiveTime" : 70.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:39:59.716+0000"), 
            "code" : "public static void helloworld(int n) {\n    if (n >= 0) {\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 54.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:40:15.732+0000"), 
            "code" : "public static void helloWorld(int n) {\n    if (n >= 0) {\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(16)
        }
    ]
}
{ 
    "_id" : "wdzZbffweuTzDEapv", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "tjT8aA26Lx2PTifGd", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-05T14:58:56.268+0000"), 
    "updatedAt" : ISODate("2016-01-06T05:37:29.542+0000"), 
    "code" : "public static int adder(int a, int b){\n    return a + b\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 11.7, 
    "totalActiveTime" : 157.39999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T05:33:32.162+0000"), 
            "code" : "public", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-01-06T05:35:26.517+0000"), 
            "code" : "public", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.7
        }, 
        {
            "date" : ISODate("2016-01-06T05:37:00.388+0000"), 
            "code" : "public static int add(int a, int b){\n    return a + b;\n}", 
            "status" : "PASS", 
            "activeTime" : 89.9
        }, 
        {
            "date" : ISODate("2016-01-06T05:37:16.372+0000"), 
            "code" : "public static int add(int a, int b){\n    return a + b\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.2
        }, 
        {
            "date" : ISODate("2016-01-06T05:37:29.541+0000"), 
            "code" : "public static int adder(int a, int b){\n    return a + b\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.7
        }
    ]
}
{ 
    "_id" : "RomhCRP6gjtgfwFbK", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-06T07:39:13.367+0000"), 
    "updatedAt" : ISODate("2016-01-06T07:39:13.368+0000")
}
{ 
    "_id" : "CtvxrpNgGXMnuMfmT", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T07:42:11.411+0000"), 
    "updatedAt" : ISODate("2016-01-06T07:43:19.141+0000"), 
    "code" : "public static void helloWorld(int n){\n    \n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 145.1, 
    "totalActiveTime" : 145.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T07:43:19.141+0000"), 
            "code" : "public static void helloWorld(int n){\n    \n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 145.1
        }
    ]
}
{ 
    "_id" : "wbMFX8tnvj5JPY9L3", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "tjT8aA26Lx2PTifGd", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T07:39:01.934+0000"), 
    "updatedAt" : ISODate("2016-01-06T07:49:15.881+0000"), 
    "code" : "public static int add(int a, int b){\n    return a+b;\n}", 
    "status" : "PASS", 
    "activeTime" : 276.8, 
    "totalActiveTime" : 276.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T07:49:15.880+0000"), 
            "code" : "public static int add(int a, int b){\n    return a+b;\n}", 
            "status" : "PASS", 
            "activeTime" : 276.8
        }
    ]
}
{ 
    "_id" : "QTcP25QyF79aGyK62", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "boxJennKMpdxAJWvY", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-06T07:49:45.766+0000"), 
    "updatedAt" : ISODate("2016-01-06T07:49:45.766+0000")
}
{ 
    "_id" : "REPrJ8iXHkDg8Mscd", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "4xhRcdNx5YDQACSyn", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-06T07:58:00.057+0000"), 
    "updatedAt" : ISODate("2016-01-06T07:58:00.057+0000")
}
{ 
    "_id" : "koMXhsre5ziHdJt9d", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "yM4PGW8ucjJXZfkZh", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-06T08:09:21.443+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:09:21.443+0000")
}
{ 
    "_id" : "CQGdnrXtEWLPiDuKM", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "pbmebaKzntYehi372", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T08:25:19.734+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:26:57.765+0000"), 
    "code" : "public static int calculate(double x, int y, int z){\n    \n    int xInt = (int) x;\n    \n    int subtracted = xInt - y;\n    \n    return subtracted/z;\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 120.3, 
    "totalActiveTime" : 120.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T08:26:57.765+0000"), 
            "code" : "public static int calculate(double x, int y, int z){\n    \n    int xInt = (int) x;\n    \n    int subtracted = xInt - y;\n    \n    return subtracted/z;\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 120.3
        }
    ]
}
{ 
    "_id" : "LehegBkxTgBEF8JEm", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "L46REaDboHACstAXr", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T08:27:17.878+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:28:35.769+0000"), 
    "code" : "public static void quotify(String str){\n    \n    \n    \n    System.out.println(\"\\\"\" + str + \"\\\"\" );\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(79), 
    "totalActiveTime" : NumberInt(79), 
    "history" : [
        {
            "date" : ISODate("2016-01-06T08:28:35.769+0000"), 
            "code" : "public static void quotify(String str){\n    \n    \n    \n    System.out.println(\"\\\"\" + str + \"\\\"\" );\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(79)
        }
    ]
}
{ 
    "_id" : "ubk3weFEXwkTgmbrb", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "m8u4AidaqHqXybizW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T08:28:52.795+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:29:43.506+0000"), 
    "code" : "public static double doubleInt(int a, int b){\n    \n    \n    \n    return (double) a + b;\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 62.4, 
    "totalActiveTime" : 62.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T08:29:43.505+0000"), 
            "code" : "public static double doubleInt(int a, int b){\n    \n    \n    \n    return (double) a + b;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 62.4
        }
    ]
}
{ 
    "_id" : "wvD7P9jvHw4cPBsph", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T08:42:12.648+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:44:41.921+0000"), 
    "code" : "public static int power (int base, int exponent){\n    \n    return (int) java.lang.Math.pow(base, exponent);\n}", 
    "status" : "PASS", 
    "activeTime" : 44.4, 
    "totalActiveTime" : 113.30000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T08:42:41.708+0000"), 
            "code" : "public static int power (int base, int exponent){\n    \n    return Math.power(base, exponent);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.7
        }, 
        {
            "date" : ISODate("2016-01-06T08:43:13.397+0000"), 
            "code" : "public static int power (int base, int exponent){\n    \n    return java.lang.Math.power(base, exponent);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-01-06T08:43:33.044+0000"), 
            "code" : "public static int power (int base, int exponent){\n    \n    return java.lang.Math.exp(base, exponent);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.9
        }, 
        {
            "date" : ISODate("2016-01-06T08:43:53.604+0000"), 
            "code" : "public static int power (int base, int exponent){\n    \n    return java.lang.Math.pow(base, exponent);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-01-06T08:44:41.920+0000"), 
            "code" : "public static int power (int base, int exponent){\n    \n    return (int) java.lang.Math.pow(base, exponent);\n}", 
            "status" : "PASS", 
            "activeTime" : 44.4
        }
    ]
}
{ 
    "_id" : "gWqvyA5WWdvKc7hQv", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "aMtdrRRTC8YiPKSev", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-06T08:44:56.498+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:44:56.498+0000")
}
{ 
    "_id" : "A52DJZADxRB9HfPdm", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "Q6ZNCsxjmBCvxvcMF", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-06T08:45:30.025+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:45:30.025+0000")
}
{ 
    "_id" : "QbNZEoCCJLBPacW2F", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "9YWX38nnt22knJscf", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-06T08:45:46.593+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:45:46.593+0000")
}
{ 
    "_id" : "R2RtTiLBMMN2JDSsM", 
    "userId" : "HShpsRKvXugq6ZwBc", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:20:26.024+0000"), 
    "updatedAt" : ISODate("2016-01-06T09:36:16.981+0000"), 
    "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(5), 
    "totalActiveTime" : 79.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:21:18.757+0000"), 
            "code" : "public static hellWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(51)
        }, 
        {
            "date" : ISODate("2016-01-06T04:21:33.624+0000"), 
            "code" : "public static void hellWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:21:42.897+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-01-06T09:36:16.981+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(5)
        }
    ]
}
{ 
    "_id" : "8mv46v3Bhami6EL97", 
    "userId" : "o2nCdpiziTjetjyiC", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T16:00:10.051+0000"), 
    "updatedAt" : ISODate("2016-01-06T16:01:15.217+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }else{\n        return;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 60.5, 
    "totalActiveTime" : 60.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T16:01:15.217+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }else{\n        return;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 60.5
        }
    ]
}
{ 
    "_id" : "z8aFsoJhmx5fKN7Mr", 
    "userId" : "Y2iqMWBsKaPKSkjRG", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false, 
    "updatedAt" : ISODate("2016-01-07T06:00:43.033+0000")
}
{ 
    "_id" : "D7YtoY2rxe8aiixxk", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false, 
    "updatedAt" : ISODate("2016-01-07T04:38:18.817+0000")
}
{ 
    "_id" : "H5byezFftT5Zgsc4h", 
    "userId" : "Y2iqMWBsKaPKSkjRG", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T04:44:30.363+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:00:43.038+0000")
}
{ 
    "_id" : "XgQtXeJpq5MJ5HCAj", 
    "userId" : "mY7tSzSi7iPqEBbJB", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T05:07:24.589+0000"), 
    "updatedAt" : ISODate("2016-01-07T05:30:11.369+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i=1; i<=n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 21.3, 
    "totalActiveTime" : 75.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T05:08:23.991+0000"), 
            "code" : "public static void helloWorld(int i){\n    for(int i=1; i<=n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(54)
        }, 
        {
            "date" : ISODate("2016-01-07T05:08:44.989+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=1; i<=n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 21.3
        }
    ]
}
{ 
    "_id" : "SjYgthfks4BDf9T8d", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "vR7wCjPDTy9XSjYiv", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:27:41.619+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:16:28.781+0000")
}
{ 
    "_id" : "KiHHZYBS5kLqQn2i9", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "xDfNfEq2fazixRvqR", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:28:47.934+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:16:28.793+0000")
}
{ 
    "_id" : "tNpfMDCBGKMqg3ofP", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "oXuwBCxZG6Mw6J2Gd", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:53:54.840+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:16:28.808+0000")
}
{ 
    "_id" : "WioXTCnnmyAkmuxai", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "aMtdrRRTC8YiPKSev", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:59:25.722+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:16:28.814+0000")
}
{ 
    "_id" : "6fadJQ3dHzg9fQRYA", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "WwWBx6tXuhhJiNobG", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:59:44.760+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:16:28.819+0000")
}
{ 
    "_id" : "Yb5iRCmMjBcL2CWne", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "4gGxjgkpZNbmLKFfL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T06:01:11.483+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:03:42.393+0000")
}
{ 
    "_id" : "fksbgTM5sWQhTWgKr", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "aMtdrRRTC8YiPKSev", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T06:29:19.932+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:33:29.628+0000")
}
{ 
    "_id" : "xX6set8EQzcKxqv5N", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "aMtdrRRTC8YiPKSev", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T07:19:14.995+0000"), 
    "updatedAt" : ISODate("2016-01-09T13:16:46.361+0000")
}
{ 
    "_id" : "ff5kQBauE2jex3C9a", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T07:55:27.426+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:56:56.631+0000")
}
{ 
    "_id" : "vKJQzrvACWM6TMCN4", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "kPXtcRnhvN9ZHW47e", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T12:50:47.157+0000"), 
    "updatedAt" : ISODate("2016-01-09T17:11:21.689+0000"), 
    "code" : "public class Book {\n    private String title;\n    private int price;\n    \n    public void setTitle(String _title) {\n        title = _title;\n    }\n    \n    public void setPrice(int _price) {\n        price = _price;\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public int getPrice() {\n        return price;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 252.7, 
    "totalActiveTime" : 252.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T12:56:49.669+0000"), 
            "code" : "public class Book {\n    private String title;\n    private int price;\n    \n    public void setTitle(String _title) {\n        title = _title;\n    }\n    \n    public void setPrice(int _price) {\n        price = _price;\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public int getPrice() {\n        return price;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 252.7
        }
    ]
}
{ 
    "_id" : "9aeuDPs7wfDWMKR39", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "LjKCNwu2tEYd8T4JP", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T17:00:45.638+0000"), 
    "updatedAt" : ISODate("2016-01-07T17:00:59.329+0000")
}
{ 
    "_id" : "bsx7roNvBjb2YqvCt", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "wFkyqnmP6G7fxJemw", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-08T03:37:20.475+0000"), 
    "updatedAt" : ISODate("2016-01-08T03:37:25.006+0000")
}
{ 
    "_id" : "fu8h5D92aCYZxHXR3", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "kPXtcRnhvN9ZHW47e", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-08T04:40:08.379+0000"), 
    "updatedAt" : ISODate("2016-01-08T05:59:00.777+0000")
}
{ 
    "_id" : "xREbqjbLFZTXwbTTg", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "Wc6Zhy6364fqmnMk6", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-08T04:41:04.944+0000"), 
    "updatedAt" : ISODate("2016-01-08T05:59:02.427+0000")
}
{ 
    "_id" : "2KtyfRL9QbaXBhnTn", 
    "userId" : "5ncPQugL7uzRKQC92", 
    "questionId" : "Wc6Zhy6364fqmnMk6", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-08T05:21:02.510+0000"), 
    "updatedAt" : ISODate("2016-01-08T05:21:32.890+0000")
}
{ 
    "_id" : "eA4ztm97AZ3wuPj5B", 
    "userId" : "68LkTBk27sS7rTZ2u", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T13:02:57.299+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:02:57.299+0000")
}
{ 
    "_id" : "NxFrS2GzcyFMA4PPB", 
    "userId" : "AKhJG4uKYeAwzvXNi", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:24.837+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:31:20.997+0000"), 
    "code" : "public static void helloWorld(int n){\n        for (int i =0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 23.2, 
    "totalActiveTime" : 562.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:24:21.670+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class helloWorld{\n    do{\n    Scanner sc = new Scanner (System.in);\n    System.out.print(\"Enter an integer: \");\n    int x = sc.nextInt();\n    } while (x < 0);\n    \n    for (int i =0; i < x; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 172.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:44.677+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class helloWorld{\n    int x = 0;\n    do{\n    Scanner sc = new Scanner (System.in);\n    System.out.print(\"Enter an integer: \");\n     x = sc.nextInt();\n    } while (x < 0);\n    \n    for (int i =0; i < x; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:42.132+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class helloWorld{\n    int n = 0;\n    do{\n    Scanner sc = new Scanner (System.in);\n    System.out.print(\"Enter an integer: \");\n     n = sc.nextInt();\n    } while (n < 0);\n    \n    for (int i =0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 57.1
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:46.765+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class helloWorld{\n    public static void main (String [] args){\n        int n = 0;\n        do{\n        Scanner sc = new Scanner (System.in);\n        System.out.print(\"Enter an integer: \");\n         n = sc.nextInt();\n        } while (n < 0);\n        helloWorld(n);\n    }\n    \n    public static helloWorld(int n)\n    for (int i =0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 124.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:59.224+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class Test{\n    public static void main (String [] args){\n        int n = 0;\n        do{\n        Scanner sc = new Scanner (System.in);\n        System.out.print(\"Enter an integer: \");\n         n = sc.nextInt();\n        } while (n < 0);\n        helloWorld(n);\n    }\n    \n    public static helloWorld(int n)\n    for (int i =0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:22.404+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class Test{\n    public static void main (String [] args){\n        int n = 0;\n        do{\n        Scanner sc = new Scanner (System.in);\n        System.out.print(\"Enter an integer: \");\n         n = sc.nextInt();\n        } while (n < 0);\n        helloWorld(n);\n    }\n    \n    public static helloWorld(int n){\n        for (int i =0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:28:42.790+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class helloWorld{\n    public static void main (String [] args){\n        int n = 0;\n        do{\n        Scanner sc = new Scanner (System.in);\n        System.out.print(\"Enter an integer: \");\n         n = sc.nextInt();\n        } while (n < 0);\n        helloWorld(n);\n    }\n    \n    public static helloWorld(int n){\n        for (int i =0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:30:42.420+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class helloWorld{\n    public static void main (String [] args){\n        int n = 0;\n        do{\n        Scanner sc = new Scanner (System.in);\n        System.out.print(\"Enter an integer: \");\n         n = sc.nextInt();\n        } while (n < 0);\n        \n        print(n);\n    }\n    \n    public static print(int n){\n        for (int i =0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 90.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:30:57.916+0000"), 
            "code" : "public static print(int n){\n        for (int i =0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.4
        }, 
        {
            "date" : ISODate("2016-01-06T04:31:20.997+0000"), 
            "code" : "public static void helloWorld(int n){\n        for (int i =0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 23.2
        }
    ]
}
{ 
    "_id" : "5MfSESh3JThBKKriE", 
    "userId" : "cW43ScXLhsavfP4xk", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T04:21:07.108+0000"), 
    "updatedAt" : ISODate("2016-01-06T04:35:45.541+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n > 0){\n        for(int i = 0;i < n;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 3.3, 
    "totalActiveTime" : 430.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T04:23:16.571+0000"), 
            "code" : "public class Ooad{\n    public static void helloWorld(int n){\n        for(int i = 0;i < n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 110.9
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:16.375+0000"), 
            "code" : "public class Ooad{\n    public static void main(String[] argv){\n        helloWorld(3);\n    } \n    \n    public static void helloWorld(int n){\n        for(int i = 0;i < n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(53)
        }, 
        {
            "date" : ISODate("2016-01-06T04:24:22.725+0000"), 
            "code" : "public class Ooad{\n    public static void main(String[] argv){\n        helloWorld(3);\n    } \n    \n    public static void helloWorld(int n){\n        for(int i = 0;i < n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.2
        }, 
        {
            "date" : ISODate("2016-01-06T04:25:47.829+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0;i < n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 72.5
        }, 
        {
            "date" : ISODate("2016-01-06T04:27:08.160+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n >= 0){\n        for(int i = 0;i < n;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 76.8
        }, 
        {
            "date" : ISODate("2016-01-06T04:30:24.260+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n > 0){\n        for(int i = 0;i < n;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 107.7
        }, 
        {
            "date" : ISODate("2016-01-06T04:35:45.540+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n > 0){\n        for(int i = 0;i < n;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 3.3
        }
    ]
}
{ 
    "_id" : "eg2MDt8wbWRYLPXQL", 
    "userId" : "svDTiKSbjrc8MdJkK", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T06:12:17.161+0000"), 
    "updatedAt" : ISODate("2016-01-06T06:47:54.773+0000"), 
    "code" : "public static void helloWorld(int n){\n        \n        if(n>0) {\n            for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n            }\n        }\n        \n    }", 
    "status" : "PASS", 
    "activeTime" : 66.6, 
    "totalActiveTime" : 944.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T06:13:20.853+0000"), 
            "code" : "public class HelloWrold {\n    int num = 10;\n    for(int i = 0; i < 10; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 58.8
        }, 
        {
            "date" : ISODate("2016-01-06T06:14:15.433+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 54.7
        }, 
        {
            "date" : ISODate("2016-01-06T06:14:34.789+0000"), 
            "code" : "public class helloWorld {\n    public static void main(String[]args) {\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.7
        }, 
        {
            "date" : ISODate("2016-01-06T06:16:26.373+0000"), 
            "code" : "public static helloWorld() {\n    int num = 10;\n    for(int i = 0; i < 10; i++) {\n    System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.2
        }, 
        {
            "date" : ISODate("2016-01-06T06:16:46.897+0000"), 
            "code" : "public void helloWorld() {\n    int num = 10;\n    for(int i = 0; i < 10; i++) {\n    System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-01-06T06:17:05.718+0000"), 
            "code" : "public static void helloWorld() {\n    int num = 10;\n    for(int i = 0; i < 10; i++) {\n    System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.8
        }, 
        {
            "date" : ISODate("2016-01-06T06:18:40.612+0000"), 
            "code" : "public void helloWorld{\n    int num = 10;\n    for(int i = 0; i < 10; i++) {\n    System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.6
        }, 
        {
            "date" : ISODate("2016-01-06T06:19:02.713+0000"), 
            "code" : "public static void helloWorld(){\n    int num = 10;\n    for(int i = 0; i < 10; i++) {\n    System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.1
        }, 
        {
            "date" : ISODate("2016-01-06T06:21:26.661+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWrold();\n    }\n}\npublic static void helloWorld(){\n    int num = 10;\n    for(int i = 0; i < 10; i++) {\n    System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 56.4
        }, 
        {
            "date" : ISODate("2016-01-06T06:22:00.249+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWrold();\n    }\n    public static void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.5
        }, 
        {
            "date" : ISODate("2016-01-06T06:22:05.605+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public static void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.5
        }, 
        {
            "date" : ISODate("2016-01-06T06:22:14.325+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public static void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-01-06T06:22:57.254+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.1
        }, 
        {
            "date" : ISODate("2016-01-06T06:23:54.149+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public static void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.5
        }, 
        {
            "date" : ISODate("2016-01-06T06:25:12.084+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public static void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.5
        }, 
        {
            "date" : ISODate("2016-01-06T06:29:46.613+0000"), 
            "code" : "public static void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 81.1
        }, 
        {
            "date" : ISODate("2016-01-06T06:30:26.393+0000"), 
            "code" : "public static void helloWorld(){\n        int num;\n        for(int i = 0; i < num; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(40)
        }, 
        {
            "date" : ISODate("2016-01-06T06:30:38.084+0000"), 
            "code" : "public static void helloWorld(){\n        int n;\n        for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-01-06T06:41:46.774+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public static void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.4
        }, 
        {
            "date" : ISODate("2016-01-06T06:41:56.976+0000"), 
            "code" : "public class helloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public static void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.3
        }, 
        {
            "date" : ISODate("2016-01-06T06:42:16.617+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public static void helloWorld(){\n        int num = 10;\n        for(int i = 0; i < 10; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-01-06T06:42:29.653+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public static void helloWorld(){\n        int n = 10;\n        for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-01-06T06:43:33.893+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[]args) {\n        helloWorld();\n    }\n    public static void helloWorld(){\n        int n = 10;\n        if(n>0) {\n            for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n            }\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 57.4
        }, 
        {
            "date" : ISODate("2016-01-06T06:46:06.981+0000"), 
            "code" : "public static void helloWorld(){\n        int n = 10;\n        if(n>0) {\n            for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n            }\n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 74.8
        }, 
        {
            "date" : ISODate("2016-01-06T06:46:28.140+0000"), 
            "code" : "public static void helloWorld(){\n        int n;\n        if(n>0) {\n            for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n            }\n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-01-06T06:47:54.773+0000"), 
            "code" : "public static void helloWorld(int n){\n        \n        if(n>0) {\n            for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n            }\n        }\n        \n    }", 
            "status" : "PASS", 
            "activeTime" : 66.6
        }
    ]
}
{ 
    "_id" : "jAnn7tYe9HW4fKbHe", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T07:54:06.795+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:08:14.884+0000"), 
    "code" : "public static String parseEmail(String email){\n\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 46.2, 
    "totalActiveTime" : 745.1000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T07:54:56.869+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    \n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 269.2
        }, 
        {
            "date" : ISODate("2016-01-06T07:55:40.393+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    \n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.3
        }, 
        {
            "date" : ISODate("2016-01-06T07:55:46.085+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-01-06T07:56:29.764+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.9
        }, 
        {
            "date" : ISODate("2016-01-06T07:59:55.988+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    \n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.1
        }, 
        {
            "date" : ISODate("2016-01-06T08:00:20.884+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    \n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.2
        }, 
        {
            "date" : ISODate("2016-01-06T08:00:56.497+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    throw new Exception(\"HERE\");\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.6
        }, 
        {
            "date" : ISODate("2016-01-06T08:01:24.356+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    throw new Exception(\"HERE\");\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.8
        }, 
        {
            "date" : ISODate("2016-01-06T08:02:23.396+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    throw new Exception(\"HERE\");\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.9
        }, 
        {
            "date" : ISODate("2016-01-06T08:02:43.125+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    throw new Exception(\"HERE\");\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.2
        }, 
        {
            "date" : ISODate("2016-01-06T08:02:58.757+0000"), 
            "code" : "public static String parseEmail(String email){\n\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 15.4
        }, 
        {
            "date" : ISODate("2016-01-06T08:05:37.764+0000"), 
            "code" : "public static String parseEmail(String email){\n\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 232.6
        }, 
        {
            "date" : ISODate("2016-01-06T08:06:26.120+0000"), 
            "code" : "public static String parseEmail(String email){\n\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 22.7
        }, 
        {
            "date" : ISODate("2016-01-06T08:07:25.733+0000"), 
            "code" : "public static String parseEmail(String email){\n\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 28.2
        }, 
        {
            "date" : ISODate("2016-01-06T08:08:14.884+0000"), 
            "code" : "public static String parseEmail(String email){\n\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 46.2
        }
    ]
}
{ 
    "_id" : "iDjBNfa3GtXdbg9pf", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "4gGxjgkpZNbmLKFfL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T08:29:55.035+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:42:03.396+0000"), 
    "code" : "public static void flippedTriangle(int height){\n    \n    for (int i = 1; i <= height; i++){\n        \n        for(int empty = i; empty < height; empty++){\n            System.out.print(\" \");\n        }\n        for (int ast = i; ast > 0; ast-- ){\n            System.out.print(\"*\");\n        }\n        System.out.println();\n        \n        \n    }\n    \n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 76.6, 
    "totalActiveTime" : 243.2, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T08:32:45.928+0000"), 
            "code" : "public static void flippedTriangle(int height){\n    \n    for (int i = 1; i <= height; i++){\n        \n        for(int empty = height; empty < i; empty++){\n            System.out.println(\"\");\n        }\n        for (int ast = i; ast < height; ast++ ){\n            System.out.println(\"*\");\n        }\n        \n        \n        \n    }\n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(116)
        }, 
        {
            "date" : ISODate("2016-01-06T08:33:23.365+0000"), 
            "code" : "public static void flippedTriangle(int height){\n    \n    for (int i = 1; i <= height; i++){\n        \n        for(int empty = height; empty < i; empty++){\n            System.out.println(\" \");\n        }\n        for (int ast = i; ast < height; ast++ ){\n            System.out.println(\"*\");\n        }\n        \n        \n        \n    }\n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(19)
        }, 
        {
            "date" : ISODate("2016-01-06T08:34:09.733+0000"), 
            "code" : "public static void flippedTriangle(int height){\n    \n    for (int i = 1; i <= height; i++){\n        \n        for(int empty = height; empty < i; empty++){\n            System.out.println(\" \");\n        }\n        for (int ast = height; ast > i; ast-- ){\n            System.out.println(\"*\");\n        }\n        \n        \n        \n    }\n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 21.9
        }, 
        {
            "date" : ISODate("2016-01-06T08:34:19.925+0000"), 
            "code" : "public static void flippedTriangle(int height){\n    \n    for (int i = 1; i <= height; i++){\n        \n        for(int empty = height; empty < i; empty++){\n            System.out.println(\" \");\n        }\n        for (int ast = height; ast >= i; ast-- ){\n            System.out.println(\"*\");\n        }\n        \n        \n        \n    }\n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 9.7
        }, 
        {
            "date" : ISODate("2016-01-06T08:42:03.395+0000"), 
            "code" : "public static void flippedTriangle(int height){\n    \n    for (int i = 1; i <= height; i++){\n        \n        for(int empty = i; empty < height; empty++){\n            System.out.print(\" \");\n        }\n        for (int ast = i; ast > 0; ast-- ){\n            System.out.print(\"*\");\n        }\n        System.out.println();\n        \n        \n    }\n    \n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 76.6
        }
    ]
}
{ 
    "_id" : "knsfeJAQJhoXQTcNs", 
    "userId" : "y5WFNcvHSR5gQe4oy", 
    "questionId" : "vR7wCjPDTy9XSjYiv", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-06T08:11:42.074+0000"), 
    "updatedAt" : ISODate("2016-01-06T08:38:01.245+0000"), 
    "code" : "public static void computeAge(String ageString){\n    \n    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = null;\n    try {\n         birthDate = sdf.parse(ageString);\n    } catch(java.text.ParseException e){\n        e.printStackTrace();\n    }\n    Date today = new Date();\n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    System.out.println(differenceInYears);\n    \n    //String[] ageStringArr = ageString.split(\"/\");\n    //System.out.println(2016 - Integer.parseInt(ageStringArr[2]));\n    \n    \n}", 
    "status" : "FAIL", 
    "activeTime" : 22.1, 
    "totalActiveTime" : 820.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-06T08:16:31.829+0000"), 
            "code" : "import java.util.*;\n\npublic static void computeAge(String ageString){\n    \n    SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = sdf.parse(ageString);\n    \n    Date today = new Date();\n    \n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    \n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    \n    System.out.println(differenceInYears);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 299.5
        }, 
        {
            "date" : ISODate("2016-01-06T08:16:42.821+0000"), 
            "code" : "public static void computeAge(String ageString){\n    \n    SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = sdf.parse(ageString);\n    \n    Date today = new Date();\n    \n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    \n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    \n    System.out.println(differenceInYears);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.1
        }, 
        {
            "date" : ISODate("2016-01-06T08:17:01.764+0000"), 
            "code" : "import java.util.*;\n\npublic static void computeAge(String ageString){\n    \n    SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = sdf.parse(ageString);\n    \n    Date today = new Date();\n    \n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    \n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    \n    System.out.println(differenceInYears);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.9
        }, 
        {
            "date" : ISODate("2016-01-06T08:18:05.493+0000"), 
            "code" : "import java.util.*;\nimport java.text.*;\n\npublic static void computeAge(String ageString){\n    \n    SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = sdf.parse(ageString);\n    \n    Date today = new Date();\n    \n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    \n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    \n    System.out.println(differenceInYears);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.6
        }, 
        {
            "date" : ISODate("2016-01-06T08:19:33.829+0000"), 
            "code" : "public static void computeAge(String ageString){\n    \n    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = sdf.parse(ageString);\n    \n    Date today = new Date();\n    \n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    \n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    \n    System.out.println(differenceInYears);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 76.2
        }, 
        {
            "date" : ISODate("2016-01-06T08:20:22.773+0000"), 
            "code" : "public static void computeAge(String ageString){\n    \n    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = null;\n    try {\n         birthDate = sdf.parse(ageString);\n    } catch(ParseException e){\n        e.printStackTrace();\n    }\n   \n    \n    Date today = new Date();\n    \n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    \n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    \n    System.out.println(differenceInYears);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-01-06T08:20:50.712+0000"), 
            "code" : "public static void computeAge(String ageString){\n    \n    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = null;\n    try {\n         birthDate = sdf.parse(ageString);\n    } catch(java.text.ParseException e){\n        e.printStackTrace();\n    }\n   \n    \n    Date today = new Date();\n    \n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    \n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    \n    System.out.println(differenceInYears);\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-01-06T08:23:10.933+0000"), 
            "code" : "public static void computeAge(String ageString){\n    \n    //java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    //Date birthDate = null;\n    //try {\n    //     birthDate = sdf.parse(ageString);\n    //} catch(java.text.ParseException e){\n    //    e.printStackTrace();\n    //}\n   \n    \n    //Date today = new Date();\n    \n    //long differenceInMilis = today.getTime() - birthDate.getTime();\n    \n    //long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    \n    //System.out.println(differenceInYears);\n    String[] ageStringArr = ageString.split(\"/\");\n    return Integer.parseInt(2016 - ageStringArr[2]);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(134)
        }, 
        {
            "date" : ISODate("2016-01-06T08:23:42.932+0000"), 
            "code" : "public static void computeAge(String ageString){\n    \n    //java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    //Date birthDate = null;\n    //try {\n    //     birthDate = sdf.parse(ageString);\n    //} catch(java.text.ParseException e){\n    //    e.printStackTrace();\n    //}\n   \n    \n    //Date today = new Date();\n    \n    //long differenceInMilis = today.getTime() - birthDate.getTime();\n    \n    //long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    \n    //System.out.println(differenceInYears);\n    String[] ageStringArr = ageString.split(\"/\");\n    System.out.println(2016 - Integer.parseInt(ageStringArr[2]));\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 31.4
        }, 
        {
            "date" : ISODate("2016-01-06T08:24:08.765+0000"), 
            "code" : "public static void computeAge(String ageString){\n    \n    //java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    //Date birthDate = null;\n    //try {\n    //     birthDate = sdf.parse(ageString);\n    //} catch(java.text.ParseException e){\n    //    e.printStackTrace();\n    //}\n    //Date today = new Date();\n    //long differenceInMilis = today.getTime() - birthDate.getTime();\n    //long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    //System.out.println(differenceInYears);\n    \n    String[] ageStringArr = ageString.split(\"/\");\n    System.out.println(2016 - Integer.parseInt(ageStringArr[2]));\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 25.8
        }, 
        {
            "date" : ISODate("2016-01-06T08:37:38.602+0000"), 
            "code" : "public static void computeAge(String ageString){\n    \n    //java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    //Date birthDate = null;\n    //try {\n    //     birthDate = sdf.parse(ageString);\n    //} catch(java.text.ParseException e){\n    //    e.printStackTrace();\n    //}\n    //Date today = new Date();\n    //long differenceInMilis = today.getTime() - birthDate.getTime();\n    //long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    //System.out.println(differenceInYears);\n    \n    String[] ageStringArr = ageString.split(\"/\");\n    System.out.println(2016 - Integer.parseInt(ageStringArr[2]));\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 94.9
        }, 
        {
            "date" : ISODate("2016-01-06T08:38:01.245+0000"), 
            "code" : "public static void computeAge(String ageString){\n    \n    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = null;\n    try {\n         birthDate = sdf.parse(ageString);\n    } catch(java.text.ParseException e){\n        e.printStackTrace();\n    }\n    Date today = new Date();\n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    System.out.println(differenceInYears);\n    \n    //String[] ageStringArr = ageString.split(\"/\");\n    //System.out.println(2016 - Integer.parseInt(ageStringArr[2]));\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 22.1
        }
    ]
}
{ 
    "_id" : "x3QM9pZNsN3jFdcjZ", 
    "userId" : "Zf8vYjbZgY643E4iA", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:21.221+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:11:35.269+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 17.8, 
    "totalActiveTime" : 114.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:38:41.514+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:03.657+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 80.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:21.156+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 17.8
        }
    ]
}
{ 
    "_id" : "2gZTovt22BSCRqXPw", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:27.526+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:29:38.942+0000"), 
    "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 43.5, 
    "totalActiveTime" : 43.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:15.829+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 43.5
        }
    ]
}
{ 
    "_id" : "qFbZujnyNtTn8sWm2", 
    "userId" : "D7LeG3FuxhnDCXkdf", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:35.396+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:11:53.683+0000"), 
    "code" : "public static void helloWorld(int n){\n    for (int i = 0; i<n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 63.8, 
    "totalActiveTime" : 204.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:09.236+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i<n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 60.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:22.668+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i<n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 80.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:47:39.157+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i<n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 63.8
        }
    ]
}
{ 
    "_id" : "wcQPasjdzmQck6aRS", 
    "userId" : "hGX7dwHp7M7kem4YH", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:30.944+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:56:28.112+0000"), 
    "code" : "public static void helloWorld (int n){\n    for(int i = 0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 54.2, 
    "totalActiveTime" : 164.89999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:11.369+0000"), 
            "code" : "public static int helloWorld (int n){\n    for(int i = 0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 95.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:25.988+0000"), 
            "code" : "public static void helloWorld (int n){\n    for(int i = 0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:25.441+0000"), 
            "code" : "public static void helloWorld (int n){\n    for(int i = 0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 54.2
        }
    ]
}
{ 
    "_id" : "F2LYrgr7iPiRDbbBS", 
    "userId" : "LbzNmSeMDh2EWx7mK", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:39.558+0000"), 
    "updatedAt" : ISODate("2016-01-07T09:34:43.438+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(45), 
    "totalActiveTime" : 137.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:18.487+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 92.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:02.329+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(45)
        }
    ]
}
{ 
    "_id" : "hwYQAayBsEaL2FK2H", 
    "userId" : "WDgovxNugxGzpZNug", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:28.781+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:02:40.487+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 130.4, 
    "totalActiveTime" : 130.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:43.829+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 130.4
        }
    ]
}
{ 
    "_id" : "KB5HHwNtCxJ7qvDWi", 
    "userId" : "Wic3xGwhjaGg2m4pM", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:39:23.554+0000"), 
    "updatedAt" : ISODate("2016-01-07T05:18:03.928+0000"), 
    "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 12.6, 
    "totalActiveTime" : 95.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:51.057+0000"), 
            "code" : "public void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 82.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:03.610+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 12.6
        }
    ]
}
{ 
    "_id" : "LHEDrQ8A7M7KbbpsW", 
    "userId" : "bfgX8N84QjeyBS9BE", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:39:47.925+0000"), 
    "updatedAt" : ISODate("2016-01-07T05:10:24.118+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(78), 
    "totalActiveTime" : NumberInt(78), 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:41:19.937+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(78)
        }
    ]
}
{ 
    "_id" : "C8QgLE2KgiKz8buey", 
    "userId" : "LKwHZemSmZ8QeRcPA", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:45.774+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:19:56.680+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i =0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 50.5, 
    "totalActiveTime" : 211.70000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:31.360+0000"), 
            "code" : "public static void helloWorld(String n){\n    int num = n.charAt(0) - '0';\n    \n    for(int i =0; i<num; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 100.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:37.204+0000"), 
            "code" : "public static void helloWorld(int n){\n   \n    \n    for(int i =0; i<n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:52.551+0000"), 
            "code" : "public static void helloWorld(int n){\n   \n    \n    for(int i =0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:05.028+0000"), 
            "code" : "public static void helloWorld(int n){\n   \n    \n    for(int i =0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:35.888+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i =0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 50.5
        }
    ]
}
{ 
    "_id" : "5bGHcXXN8CQkJNF6b", 
    "userId" : "6sYqa8NsckMh2jLAX", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:24.462+0000"), 
    "updatedAt" : ISODate("2016-01-07T11:14:43.770+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int num=0;num<n;num+=1){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 40.7, 
    "totalActiveTime" : 441.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:34.325+0000"), 
            "code" : "public static void helloworld(int n){\n    for(int num=0;num<n;num++){\n        System.out.println(\"Hello World!\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:03.972+0000"), 
            "code" : "public static void helloworld(int n){\n    for(int num=0;num<n;num++){\n        System.out.println(\"Hello World!\");\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:19.929+0000"), 
            "code" : "public static void helloworld(int n){\n    for(int num=0;num<n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(16)
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:28.864+0000"), 
            "code" : "public static void helloworld(int n){\n    for(int num=0;num<=n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:22.023+0000"), 
            "code" : "public class helloworld{\nhelloworld(2);\npublic static void helloworld(int n){\n    for(int num=0;num<=n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 53.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:43.244+0000"), 
            "code" : "public class helloworld{\n    public static void main(String args){\n        helloworld(2);        \n        \n    }\n\npublic static void helloworld(int n){\n    for(int num=0;num<=n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:00.837+0000"), 
            "code" : "public class helloworld{\n    public static void main(String args){\n        helloworld(2);        \n        \n    }\n\npublic static void helloworld(int n){\n    for(int num=0;num<=n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:24.037+0000"), 
            "code" : "//public class helloworld{\n  //  public static void main(String args){\n    //    helloworld(2);        \n        \n    //}\n\npublic static void helloworld(int n){\n    for(int num=0;num<=n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}\n\n//}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:49.491+0000"), 
            "code" : "public class helloworld{\n  //  public static void main(String args){\n    //    helloworld(2);        \n        \n    //}\n\npublic static void helloworld(int n){\n    for(int num=0;num<=n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:38.372+0000"), 
            "code" : "public class helloworld{\n    public static void main(String args){\n        helloworld(2);        \n        \n    }\n\npublic static void helloworld(int n){\n    for(int num=0;num<=n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:53.221+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int num=0;num<=n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 75.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:13.895+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int num=0;num<n;num++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:55.205+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int num=0;num<n;num+=1){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 40.7
        }
    ]
}
{ 
    "_id" : "rYCeACwN5Cxrergja", 
    "userId" : "2RarjXXS9LHQCdiKo", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:39:41.917+0000"), 
    "updatedAt" : ISODate("2016-01-11T10:17:36.590+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(2), 
    "totalActiveTime" : 156.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:51.017+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:52.506+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 54.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:18.571+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:36.859+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.6
        }, 
        {
            "date" : ISODate("2016-01-10T05:01:06.924+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(2)
        }
    ]
}
{ 
    "_id" : "fwMdF7hqigo3rC936", 
    "userId" : "jyBcJo7wcKnHkMJYm", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:41.887+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:11:13.794+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i<n; i++){ //0, 1, 2 <-- prints 3 times not 2!\n            System.out.println(\"Hello World!\");\n        }\n}", 
    "status" : "PASS", 
    "activeTime" : 17.8, 
    "totalActiveTime" : 445.59999999999997, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:09.612+0000"), 
            "code" : "public class HelloWorld{\n    \n    public static void main (String [] args){\n        \n        for(int i = 3; i<=3; i++){\n            \n            System.out.println(\"Hello World\");\n            \n        }\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:49.724+0000"), 
            "code" : "public static helloWorld{\n        \n        for(int i = 3; i<=3; i++){\n            \n            System.out.println(\"Hello World\");\n            \n        }\n        \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(40)
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:34.446+0000"), 
            "code" : "public static helloWorld(int n){\n        \n        n = 3;\n        \n        for(int i = 0; i<=n; i++){\n            \n            System.out.println(\"Hello World\");\n            \n        }\n        \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(45)
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:49.372+0000"), 
            "code" : "public static helloWorld(int n){\n        \n        for(int i = 0; i<=n; i++){\n            \n            System.out.println(\"Hello World\");\n            \n        }\n        \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:17.116+0000"), 
            "code" : "public static void helloWorld(int n){\n        \n        for(int i = 0; i<=n; i++){\n            \n            System.out.println(\"Hello World\");\n            \n        }\n        \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:37.443+0000"), 
            "code" : "public static void helloWorld(int n){\n        \n        for(int i = 0; i<=n; i++){\n            \n            System.out.println(\"Hello World\");\n            \n        }\n        \n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:41.140+0000"), 
            "code" : "public static void helloWorld(int n){\n        \n        for(int i = 0; i<n; i++){ //0, 1, 2 <-- prints 3 times not 2!\n            \n            System.out.println(\"Hello World\");\n            \n        }\n        \n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:09.608+0000"), 
            "code" : "public static void helloWorld(int n){\n        \n        for(int i = 0; i<n; i++){ //0, 1, 2 <-- prints 3 times not 2!\n            \n            System.out.println(\"Hello World\");\n            \n        }\n        \n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:35.614+0000"), 
            "code" : "public static void helloWorld(int n){\n        \n        for(int i = 0; i<n; i++){ //0, 1, 2 <-- prints 3 times not 2!\n            \n            System.out.println(\"Hello World\");\n            \n        }\n        \n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:09.355+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i<n; i++){ //0, 1, 2 <-- prints 3 times not 2!\n            System.out.println(\"Hello World\");\n        }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:47:35.029+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i<n; i++){ //0, 1, 2 <-- prints 3 times not 2!\n            System.out.println(\"Hello World\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 67.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:47:52.821+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i<n; i++){ //0, 1, 2 <-- prints 3 times not 2!\n            System.out.println(\"Hello World!\");\n        }\n}", 
            "status" : "PASS", 
            "activeTime" : 17.8
        }
    ]
}
{ 
    "_id" : "vrDrsTDQzvxCrTMbo", 
    "userId" : "GFFWb596Yq6CqQ9WA", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:39:33.219+0000"), 
    "updatedAt" : ISODate("2016-01-10T13:38:59.470+0000"), 
    "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 25.2, 
    "totalActiveTime" : 314.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:41:04.539+0000"), 
            "code" : "public class helloWorld {\n    public static void main (String[] args) {\n        for (int n = 0; n <= 2; n++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 86.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:21.693+0000"), 
            "code" : "public static helloWorld(int n) {\n    for (int n = 0; n <= 2; n++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 73.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:39.828+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int n = 0; n <= 2; n++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:07.376+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (n = 0; n <= 2; n++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:37.701+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i <= 0; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(84)
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:07.351+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 25.2
        }
    ]
}
{ 
    "_id" : "jfyPsfm8Wgj9cXcEi", 
    "userId" : "hMbZeYszwhr8HeFb3", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:13.324+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:12:26.928+0000"), 
    "code" : "public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n}", 
    "status" : "PASS", 
    "activeTime" : 18.1, 
    "totalActiveTime" : 367.6000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:52.271+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[] args) {\n        \n        helloWorld(5);\n        \n    }\n    \n    public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 94.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:56.456+0000"), 
            "code" : "public static void main(String[] args) {\n        \n        helloWorld(5);\n        \n    }\n    \n    public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 55.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:45.907+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[] args) {\n        \n        helloWorld(5);\n        \n    }\n    \n    public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:14.311+0000"), 
            "code" : "public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:41.809+0000"), 
            "code" : "public class HelloWorld {\n    public static void main(String[] args) {\n        \n        helloWorld(5);\n        \n    }\n    \n    public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(26)
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:50.133+0000"), 
            "code" : "public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World\");\n        }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:57.760+0000"), 
            "code" : "public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World\");\n        }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 53.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:09.686+0000"), 
            "code" : "public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World\");\n        }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:28.756+0000"), 
            "code" : "public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n}", 
            "status" : "PASS", 
            "activeTime" : 18.1
        }
    ]
}
{ 
    "_id" : "6afpW65z7nvrBge3g", 
    "userId" : "nXfCjbKsy9KcSBMf8", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:59.012+0000"), 
    "updatedAt" : ISODate("2016-01-07T04:46:48.093+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i =0; i<n ; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(26), 
    "totalActiveTime" : 252.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:42:52.661+0000"), 
            "code" : "public static void HelloWorld(int n){\n    for(int i =0; i<n ; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 226.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:17.272+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i =0; i<n ; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(26)
        }
    ]
}
{ 
    "_id" : "BaSQ6cSyMoGmSzcJ4", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:20.436+0000"), 
    "updatedAt" : ISODate("2016-04-25T14:18:30.874+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 5.2, 
    "totalActiveTime" : 452.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:41.384+0000"), 
            "code" : "import java.util;\npublic class helloworld {\n    \n    public static void main (String [] Args){\n        \n        \n        int number=0;\n        Scanner sc = new Scanner(System.in);\n        number = sc.nextInt();\n        \n        for(int i=0;i<number;i++){\n            System.out.println(\"Hello World!\");\n        }\n        \n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 136.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:30.091+0000"), 
            "code" : "import java.util;\npublic class helloworld {\n    \n    public static void main (String [] Args){\n        \n        \n        int number=0;\n        Scanner sc = new Scanner(System.in);\n        number = sc.nextInt();\n        if(number >=0){\n            \n        \n            for(int i=0;i<number;i++){\n                System.out.println(\"Hello World!\");\n            }\n        }\n        \n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:53.829+0000"), 
            "code" : "import java.util.*;\npublic class helloworld {\n    \n    public static void main (String [] Args){\n        \n        \n        int number=0;\n        Scanner sc = new Scanner(System.in);\n        number = sc.nextInt();\n        if(number >=0){\n            \n        \n            for(int i=0;i<number;i++){\n                System.out.println(\"Hello World!\");\n            }\n        }\n        \n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:51:05.509+0000"), 
            "code" : "public static void helloWorld(int n){\n            for(int i=0;i<n;i++){\n                System.out.println(\"Hello World!\");\n            }\n        }", 
            "status" : "PASS", 
            "activeTime" : 144.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:52:47.496+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 74.1
        }, 
        {
            "date" : ISODate("2016-04-25T14:18:30.873+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 5.2
        }
    ]
}
{ 
    "_id" : "eukY92DaWdtNiL8XY", 
    "userId" : "ZXabn9PSbRAEHGzB2", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:28.856+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:43:49.394+0000"), 
    "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 40.1, 
    "totalActiveTime" : 374.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:57.597+0000"), 
            "code" : "public void helloWorld (int n) {\n    for(int i = 0; i < n) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:11.032+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:29.079+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:55.859+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:27.820+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:20.707+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:33.976+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:14.187+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:25.823+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:34.563+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:14.312+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:48:39.206+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 50.9
        }, 
        {
            "date" : ISODate("2016-01-07T05:07:02.870+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 40.1
        }
    ]
}
{ 
    "_id" : "n9c8WhziSsipzgdQm", 
    "userId" : "Qjnk55oJJB3szE8cN", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T04:38:31.127+0000"), 
    "updatedAt" : ISODate("2016-01-07T05:24:39.915+0000"), 
    "code" : "public static void helloWorld(int n){\n\n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : NumberInt(14), 
    "totalActiveTime" : 267.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:41:27.595+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n >=0){\n        for(int i = 0; i <= n; i++){\n            System.out.println(\"Hello World!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 146.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:09.479+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n >=0){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:37.444+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n >=0){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:51.868+0000"), 
            "code" : "public static void helloWorld(int n){\n\n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(14)
        }
    ]
}
{ 
    "_id" : "SSy6gRcBTrHhsTQNP", 
    "userId" : "uzpS7dtenvTejjbPx", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:28.073+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:41:53.799+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(19), 
    "totalActiveTime" : 319.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:41:07.545+0000"), 
            "code" : "public static void printHelloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello world!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 144.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:21.304+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello world!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:49.331+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello world!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:53.968+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello world!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 54.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:10.108+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:17.911+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:31.816+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:41.184+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:55.012+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:15.114+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(19)
        }
    ]
}
{ 
    "_id" : "xuw8YzJva7KFsyjvX", 
    "userId" : "sw6DJKqcMpj4bHgND", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:30.017+0000"), 
    "updatedAt" : ISODate("2016-01-08T00:16:05.230+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 1 ; i<=n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 26.8, 
    "totalActiveTime" : 457.29999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:10.926+0000"), 
            "code" : "public class HelloWorld{\n    public static void main (String [] args){\n        System.out.println(\"Hello world\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:39:50.089+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String [] args){\n        System.out.println(\"Hello world\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:31.944+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String [] args){\n        for(int i =0; i<5; i++){\n            System.out.println(\"Hello world\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(41)
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:37.396+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String [] args){\n        for(int i =0; i<5; i++){\n            System.out.println(\"Hello world\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(52)
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:58.242+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String [] args){\n        for(int i =0; i<5; i++){\n            System.out.println(\"Hello world\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:12.823+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String [] args){\n        for(int i =0; i<5; i++){\n            System.out.println(\"Hello world\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:28.856+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i =0; i<n; i++){\n        System.out.println(\"hello world\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 75.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:56.816+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i =1 ; i<n; i++){\n        System.out.println(\"hello world\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:16.488+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i =1 ; i<=n; i++){\n        System.out.println(\"hello world\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:29.387+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0 ; i<=n; i++){\n        System.out.println(\"hello world\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:06.766+0000"), 
            "code" : "public static void helloWorld(int n){\n    int number = n;\n    for(int i = 0 ; i<=number; i++){\n        System.out.println(\"hello world\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 34.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:27.132+0000"), 
            "code" : "public static void helloWorld(int n){\n    int number = n;\n    for(int i = 0 ; i<=number; i++){\n        System.out.println(\"hello world!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:40.189+0000"), 
            "code" : "public static void helloWorld(int n){\n    int number = n;\n    for(int i = 1 ; i<=number; i++){\n        System.out.println(\"hello world!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:03.093+0000"), 
            "code" : "public static void helloWorld(int n){\n    int number = n;\n    for(int i = 1 ; i<=number; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:16.196+0000"), 
            "code" : "public static void helloWorld(int n){\n    int number = n;\n    for(int i = 1 ; i<=number; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:42.816+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 1 ; i<=n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 26.8
        }
    ]
}
{ 
    "_id" : "Z5HK4TYYv2suN3Pga", 
    "userId" : "d3Csi7z8tLka7wAP2", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:39:57.003+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:11:03.990+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 28.6, 
    "totalActiveTime" : 327.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:42:40.981+0000"), 
            "code" : "public class What{\n    \n    public static void print(int n){\n        if(n>=0){\n            for(int i=0; i<n; i++){\n                System.out.println(\"helloWorld\");\n            }\n        }\n    }\n    \n    public static void main(String[]args){\n        print(5);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 158.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:01.462+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World\");\n        }\n    }\n}\n\npublic static void main(String[]args){\n    print(5);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 81.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:19.250+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World\");\n        }\n    }\n}\n\npublic static void main(String[]args){\n    helloWorld(5);\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:39.171+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(23)
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:00.245+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:30.360+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 28.6
        }
    ]
}
{ 
    "_id" : "dfqBAiWw2ou79Jw3R", 
    "userId" : "TTKwDrJfuLsH4ietj", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:33.990+0000"), 
    "updatedAt" : ISODate("2016-01-09T16:46:49.736+0000"), 
    "code" : "public static void helloWorld(int n){\n    if (n >= 0){\n        for (int m = 0; m < n; m++){ //:)\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 9.5, 
    "totalActiveTime" : 268.0, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:51.563+0000"), 
            "code" : "public static helloWorld(int n){\n    if (n >= 0){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 72.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:58.807+0000"), 
            "code" : "public static void helloWorld(int n){\n    if (n >= 0){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(57)
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:02.885+0000"), 
            "code" : "public static void helloWorld(int n){\n    if (n >= 0){\n        for (int n = 0; n < n; n++){\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 79.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:03.781+0000"), 
            "code" : "public static void helloWorld(int n){\n    if (n >= 0){\n        for (int m = 0; m < n; m++){ \n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 43.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:10.974+0000"), 
            "code" : "public static void helloWorld(int n){\n    if (n >= 0){\n        for (int m = 0; m < n; m++){ //:)\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:21.558+0000"), 
            "code" : "public static void helloWorld(int n){\n    if (n >= 0){\n        for (int m = 0; m < n; m++){ //:)\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.5
        }
    ]
}
{ 
    "_id" : "idrFyiyxGNvEgDv7F", 
    "userId" : "Qcd4pgqLxpeKJgiAY", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:37.590+0000"), 
    "updatedAt" : ISODate("2016-01-07T05:07:39.039+0000"), 
    "status" : "PASS", 
    "activeTime" : 21.1, 
    "totalActiveTime" : 450.6, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:42.812+0000"), 
            "code" : "public static void main(String [] args){\n    helloWorld(5);\n}\n\npublic static helloWorld(int n){\n    for(int i = 0; i < n; i++){\n    System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 120.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:15.508+0000"), 
            "code" : "public static void main(String [] args){\n    helloWorld(5);\n}\n\npublic static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(32)
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:04.380+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 45.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:29.185+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:48.612+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:09.095+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:28.656+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:07.712+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(40)
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:16.955+0000"), 
            "code" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:32.240+0000"), 
            "code" : "public static void helloWorld(int n){\n    if (n > 0){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World\");\n        }   \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 59.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:55.256+0000"), 
            "code" : "public static void helloWorld(int n){\n    if (n > 0){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }   \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 19.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:00.878+0000"), 
            "code" : "public static void helloWorld(int n){\n    if (n > 0){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }   \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(0)
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:09.284+0000"), 
            "code" : "public static void helloWorld(int n){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }   \n    }", 
            "status" : "PASS", 
            "activeTime" : 16.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:30.441+0000"), 
            "code" : "public static void helloWorld(int n){\n    if (n > 0){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }   \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 21.1
        }
    ], 
    "code" : "public static void helloWorld(int n){\n    if (n > 0){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }   \n    }\n}"
}
{ 
    "_id" : "D8JtNjww43J4ePGhz", 
    "userId" : "TNRsxGSo47ivZF2yn", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T04:40:22.372+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:31:44.520+0000"), 
    "code" : "//only need the method -- tool puts in class for you\npublic static void helloWorld(int i){\n   for(int n=0; n<i; n++){\n       System.out.println(\"Hello World!\");\n   } \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 15.5, 
    "totalActiveTime" : 236.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:42:48.652+0000"), 
            "code" : "public class HelloWorld{\n    public static void main(String [] args){\n        helloWorld(3);\n        \n        public void helloWorld(int i){\n           for(int n=0; n<i; n++){\n               System.out.println(\"Hello World!\");\n           } \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 137.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:13.996+0000"), 
            "code" : "//only need the method -- tool puts in class for you\npublic void helloWorld(int i){\n   for(int n=0; n<i; n++){\n       System.out.println(\"Hello World!\");\n   } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 84.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:28.284+0000"), 
            "code" : "//only need the method -- tool puts in class for you\npublic static void helloWorld(int i){\n   for(int n=0; n<i; n++){\n       System.out.println(\"Hello World!\");\n   } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.5
        }
    ]
}
{ 
    "_id" : "XmPywNvkLK5nRLWJL", 
    "userId" : "Ktq2iHveYF9sZY7yZ", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:27.465+0000"), 
    "updatedAt" : ISODate("2016-01-07T05:52:04.292+0000"), 
    "code" : "public static void helloWorld (int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 31.1, 
    "totalActiveTime" : 301.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:51.272+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 79.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:35.436+0000"), 
            "code" : "public static void helloWorld (int n) {\n    if (int n > 0) {\n        for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 135.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:59.440+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 22.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:32.196+0000"), 
            "code" : "public static void helloWorld (int n) {\n    if (n > 0) {\n        for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:39.340+0000"), 
            "code" : "public static void helloWorld (int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 31.1
        }
    ]
}
{ 
    "_id" : "d3khAs99zBXPzo6uE", 
    "userId" : "jAuExyyMK7nQs7CEn", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:26.834+0000"), 
    "updatedAt" : ISODate("2016-01-07T05:03:44.527+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 26.6, 
    "totalActiveTime" : 556.5, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:57.757+0000"), 
            "code" : "public class Hello\n    public static void main(String [] Args){\n        System.out.print(\"Hello World!\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 85.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:15.985+0000"), 
            "code" : "public class Hello{\n    public static void main(String [] Args){\n        System.out.print(\"Hello World!\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(15)
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:58.666+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String [] Args){\n        int n = 3\n        for(int i = 0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 99.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:20.436+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String [] Args){\n        int n = 3\n        for(int i = 0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:33.045+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String [] Args){\n        int n = 3;\n        for(int i = 0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:32.232+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String [] Args){\n        int n = 3;\n        \n    }\n    public void helloWorld(int n){\n        for(int i = 0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 114.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:07.094+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String [] Args){\n        int n = 3;\n        helloWorld(n);\n    }\n    public void helloWorld(int n){\n        for(int i = 0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:49.345+0000"), 
            "code" : "public void helloWorld(int n){\n        for(int i = 0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:03.292+0000"), 
            "code" : "public static void helloWorld(int n){\n        for(int i = 0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:39.636+0000"), 
            "code" : "public static void helloWorld(int n){\n        for(int i = 0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:47:03.269+0000"), 
            "code" : "public static void helloWorld(int n){\n        for(int i = 0; i<n; i+=1){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 24.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:47:33.253+0000"), 
            "code" : "public static void helloWorld(int n){\n        for(int i = 0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 29.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:48:00.388+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 26.6
        }
    ]
}
{ 
    "_id" : "6GwdAmJ334sNJvLQo", 
    "userId" : "Sg3F7bE3g3Sfwcg3a", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:21.580+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:46:42.990+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 26.4, 
    "totalActiveTime" : 436.0999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:42:14.347+0000"), 
            "code" : "public class Hello{\n    public static void main(String args[]){\n        helloWorld;\n    }\n    public static void helloWorld{\n        for(int i; i == 3){\n            System.out.println(\"Hello World!\");\n            i += 1;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 175.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:33.228+0000"), 
            "code" : "public class Hello{\n    public static void main(String args[]){\n        helloWorld;\n    }\n    public static void helloWorld{\n        for(int i = 0; i <= 3; i++){\n            System.out.println(\"Hello World!\");\n            i += 1;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 78.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:49.197+0000"), 
            "code" : "public class Hello{\n    public static void main(String args[]){\n        helloWorld;\n    }\n    public static void helloWorld{\n        for(int i = 0; i <= 3; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:26.972+0000"), 
            "code" : "//don't need the class; only \npublic class Hello{\n    public static void main(String args[]){\n        helloWorld;\n    }\n    public static void helloWorld(){\n        for(int i = 0; i <= 3; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:55.080+0000"), 
            "code" : "public static void helloWorld(){\n    for(int i = 0; i <= 3; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:19.259+0000"), 
            "code" : "public static void helloWorld(int a){\n    for(int i = 0; i <= 3; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:27.929+0000"), 
            "code" : "public static void helloWorld(int a){\n    for(int i = 0; i <= a; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:48.996+0000"), 
            "code" : "public static void helloWorld(int a){\n    for(int i = 0; i < a; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 21.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:11.909+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:38.058+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 26.4
        }
    ]
}
{ 
    "_id" : "dyhqiivYQAzD2FfPa", 
    "userId" : "NTZZhLAfn9zfic6X3", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:39:25.374+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:10:56.801+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 26.9, 
    "totalActiveTime" : 400.09999999999997, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:43:43.724+0000"), 
            "code" : "public int helloWorld(int n){\n    for(int i = 0;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 243.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:57.956+0000"), 
            "code" : "public static int helloWorld(int n){\n    for(int i = 0;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:10.921+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:19.915+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:11.539+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:37.609+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 26.9
        }
    ]
}
{ 
    "_id" : "RtA24FjwL59f3TmHo", 
    "userId" : "Y2iqMWBsKaPKSkjRG", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:45.301+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:09:55.651+0000"), 
    "code" : "public static void helloWorld(int n){\n    if(n < 0){\n        return;\n    }\n    \n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 16.2, 
    "totalActiveTime" : 352.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:41.105+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 59.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:48.604+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 241.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:23.143+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n < 0){\n        return;\n    }\n    \n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:41.158+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n < 0){\n        return;\n    }\n    \n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 16.2
        }
    ]
}
{ 
    "_id" : "KqNCQGE49YLc3HFjT", 
    "userId" : "93rpRG8kk3rngskpW", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:40:27.188+0000"), 
    "updatedAt" : ISODate("2016-01-07T04:49:25.336+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(6), 
    "totalActiveTime" : 135.60000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:41:33.020+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World\");    \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 61.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:55.926+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:17.363+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:25.365+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:05.402+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(6)
        }
    ]
}
{ 
    "_id" : "7jw7ymdcZfc4JR6vh", 
    "userId" : "RodAzLsTifXSwXubZ", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:39:04.794+0000"), 
    "updatedAt" : ISODate("2016-01-07T14:40:43.701+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 16.1, 
    "totalActiveTime" : 439.0, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:55.212+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 46.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:32.876+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:17.652+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String [] args){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 45.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:06.709+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String[] args){\n        int n = 5;\n        \n        for(int i=1; i<=5; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(49)
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:21.990+0000"), 
            "code" : "public void hellWorld{\n    int n = 5;\n        \n        for(int i=1; i<=5; i++){\n            System.out.println(\"Hello World!\");\n        }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 73.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:51.428+0000"), 
            "code" : "public void helloWorld{\n    int n = 5;\n        \n        for(int i=1; i<=5; i++){\n            System.out.println(\"Hello World!\");\n        }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:27.882+0000"), 
            "code" : "public class helloWorld{\n    public static void main(String[] args){\n        helloWorld(5);\n    }\n    public void helloWorld(int n){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 96.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:14.874+0000"), 
            "code" : "public void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 45.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:28.601+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 16.1
        }
    ]
}
{ 
    "_id" : "NNdmahB3wxZBuHiy6", 
    "userId" : "xA9owZdBuNy9khwNZ", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:43.267+0000"), 
    "updatedAt" : ISODate("2016-01-12T14:00:38.442+0000"), 
    "code" : "public static void helloWorld(int n){\n    \n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 6.8, 
    "totalActiveTime" : 327.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:53.459+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 115.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:55.875+0000"), 
            "code" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n        }\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(50)
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:00.695+0000"), 
            "code" : "public static void helloWorld(int n){\n    \n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 155.7
        }, 
        {
            "date" : ISODate("2016-01-12T14:00:38.441+0000"), 
            "code" : "public static void helloWorld(int n){\n    \n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 6.8
        }
    ], 
    "active" : false
}
{ 
    "_id" : "oXiZuQHtFekipjWmS", 
    "userId" : "uErWfF4oq6nX8rSEz", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:31.105+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:48:44.416+0000"), 
    "code" : "public static void helloWorld(int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 13.6, 
    "totalActiveTime" : 348.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:41:24.947+0000"), 
            "code" : "import java.util.*;\n\npublic class Test {\n    \n    public static void main(String[] args) {\n        \n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        if(n>=0) {\n            helloWorld(n);\n        }\n        \n    }\n    \n    public static helloWorld(int n) {\n        for(int i = 0; i <= n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 168.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:43.973+0000"), 
            "code" : "import java.util.*;\n\npublic class Test {\n    \n    public static void main(String[] args) {\n        \n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        if(n>=0) {\n            helloWorld(n);\n        }\n        \n    }\n    \n    public static void helloWorld(int n) {\n        for(int i = 0; i <= n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:34.227+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i = 0; i <= n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:47.038+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i = 0; i <= n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:01.668+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:06.343+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 68.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:20.936+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 13.6
        }
    ]
}
{ 
    "_id" : "R5JxcYu3KA5oWfXZX", 
    "userId" : "iGBq7miKKc7y2CDFf", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:31.055+0000"), 
    "updatedAt" : ISODate("2016-01-07T05:51:29.511+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0 ;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(24), 
    "totalActiveTime" : 373.7, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:24.921+0000"), 
            "code" : "public static helloworld(int n){\n    for(int i = 0 ;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 109.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:48.758+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0 ;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 23.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:51.715+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0 ;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 216.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:18.701+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0 ;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(24)
        }
    ]
}
{ 
    "_id" : "2AKyPNkJdCdbGy3a6", 
    "userId" : "8tuwbsk9rh5E7pjGu", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:40:36.960+0000"), 
    "updatedAt" : ISODate("2016-01-07T05:36:51.420+0000"), 
    "code" : "public static void helloWorld(int n){\n\t   for(int i=0;i<n;i++){\n\t       System.out.println(\"Hello World!\");\n\t   } \n\t}", 
    "status" : "PASS", 
    "activeTime" : 28.1, 
    "totalActiveTime" : 455.1000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:42:03.443+0000"), 
            "code" : "public class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:44.444+0000"), 
            "code" : "public class Hello{\n\tstatic void main(String[] args){\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 82.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:20.512+0000"), 
            "code" : "public class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:42.032+0000"), 
            "code" : "public class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:51.671+0000"), 
            "code" : "public class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:48:26.997+0000"), 
            "code" : "public static void helloWorld(int n){\n\t   int i=0;\n\t   for(i<n){\n\t       System.out.println(\"Hello World!\");\n\t       i++;\n\t   } \n\t}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 156.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:49:10.837+0000"), 
            "code" : "public static void helloWorld(int n){\n\t   for(i=0;i++;i<n){\n\t       System.out.println(\"Hello World!\");\n\t   } \n\t}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:49:19.109+0000"), 
            "code" : "public static void helloWorld(int n){\n\t   for(i=0;i++;i<n){\n\t       System.out.println(\"Hello World!\");\n\t   } \n\t}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(7)
        }, 
        {
            "date" : ISODate("2016-01-07T04:49:50.453+0000"), 
            "code" : "public static void helloWorld(int n){\n\t   for(int i=0;i++;i<n){\n\t       System.out.println(\"Hello World!\");\n\t   } \n\t}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:50:31.380+0000"), 
            "code" : "public static void helloWorld(int n){\n\t   for(int i=0;i<n;i++){\n\t       System.out.println(\"Hello World!\");\n\t   } \n\t}", 
            "status" : "PASS", 
            "activeTime" : 28.1
        }
    ]
}
{ 
    "_id" : "26x5dpJAXYEAPRGrJ", 
    "userId" : "5ncPQugL7uzRKQC92", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T04:52:05.703+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:42:57.934+0000")
}
{ 
    "_id" : "kfXJ9ATZMozNJfqek", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "code" : "public static void helloWorld(int n) {\n    for(int i=0; i<n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 17.3, 
    "updatedAt" : ISODate("2016-01-07T05:10:13.963+0000"), 
    "totalActiveTime" : 256.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-05T15:14:16.117+0000"), 
            "code" : "public static void helloWorld", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 131.1
        }, 
        {
            "date" : ISODate("2016-01-05T15:14:55.988+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i=0; i<n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 39.1
        }, 
        {
            "date" : ISODate("2016-01-07T05:04:57.722+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i=0; i<n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1.6
        }, 
        {
            "date" : ISODate("2016-01-07T05:05:06.985+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i=0; i<n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.9
        }, 
        {
            "date" : ISODate("2016-01-07T05:07:55.765+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i=0; i<n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 57.3
        }, 
        {
            "date" : ISODate("2016-01-07T05:08:14.227+0000"), 
            "code" : "public static void helloWorld(int n) {\n    for(int i=0; i<n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 17.3
        }
    ]
}
{ 
    "_id" : "gk6w6xF3JRPKE5hiT", 
    "userId" : "4TBa8dYQgPqqp9jSB", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:39:52.969+0000"), 
    "updatedAt" : ISODate("2016-01-07T10:12:04.491+0000"), 
    "code" : "//just writing the method is sufficient, you may omit the class\n\n    \n    public static void helloWorld(int n){\n    \n        for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 23.8, 
    "totalActiveTime" : 543.4, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:59.708+0000"), 
            "code" : "public static void helloWorld(int n){\n    \n    for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 60.7
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:00.876+0000"), 
            "code" : "public class HelloWorld{\n    \n    public static main(String args[]){\n        \n        helloWorld(5);\n        \n    }\n    \n}\n\npublic static void helloWorld(int n){\n    \n    for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 55.9
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:31.243+0000"), 
            "code" : "public class HelloWorld{\n    \n    public static void main(String args[]){\n        \n        helloWorld(5);\n        \n    }\n    \n}\n\npublic static void helloWorld(int n){\n    \n    for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.8
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:54.692+0000"), 
            "code" : "public class HelloWorld{\n    \n    public static void main(String[] args){\n        \n        helloWorld(5);\n        \n    }\n    \n}\n\npublic static void helloWorld(int n){\n    \n    for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:13.161+0000"), 
            "code" : "public class HelloWorld{\n    \n    public static void main(String[] args){\n        \n        helloWorld(5);\n        \n    }\n    \n}\n\npublic static void helloWorld(int n){\n    \n    for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:44:45.011+0000"), 
            "code" : "public class HelloWorld{\n    \n    public static void main(String[] args){\n        \n        helloWorld(5);\n        \n    }\n    \n    public static void helloWorld(int n){\n    \n    for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n    }\n    \n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 91.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:58.033+0000"), 
            "code" : "public class HelloWorld{\n    \n    public static void main(String[] args){\n        \n        helloWorld(5);\n        \n    }\n    \n    public static void helloWorld(int n){\n    \n        for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n        }\n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:39.680+0000"), 
            "code" : "public class HelloWorld{\n    \n    public static void main(String[] args){\n        \n        helloWorld(5);\n        \n    }\n    \n    \n}\n\npublic static void helloWorld(int n){\n    \n        for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n        }\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 46.5
        }, 
        {
            "date" : ISODate("2016-01-07T04:47:10.501+0000"), 
            "code" : "public class HelloWorld{\n    \n    public static void main(String[] args){\n        \n        ddd(5);\n        \n    }\n    \n    public static void ddd(int n){\n    \n        for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n        }\n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:49:25.637+0000"), 
            "code" : "public class Test{\n    \n    public static void main(String[] args){\n        \n        helloWorld(5);\n        \n    }\n    \n    public static void helloWorld(int n){\n    \n        for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n        }\n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.1
        }, 
        {
            "date" : ISODate("2016-01-07T05:15:41.717+0000"), 
            "code" : "//just writing the method is sufficient, you may omit the class\n\n    \n    public static void helloWorld(int n){\n    \n        for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n        }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 62.9
        }, 
        {
            "date" : ISODate("2016-01-07T05:16:06.610+0000"), 
            "code" : "//just writing the method is sufficient, you may omit the class\n\n    \n    public static void helloWorld(int n){\n    \n        for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 23.8
        }
    ]
}
{ 
    "_id" : "uRwbhk2dMDpC7HKyZ", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "ep4qDccZAv8NBcrG8", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:27:18.186+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:16:28.776+0000")
}
{ 
    "_id" : "ZKtDtEi48AzyZwph8", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:28:23.921+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:16:28.787+0000")
}
{ 
    "_id" : "DyBFYAxzE2GYw2wh4", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "boxJennKMpdxAJWvY", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:29:06.196+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:16:28.798+0000")
}
{ 
    "_id" : "QBiwR7yBhb9fazAgH", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:20:43.597+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:27:12.463+0000"), 
    "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int numCounters = supermarket.getNumCounters();\n    String counterStatus = \"\";\n    String lastCounterStatus = \"\";\n    \n    for (int i = 1 ; i <= numCounters - 1; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() == null) {\n            counterStatus += i + \"-closed,\";\n        }\n        else {\n            counterStatus += i + \"-open,\";\n        }\n    }\n        Counter lastCounter = supermarket.getCounter(numCounters);\n        if (lastCounter.getCashier() == null) {\n            lastCounterStatus += lastCounter + \"-closed\";\n        }\n        else {\n            lastCounterStatus += lastCounter + \"-open\";\n        }\n        counterStatus += numCounters + lastCounterStatus;  \n    \n    return counterStatus;\n}", 
    "status" : "FAIL", 
    "activeTime" : 15.9, 
    "totalActiveTime" : 1030.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T05:39:21.108+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int numCounters = supermarket.getCounters();\n    String counterStatus = \"\";\n    for (int i = 1 ; i <= numCounters - 1; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() == null) {\n            counterStatus += i + \"-closed,\";\n        }\n        else {\n            counterStatus += i + \"-open,\"\n        }\n    \n    }\n    return counterStatus;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(711)
        }, 
        {
            "date" : ISODate("2016-01-07T05:39:35.493+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int numCounters = supermarket.getCounters();\n    String counterStatus = \"\";\n    for (int i = 1 ; i <= numCounters - 1; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() == null) {\n            counterStatus += i + \"-closed,\";\n        }\n        else {\n            counterStatus += i + \"-open,\";\n        }\n    \n    }\n    return counterStatus;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-01-07T05:39:46.941+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int numCounters = supermarket.getNumCounters();\n    String counterStatus = \"\";\n    for (int i = 1 ; i <= numCounters - 1; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() == null) {\n            counterStatus += i + \"-closed,\";\n        }\n        else {\n            counterStatus += i + \"-open,\";\n        }\n    \n    }\n    return counterStatus;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-01-07T05:44:42.673+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int numCounters = supermarket.getNumCounters();\n    String counterStatus = \"\";\n    String lastCounterStatus = \"\";\n    \n    for (int i = 1 ; i <= numCounters - 1; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() == null) {\n            counterStatus += i + \"-closed,\";\n        }\n        else {\n            counterStatus += i + \"-open,\";\n        }\n    }\n        Counter lastCounter = supermarket.getCounter(numCounters);\n        if (counter.getCashier() == null) {\n            lastCounterStatus += i + \"-closed\";\n        }\n        else {\n            lastCounterStatus += i + \"-open\";\n        }\n        counterStatus += numCounters + lastCounterStatus;  \n    }\n    return counterStatus;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 229.6
        }, 
        {
            "date" : ISODate("2016-01-07T05:45:00.773+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int numCounters = supermarket.getNumCounters();\n    String counterStatus = \"\";\n    String lastCounterStatus = \"\";\n    \n    for (int i = 1 ; i <= numCounters - 1; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() == null) {\n            counterStatus += i + \"-closed,\";\n        }\n        else {\n            counterStatus += i + \"-open,\";\n        }\n    }\n        Counter lastCounter = supermarket.getCounter(numCounters);\n        if (counter.getCashier() == null) {\n            lastCounterStatus += i + \"-closed\";\n        }\n        else {\n            lastCounterStatus += i + \"-open\";\n        }\n        counterStatus += numCounters + lastCounterStatus;  \n    \n    return counterStatus;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-01-07T05:45:31.865+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int numCounters = supermarket.getNumCounters();\n    String counterStatus = \"\";\n    String lastCounterStatus = \"\";\n    \n    for (int i = 1 ; i <= numCounters - 1; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() == null) {\n            counterStatus += i + \"-closed,\";\n        }\n        else {\n            counterStatus += i + \"-open,\";\n        }\n    }\n        Counter lastCounter = supermarket.getCounter(numCounters);\n        if (counter.getCashier() == null) {\n            lastCounterStatus += lastCounter + \"-closed\";\n        }\n        else {\n            lastCounterStatus += lastCounter + \"-open\";\n        }\n        counterStatus += numCounters + lastCounterStatus;  \n    \n    return counterStatus;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.3
        }, 
        {
            "date" : ISODate("2016-01-07T05:45:48.661+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int numCounters = supermarket.getNumCounters();\n    String counterStatus = \"\";\n    String lastCounterStatus = \"\";\n    \n    for (int i = 1 ; i <= numCounters - 1; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() == null) {\n            counterStatus += i + \"-closed,\";\n        }\n        else {\n            counterStatus += i + \"-open,\";\n        }\n    }\n        Counter lastCounter = supermarket.getCounter(numCounters);\n        if (lastCounter.getCashier() == null) {\n            lastCounterStatus += lastCounter + \"-closed\";\n        }\n        else {\n            lastCounterStatus += lastCounter + \"-open\";\n        }\n        counterStatus += numCounters + lastCounterStatus;  \n    \n    return counterStatus;\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.9
        }
    ]
}
{ 
    "_id" : "EGsqhQrnX5jkxyvDG", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T05:53:43.088+0000"), 
    "updatedAt" : ISODate("2016-01-07T06:16:28.803+0000")
}
{ 
    "_id" : "25kRJdwPzFd6Zuk2Z", 
    "userId" : "3JZczjMHX4MexPD7k", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T04:38:26.328+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:11:20.809+0000"), 
    "code" : "//you only need this, with the proper method name\npublic static void sayHi(){\n    for(int i = 0; i < 6; i++){\n        System.out.println(\"helloWorld!\");\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 9.4, 
    "totalActiveTime" : 1010.6, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:39:21.615+0000"), 
            "code" : "public class Hi{\n    public static void main(Stirng[] args){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.1
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:03.609+0000"), 
            "code" : "public class Hi{\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:41:02.275+0000"), 
            "code" : "public class Hi{\n    public static void main(String[] args){\n        for(int i = 0; i < 6; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 58.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:42:38.904+0000"), 
            "code" : "public class Hi{\n    public static void main(String[] args){\n        for(int i = 0; i < 6; i++){\n            System.out.println(\"helloWorld!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(97)
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:45.852+0000"), 
            "code" : "public void hi{\n    for(int i = 0; i < 6; i++){\n        System.out.println(\"helloWorld!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 66.2
        }, 
        {
            "date" : ISODate("2016-01-07T04:43:53.707+0000"), 
            "code" : "public static void hi{\n    for(int i = 0; i < 6; i++){\n        System.out.println(\"helloWorld!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.3
        }, 
        {
            "date" : ISODate("2016-01-07T05:34:34.662+0000"), 
            "code" : "import.java.util.*;\n\npublic class Hi{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n        sc.nextLine();\n        hi(n);\n    }\n}\n//you only need this, with the proper method name\npublic static void hi(n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"helloWorld!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 313.5
        }, 
        {
            "date" : ISODate("2016-01-07T05:35:16.765+0000"), 
            "code" : "import.java.util.*;\n\npublic class Hi{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n        sc.nextLine();\n        hi(n);\n    }\n}\n//you only need this, with the proper method name\npublic static void hi(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"helloWorld!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.9
        }, 
        {
            "date" : ISODate("2016-01-07T05:43:27.496+0000"), 
            "code" : "import java.util.*;\n\npublic class Hi{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n        sc.nextLine();\n        sayHi(n);\n    }//you only need this, with the proper method name\n    \n    public static void sayHi(int n){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"helloWorld!\");\n        }\n}\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 59.3
        }, 
        {
            "date" : ISODate("2016-01-07T05:55:45.461+0000"), 
            "code" : "import java.util.*;\n\npublic class Hi{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n        sc.nextLine();\n        sayHi(n);\n    }\n    //you only need this, with the proper method name\n    public static void sayHi(int n){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"helloWorld!\");\n        }\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 66.6
        }, 
        {
            "date" : ISODate("2016-01-07T05:55:57.926+0000"), 
            "code" : "//you only need this, with the proper method name\n    public static void sayHi(int n){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"helloWorld!\");\n        }\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(12)
        }, 
        {
            "date" : ISODate("2016-01-07T05:56:13.717+0000"), 
            "code" : "//you only need this, with the proper method name\n    public static void sayHi(int n){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"helloWorld!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(16)
        }, 
        {
            "date" : ISODate("2016-01-07T05:56:30.933+0000"), 
            "code" : "import java.util.*;\n\npublic class Hi{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n        sc.nextLine();\n        sayHi(n);\n    }\n    //you only need this, with the proper method name\n    public static void sayHi(int n){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"helloWorld!\");\n        }\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.2
        }, 
        {
            "date" : ISODate("2016-01-07T06:29:18.677+0000"), 
            "code" : "//you only need this, with the proper method name\npublic static void sayHi(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"helloWorld!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 153.5
        }, 
        {
            "date" : ISODate("2016-01-07T06:29:27.280+0000"), 
            "code" : "//you only need this, with the proper method name\npublic static void sayHi(){\n    for(int i = 0; i < 6; i++){\n        System.out.println(\"helloWorld!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.4
        }
    ]
}
{ 
    "_id" : "LvMB3M9Qq3CePtswt", 
    "userId" : "FxW9caXRd8vR5Egkk", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T04:38:39.775+0000"), 
    "updatedAt" : ISODate("2016-01-07T12:00:27.745+0000"), 
    "code" : "public static void main(String [] args){\n        \n        helloWorld(2);\n    \n        \n    }\n    \n    public static void helloWorld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.println(\"Hello World!\");    \n        }\n        \n        \n    }", 
    "status" : "PASS", 
    "activeTime" : 11.4, 
    "totalActiveTime" : 559.6999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:40:16.029+0000"), 
            "code" : "public class  Test {\n    \n    public static void main(String [] args){\n        \n        System.out.print(\"Hello world\");\n        \n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 85.3
        }, 
        {
            "date" : ISODate("2016-01-07T04:40:37.037+0000"), 
            "code" : "public class Test {\n    \n    public static void main(String [] args){\n        \n        System.out.print(\"Hello world\");\n        \n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.4
        }, 
        {
            "date" : ISODate("2016-01-07T04:45:38.535+0000"), 
            "code" : "public class Test {\n    \n    public static void main(String [] args){\n        \n        helloworld(2);\n        \n        \n    }\n    \n    public static void helloworld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.print(\"Hello World\");    \n        }\n        \n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 209.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:15.192+0000"), 
            "code" : "public class Test {\n    \n    public static void main(String [] args){\n        \n        helloworld(2);\n        \n        \n    }\n    \n    public static void helloworld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.print(\"Hello World\");    \n        }\n        \n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.6
        }, 
        {
            "date" : ISODate("2016-01-07T04:46:43.125+0000"), 
            "code" : "public class HelloWorld {\n    \n    public static void main(String [] args){\n        \n        helloworld(2);\n        \n        \n    }\n    \n    public static void helloworld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.print(\"Hello World\");    \n        }\n        \n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.9
        }, 
        {
            "date" : ISODate("2016-01-07T05:38:37.990+0000"), 
            "code" : "public class HelloWorld {\n    \n    public static void main(String [] args){\n        \n        helloworld(2);\n        \n        \n    }\n    \n    public static void helloworld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.print(\"Hello World\");    \n        }\n        \n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 67.7
        }, 
        {
            "date" : ISODate("2016-01-07T05:39:05.609+0000"), 
            "code" : "public class HelloWorld {\n    \n    public static void main(String [] args){\n        \n        helloWorld(2);\n    \n        \n    }\n    \n    public static void helloWorld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.print(\"Hello World\");    \n        }\n        \n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(28)
        }, 
        {
            "date" : ISODate("2016-01-07T06:04:26.125+0000"), 
            "code" : "public class HelloWorld {\n    \n    public static void main(String [] args){\n        \n        helloWorld(2);\n    \n        \n    }\n    \n    public static void helloWorld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.print(\"Hello World\");    \n        }\n        \n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.1
        }, 
        {
            "date" : ISODate("2016-01-07T06:04:46.445+0000"), 
            "code" : "public class HelloWorld {\n    \n    public static void main(String [] args){\n        \n        helloWorld(2);\n    \n        \n    }\n    \n    public void helloWorld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.print(\"Hello World\");    \n        }\n        \n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(20)
        }, 
        {
            "date" : ISODate("2016-01-07T06:05:10.756+0000"), 
            "code" : "public static void main(String [] args){\n        \n        helloWorld(2);\n    \n        \n    }\n    \n    public static void helloWorld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.print(\"Hello World\");    \n        }\n        \n        \n    }", 
            "status" : "FAIL", 
            "activeTime" : 24.6
        }, 
        {
            "date" : ISODate("2016-01-07T06:05:24.498+0000"), 
            "code" : "public static void main(String [] args){\n        \n        helloWorld(2);\n    \n        \n    }\n    \n    public static void helloWorld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.println(\"Hello World\");    \n        }\n        \n        \n    }", 
            "status" : "FAIL", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-01-07T06:05:35.372+0000"), 
            "code" : "public static void main(String [] args){\n        \n        helloWorld(2);\n    \n        \n    }\n    \n    public static void helloWorld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.println(\"Hello World!\");    \n        }\n        \n        \n    }", 
            "status" : "PASS", 
            "activeTime" : 11.4
        }
    ]
}
{ 
    "_id" : "y3WBDeHrrvuzerEkA", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : true, 
    "updatedAt" : ISODate("2016-01-19T15:42:09.069+0000"), 
    "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 65.8, 
    "totalActiveTime" : 1110.0, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T04:02:59.336+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 47.8
        }, 
        {
            "date" : ISODate("2016-01-07T05:07:59.783+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\")\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 843.5
        }, 
        {
            "date" : ISODate("2016-01-07T05:08:15.461+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\"\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.7
        }, 
        {
            "date" : ISODate("2016-01-07T06:30:25.301+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n    }\n    Scanner sc = new Scanner(System.in);\n    int a = sc.next();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.9
        }, 
        {
            "date" : ISODate("2016-01-07T06:30:46.150+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n    }\n    Scanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.8
        }, 
        {
            "date" : ISODate("2016-01-07T06:31:18.985+0000"), 
            "code" : "public static void helloWorld(int n){\n    Scanner sc = new Scanner(System.in);\n    for(int i = 0; i < n; i++){\n        String a = sc.nextLine();\n        System.out.println(\"Hello World!\");\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 33.4
        }, 
        {
            "date" : ISODate("2016-01-07T06:31:28.393+0000"), 
            "code" : "public static void helloWorld(int n){\n    Scanner sc = new Scanner(System.in);\n    for(int i = 0; i < n; i++){\n        String a = sc.nextLine();\n        System.out.println(\"Hello World!\");\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 9.5
        }, 
        {
            "date" : ISODate("2016-01-07T09:47:29.601+0000"), 
            "code" : "public class Hello{\n    public static void main(String[] args){\n        \n    }\n    \n    public static void helloWorld(){\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.5
        }, 
        {
            "date" : ISODate("2016-01-19T15:40:47.861+0000"), 
            "code" : "public class Hello{\n    public static void main(String[] args){\n        \n    }\n    \n    public static void helloWorld(){\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.4
        }, 
        {
            "date" : ISODate("2016-01-19T15:40:52.469+0000"), 
            "code" : "public class Hello{\n    public static void main(String[] args){\n        \n    }\n    \n    public static void helloWorld(){\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.7
        }, 
        {
            "date" : ISODate("2016-01-19T15:42:09.068+0000"), 
            "code" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 65.8
        }
    ]
}
{ 
    "_id" : "iZTtFPR5YtNPMtkqi", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "4gGxjgkpZNbmLKFfL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T06:57:06.157+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:56:56.543+0000")
}
{ 
    "_id" : "ConFkQ4NBsMgGgMcJ", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "WwWBx6tXuhhJiNobG", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T07:19:45.887+0000"), 
    "updatedAt" : ISODate("2016-01-07T07:31:54.474+0000")
}
{ 
    "_id" : "i9SdnkbGEypGNfQ4q", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "Wc6Zhy6364fqmnMk6", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T09:22:04.396+0000"), 
    "updatedAt" : ISODate("2016-01-10T06:17:40.772+0000"), 
    "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rstring+\",\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
    "status" : "PASS", 
    "activeTime" : 371.8, 
    "totalActiveTime" : 3731.1, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T09:22:18.198+0000"), 
            "code" : "class Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.4
        }, 
        {
            "date" : ISODate("2016-01-07T09:22:49.973+0000"), 
            "code" : "class Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-01-07T09:23:57.157+0000"), 
            "code" : "class Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 49.2
        }, 
        {
            "date" : ISODate("2016-01-07T09:26:06.213+0000"), 
            "code" : "class Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 26.1
        }, 
        {
            "date" : ISODate("2016-01-07T09:27:18.308+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 60.7
        }, 
        {
            "date" : ISODate("2016-01-07T09:28:00.141+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.4
        }, 
        {
            "date" : ISODate("2016-01-07T09:29:50.501+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 68.5
        }, 
        {
            "date" : ISODate("2016-01-07T09:30:12.624+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.3
        }, 
        {
            "date" : ISODate("2016-01-07T09:30:41.028+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.8
        }, 
        {
            "date" : ISODate("2016-01-07T09:31:09.557+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 26.8
        }, 
        {
            "date" : ISODate("2016-01-07T09:33:01.276+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 92.6
        }, 
        {
            "date" : ISODate("2016-01-07T09:34:19.496+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n        public String getClubPlayers()\n        {\n            if(this.players is null)\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 77.1
        }, 
        {
            "date" : ISODate("2016-01-07T09:36:50.364+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n        public String getClubPlayers()\n        {\n            if(this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "FAIL", 
            "activeTime" : 39.5
        }, 
        {
            "date" : ISODate("2016-01-07T09:38:14.500+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n        public String getClubPlayers()\n        {\n            if(this.players==null)\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : NumberInt(36)
        }, 
        {
            "date" : ISODate("2016-01-07T09:39:07.397+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n\n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 45.4
        }, 
        {
            "date" : ISODate("2016-01-07T10:01:56.984+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public String addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>; \n              this.players.Add(p);\n            }\n            else\n            {\n                this.players.Add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 197.4
        }, 
        {
            "date" : ISODate("2016-01-07T10:02:43.980+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public String addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>; \n              this.players.Add(p);\n            }\n            else\n            {\n                this.players.Add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(13)
        }, 
        {
            "date" : ISODate("2016-01-07T10:39:07.556+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public String addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>; \n              this.players.Add(p);\n            }\n            else\n            {\n                this.players.Add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.2
        }, 
        {
            "date" : ISODate("2016-01-07T10:40:16.577+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public String addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.Add(p);\n            }\n            else\n            {\n                this.players.Add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 89.2
        }, 
        {
            "date" : ISODate("2016-01-07T10:40:40.932+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public String addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.7
        }, 
        {
            "date" : ISODate("2016-01-07T10:41:06.148+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 16.1
        }, 
        {
            "date" : ISODate("2016-01-07T11:05:07.876+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 93.1
        }, 
        {
            "date" : ISODate("2016-01-07T11:11:32.100+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(349)
        }, 
        {
            "date" : ISODate("2016-01-07T11:12:00.720+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players Present\";\n            else\n                return \"Players Present\";\n        }\n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-01-07T11:44:57.764+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\"\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName()\n                else\n                    int count=0\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName()\n                        else\n                            rstring=rsting+\"'\"+p.getPName()\n                        count++\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                    \n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 553.9
        }, 
        {
            "date" : ISODate("2016-01-07T11:45:28.725+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\"\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName()\n                else\n                    int count=0\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName()\n                        else\n                            rstring=rsting+\"'\"+p.getPName()\n                        count++\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                    \n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.2
        }, 
        {
            "date" : ISODate("2016-01-07T11:45:42.036+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\"\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName()\n                else\n                    int count=0\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName()\n                        else\n                            rstring=rsting+\"'\"+p.getPName()\n                        count++\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                    \n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 978.9
        }, 
        {
            "date" : ISODate("2016-01-07T11:45:50.878+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\"\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName()\n                else\n                    int count=0\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName()\n                        else\n                            rstring=rsting+\"'\"+p.getPName()\n                        count++\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                    \n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.7
        }, 
        {
            "date" : ISODate("2016-01-07T11:46:12.261+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                    int count=0\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rsting+\"'\"+p.getPName();\n                        count++\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                    \n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-01-07T11:46:28.100+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rsting+\"'\"+p.getPName();\n                        count++\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                    \n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-01-07T11:46:41.397+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rsting+\"'\"+p.getPName();\n                        count++\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.4
        }, 
        {
            "date" : ISODate("2016-01-07T11:46:56.357+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rsting+\"'\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-01-07T11:47:59.652+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rsting+\"'\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n}\n\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 58.6
        }, 
        {
            "date" : ISODate("2016-01-07T11:50:32.005+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String getClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rsting+\"'\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 109.3
        }, 
        {
            "date" : ISODate("2016-01-07T11:50:48.372+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rsting+\"'\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-01-07T11:51:16.993+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rsting+\",\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.5
        }, 
        {
            "date" : ISODate("2016-01-07T11:55:31.441+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rsting+\",\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.8
        }, 
        {
            "date" : ISODate("2016-01-07T11:56:59.989+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rstring+\",\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-01-07T11:58:29.989+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rstring+\",\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 28.8
        }, 
        {
            "date" : ISODate("2016-01-07T11:59:37.205+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rstring+\",\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "FAIL", 
            "activeTime" : 21.9
        }, 
        {
            "date" : ISODate("2016-01-07T12:00:50.981+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rstring+\",\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 23.6
        }, 
        {
            "date" : ISODate("2016-01-07T12:13:59.224+0000"), 
            "code" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rstring+\",\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 371.8
        }
    ]
}
{ 
    "_id" : "rFEDsRT3k2Lfij7xn", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "kPXtcRnhvN9ZHW47e", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T07:28:55.198+0000"), 
    "updatedAt" : ISODate("2016-01-11T11:20:41.883+0000"), 
    "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
    "status" : "PASS", 
    "activeTime" : 16.9, 
    "totalActiveTime" : 1167.9000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T07:29:29.677+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 449.8
        }, 
        {
            "date" : ISODate("2016-01-07T07:30:33.558+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-01-07T07:43:49.190+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 277.4
        }, 
        {
            "date" : ISODate("2016-01-07T07:44:34.188+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-01-07T07:45:00.246+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 16.1
        }, 
        {
            "date" : ISODate("2016-01-07T07:47:05.173+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 50.8
        }, 
        {
            "date" : ISODate("2016-01-07T07:48:19.877+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "FAIL", 
            "activeTime" : 9.9
        }, 
        {
            "date" : ISODate("2016-01-07T07:51:33.710+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 164.4
        }, 
        {
            "date" : ISODate("2016-01-07T07:52:02.929+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(16)
        }, 
        {
            "date" : ISODate("2016-01-07T07:52:36.393+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "FAIL", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-01-07T07:53:04.934+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 12.2
        }, 
        {
            "date" : ISODate("2016-01-07T07:53:10.302+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 5.4
        }, 
        {
            "date" : ISODate("2016-01-07T09:24:48.860+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 28.5
        }, 
        {
            "date" : ISODate("2016-01-07T12:00:14.369+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 25.5
        }, 
        {
            "date" : ISODate("2016-01-07T12:04:33.813+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 15.2
        }, 
        {
            "date" : ISODate("2016-01-08T05:24:49.978+0000"), 
            "code" : "class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
            "status" : "PASS", 
            "activeTime" : 16.9
        }
    ]
}
{ 
    "_id" : "cXv5sJzFEfKZWMjEf", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "Wc6Zhy6364fqmnMk6", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T14:35:39.010+0000"), 
    "updatedAt" : ISODate("2016-01-07T14:39:29.230+0000")
}
{ 
    "_id" : "7EEoFmGaKsJBTSNJL", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "kPXtcRnhvN9ZHW47e", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-07T14:35:25.382+0000"), 
    "updatedAt" : ISODate("2016-01-08T10:38:26.218+0000"), 
    "code" : "public class Book{\n    private String title;\n    private int price;\n\n    \n    public void setTitle(String title){\n        this.title = title;\n    }\n    \n    public void setPrice(int price){\n        this.price = price;\n    }\n    \n    public String getTitle(){\n        return title;\n    }\n    \n    public int getPrice(){\n        return price;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 10.9, 
    "totalActiveTime" : 166.6, 
    "history" : [
        {
            "date" : ISODate("2016-01-07T14:38:13.447+0000"), 
            "code" : "public class Book{\n    private String title;\n    private int price;\n    \n    public Book(String title, int price){\n        this.title = title;\n        this.price = price;\n    }\n    \n    public void setTitle(String title){\n        this.title = title;\n    }\n    \n    public void setPrice(int price){\n        this.price = price;\n    }\n    \n    public String getTitle(){\n        return title;\n    }\n    \n    public int getPrice(){\n        return price;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 155.7
        }, 
        {
            "date" : ISODate("2016-01-07T14:38:21.995+0000"), 
            "code" : "public class Book{\n    private String title;\n    private int price;\n\n    \n    public void setTitle(String title){\n        this.title = title;\n    }\n    \n    public void setPrice(int price){\n        this.price = price;\n    }\n    \n    public String getTitle(){\n        return title;\n    }\n    \n    public int getPrice(){\n        return price;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 10.9
        }
    ]
}
{ 
    "_id" : "DQiuRKejRffzXbbS7", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "kPXtcRnhvN9ZHW47e", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T14:48:47.719+0000"), 
    "updatedAt" : ISODate("2016-01-07T16:52:58.563+0000")
}
{ 
    "_id" : "PqK7aeBvbPrb9owKW", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : false, 
    "updatedAt" : ISODate("2016-01-08T03:37:52.269+0000")
}
{ 
    "_id" : "Naec4QXe9wLwD4Hnr", 
    "userId" : "5ncPQugL7uzRKQC92", 
    "questionId" : "kPXtcRnhvN9ZHW47e", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-08T05:20:50.061+0000"), 
    "updatedAt" : ISODate("2016-01-08T05:21:32.885+0000")
}
{ 
    "_id" : "HXJZgqkDGbze7McPG", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-09T13:14:57.451+0000"), 
    "updatedAt" : ISODate("2016-01-09T13:16:46.356+0000")
}
{ 
    "_id" : "euKxx9G8miAKkuc3e", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "Wc6Zhy6364fqmnMk6", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-07T12:51:26.541+0000"), 
    "updatedAt" : ISODate("2016-01-09T17:11:25.708+0000"), 
    "code" : "public class Club {\n    String name;\n    ArrayList<Player> lst = new ArrayList<Player>();\n    \n    public void setCName(String name) {\n        this.name = name;\n    }\n    \n    public void addPlayer(Player p) {\n        lst.add(p);\n    }\n    \n    public String getCName() {\n        return name;\n    }\n    \n    public void printClubPlayers() {\n        System.out.println(\"No\");\n    }\n    \n}\n\npublic class Player {\n    String name;\n    \n    public void setPName(String name) {\n        this.name = name;\n    }\n    \n    public String getPName() {\n        return name;\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 6.2, 
    "totalActiveTime" : 499.99999999999994, 
    "history" : [
        {
            "date" : ISODate("2016-01-09T16:09:34.743+0000"), 
            "code" : "public class Club {\n    \n}\n\npublic class Player {\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 82.4
        }, 
        {
            "date" : ISODate("2016-01-09T16:11:01.390+0000"), 
            "code" : "public class Club {\n    String name;\n    \n    public void setCName(String name) {\n        this.name = name;\n    }\n    \n    public void addPlayer(Player p) {\n        \n    }\n    \n    public String getCName() {\n        return name;\n    }\n}\n\npublic class Player {\n    String name;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 86.7
        }, 
        {
            "date" : ISODate("2016-01-09T16:13:37.892+0000"), 
            "code" : "public class Club {\n    String name;\n    ArrayList<Player> lst = new ArrayList<Player>();\n    \n    public void setCName(String name) {\n        this.name = name;\n    }\n    \n    public void addPlayer(Player p) {\n        lst.add(p);\n    }\n    \n    public String getCName() {\n        return name;\n    }\n    \n    public printClubPlayers() {\n        System.out.println(\"No\");\n    }\n    \n}\n\npublic class Player {\n    String name;\n    \n    public void setPName(String name) {\n        this.name = name;\n    }\n    \n    public String getPName() {\n        return name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 156.4
        }, 
        {
            "date" : ISODate("2016-01-09T16:14:35.434+0000"), 
            "code" : "public class Club {\n    String name;\n    ArrayList<Player> lst = new ArrayList<Player>();\n    \n    public void setCName(String name) {\n        this.name = name;\n    }\n    \n    public void addPlayer(Player p) {\n        lst.add(p);\n    }\n    \n    public String getCName() {\n        return name;\n    }\n    \n    public void printClubPlayers() {\n        System.out.println(\"No\");\n    }\n    \n}\n\npublic class Player {\n    String name;\n    \n    public void setPName(String name) {\n        this.name = name;\n    }\n    \n    public String getPName() {\n        return name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 57.7
        }, 
        {
            "date" : ISODate("2016-01-09T16:15:44.492+0000"), 
            "code" : "public class Club {\n    String name;\n    ArrayList<Player> lst = new ArrayList<Player>();\n    \n    public void setCName(String name) {\n        this.name = name;\n    }\n    \n    public void addPlayer(Player p) {\n        lst.add(p);\n    }\n    \n    public String getCName() {\n        return name;\n    }\n    \n    public void printClubPlayers() {\n        System.out.println(\"No\");\n    }\n    \n}\n\npublic class Player {\n    String name;\n    \n    public void setPName(String name) {\n        this.name = name;\n    }\n    \n    public String getPName() {\n        return name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 66.6
        }, 
        {
            "date" : ISODate("2016-01-09T16:16:33.101+0000"), 
            "code" : "public class Club {\n    String name;\n    ArrayList<Player> lst = new ArrayList<Player>();\n    \n    public void setCName(String name) {\n        this.name = name;\n    }\n    \n    public void addPlayer(Player p) {\n        lst.add(p);\n    }\n    \n    public String getCName() {\n        return name;\n    }\n    \n    public void printClubPlayers() {\n        System.out.println(\"No\");\n    }\n    \n}\n\npublic class Player {\n    String name;\n    \n    public void setPName(String name) {\n        this.name = name;\n    }\n    \n    public String getPName() {\n        return name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(44)
        }, 
        {
            "date" : ISODate("2016-01-09T16:32:14.180+0000"), 
            "code" : "public class Club {\n    String name;\n    ArrayList<Player> lst = new ArrayList<Player>();\n    \n    public void setCName(String name) {\n        this.name = name;\n    }\n    \n    public void addPlayer(Player p) {\n        lst.add(p);\n    }\n    \n    public String getCName() {\n        return name;\n    }\n    \n    public void printClubPlayers() {\n        System.out.println(\"No\");\n    }\n    \n}\n\npublic class Player {\n    String name;\n    \n    public void setPName(String name) {\n        this.name = name;\n    }\n    \n    public String getPName() {\n        return name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.2
        }
    ]
}
{ 
    "_id" : "zhWETevKusYS3tH2n", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "N7EFeaYxKcxDW8Fqw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-09T14:55:12.591+0000"), 
    "updatedAt" : ISODate("2016-01-14T18:05:14.558+0000"), 
    "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 17.8, 
    "totalActiveTime" : 5752.100000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-09T14:56:09.693+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\npublic class Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 820.3
        }, 
        {
            "date" : ISODate("2016-01-09T14:57:33.966+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\npublic class Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.7
        }, 
        {
            "date" : ISODate("2016-01-09T16:02:45.991+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\npublic class Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.6
        }, 
        {
            "date" : ISODate("2016-01-09T16:04:21.334+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\npublic class Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(3)
        }, 
        {
            "date" : ISODate("2016-01-09T16:16:51.393+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 127.1
        }, 
        {
            "date" : ISODate("2016-01-09T16:38:16.640+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\npublic class Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 78.1
        }, 
        {
            "date" : ISODate("2016-01-09T16:38:29.885+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.3
        }, 
        {
            "date" : ISODate("2016-01-09T16:39:10.535+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(17)
        }, 
        {
            "date" : ISODate("2016-01-09T16:42:10.453+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.6
        }, 
        {
            "date" : ISODate("2016-01-09T16:43:56.892+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 93.9
        }, 
        {
            "date" : ISODate("2016-01-10T03:39:05.510+0000"), 
            "code" : "class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(25)
        }, 
        {
            "date" : ISODate("2016-01-10T03:39:32.182+0000"), 
            "code" : "class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.7
        }, 
        {
            "date" : ISODate("2016-01-10T03:40:27.080+0000"), 
            "code" : "class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.9
        }, 
        {
            "date" : ISODate("2016-01-10T03:40:54.088+0000"), 
            "code" : "public class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.9
        }, 
        {
            "date" : ISODate("2016-01-10T03:41:11.629+0000"), 
            "code" : "import java.util.*;\n\nclass Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.6
        }, 
        {
            "date" : ISODate("2016-01-10T03:41:36.182+0000"), 
            "code" : "import java.util.*;\n\nclass Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.6
        }, 
        {
            "date" : ISODate("2016-01-10T03:42:09.291+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.2
        }, 
        {
            "date" : ISODate("2016-01-10T03:42:35.355+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n\t\n\tclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(26)
        }, 
        {
            "date" : ISODate("2016-01-10T03:42:55.016+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\npublic class Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Members> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t\tleader = null;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-01-10T03:44:10.752+0000"), 
            "code" : "import java.util.*;\n\nclass Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.1
        }, 
        {
            "date" : ISODate("2016-01-10T03:44:22.946+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.2
        }, 
        {
            "date" : ISODate("2016-01-10T03:45:10.301+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(37)
        }, 
        {
            "date" : ISODate("2016-01-10T03:45:52.966+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.2
        }, 
        {
            "date" : ISODate("2016-01-10T03:46:28.622+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.7
        }, 
        {
            "date" : ISODate("2016-01-10T03:46:34.129+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.length();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member leader) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.1
        }, 
        {
            "date" : ISODate("2016-01-10T03:47:06.089+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 31.8
        }, 
        {
            "date" : ISODate("2016-01-10T03:48:06.259+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(24)
        }, 
        {
            "date" : ISODate("2016-01-10T03:48:31.767+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 8.1
        }, 
        {
            "date" : ISODate("2016-01-10T05:38:34.242+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 78.7
        }, 
        {
            "date" : ISODate("2016-01-10T08:12:26.580+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(1714)
        }, 
        {
            "date" : ISODate("2016-01-10T08:21:51.390+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public void String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public void String getName() {\n        return this.name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 346.3
        }, 
        {
            "date" : ISODate("2016-01-10T08:22:18.536+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public void String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public void String getName() {\n        return this.name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.9
        }, 
        {
            "date" : ISODate("2016-01-10T08:23:00.103+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 41.4
        }, 
        {
            "date" : ISODate("2016-01-10T08:29:57.872+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.6
        }, 
        {
            "date" : ISODate("2016-01-10T08:30:57.193+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size();\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 74.1
        }, 
        {
            "date" : ISODate("2016-01-10T08:31:33.882+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 31.8
        }, 
        {
            "date" : ISODate("2016-01-10T08:32:13.497+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-01-10T08:35:49.436+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 190.6
        }, 
        {
            "date" : ISODate("2016-01-10T08:37:08.613+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 27.6
        }, 
        {
            "date" : ISODate("2016-01-10T08:39:00.685+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.9
        }, 
        {
            "date" : ISODate("2016-01-10T08:39:40.236+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.4
        }, 
        {
            "date" : ISODate("2016-01-10T08:43:14.940+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 137.5
        }, 
        {
            "date" : ISODate("2016-01-10T08:43:41.206+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 25.7
        }, 
        {
            "date" : ISODate("2016-01-10T08:59:10.097+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 335.2
        }, 
        {
            "date" : ISODate("2016-01-10T09:06:37.757+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic void doTask(Task task) {\n\t    System.out.println(getName()+\"'s task is \"+task.getName());\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 270.1
        }, 
        {
            "date" : ISODate("2016-01-10T09:07:26.060+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName());\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.8
        }, 
        {
            "date" : ISODate("2016-01-10T09:07:33.517+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 6.6
        }, 
        {
            "date" : ISODate("2016-01-10T09:11:33.264+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(197)
        }, 
        {
            "date" : ISODate("2016-01-10T09:11:56.173+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 8.6
        }, 
        {
            "date" : ISODate("2016-01-10T09:19:57.257+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.3
        }, 
        {
            "date" : ISODate("2016-01-11T08:05:16.511+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 394.7
        }, 
        {
            "date" : ISODate("2016-01-11T08:07:41.851+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 121.6
        }, 
        {
            "date" : ISODate("2016-01-14T18:05:14.557+0000"), 
            "code" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 17.8
        }
    ]
}
{ 
    "_id" : "3oxpgAo657EK4NDbo", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "N7EFeaYxKcxDW8Fqw", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-11T00:00:12.813+0000"), 
    "updatedAt" : ISODate("2016-01-11T11:20:41.869+0000")
}
{ 
    "_id" : "DNaxHyA9onEpjHqBp", 
    "userId" : "5ncPQugL7uzRKQC92", 
    "questionId" : "N7EFeaYxKcxDW8Fqw", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-11T02:07:41.955+0000"), 
    "updatedAt" : ISODate("2016-01-11T02:12:40.936+0000")
}
{ 
    "_id" : "nEMctMC6E6pAeu9WA", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "aMtdrRRTC8YiPKSev", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-11T11:04:56.900+0000"), 
    "updatedAt" : ISODate("2016-01-11T11:20:41.859+0000")
}
{ 
    "_id" : "bLgSz3vNAiLhnNXQF", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "N7EFeaYxKcxDW8Fqw", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-11T12:16:19.904+0000"), 
    "updatedAt" : ISODate("2016-01-11T12:16:19.904+0000")
}
{ 
    "_id" : "nQrMswxikhvkPCac7", 
    "userId" : "83sR4z6favCnL8oBj", 
    "questionId" : "ccZ7suBHz7fcjm6sk", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-14T13:44:14.546+0000"), 
    "updatedAt" : ISODate("2016-01-14T13:44:14.546+0000")
}
{ 
    "_id" : "6yhQFrTyPhorwbq6W", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "MFzatpj9noCJoXTmb", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-16T04:19:19.318+0000"), 
    "updatedAt" : ISODate("2016-01-16T04:19:19.318+0000")
}
{ 
    "_id" : "Mr67F5G5EHMXYZYEX", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "9YWX38nnt22knJscf", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-16T04:19:48.077+0000"), 
    "updatedAt" : ISODate("2016-01-16T04:19:48.077+0000")
}
{ 
    "_id" : "WTh24WPLW7yewo32E", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "MFzatpj9noCJoXTmb", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-17T07:43:20.837+0000"), 
    "updatedAt" : ISODate("2016-01-17T07:43:20.837+0000")
}
{ 
    "_id" : "R4YhaxMrTYYaKhZ7G", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "MFzatpj9noCJoXTmb", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-14T17:53:07.205+0000"), 
    "updatedAt" : ISODate("2016-01-17T10:39:22.665+0000"), 
    "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Department of \" + getDepartment() + \".\";\n    }\n}\n\nclass Student extends Person {\n    private int admissionYear;\n    \n    public Student(String name, int age, int admissionYear) {\n        super(name, age);\n        this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmissionYear() {\n        return admissionYear;\n    }\n    \n    public void setAdmissionYear(int admissionYear) {\n        this.admissionYear = admissionYear;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a student. I was admitted in \" + getAdmissionYear() + \".\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 198.5, 
    "totalActiveTime" : 1731.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-14T17:54:21.609+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return A;\n    }\n}\n\npublic class B extends A {\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.2
        }, 
        {
            "date" : ISODate("2016-01-14T17:54:54.395+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return A;\n    }\n}\n\npublic class B extends A {\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.1
        }, 
        {
            "date" : ISODate("2016-01-14T17:55:06.899+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return A;\n    }\n}\n\nclass B extends A {\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.4
        }, 
        {
            "date" : ISODate("2016-01-14T17:55:54.188+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return A;\n    }\n}\n\nclass B extends A {\n    public B(int value) {\n        super(value);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.2
        }, 
        {
            "date" : ISODate("2016-01-14T17:56:33.101+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B extends A {\n    public B(int value) {\n        super(value);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(39)
        }, 
        {
            "date" : ISODate("2016-01-14T17:57:21.168+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B extends A {\n    public B(int value) {\n        super(value);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.9
        }, 
        {
            "date" : ISODate("2016-01-14T17:59:14.303+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B extends A {\n    \n    public B(int value) {\n        super(value);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 85.1
        }, 
        {
            "date" : ISODate("2016-01-14T17:59:36.004+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B extends A {\n    \n    public B(int value) {\n        super(value);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-01-14T18:00:05.223+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B {\n    public B(int value) {\n        super(value);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.1
        }, 
        {
            "date" : ISODate("2016-01-14T18:03:03.712+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B {\n    private int value;\n    \n    public B(int value) {\n        this.value = value;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(142)
        }, 
        {
            "date" : ISODate("2016-01-14T18:03:24.143+0000"), 
            "code" : "class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B {\n    private int value;\n    \n    public B(int value) {\n        this.value = value;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-01-14T18:04:08.717+0000"), 
            "code" : "class cA {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass cB {\n    private int value;\n    \n    public B(int value) {\n        this.value = value;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.6
        }, 
        {
            "date" : ISODate("2016-01-14T18:04:49.788+0000"), 
            "code" : "class cA {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass cB {\n    private int value;\n    \n    public B(int value) {\n        this.value = value;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.2
        }, 
        {
            "date" : ISODate("2016-01-14T18:07:22.601+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B {\n    private int value;\n    \n    public B(int value) {\n        this.value = value;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 45.9
        }, 
        {
            "date" : ISODate("2016-01-14T18:07:43.113+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B {\n    private int value;\n    \n    public B(int value) {\n        this.value = value;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.4
        }, 
        {
            "date" : ISODate("2016-01-14T18:12:12.063+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B {\n    private int value;\n    \n    public B(int value) {\n        this.value = value;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.4
        }, 
        {
            "date" : ISODate("2016-01-14T18:13:45.654+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B extends A {\n    private int value;\n    \n    public B(int value) {\n        this.value = value;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 93.5
        }, 
        {
            "date" : ISODate("2016-01-14T18:14:02.646+0000"), 
            "code" : "public class A {\n    private int value;\n    \n    public A(int value) {\n        this.value = value;\n    }\n    \n    public int getValue() {\n        return value;\n    }\n}\n\nclass B extends A {\n    public B(int value) {\n        super(value);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 16.7
        }, 
        {
            "date" : ISODate("2016-01-17T08:47:18.819+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public int getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(int name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n    \n    public B(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public void toString() {\n        super.toString() + \" I am a teacher in Deparment of \" + getDepartment() + \".\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 357.8
        }, 
        {
            "date" : ISODate("2016-01-17T08:47:31.369+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public int getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(int name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n    \n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public void toString() {\n        super.toString() + \" I am a teacher in Deparment of \" + getDepartment() + \".\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.7
        }, 
        {
            "date" : ISODate("2016-01-17T08:48:08.670+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public int getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(int name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n    \n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public void toString() {\n        super.toString() + \" I am a teacher in Deparment of \" + getDepartment() + \".\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.7
        }, 
        {
            "date" : ISODate("2016-01-17T08:48:32.891+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(int name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n    \n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        super.toString() + \" I am a teacher in Deparment of \" + getDepartment() + \".\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.3
        }, 
        {
            "date" : ISODate("2016-01-17T08:48:47.440+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n    http://kuala.smu.edu.sg/manageQuestions\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        super.toString() + \" I am a teacher in Deparment of \" + getDepartment() + \".\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-01-17T08:49:09.736+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n    http://kuala.smu.edu.sg/manageQuestions\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        super.toString() + \" I am a teacher in Deparment of \" + getDepartment() + \".\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.2
        }, 
        {
            "date" : ISODate("2016-01-17T08:49:31.647+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        super.toString() + \" I am a teacher in Deparment of \" + getDepartment() + \".\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(22)
        }, 
        {
            "date" : ISODate("2016-01-17T08:50:00.957+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Deparment of \" + getDepartment() + \".\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 28.9
        }, 
        {
            "date" : ISODate("2016-01-17T08:55:57.424+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Deparment of \" + getDepartment() + \".\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-01-17T08:58:55.460+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Department of \" + getDepartment() + \".\";\n    }\n}\n\nclass Student extends Person {\n    private int admissionYear;\n    \n    public Student(String name, int age, int admissionYear) {\n        this.name = name;\n        this.age = age;\n        this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmissionYear() {\n        return admissionYear;\n    }\n    \n    public void setAdmissionYear(int admissionYear) {\n        this.admissionYear = admissionYear;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a student. I was admitted in \" + getAdmissionYear() + \".\"\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 157.3
        }, 
        {
            "date" : ISODate("2016-01-17T08:59:10.273+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Department of \" + getDepartment() + \".\";\n    }\n}\n\nclass Student extends Person {\n    private int admissionYear;\n    \n    public Student(String name, int age, int admissionYear) {\n        this.name = name;\n        this.age = age;\n        this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmissionYear() {\n        return admissionYear;\n    }\n    \n    public void setAdmissionYear(int admissionYear) {\n        this.admissionYear = admissionYear;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a student. I was admitted in \" + getAdmissionYear() + \".\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.8
        }, 
        {
            "date" : ISODate("2016-01-17T08:59:27.725+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Department of \" + getDepartment() + \".\";\n    }\n}\n\nclass Student extends Person {\n    private int admissionYear;\n    \n    public Student(String name, int age, int admissionYear) {\n        super(name, age);\n        this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmissionYear() {\n        return admissionYear;\n    }\n    \n    public void setAdmissionYear(int admissionYear) {\n        this.admissionYear = admissionYear;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a student. I was admitted in \" + getAdmissionYear() + \".\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(17)
        }, 
        {
            "date" : ISODate("2016-01-17T09:02:05.748+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Department of \" + getDepartment() + \".\";\n    }\n}\n\nclass Student extends Person {\n    private int admissionYear;\n    \n    public Student(String name, int age, int admissionYear) {\n        super(name, age);\n        this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmissionYear() {\n        return admissionYear;\n    }\n    \n    public void setAdmissionYear(int admissionYear) {\n        this.admissionYear = admissionYear;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a student. I was admitted in \" + getAdmissionYear() + \".\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.1
        }, 
        {
            "date" : ISODate("2016-01-17T09:04:33.650+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Department of \" + getDepartment() + \".\";\n    }\n}\n\nclass Student extends Person {\n    private int admissionYear;\n    \n    public Student(String name, int age, int admissionYear) {\n        super(name, age);\n        this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmissionYear() {\n        return admissionYear;\n    }\n    \n    public void setAdmissionYear(int admissionYear) {\n        this.admissionYear = admissionYear;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a student. I was admitted in \" + getAdmissionYear() + \".\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.1
        }, 
        {
            "date" : ISODate("2016-01-17T09:05:33.181+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Department of \" + getDepartment() + \".\";\n    }\n}\n\nclass Student extends Person {\n    private int admissionYear;\n    \n    public Student(String name, int age, int admissionYear) {\n        super(name, age);\n        this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmissionYear() {\n        return admissionYear;\n    }\n    \n    public void setAdmissionYear(int admissionYear) {\n        this.admissionYear = admissionYear;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a student. I was admitted in \" + getAdmissionYear() + \".\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 39.3
        }, 
        {
            "date" : ISODate("2016-01-17T10:39:22.665+0000"), 
            "code" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Department of \" + getDepartment() + \".\";\n    }\n}\n\nclass Student extends Person {\n    private int admissionYear;\n    \n    public Student(String name, int age, int admissionYear) {\n        super(name, age);\n        this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmissionYear() {\n        return admissionYear;\n    }\n    \n    public void setAdmissionYear(int admissionYear) {\n        this.admissionYear = admissionYear;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a student. I was admitted in \" + getAdmissionYear() + \".\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 198.5
        }
    ]
}
{ 
    "_id" : "wQsio2ei7kNRCLpfa", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "jRSaK6qdRFXg5HpBs", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-17T10:26:32.049+0000"), 
    "updatedAt" : ISODate("2016-01-21T02:07:20.276+0000"), 
    "code" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 48.7, 
    "totalActiveTime" : 1652.0, 
    "history" : [
        {
            "date" : ISODate("2016-01-17T10:31:56.716+0000"), 
            "code" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1499.4
        }, 
        {
            "date" : ISODate("2016-01-17T10:33:22.466+0000"), 
            "code" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-01-17T10:33:49.332+0000"), 
            "code" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.2
        }, 
        {
            "date" : ISODate("2016-01-17T10:35:14.294+0000"), 
            "code" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.1
        }, 
        {
            "date" : ISODate("2016-01-17T10:35:47.418+0000"), 
            "code" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.5
        }, 
        {
            "date" : ISODate("2016-01-17T10:47:33.230+0000"), 
            "code" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.8
        }, 
        {
            "date" : ISODate("2016-01-17T10:48:03.283+0000"), 
            "code" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.7
        }, 
        {
            "date" : ISODate("2016-01-21T02:07:20.275+0000"), 
            "code" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 48.7
        }
    ]
}
{ 
    "_id" : "aYqE49Zh2H6m6do5X", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "jRSaK6qdRFXg5HpBs", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-17T10:55:16.049+0000"), 
    "updatedAt" : ISODate("2016-01-17T10:55:16.049+0000")
}
{ 
    "_id" : "fwr7qFbNP5dmmy4bk", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "jRSaK6qdRFXg5HpBs", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-17T17:36:41.410+0000"), 
    "updatedAt" : ISODate("2016-01-17T17:36:41.410+0000")
}
{ 
    "_id" : "KhZf4fyWKscKQ9Ezi", 
    "userId" : "5ncPQugL7uzRKQC92", 
    "questionId" : "MFzatpj9noCJoXTmb", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-18T03:29:08.451+0000"), 
    "updatedAt" : ISODate("2016-01-18T03:29:08.451+0000")
}
{ 
    "_id" : "5oYJspZujoXNC7X6o", 
    "userId" : "5ncPQugL7uzRKQC92", 
    "questionId" : "jRSaK6qdRFXg5HpBs", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-18T03:29:48.324+0000"), 
    "updatedAt" : ISODate("2016-01-18T03:29:48.324+0000")
}
{ 
    "_id" : "mvXWpvj8nSHzMHeix", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "MFzatpj9noCJoXTmb", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-18T06:51:26.917+0000"), 
    "updatedAt" : ISODate("2016-01-18T06:51:26.917+0000")
}
{ 
    "_id" : "DHxgtpL68uHCqwNRS", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "jRSaK6qdRFXg5HpBs", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-18T06:53:10.959+0000"), 
    "updatedAt" : ISODate("2016-01-18T06:54:36.072+0000"), 
    "code" : "public class Rectangle extends Shape {\n    private double length;\n    private double weight;\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 117.2, 
    "totalActiveTime" : 117.2, 
    "history" : [
        {
            "date" : ISODate("2016-01-18T06:54:36.071+0000"), 
            "code" : "public class Rectangle extends Shape {\n    private double length;\n    private double weight;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 117.2
        }
    ]
}
{ 
    "_id" : "v9seGPzKCsFWhfivR", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "jRSaK6qdRFXg5HpBs", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-19T04:16:08.665+0000"), 
    "updatedAt" : ISODate("2016-01-19T04:16:08.666+0000")
}
{ 
    "_id" : "xPpGdmjGpqLTJrrqk", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "MFzatpj9noCJoXTmb", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-20T03:32:01.593+0000"), 
    "updatedAt" : ISODate("2016-01-20T03:32:01.594+0000")
}
{ 
    "_id" : "7KMwvoCxMWuhjAAzB", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "jRSaK6qdRFXg5HpBs", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-20T03:32:57.706+0000"), 
    "updatedAt" : ISODate("2016-01-20T03:32:57.706+0000")
}
{ 
    "_id" : "N9tz8Lfy8QwwvobYL", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "NkNBsJBH48ziefayZ", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-21T01:39:59.528+0000"), 
    "updatedAt" : ISODate("2016-01-21T02:32:01.399+0000"), 
    "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract String Purpose();\n\n}\n\n\nclass Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a shoe and generally worn outdoors\";\n\t\t\n\t}\n}\n\n\n class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a slipper and generally worn indoors\";\n\t\t\n\t}\n}", 
    "status" : "PASS", 
    "activeTime" : 13.5, 
    "totalActiveTime" : 1470.6999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-01-21T01:40:38.290+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract void Purpose();\n\n}\n\n\npublic class Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a shoe and generally worn outdoors\");\n\t\t\n\t}\n}\n\n\npublic class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a slipper and generally worn indoors\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 530.3
        }, 
        {
            "date" : ISODate("2016-01-21T01:41:34.903+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract void Purpose();\n\n}\n\n\npublic class Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a shoe and generally worn outdoors\");\n\t\t\n\t}\n}\n\n\npublic class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a slipper and generally worn indoors\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.3
        }, 
        {
            "date" : ISODate("2016-01-21T01:52:11.959+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract void Purpose();\n\n}\n\n\npublic class Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a shoe and generally worn outdoors\");\n\t\t\n\t}\n}\n\n\npublic class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a slipper and generally worn indoors\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 511.2
        }, 
        {
            "date" : ISODate("2016-01-21T01:54:10.400+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract void Purpose();\n\n}\n\n\npublic class Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a shoe and generally worn outdoors\");\n\t\t\n\t}\n}\n\n\npublic class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a slipper and generally worn indoors\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.9
        }, 
        {
            "date" : ISODate("2016-01-21T01:57:41.925+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract void Purpose();\n\n}\n\n\npublic class Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a shoe and generally worn outdoors\");\n\t\t\n\t}\n}\n\n\npublic class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a slipper and generally worn indoors\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 72.6
        }, 
        {
            "date" : ISODate("2016-01-21T01:58:25.671+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract void Purpose();\n\n}\n\n\npublic class Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a shoe and generally worn outdoors\");\n\t\t\n\t}\n}\n\n\npublic class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a slipper and generally worn indoors\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.6
        }, 
        {
            "date" : ISODate("2016-01-21T02:00:53.221+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract void Purpose();\n\n}\n\n\npublic class Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a shoe and generally worn outdoors\");\n\t\t\n\t}\n}\n\n\npublic class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a slipper and generally worn indoors\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 122.3
        }, 
        {
            "date" : ISODate("2016-01-21T02:01:19.524+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract void Purpose();\n\n}\n\n\npublic class Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a shoe and generally worn outdoors\");\n\t\t\n\t}\n}\n\n\npublic class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic void Purpose() {\n\t\tSystem.out.println(\"I am a slipper and generally worn indoors\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-01-21T02:27:58.909+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract String Purpose();\n\n}\n\n\npublic class Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a shoe and generally worn outdoors\";\n\t\t\n\t}\n}\n\n\npublic class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a slipper and generally worn indoors\";\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 105.6
        }, 
        {
            "date" : ISODate("2016-01-21T02:28:14.928+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract String Purpose();\n\n}\n\n\nclass Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a shoe and generally worn outdoors\";\n\t\t\n\t}\n}\n\n\n class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a slipper and generally worn indoors\";\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 15.9
        }, 
        {
            "date" : ISODate("2016-01-21T02:32:01.399+0000"), 
            "code" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract String Purpose();\n\n}\n\n\nclass Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a shoe and generally worn outdoors\";\n\t\t\n\t}\n}\n\n\n class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a slipper and generally worn indoors\";\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 13.5
        }
    ]
}
{ 
    "_id" : "ZuikxPtdL4XK5eb5a", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "NkNBsJBH48ziefayZ", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-21T06:30:10.149+0000"), 
    "updatedAt" : ISODate("2016-01-21T06:30:10.149+0000")
}
{ 
    "_id" : "gCzLBWjbDEEib5hpq", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "dB7th3N8eaNgJWhjy", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-21T06:36:43.939+0000"), 
    "updatedAt" : ISODate("2016-01-21T06:36:43.940+0000")
}
{ 
    "_id" : "ooDNgRYtkfGYbW7Dn", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "LjKCNwu2tEYd8T4JP", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-21T06:36:57.251+0000"), 
    "updatedAt" : ISODate("2016-01-21T06:36:57.251+0000")
}
{ 
    "_id" : "ayJwfBTqF9AWje9LK", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "Wc6Zhy6364fqmnMk6", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-21T06:37:07.736+0000"), 
    "updatedAt" : ISODate("2016-01-21T06:37:07.736+0000")
}
{ 
    "_id" : "oNNGzTCwhzNBrh2sn", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "m8u4AidaqHqXybizW", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-21T06:37:30.551+0000"), 
    "updatedAt" : ISODate("2016-01-21T06:37:30.551+0000")
}
{ 
    "_id" : "TWKwM5PJNv7SfXxeb", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "PxMMv8ckXxErbySwE", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-21T06:37:51.525+0000"), 
    "updatedAt" : ISODate("2016-01-21T06:37:51.525+0000")
}
{ 
    "_id" : "pZmyxfzR42ae4nNGw", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "N7EFeaYxKcxDW8Fqw", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-21T06:38:12.003+0000"), 
    "updatedAt" : ISODate("2016-01-21T06:38:12.004+0000")
}
{ 
    "_id" : "ayyiaF2kXq49YjQBZ", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-21T06:42:54.242+0000"), 
    "updatedAt" : ISODate("2016-01-21T06:42:54.242+0000")
}
{ 
    "_id" : "ks8tvjsCbQaTmnfxe", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-21T08:48:27.398+0000"), 
    "updatedAt" : ISODate("2016-01-21T08:48:27.398+0000")
}
{ 
    "_id" : "dE5yafYku4eeT9TYz", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-21T15:47:48.615+0000"), 
    "updatedAt" : ISODate("2016-03-19T04:22:06.265+0000"), 
    "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            System.out.println(\"The sum is 0.\");\n            return;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            if (cur>0) {\n                sum += cur;\n            }\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(2), 
    "totalActiveTime" : 1102.6000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-21T16:36:56.035+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        while (cur>0) {\n            cur = sc.nextInt();\n            sum += cur;\n        }\n        sum += cur;\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 533.7
        }, 
        {
            "date" : ISODate("2016-01-21T16:38:25.335+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        while (cur>0) {\n            cur = sc.nextInt();\n            sum += cur;\n        }\n        sum += cur;\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.9
        }, 
        {
            "date" : ISODate("2016-01-21T16:39:42.600+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        while (cur>0) {\n            cur = sc.nextInt();\n            sum += cur;\n        }\n        sum += cur;\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-01-21T16:40:50.719+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        while (cur>0) {\n            cur = sc.nextInt();\n            sum += cur;\n        }\n        sum += cur;\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(34)
        }, 
        {
            "date" : ISODate("2016-01-21T16:44:18.827+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            return 0;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            sum += cur;\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 208.4
        }, 
        {
            "date" : ISODate("2016-01-21T16:44:43.356+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            System.out.println(\"The sum is 0.\");\n            return;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            sum += cur;\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.4
        }, 
        {
            "date" : ISODate("2016-01-21T16:46:41.477+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            System.out.println(\"The sum is 0.\");\n            return;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            sum += cur;\n            System.out.println(sum);\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(118)
        }, 
        {
            "date" : ISODate("2016-01-21T16:47:07.965+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            System.out.println(\"The sum is 0.\");\n            return;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            sum += cur;\n            System.out.println(cur + \" \" + sum);\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 26.5
        }, 
        {
            "date" : ISODate("2016-01-21T16:48:14.803+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            System.out.println(\"The sum is 0.\");\n            return;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            if (cur>0) {\n                sum += cur;\n            }\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 66.8
        }, 
        {
            "date" : ISODate("2016-01-21T16:49:33.622+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            System.out.println(\"The sum is 0.\");\n            return;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            if (cur>0) {\n                sum += cur;\n            }\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-01-21T16:49:50.736+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            System.out.println(\"The sum is 0.\");\n            return;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            if (cur>0) {\n                sum += cur;\n            }\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 7.4
        }, 
        {
            "date" : ISODate("2016-03-19T04:22:06.264+0000"), 
            "code" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            System.out.println(\"The sum is 0.\");\n            return;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            if (cur>0) {\n                sum += cur;\n            }\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(2)
        }
    ]
}
{ 
    "_id" : "y2mqPyHwQg4BaoGua", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "vMcdDL4EJXJr8EgPi", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-23T10:03:48.733+0000"), 
    "updatedAt" : ISODate("2016-01-23T10:03:48.733+0000")
}
{ 
    "_id" : "hiE2QmGwhdzj7gfEt", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-23T14:47:21.788+0000"), 
    "updatedAt" : ISODate("2016-01-23T14:47:21.788+0000")
}
{ 
    "_id" : "zNWBFDBbJ9BY3BNbv", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "8S6e85aj9ZTwTgNyQ", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-23T17:32:28.041+0000"), 
    "updatedAt" : ISODate("2016-01-24T08:51:31.670+0000"), 
    "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the RectangleHandler class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 1213.2, 
    "totalActiveTime" : 4334.900000000001, 
    "history" : [
        {
            "date" : ISODate("2016-01-24T07:48:27.790+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the Rectangle class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 2772.4
        }, 
        {
            "date" : ISODate("2016-01-24T07:52:15.456+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the Rectangle class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.3
        }, 
        {
            "date" : ISODate("2016-01-24T07:54:17.879+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the Rectangle class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.9
        }, 
        {
            "date" : ISODate("2016-01-24T07:57:06.208+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the Rectangle class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(87)
        }, 
        {
            "date" : ISODate("2016-01-24T07:58:34.699+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the Rectangle class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.8
        }, 
        {
            "date" : ISODate("2016-01-24T07:59:19.197+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the RectangleHandler class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.9
        }, 
        {
            "date" : ISODate("2016-01-24T07:59:57.029+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the RectangleHandler class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (double)(height + width)*2;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 38.1
        }, 
        {
            "date" : ISODate("2016-01-24T08:00:09.986+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the RectangleHandler class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width + height + width);\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.9
        }, 
        {
            "date" : ISODate("2016-01-24T08:01:06.672+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the RectangleHandler class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return Math.round((height + width)*2*100)/100;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 56.7
        }, 
        {
            "date" : ISODate("2016-01-24T08:01:36.907+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the RectangleHandler class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 30.1
        }, 
        {
            "date" : ISODate("2016-01-24T08:02:23.370+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the RectangleHandler class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 21.6
        }, 
        {
            "date" : ISODate("2016-01-24T08:51:31.669+0000"), 
            "code" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the RectangleHandler class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1213.2
        }
    ]
}
{ 
    "_id" : "fQKLc7nbBuYX5HjDP", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "XtApbKBtXK5RgHfK2", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-23T17:52:03.178+0000"), 
    "updatedAt" : ISODate("2016-01-24T09:56:26.133+0000"), 
    "code" : "import java.util.*;\n\npublic class Rectangle implements Comparable<Rectangle> {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 36.9, 
    "totalActiveTime" : 2324.0000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-01-24T08:30:53.551+0000"), 
            "code" : "public class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int rectangleID, int length, int width) {\n        this.rectangleID = rectangleID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 1560.3
        }, 
        {
            "date" : ISODate("2016-01-24T09:28:44.876+0000"), 
            "code" : "public class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 487.9
        }, 
        {
            "date" : ISODate("2016-01-24T09:29:30.453+0000"), 
            "code" : "public class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.3
        }, 
        {
            "date" : ISODate("2016-01-24T09:29:52.229+0000"), 
            "code" : "public class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-01-24T09:30:08.995+0000"), 
            "code" : "public class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.3
        }, 
        {
            "date" : ISODate("2016-01-24T09:31:03.926+0000"), 
            "code" : "public class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.6
        }, 
        {
            "date" : ISODate("2016-01-24T09:31:38.408+0000"), 
            "code" : "public class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.5
        }, 
        {
            "date" : ISODate("2016-01-24T09:31:50.287+0000"), 
            "code" : "import java.util.*;\n\npublic class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-01-24T09:47:37.223+0000"), 
            "code" : "import java.util.*;\n\npublic class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.6
        }, 
        {
            "date" : ISODate("2016-01-24T09:48:02.144+0000"), 
            "code" : "import java.util.*;\n\npublic class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.8
        }, 
        {
            "date" : ISODate("2016-01-24T09:48:59.404+0000"), 
            "code" : "import java.util.*;\n\npublic class Rectangle {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-01-24T09:50:14.817+0000"), 
            "code" : "import java.util.*;\n\npublic class Rectangle implements Comparable<Rectangle> {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 75.2
        }, 
        {
            "date" : ISODate("2016-01-24T09:53:51.716+0000"), 
            "code" : "import java.util.*;\n\npublic class Rectangle implements Comparable<Rectangle> {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-01-24T09:54:38.088+0000"), 
            "code" : "import java.util.*;\n\npublic class Rectangle implements Comparable<Rectangle> {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 17.9
        }, 
        {
            "date" : ISODate("2016-01-24T09:56:26.132+0000"), 
            "code" : "import java.util.*;\n\npublic class Rectangle implements Comparable<Rectangle> {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 36.9
        }
    ]
}
{ 
    "_id" : "HX4xRAE6aA7w4dFtW", 
    "userId" : "5ncPQugL7uzRKQC92", 
    "questionId" : "8S6e85aj9ZTwTgNyQ", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-25T06:43:48.106+0000"), 
    "updatedAt" : ISODate("2016-01-25T06:43:48.106+0000")
}
{ 
    "_id" : "nGLYutCPjjmB48APv", 
    "userId" : "5ncPQugL7uzRKQC92", 
    "questionId" : "XtApbKBtXK5RgHfK2", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-25T06:44:21.409+0000"), 
    "updatedAt" : ISODate("2016-01-25T06:44:21.409+0000")
}
{ 
    "_id" : "wFS79Pb6DHae5a39e", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "rMffCicPt9W5JfpaG", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-28T08:04:52.661+0000"), 
    "updatedAt" : ISODate("2016-01-28T08:04:52.662+0000")
}
{ 
    "_id" : "m84aYxw6Th2Hgck5o", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "wFkyqnmP6G7fxJemw", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-28T08:15:57.904+0000"), 
    "updatedAt" : ISODate("2016-01-28T08:15:57.904+0000")
}
{ 
    "_id" : "6H4dTCaXdSzjZqwkY", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "zHbyieN4jGJYucJZv", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-30T18:06:57.704+0000"), 
    "updatedAt" : ISODate("2016-01-31T03:03:19.925+0000"), 
    "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 14.4, 
    "totalActiveTime" : 1033.3, 
    "history" : [
        {
            "date" : ISODate("2016-01-30T18:07:32.576+0000"), 
            "code" : "public static void main(String[] args) {\n    System.out.println(\"1 2 3\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 32.1
        }, 
        {
            "date" : ISODate("2016-01-30T18:11:03.454+0000"), 
            "code" : "public static void createAFile() {\n    System.out.println(\"1 2 3\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(90)
        }, 
        {
            "date" : ISODate("2016-01-30T18:12:59.132+0000"), 
            "code" : "public static void createAFile() {\n    System.out.println(\"1 2 3\");\n}", 
            "status" : "PASS", 
            "activeTime" : 44.3
        }, 
        {
            "date" : ISODate("2016-01-30T18:17:07.639+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputSream(\"temp.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 248.7
        }, 
        {
            "date" : ISODate("2016-01-30T18:17:28.964+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputSream(\"temp.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.3
        }, 
        {
            "date" : ISODate("2016-01-30T18:17:42.476+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputSream(\"temp.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-01-30T18:17:59.968+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputSream(\"temp.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.1
        }, 
        {
            "date" : ISODate("2016-01-30T18:18:16.412+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"temp.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.2
        }, 
        {
            "date" : ISODate("2016-01-30T18:18:59.444+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"temp.txt\", false));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 43.2
        }, 
        {
            "date" : ISODate("2016-01-30T18:24:59.556+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"temp.txt\", false));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 109.9
        }, 
        {
            "date" : ISODate("2016-01-30T18:26:05.518+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"temp.txt\", false));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.6
        }, 
        {
            "date" : ISODate("2016-01-30T18:26:49.588+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"temp.txt\", false));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 20.2
        }, 
        {
            "date" : ISODate("2016-01-30T18:27:26.820+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"temp.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 37.5
        }, 
        {
            "date" : ISODate("2016-01-30T18:27:30.784+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"temp.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 4.1
        }, 
        {
            "date" : ISODate("2016-01-30T18:27:34.568+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"temp.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 3.5
        }, 
        {
            "date" : ISODate("2016-01-30T18:30:56.025+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"num.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 201.5
        }, 
        {
            "date" : ISODate("2016-01-30T18:31:25.252+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 29.3
        }, 
        {
            "date" : ISODate("2016-01-30T18:34:07.012+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-01-30T18:35:11.381+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 20.3
        }, 
        {
            "date" : ISODate("2016-01-31T02:44:01.349+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 8.8
        }, 
        {
            "date" : ISODate("2016-01-31T03:03:19.925+0000"), 
            "code" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 14.4
        }
    ]
}
{ 
    "_id" : "aBTazBZtymXFpM5zd", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "xjPmqrEkM9ANP3fxg", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-30T18:40:07.108+0000"), 
    "updatedAt" : ISODate("2016-01-31T03:06:46.116+0000"), 
    "code" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n     \n        if (file.exists()) {\n              fileIn = new Scanner(file);\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
    "status" : "PASS", 
    "activeTime" : 8.3, 
    "totalActiveTime" : 543.6, 
    "history" : [
        {
            "date" : ISODate("2016-01-30T18:40:47.728+0000"), 
            "code" : "public static void readFromFile(String fileName) {\n    try {\n        \n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(58)
        }, 
        {
            "date" : ISODate("2016-01-31T02:57:40.588+0000"), 
            "code" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n        fileIn = new Scanner(file);\n            \n        if (file.exists()) {\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 310.8
        }, 
        {
            "date" : ISODate("2016-01-31T02:59:32.752+0000"), 
            "code" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n        fileIn = new Scanner(file);\n            \n        if (file.exists()) {\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.8
        }, 
        {
            "date" : ISODate("2016-01-31T03:00:14.652+0000"), 
            "code" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n        fileIn = new Scanner(file);\n            \n        if (fileIn.exists()) {\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(42)
        }, 
        {
            "date" : ISODate("2016-01-31T03:00:32.316+0000"), 
            "code" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n        fileIn = new Scanner(file);\n            \n        if (file.exists()) {\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-01-31T03:01:40.064+0000"), 
            "code" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n     \n        if (file.exists()) {\n              fileIn = new Scanner(file);\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 67.8
        }, 
        {
            "date" : ISODate("2016-01-31T03:02:49.596+0000"), 
            "code" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n     \n        if (file.exists()) {\n              fileIn = new Scanner(file);\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 23.9
        }, 
        {
            "date" : ISODate("2016-01-31T03:06:19.912+0000"), 
            "code" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n     \n        if (file.exists()) {\n              fileIn = new Scanner(file);\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.5
        }, 
        {
            "date" : ISODate("2016-01-31T03:06:46.116+0000"), 
            "code" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n     \n        if (file.exists()) {\n              fileIn = new Scanner(file);\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 8.3
        }
    ]
}
{ 
    "_id" : "3ArJjxEyDneYbWwnY", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "xjPmqrEkM9ANP3fxg", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-31T05:04:53.839+0000"), 
    "updatedAt" : ISODate("2016-01-31T05:04:53.839+0000")
}
{ 
    "_id" : "btH3mwaomy5FKpPsx", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "8S6e85aj9ZTwTgNyQ", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-31T05:10:54.083+0000"), 
    "updatedAt" : ISODate("2016-01-31T05:10:54.083+0000")
}
{ 
    "_id" : "PdpWxp5D6Cjg6eW8H", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "XtApbKBtXK5RgHfK2", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-31T05:21:54.130+0000"), 
    "updatedAt" : ISODate("2016-01-31T05:21:54.130+0000")
}
{ 
    "_id" : "gAPvxXRrzpEsNsfNN", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "zHbyieN4jGJYucJZv", 
    "completed" : false, 
    "createdAt" : ISODate("2016-01-31T05:23:29.712+0000"), 
    "updatedAt" : ISODate("2016-02-02T03:01:22.472+0000"), 
    "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 3.1, 
    "totalActiveTime" : 687.6999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-01-31T05:38:27.012+0000"), 
            "code" : "public static void WriteToFilen)\n{\ntry \n    {\n        PrintStream writer = new PrintStream(new FileOutputStream(\"c:\\\\numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n        writer.close();\n    }\n    catch (IOException e) \n    {\n       e.printStackTrace();\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 494.7
        }, 
        {
            "date" : ISODate("2016-01-31T05:38:36.260+0000"), 
            "code" : "public static void WriteToFilen()\n{\ntry \n    {\n        PrintStream writer = new PrintStream(new FileOutputStream(\"c:\\\\numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n        writer.close();\n    }\n    catch (IOException e) \n    {\n       e.printStackTrace();\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.3
        }, 
        {
            "date" : ISODate("2016-01-31T05:39:05.356+0000"), 
            "code" : "public static void WriteToFile()\n{\ntry \n    {\n        PrintStream writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n        writer.close();\n    }\n    catch (IOException e) \n    {\n       e.printStackTrace();\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.9
        }, 
        {
            "date" : ISODate("2016-01-31T05:39:34.100+0000"), 
            "code" : "public static void WriteToFile()\n{\n try \n    {\n        System.out.println(\"TEST\");\n        PrintStream writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n        writer.close();\n    }\n    catch (IOException e) \n    {\n       e.printStackTrace();\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.4
        }, 
        {
            "date" : ISODate("2016-01-31T05:39:49.508+0000"), 
            "code" : "import java.io.*;\nImport java.util.*;\n\npublic static void WriteToFile()\n{\n try \n    {\n        System.out.println(\"TEST\");\n        PrintStream writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n        writer.close();\n    }\n    catch (IOException e) \n    {\n       e.printStackTrace();\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.4
        }, 
        {
            "date" : ISODate("2016-01-31T05:39:56.952+0000"), 
            "code" : "import java.io.*;\nimport java.util.*;\n\npublic static void WriteToFile()\n{\n try \n    {\n        System.out.println(\"TEST\");\n        PrintStream writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n        writer.close();\n    }\n    catch (IOException e) \n    {\n       e.printStackTrace();\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.5
        }, 
        {
            "date" : ISODate("2016-01-31T05:40:19.376+0000"), 
            "code" : "import java.io.*;\nimport java.util.*;\n\nclass Test\n{\npublic static void WriteToFile()\n{\n try \n    {\n        System.out.println(\"TEST\");\n        PrintStream writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n        writer.close();\n    }\n    catch (IOException e) \n    {\n       e.printStackTrace();\n    }\n\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.5
        }, 
        {
            "date" : ISODate("2016-01-31T05:40:40.453+0000"), 
            "code" : "import java.io.*;\nimport java.util.*;\n\nclass Test\n{\npublic static void WriteToFile()\n{\n try \n    {\n        System.out.println(\"TEST\");\n        PrintStream writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n        writer.close();\n    }\n    catch (IOException e) \n    {\n       e.printStackTrace();\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.8
        }, 
        {
            "date" : ISODate("2016-01-31T05:40:53.697+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.5
        }, 
        {
            "date" : ISODate("2016-01-31T05:46:37.376+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.4
        }, 
        {
            "date" : ISODate("2016-01-31T05:59:18.932+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.2
        }, 
        {
            "date" : ISODate("2016-02-02T03:01:22.471+0000"), 
            "code" : "public static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.1
        }
    ]
}
{ 
    "_id" : "DY34xkEsxvqxFNW52", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "Edz6gkp5KBhSbgHLS", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-31T08:01:42.177+0000"), 
    "updatedAt" : ISODate("2016-01-31T08:05:40.833+0000"), 
    "code" : "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.*;\nclass Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\nclass PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\nclass SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}", 
    "status" : "PASS", 
    "activeTime" : 15.4, 
    "totalActiveTime" : 159.60000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-01-31T08:02:21.192+0000"), 
            "code" : "import java.util.*;\npublic class Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\npublic class PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\npublic class SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.3
        }, 
        {
            "date" : ISODate("2016-01-31T08:02:42.564+0000"), 
            "code" : "import java.util.ArrayList;\nimport java.util.Collections;\npublic class Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\npublic class PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\npublic class SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.3
        }, 
        {
            "date" : ISODate("2016-01-31T08:03:05.562+0000"), 
            "code" : "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\npublic class PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\npublic class SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.8
        }, 
        {
            "date" : ISODate("2016-01-31T08:03:42.097+0000"), 
            "code" : "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\npublic class PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\npublic class SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.7
        }, 
        {
            "date" : ISODate("2016-01-31T08:04:07.494+0000"), 
            "code" : "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\nclass PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\nclass SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.3
        }, 
        {
            "date" : ISODate("2016-01-31T08:04:14.700+0000"), 
            "code" : "import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\nclass PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\nclass SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.2
        }, 
        {
            "date" : ISODate("2016-01-31T08:04:46.760+0000"), 
            "code" : "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.*;\nclass Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\nclass PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\nclass SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.6
        }, 
        {
            "date" : ISODate("2016-01-31T08:05:40.832+0000"), 
            "code" : "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.*;\nclass Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\nclass PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\nclass SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}", 
            "status" : "PASS", 
            "activeTime" : 15.4
        }
    ]
}
{ 
    "_id" : "3nptzzjtkKa5osx3X", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "wxWeHGAswzTjMavBm", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-31T08:23:59.379+0000"), 
    "updatedAt" : ISODate("2016-01-31T08:24:07.172+0000"), 
    "code" : "public class Car implements Comparable<Car>  {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\tprivate int mileage;\n\t\n\tpublic Car(String name,int price,int maxSpeed,int mileage)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t\tthis.mileage=mileage;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n\tpublic int getMileage() \n\t{\n\t\treturn this.mileage;\n\t}\n\n\t\n\tpublic int compareTo(Car o) {\n\t\treturn (o.mileage-this.mileage);\n\t}\n\t\n\t\n}", 
    "status" : "PASS", 
    "activeTime" : 83.9, 
    "totalActiveTime" : 83.9, 
    "history" : [
        {
            "date" : ISODate("2016-01-31T08:24:07.172+0000"), 
            "code" : "public class Car implements Comparable<Car>  {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\tprivate int mileage;\n\t\n\tpublic Car(String name,int price,int maxSpeed,int mileage)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t\tthis.mileage=mileage;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n\tpublic int getMileage() \n\t{\n\t\treturn this.mileage;\n\t}\n\n\t\n\tpublic int compareTo(Car o) {\n\t\treturn (o.mileage-this.mileage);\n\t}\n\t\n\t\n}", 
            "status" : "PASS", 
            "activeTime" : 83.9
        }
    ]
}
{ 
    "_id" : "hxDT9RyGMoJzzJuuN", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "wxWeHGAswzTjMavBm", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-02T07:57:25.776+0000"), 
    "updatedAt" : ISODate("2016-02-02T07:57:25.776+0000")
}
{ 
    "_id" : "bLtbnZn5g8Ehdf5NL", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "Edz6gkp5KBhSbgHLS", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-02T07:58:30.610+0000"), 
    "updatedAt" : ISODate("2016-02-02T07:58:30.610+0000")
}
{ 
    "_id" : "Rn9a8WYRGFTMiKWDZ", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "NkNBsJBH48ziefayZ", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-02T07:58:51.294+0000"), 
    "updatedAt" : ISODate("2016-02-02T07:58:51.294+0000")
}
{ 
    "_id" : "aTmoMu5SnbmMjZCNT", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "xjPmqrEkM9ANP3fxg", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-02T08:00:07.953+0000"), 
    "updatedAt" : ISODate("2016-02-02T08:00:07.953+0000")
}
{ 
    "_id" : "YjYScgpsPmGmfQ6DX", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "XtApbKBtXK5RgHfK2", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-02T08:00:53.314+0000"), 
    "updatedAt" : ISODate("2016-02-02T08:00:53.314+0000")
}
{ 
    "_id" : "EfrW63JBFnwwT3QRR", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "zHbyieN4jGJYucJZv", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-02T08:01:13.765+0000"), 
    "updatedAt" : ISODate("2016-02-02T08:01:13.765+0000")
}
{ 
    "_id" : "jMKzSaY8JE7QANSzd", 
    "userId" : "KRKfgoL5HMCG8dyC4", 
    "questionId" : "vMcdDL4EJXJr8EgPi", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-02T08:04:27.277+0000"), 
    "updatedAt" : ISODate("2016-02-02T08:08:55.641+0000"), 
    "code" : "class Vehicle \n{\n    public String getName() { return \"hi\"; }\n}\npublic class Car extends Vehicle\n{\n    public String getRegID() {return null; }   \n}\nclass Tank extends Vehicle\n{\n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 68.6, 
    "totalActiveTime" : 619.5, 
    "history" : [
        {
            "date" : ISODate("2016-02-02T08:06:03.056+0000"), 
            "code" : "public class Car {}\nclass Tank {}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 446.8
        }, 
        {
            "date" : ISODate("2016-02-02T08:06:58.492+0000"), 
            "code" : "public class Vehicle {}\nclass Car extends Vehicle\n{\n    \n}\nclass Tank extends Vehicle\n{\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 55.5
        }, 
        {
            "date" : ISODate("2016-02-02T08:07:47.049+0000"), 
            "code" : "public class Vehicle \n{\n    public String getName() { return \"hi\"; }\n}\nclass Car extends Vehicle\n{\n    public String getRegID() {return null; }   \n}\nclass Tank extends Vehicle\n{\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.6
        }, 
        {
            "date" : ISODate("2016-02-02T08:08:55.640+0000"), 
            "code" : "class Vehicle \n{\n    public String getName() { return \"hi\"; }\n}\npublic class Car extends Vehicle\n{\n    public String getRegID() {return null; }   \n}\nclass Tank extends Vehicle\n{\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 68.6
        }
    ]
}
{ 
    "_id" : "LvvJhWL58SmR9Wgms", 
    "userId" : "nTcagaDEMpPZ8sXaS", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-03T06:14:13.171+0000"), 
    "updatedAt" : ISODate("2016-02-03T06:16:04.934+0000"), 
    "code" : "public static String parseEmail(String email) {\n    return email.split(\"@\")[0];\n}", 
    "status" : "PASS", 
    "activeTime" : 69.4, 
    "totalActiveTime" : 69.4, 
    "history" : [
        {
            "date" : ISODate("2016-02-03T06:16:04.934+0000"), 
            "code" : "public static String parseEmail(String email) {\n    return email.split(\"@\")[0];\n}", 
            "status" : "PASS", 
            "activeTime" : 69.4
        }
    ]
}
{ 
    "_id" : "sWYetfFF9B2Ca7oPE", 
    "userId" : "nTcagaDEMpPZ8sXaS", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-03T06:16:15.318+0000"), 
    "updatedAt" : ISODate("2016-02-03T06:16:15.318+0000")
}
{ 
    "_id" : "AW4mTToyh7AcFxrde", 
    "userId" : "WDgovxNugxGzpZNug", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-04T17:19:57.980+0000"), 
    "updatedAt" : ISODate("2016-02-04T17:19:57.981+0000")
}
{ 
    "_id" : "PMWaaamMfGQPk44PH", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-05T02:50:08.054+0000"), 
    "updatedAt" : ISODate("2016-02-05T02:54:40.476+0000"), 
    "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    \n    Counter counter = supermarket.getCounter(counterNumber);\n    if(counter != null){\n        return counter.setCashier(cashier);\n    }\n    \n    return false;\n}", 
    "status" : "PASS", 
    "activeTime" : 186.3, 
    "totalActiveTime" : 186.3, 
    "history" : [
        {
            "date" : ISODate("2016-02-05T02:54:40.475+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    \n    Counter counter = supermarket.getCounter(counterNumber);\n    if(counter != null){\n        return counter.setCashier(cashier);\n    }\n    \n    return false;\n}", 
            "status" : "PASS", 
            "activeTime" : 186.3
        }
    ]
}
{ 
    "_id" : "r7w9MMKfkfdW8cy3W", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-05T02:54:45.182+0000"), 
    "updatedAt" : ISODate("2016-02-05T02:58:39.030+0000"), 
    "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    \n    int numberOfCounters = supermarket.getNumCounters();\n    int count = 0;\n    \n    for(int i = 1; i <= numberOfCounters; i++){\n        Counter counter = supermarket.getCounter(i);\n        \n        if(counter.getNumCustomersInQueue()==0){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
    "status" : "PASS", 
    "activeTime" : 49.5, 
    "totalActiveTime" : 190.1, 
    "history" : [
        {
            "date" : ISODate("2016-02-05T02:57:49.522+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    \n    int numberOfCounters = supermarket.getNumCounters();\n    int count = 0;\n    \n    for(int i = 1; i < numberOfCounters; i++){\n        Counter counter = supermarket.getCounter(i);\n        \n        if(counter.getNumCustomersInQueue()==0){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 140.6
        }, 
        {
            "date" : ISODate("2016-02-05T02:58:39.029+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    \n    int numberOfCounters = supermarket.getNumCounters();\n    int count = 0;\n    \n    for(int i = 1; i <= numberOfCounters; i++){\n        Counter counter = supermarket.getCounter(i);\n        \n        if(counter.getNumCustomersInQueue()==0){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
            "status" : "PASS", 
            "activeTime" : 49.5
        }
    ]
}
{ 
    "_id" : "HCXsahfjAr3ncLuhs", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-05T02:58:42.180+0000"), 
    "updatedAt" : ISODate("2016-02-05T03:25:03.802+0000"), 
    "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket){\n    \n    StringBuffer sb = new StringBuffer(\"[\");\n    \n    int numberOfCounters = supermarket.getNumCounters();\n    \n    for(int i = 1; i <= numberOfCounters; i++){\n        Counter counter = supermarket.getCounter(i);\n        \n        String status = \"\";\n        \n        if(counter.getCashier() == null){\n            status = \"closed\";\n        }else{\n            status = \"open\";\n        }\n        \n        sb.append(i+\"-\"+status);\n        \n        if(i != numberOfCounters){\n            sb.append(\", \");\n        }\n        \n    }\n    \n    sb.append(\"]\");\n    return sb.toString();\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 19.1, 
    "totalActiveTime" : 437.70000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-02-05T03:21:12.361+0000"), 
            "code" : "public static Map<Integer, String> retrieveStatusOfAllCounters(Supermarket supermarket){\n    \n    Map<Integer, String> map = new TreeMap<>();\n    \n    int numberOfCounters = supermarket.getNumCounters();\n    \n    for(int i = 1; i <= numberOfCounters; i++){\n        Counter counter = supermarket.getCounter(i);\n        \n        String status = \"\";\n        \n        if(counter.getCashier() == null){\n            status = \"closed\";\n        }else{\n            status = \"open\";\n        }\n        \n        map.put(i, status);\n        \n    }\n    \n    return map;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 257.8
        }, 
        {
            "date" : ISODate("2016-02-05T03:24:43.374+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket){\n    \n    StringBuffer sb = new StringBuffer();\n    \n    int numberOfCounters = supermarket.getNumCounters();\n    \n    for(int i = 1; i <= numberOfCounters; i++){\n        Counter counter = supermarket.getCounter(i);\n        \n        String status = \"\";\n        \n        if(counter.getCashier() == null){\n            status = \"closed\";\n        }else{\n            status = \"open\";\n        }\n        \n        sb.append(i+\"-\"+status);\n        \n        if(i != numberOfCounters){\n            sb.append(\", \");\n        }\n        \n    }\n    \n    return sb.toString();\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 160.8
        }, 
        {
            "date" : ISODate("2016-02-05T03:25:03.801+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket){\n    \n    StringBuffer sb = new StringBuffer(\"[\");\n    \n    int numberOfCounters = supermarket.getNumCounters();\n    \n    for(int i = 1; i <= numberOfCounters; i++){\n        Counter counter = supermarket.getCounter(i);\n        \n        String status = \"\";\n        \n        if(counter.getCashier() == null){\n            status = \"closed\";\n        }else{\n            status = \"open\";\n        }\n        \n        sb.append(i+\"-\"+status);\n        \n        if(i != numberOfCounters){\n            sb.append(\", \");\n        }\n        \n    }\n    \n    sb.append(\"]\");\n    return sb.toString();\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 19.1
        }
    ]
}
{ 
    "_id" : "qsnbnLF9AJS3c6a5o", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "xsTmbTMhHzWKFwzSw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-05T10:21:26.132+0000"), 
    "updatedAt" : ISODate("2016-02-05T10:31:57.398+0000"), 
    "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket){\n    \n    int numCounter = supermarket.getNumCounters();\n    int maxCount = 0;\n    Counter toFind = null;\n    \n    for(int i = 1; i <= numCounter; i++){\n        Counter c = supermarket.getCounter(i);\n        \n        int count = 0;\n        int numCust = c.getNumCustomersInQueue();\n        \n        for(int j = 1; j <= numCust; j++){\n            Customer cust = c.getCustomerAtPosition(j);\n            \n            if(cust.getAge() >= 60){\n                count++;\n            }\n        }\n        \n        if(count > maxCount){\n            maxCount = count;\n            toFind = c;\n        }\n    }\n    \n    \n    if(maxCount == 0){\n        return -1;\n    }\n    return toFind.getId();\n}", 
    "status" : "PASS", 
    "activeTime" : 68.1, 
    "totalActiveTime" : 491.1, 
    "history" : [
        {
            "date" : ISODate("2016-02-05T10:27:53.972+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket){\n    \n    int count = 0;\n    \n    int numCounter = supermarket.getNumCounters();\n    \n    for(int i = 1; i <= numCounter; i++){\n        Counter c = supermarket.get(i);\n        \n        int numCust = c.getNumCustomersInQueue();\n        \n        for(int j = 1; j <= numCust; j++){\n            Customer cust = c.getCustomerAtPosition(j);\n            \n            if(cust.getAge() >= 60){\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 256.2
        }, 
        {
            "date" : ISODate("2016-02-05T10:28:08.099+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket){\n    \n    int count = 0;\n    \n    int numCounter = supermarket.getNumCounters();\n    \n    for(int i = 1; i <= numCounter; i++){\n        Counter c = supermarket.getCounter(i);\n        \n        int numCust = c.getNumCustomersInQueue();\n        \n        for(int j = 1; j <= numCust; j++){\n            Customer cust = c.getCustomerAtPosition(j);\n            \n            if(cust.getAge() >= 60){\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.2
        }, 
        {
            "date" : ISODate("2016-02-05T10:28:29.349+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket){\n    \n    int count = 0;\n    \n    int numCounter = supermarket.getNumCounters();\n    \n    for(int i = 1; i <= numCounter; i++){\n        Counter c = supermarket.getCounter(i);\n        \n        int numCust = c.getNumCustomersInQueue();\n        \n        for(int j = 1; j <= numCust; j++){\n            Customer cust = c.getCustomerAtPosition(j);\n            \n            if(cust.getAge() >= 60){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return -1;\n    }\n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.1
        }, 
        {
            "date" : ISODate("2016-02-05T10:30:43.765+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket){\n    \n    int numCounter = supermarket.getNumCounters();\n    int maxCount = 0;\n    Counter toFind = null;\n    \n    for(int i = 1; i <= numCounter; i++){\n        Counter c = supermarket.getCounter(i);\n        \n        int count = 0;\n        int numCust = c.getNumCustomersInQueue();\n        \n        for(int j = 1; j <= numCust; j++){\n            Customer cust = c.getCustomerAtPosition(j);\n            \n            if(cust.getAge() >= 60){\n                count++;\n            }\n        }\n        \n        if(count > maxCount){\n            maxCount = count;\n            toFind = c;\n        }\n    }\n    \n    \n    if(maxCount == 0){\n        return -1;\n    }\n    return maxCount;\n}", 
            "status" : "FAIL", 
            "activeTime" : 134.5
        }, 
        {
            "date" : ISODate("2016-02-05T10:31:57.398+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket){\n    \n    int numCounter = supermarket.getNumCounters();\n    int maxCount = 0;\n    Counter toFind = null;\n    \n    for(int i = 1; i <= numCounter; i++){\n        Counter c = supermarket.getCounter(i);\n        \n        int count = 0;\n        int numCust = c.getNumCustomersInQueue();\n        \n        for(int j = 1; j <= numCust; j++){\n            Customer cust = c.getCustomerAtPosition(j);\n            \n            if(cust.getAge() >= 60){\n                count++;\n            }\n        }\n        \n        if(count > maxCount){\n            maxCount = count;\n            toFind = c;\n        }\n    }\n    \n    \n    if(maxCount == 0){\n        return -1;\n    }\n    return toFind.getId();\n}", 
            "status" : "PASS", 
            "activeTime" : 68.1
        }
    ]
}
{ 
    "_id" : "NunwQcpTjZA7LvpAt", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-05T10:32:05.444+0000"), 
    "updatedAt" : ISODate("2016-02-05T10:37:39.305+0000"), 
    "code" : "public static String printPattern(String word, char ch){\n    \n    if(word == null || word.length() == 0){\n        return \"\";\n    }\n    \n    StringBuffer sb = new StringBuffer();\n    sb.append(\"\"+word.charAt(0));\n    for(int i = 1; i < word.length(); i++){\n        sb.append(\"\"+ch);\n        sb.append(\"\"+word.charAt(i));\n    }\n    \n    return sb.toString();\n}", 
    "status" : "PASS", 
    "activeTime" : 22.1, 
    "totalActiveTime" : 341.70000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-02-05T10:37:11.173+0000"), 
            "code" : "public static String printPattern(String word, char ch){\n    \n    if(word == null || word.length() == 0){\n        return \"[]\"\n    }\n    \n    StringBuffer sb = new StringBuffer();\n    sb.append(\"\"+word.charAt(0));\n    for(int i = 1; i < word.length(); i++){\n        sb.append(\"\"+ch);\n        sb.append(\"\"+word.charAt(i));\n    }\n    \n    return sb.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 313.8
        }, 
        {
            "date" : ISODate("2016-02-05T10:37:16.963+0000"), 
            "code" : "public static String printPattern(String word, char ch){\n    \n    if(word == null || word.length() == 0){\n        return \"[]\";\n    }\n    \n    StringBuffer sb = new StringBuffer();\n    sb.append(\"\"+word.charAt(0));\n    for(int i = 1; i < word.length(); i++){\n        sb.append(\"\"+ch);\n        sb.append(\"\"+word.charAt(i));\n    }\n    \n    return sb.toString();\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-02-05T10:37:39.305+0000"), 
            "code" : "public static String printPattern(String word, char ch){\n    \n    if(word == null || word.length() == 0){\n        return \"\";\n    }\n    \n    StringBuffer sb = new StringBuffer();\n    sb.append(\"\"+word.charAt(0));\n    for(int i = 1; i < word.length(); i++){\n        sb.append(\"\"+ch);\n        sb.append(\"\"+word.charAt(i));\n    }\n    \n    return sb.toString();\n}", 
            "status" : "PASS", 
            "activeTime" : 22.1
        }
    ]
}
{ 
    "_id" : "6FwvLeesFu84fuSKB", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "ovCgAccuGWHny3ZXc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-05T10:37:42.432+0000"), 
    "updatedAt" : ISODate("2016-02-05T10:37:42.432+0000")
}
{ 
    "_id" : "w6dyhMkGGAuF52fmn", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "vMcdDL4EJXJr8EgPi", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-21T03:46:50.780+0000"), 
    "updatedAt" : ISODate("2016-02-09T11:36:52.287+0000"), 
    "code" : "class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
    "status" : "PASS", 
    "activeTime" : 2.1, 
    "totalActiveTime" : 245.10000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-01-21T03:47:59.148+0000"), 
            "code" : "public interface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(66)
        }, 
        {
            "date" : ISODate("2016-01-21T03:48:17.831+0000"), 
            "code" : "interface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.1
        }, 
        {
            "date" : ISODate("2016-01-21T03:49:21.643+0000"), 
            "code" : "class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.2
        }, 
        {
            "date" : ISODate("2016-01-21T03:50:00.783+0000"), 
            "code" : "public class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.6
        }, 
        {
            "date" : ISODate("2016-01-21T03:50:59.056+0000"), 
            "code" : "public class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(2)
        }, 
        {
            "date" : ISODate("2016-01-21T03:52:16.490+0000"), 
            "code" : "public class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.9
        }, 
        {
            "date" : ISODate("2016-01-21T03:52:43.288+0000"), 
            "code" : "class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.8
        }, 
        {
            "date" : ISODate("2016-01-21T03:53:13.361+0000"), 
            "code" : "class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "PASS", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-01-21T03:53:55.436+0000"), 
            "code" : "class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "PASS", 
            "activeTime" : 21.1
        }, 
        {
            "date" : ISODate("2016-01-21T05:40:04.154+0000"), 
            "code" : "class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(19)
        }, 
        {
            "date" : ISODate("2016-02-09T11:36:52.286+0000"), 
            "code" : "class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}", 
            "status" : "PASS", 
            "activeTime" : 2.1
        }
    ]
}
{ 
    "_id" : "qweqi96SWjYErkoSP", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-09T11:38:54.033+0000"), 
    "updatedAt" : ISODate("2016-02-09T11:38:54.034+0000")
}
{ 
    "_id" : "PPXEnumi6gADXCxtp", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-09T15:58:00.356+0000"), 
    "updatedAt" : ISODate("2016-02-09T15:58:00.356+0000")
}
{ 
    "_id" : "nZ34Egpr9mxGPWCcx", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-09T15:58:28.616+0000"), 
    "updatedAt" : ISODate("2016-02-09T15:58:28.617+0000")
}
{ 
    "_id" : "zdMvs2bS86h3Cg9BK", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-12T10:12:51.531+0000"), 
    "updatedAt" : ISODate("2016-02-12T10:14:58.604+0000"), 
    "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks) {\n    \n\tif (drinks == null) {\n\t\treturn 0;\n\t}\n\tint sum = 0;\n\tfor (Drink d : drinks) {\n\t\tif (d.getVolume() == 0) {\n\t\t\tsum++;\n\t\t}\n\t}\n\t\n    return sum;\n}", 
    "status" : "PASS", 
    "activeTime" : 17.4, 
    "totalActiveTime" : 49.0, 
    "history" : [
        {
            "date" : ISODate("2016-02-12T10:13:50.014+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks) {\n    \n\tif (drinks == null) {\n\t\treturn 0;\n\t}\n\tint sum = 0;\n\tfor (Drink d : drinks) {\n\t\tif (d.getVolume() == 0) {\n\t\t\tsum++;\n\t\t}\n\t}\n\t\n    return sum;\n}", 
            "status" : "FAIL", 
            "activeTime" : 31.6
        }, 
        {
            "date" : ISODate("2016-02-12T10:14:58.603+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks) {\n    \n\tif (drinks == null) {\n\t\treturn 0;\n\t}\n\tint sum = 0;\n\tfor (Drink d : drinks) {\n\t\tif (d.getVolume() == 0) {\n\t\t\tsum++;\n\t\t}\n\t}\n\t\n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 17.4
        }
    ]
}
{ 
    "_id" : "cguA3J4YkSrGdKxjB", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "aDiQ4ZYHs7KmyMEai", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-12T10:48:45.365+0000"), 
    "updatedAt" : ISODate("2016-02-12T10:49:08.792+0000"), 
    "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n\t\tint total = 0;\n\t\tif (drinks == null || types == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (Drink d : drinks) {\n\t\t\tboolean typeMatch = false;\n\t\t\tfor (char c : types) {\n\t\t\t\tif (c == d.getType()) {\n\t\t\t\t\ttypeMatch = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeMatch) {\n\t\t\t\ttotal += d.getVolume();\n\t\t\t}\n\t\t}\n\t\t\n        return total;\n    }", 
    "status" : "PASS", 
    "activeTime" : 605.7, 
    "totalActiveTime" : 605.7, 
    "history" : [
        {
            "date" : ISODate("2016-02-12T10:49:08.791+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n\t\tint total = 0;\n\t\tif (drinks == null || types == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (Drink d : drinks) {\n\t\t\tboolean typeMatch = false;\n\t\t\tfor (char c : types) {\n\t\t\t\tif (c == d.getType()) {\n\t\t\t\t\ttypeMatch = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeMatch) {\n\t\t\t\ttotal += d.getVolume();\n\t\t\t}\n\t\t}\n\t\t\n        return total;\n    }", 
            "status" : "PASS", 
            "activeTime" : 605.7
        }
    ]
}
{ 
    "_id" : "Agswuyu2cJEAkqM4X", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "k5dNSLGeHxD6sKJ9b", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-12T11:20:12.733+0000"), 
    "updatedAt" : ISODate("2016-02-12T15:56:46.677+0000"), 
    "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n\t\t\n\tif (volume == null || types == null || volume.length != types.length) {\n\t\tthrow new InvalidInputParametersException();\n\t}\n\tDrink[] output = new Drink[volume.length];\n\tfor(int i=0; i < volume.length; i++) {\n\t\toutput[i] = new Drink(volume[i],types[i]);\n\t}\n    return output;\n}", 
    "status" : "PASS", 
    "activeTime" : 12.3, 
    "totalActiveTime" : 2234.2000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-02-12T11:20:28.621+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n\t\t\n\tif (volume == null || types == null || volume.length != types.length) {\n\t\tthrow new InvalidInputParametersException();\n\t}\n\tDrink[] output = new Drink[volume.length];\n\tfor(int i=0; i < volume.length; i++) {\n\t\toutput[i] = new Drink(volume[i],types[i]);\n\t}\n    return output;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1571.5
        }, 
        {
            "date" : ISODate("2016-02-12T11:21:39.123+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n\t\t\n\tif (volume == null || types == null || volume.length != types.length) {\n\t\tthrow new InvalidInputParametersException();\n\t}\n\tDrink[] output = new Drink[volume.length];\n\tfor(int i=0; i < volume.length; i++) {\n\t\toutput[i] = new Drink(volume[i],types[i]);\n\t}\n    return output;\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-02-12T11:22:52.204+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n\t\t\n\tif (volume == null || types == null || volume.length != types.length) {\n\t\tthrow new InvalidInputParametersException();\n\t}\n\tDrink[] output = new Drink[volume.length];\n\tfor(int i=0; i < volume.length; i++) {\n\t\toutput[i] = new Drink(volume[i],types[i]);\n\t}\n    return output;\n}", 
            "status" : "FAIL", 
            "activeTime" : 44.3
        }, 
        {
            "date" : ISODate("2016-02-12T15:56:10.851+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n\t\t\n\tif (volume == null || types == null || volume.length != types.length) {\n\t\tthrow new InvalidInputParametersException();\n\t}\n\tDrink[] output = new Drink[volume.length];\n\tfor(int i=0; i < volume.length; i++) {\n\t\toutput[i] = new Drink(volume[i],types[i]);\n\t}\n    return output;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 585.4
        }, 
        {
            "date" : ISODate("2016-02-12T15:56:46.677+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n\t\t\n\tif (volume == null || types == null || volume.length != types.length) {\n\t\tthrow new InvalidInputParametersException();\n\t}\n\tDrink[] output = new Drink[volume.length];\n\tfor(int i=0; i < volume.length; i++) {\n\t\toutput[i] = new Drink(volume[i],types[i]);\n\t}\n    return output;\n}", 
            "status" : "PASS", 
            "activeTime" : 12.3
        }
    ]
}
{ 
    "_id" : "Q8RjKnXJfkK2Jnh3m", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-12T16:38:15.620+0000"), 
    "updatedAt" : ISODate("2016-02-12T16:40:47.707+0000"), 
    "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException {\n        double total = 0;\n\t\tif (meals == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (Meal m : meals) {\n\t\t\tDrink[] drinks = m.getDrinks();\n\t\t\tfor (Drink d : drinks) {\n\t\t\t\ttotal += PriceList.getPriceOfDrink(d.getType());\n\t\t\t}\n\t\t\ttotal += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n\t\t}\n\t\t\n\t\treturn total;\n    }", 
    "status" : "PASS", 
    "activeTime" : NumberInt(24), 
    "totalActiveTime" : 1945.1, 
    "history" : [
        {
            "date" : ISODate("2016-02-12T16:38:28.018+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException {\n        double total = 0;\n\t\tif (meals == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (Meal m : meals) {\n\t\t\tDrink[] drinks = m.getDrinks();\n\t\t\tfor (Drink d : drinks) {\n\t\t\t\ttotal += PriceList.getPriceOfDrink(d.getType());\n\t\t\t}\n\t\t\ttotal += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n\t\t}\n\t\t\n\t\treturn total;\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1903.8
        }, 
        {
            "date" : ISODate("2016-02-12T16:39:58.373+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException {\n        double total = 0;\n\t\tif (meals == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (Meal m : meals) {\n\t\t\tDrink[] drinks = m.getDrinks();\n\t\t\tfor (Drink d : drinks) {\n\t\t\t\ttotal += PriceList.getPriceOfDrink(d.getType());\n\t\t\t}\n\t\t\ttotal += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n\t\t}\n\t\t\n\t\treturn total;\n    }", 
            "status" : "FAIL", 
            "activeTime" : 17.3
        }, 
        {
            "date" : ISODate("2016-02-12T16:40:47.706+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException {\n        double total = 0;\n\t\tif (meals == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (Meal m : meals) {\n\t\t\tDrink[] drinks = m.getDrinks();\n\t\t\tfor (Drink d : drinks) {\n\t\t\t\ttotal += PriceList.getPriceOfDrink(d.getType());\n\t\t\t}\n\t\t\ttotal += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n\t\t}\n\t\t\n\t\treturn total;\n    }", 
            "status" : "PASS", 
            "activeTime" : NumberInt(24)
        }
    ]
}
{ 
    "_id" : "6CyMAQMdWRdyporD2", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "9F428CJ5J2wWEHJ59", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-12T17:00:40.748+0000"), 
    "updatedAt" : ISODate("2016-02-12T17:02:10.271+0000"), 
    "code" : "public static int getNumberOfDrinks(Meal[][] meals) {\n\t\tif (meals == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tint total = 0;\n\t\tfor (Meal[] mArr: meals) {\n\t\t\tif (mArr != null) {\n\t\t\t\tfor (Meal m : mArr) {\n\t\t\t\t\tif (m!=null) {\n\t\t\t\t\t\ttotal += m.getDrinks().length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n        return total;\n    }", 
    "status" : "PASS", 
    "activeTime" : 16.6, 
    "totalActiveTime" : 802.8000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-02-12T17:01:01.885+0000"), 
            "code" : "public static int getNumberOfDrinks(Meal[][] meals) {\n\t\tif (meals == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tint total = 0;\n\t\tfor (Meal[] mArr: meals) {\n\t\t\tif (mArr != null) {\n\t\t\t\tfor (Meal m : mArr) {\n\t\t\t\t\tif (m!=null) {\n\t\t\t\t\t\ttotal += m.getDrinks().length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n        return total;\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 786.2
        }, 
        {
            "date" : ISODate("2016-02-12T17:02:10.271+0000"), 
            "code" : "public static int getNumberOfDrinks(Meal[][] meals) {\n\t\tif (meals == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tint total = 0;\n\t\tfor (Meal[] mArr: meals) {\n\t\t\tif (mArr != null) {\n\t\t\t\tfor (Meal m : mArr) {\n\t\t\t\t\tif (m!=null) {\n\t\t\t\t\t\ttotal += m.getDrinks().length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n        return total;\n    }", 
            "status" : "PASS", 
            "activeTime" : 16.6
        }
    ]
}
{ 
    "_id" : "mc9grdNLMM8CScpzv", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "379YygY7XJqrMv8rP", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-12T17:16:36.941+0000"), 
    "updatedAt" : ISODate("2016-02-14T13:31:43.234+0000"), 
    "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare) {\n\t\tString[] arrR = mealsToPrepare.split(\"_\");\n\t\tint numRows = arrR.length;\n\t\tString[] arrC= arrR[0].split(\",\");\n\t\tint numCol = arrC.length;\n\t\tSystem.out.println(\"Hello\");\n\t\t\n\t\tString[][] arr = new String[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tarr[i] = arrR[i].split(\",\");\n\t\t}\n\t\t\n\t\tMeal[][] output = new Meal[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tfor(int j=0; j<numCol; j++) {\n\t\t\t\toutput[i][j] = new Meal(new Drink[2], Integer.parseInt(arr[i][j]));\n\t\t\t}\n\t\t}\n        return output;\n    }", 
    "status" : "PASS", 
    "activeTime" : 27.1, 
    "totalActiveTime" : 53.900000000000006, 
    "history" : [
        {
            "date" : ISODate("2016-02-12T17:16:55.078+0000"), 
            "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare) {\n\t\tString[] arrR = mealsToPrepare.split(\"_\");\n\t\tint numRows = arrR.length;\n\t\tString[] arrC= arrR[0].split(\",\");\n\t\tint numCol = arrC.length;\n\t\t\n\t\tString[][] arr = new String[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tarr[i] = arrR[i].split(\",\");\n\t\t}\n\t\t\n\t\tMeal[][] output = new Meal[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tfor(int j=0; j<numCol; j++) {\n\t\t\t\toutput[i][j] = new Meal(new Drink[2], Integer.parseInt(arr[i][j]));\n\t\t\t}\n\t\t}\n        return output;\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-02-12T17:21:34.347+0000"), 
            "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare) {\n\t\tString[] arrR = mealsToPrepare.split(\"_\");\n\t\tint numRows = arrR.length;\n\t\tString[] arrC= arrR[0].split(\",\");\n\t\tint numCol = arrC.length;\n\t\t\n\t\tString[][] arr = new String[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tarr[i] = arrR[i].split(\",\");\n\t\t}\n\t\t\n\t\tMeal[][] output = new Meal[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tfor(int j=0; j<numCol; j++) {\n\t\t\t\toutput[i][j] = new Meal(new Drink[2], Integer.parseInt(arr[i][j]));\n\t\t\t}\n\t\t}\n        return output;\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(2)
        }, 
        {
            "date" : ISODate("2016-02-12T17:22:00.452+0000"), 
            "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare) {\n\t\tString[] arrR = mealsToPrepare.split(\"_\");\n\t\tint numRows = arrR.length;\n\t\tString[] arrC= arrR[0].split(\",\");\n\t\tint numCol = arrC.length;\n\t\t\n\t\tString[][] arr = new String[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tarr[i] = arrR[i].split(\",\");\n\t\t}\n\t\t\n\t\tMeal[][] output = new Meal[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tfor(int j=0; j<numCol; j++) {\n\t\t\t\toutput[i][j] = new Meal(new Drink[2], Integer.parseInt(arr[i][j]));\n\t\t\t}\n\t\t}\n        return output;\n    }", 
            "status" : "PASS", 
            "activeTime" : 9.5
        }, 
        {
            "date" : ISODate("2016-02-14T13:31:16.113+0000"), 
            "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare) {\n\t\tString[] arrR = mealsToPrepare.split(\"_\");\n\t\tint numRows = arrR.length;\n\t\tString[] arrC= arrR[0].split(\",\");\n\t\tint numCol = arrC.length;\n\t\t\n\t\tString[][] arr = new String[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tarr[i] = arrR[i].split(\",\");\n\t\t}\n\t\t\n\t\tMeal[][] output = new Meal[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tfor(int j=0; j<numCol; j++) {\n\t\t\t\toutput[i][j] = new Meal(new Drink[2], Integer.parseInt(arr[i][j]));\n\t\t\t}\n\t\t}\n        return output;\n    }", 
            "status" : "PASS", 
            "activeTime" : 3.7
        }, 
        {
            "date" : ISODate("2016-02-14T13:31:43.233+0000"), 
            "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare) {\n\t\tString[] arrR = mealsToPrepare.split(\"_\");\n\t\tint numRows = arrR.length;\n\t\tString[] arrC= arrR[0].split(\",\");\n\t\tint numCol = arrC.length;\n\t\tSystem.out.println(\"Hello\");\n\t\t\n\t\tString[][] arr = new String[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tarr[i] = arrR[i].split(\",\");\n\t\t}\n\t\t\n\t\tMeal[][] output = new Meal[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tfor(int j=0; j<numCol; j++) {\n\t\t\t\toutput[i][j] = new Meal(new Drink[2], Integer.parseInt(arr[i][j]));\n\t\t\t}\n\t\t}\n        return output;\n    }", 
            "status" : "PASS", 
            "activeTime" : 27.1
        }
    ]
}
{ 
    "_id" : "pyQmq99H4bCuvmkdw", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-12T18:12:40.974+0000"), 
    "updatedAt" : ISODate("2016-02-12T18:58:04.502+0000"), 
    "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
    "status" : "PASS", 
    "activeTime" : 38.6, 
    "totalActiveTime" : 1312.6000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-02-12T18:13:13.355+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.6
        }, 
        {
            "date" : ISODate("2016-02-12T18:13:43.583+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-02-12T18:14:28.941+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-02-12T18:15:08.947+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.4
        }, 
        {
            "date" : ISODate("2016-02-12T18:16:44.453+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-02-12T18:17:26.416+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 9.1
        }, 
        {
            "date" : ISODate("2016-02-12T18:18:19.636+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName + \"0\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 53.4
        }, 
        {
            "date" : ISODate("2016-02-12T18:18:46.993+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"cool\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 27.2
        }, 
        {
            "date" : ISODate("2016-02-12T18:23:53.685+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fi);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 88.9
        }, 
        {
            "date" : ISODate("2016-02-12T18:24:00.405+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 6.5
        }, 
        {
            "date" : ISODate("2016-02-12T18:27:07.138+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.1
        }, 
        {
            "date" : ISODate("2016-02-12T18:27:34.730+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 11.4
        }, 
        {
            "date" : ISODate("2016-02-12T18:28:35.684+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 31.5
        }, 
        {
            "date" : ISODate("2016-02-12T18:29:33.022+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType());\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 57.5
        }, 
        {
            "date" : ISODate("2016-02-12T18:29:56.260+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.6
        }, 
        {
            "date" : ISODate("2016-02-12T18:30:18.326+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 21.7
        }, 
        {
            "date" : ISODate("2016-02-12T18:32:12.549+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 25.4
        }, 
        {
            "date" : ISODate("2016-02-12T18:34:15.694+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.3
        }, 
        {
            "date" : ISODate("2016-02-12T18:34:44.483+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 8.8
        }, 
        {
            "date" : ISODate("2016-02-12T18:36:53.698+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t\tFile f = new File(\"fi\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 15.9
        }, 
        {
            "date" : ISODate("2016-02-12T18:37:22.430+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\tSystem.out.println(\"hello\");\n\t\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 28.8
        }, 
        {
            "date" : ISODate("2016-02-12T18:40:09.121+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\tSystem.out.println(\"hello\");\n\t\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.7
        }, 
        {
            "date" : ISODate("2016-02-12T18:41:46.012+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\tSystem.out.println(\"hello\");\n\t\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.6
        }, 
        {
            "date" : ISODate("2016-02-12T18:42:29.264+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\tSystem.out.println(\"hello\");\n\t\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.9
        }, 
        {
            "date" : ISODate("2016-02-12T18:43:27.059+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\tSystem.out.println(\"hello\");\n\t\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tSystem.out.println(\"hello\");\n\t\t\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 23.7
        }, 
        {
            "date" : ISODate("2016-02-12T18:44:07.449+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 40.3
        }, 
        {
            "date" : ISODate("2016-02-12T18:46:28.533+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 70.4
        }, 
        {
            "date" : ISODate("2016-02-12T18:46:37.008+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(\"fileName\");\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.7
        }, 
        {
            "date" : ISODate("2016-02-12T18:47:17.247+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(40)
        }, 
        {
            "date" : ISODate("2016-02-12T18:47:23.766+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \"\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.8
        }, 
        {
            "date" : ISODate("2016-02-12T18:55:14.037+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \"\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 354.6
        }, 
        {
            "date" : ISODate("2016-02-12T18:55:56.577+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \"\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.9
        }, 
        {
            "date" : ISODate("2016-02-12T18:56:10.275+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 13.7
        }, 
        {
            "date" : ISODate("2016-02-12T18:56:22.264+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n// \t\t\tif (d.getVolume() != 0) {\n// \t\t\t\twriter.print(d.getType() + \",\");\n// \t\t\t\twriter.println(d.getVolume());\n// \t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(12)
        }, 
        {
            "date" : ISODate("2016-02-12T18:56:37.187+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n// \t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n// \t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.9
        }, 
        {
            "date" : ISODate("2016-02-12T18:57:25.853+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n// \t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n// \t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-02-12T18:58:04.502+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 38.6
        }
    ]
}
{ 
    "_id" : "MWArRHqA6vb29QY7L", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "k5dNSLGeHxD6sKJ9b", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-14T11:20:14.489+0000"), 
    "updatedAt" : ISODate("2016-02-14T11:20:14.489+0000")
}
{ 
    "_id" : "CCxBcfwf6twjHMX8y", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-14T11:20:21.654+0000"), 
    "updatedAt" : ISODate("2016-02-14T11:20:21.654+0000")
}
{ 
    "_id" : "rHN4RfuEvnboEnvHZ", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "379YygY7XJqrMv8rP", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-14T11:21:04.733+0000"), 
    "updatedAt" : ISODate("2016-02-14T11:21:04.733+0000")
}
{ 
    "_id" : "6F727K4x582a4rzaA", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-14T11:21:10.317+0000"), 
    "updatedAt" : ISODate("2016-02-14T11:21:10.318+0000")
}
{ 
    "_id" : "ZixoR746Amzu4TCvd", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "sNs7JvcRuPRKTJX9C", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-14T11:41:23.597+0000"), 
    "updatedAt" : ISODate("2016-02-14T11:59:22.237+0000"), 
    "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
    "status" : "PASS", 
    "activeTime" : 11.3, 
    "totalActiveTime" : 1569.3999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-02-14T11:45:58.302+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\")\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1321.8
        }, 
        {
            "date" : ISODate("2016-02-14T11:46:42.564+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\")\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.5
        }, 
        {
            "date" : ISODate("2016-02-14T11:46:48.624+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(6)
        }, 
        {
            "date" : ISODate("2016-02-14T11:48:59.243+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.3
        }, 
        {
            "date" : ISODate("2016-02-14T11:49:21.860+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(17)
        }, 
        {
            "date" : ISODate("2016-02-14T11:51:55.155+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "FAIL", 
            "activeTime" : 74.8
        }, 
        {
            "date" : ISODate("2016-02-14T11:54:12.551+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "FAIL", 
            "activeTime" : 81.9
        }, 
        {
            "date" : ISODate("2016-02-14T11:55:21.053+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 1.5
        }, 
        {
            "date" : ISODate("2016-02-14T11:56:12.032+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-02-14T11:59:22.237+0000"), 
            "code" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 11.3
        }
    ]
}
{ 
    "_id" : "kPK3u3SuXrtWi3BE8", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "rvCcht8iwxkBTjTTT", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-14T12:14:49.603+0000"), 
    "updatedAt" : ISODate("2016-02-14T12:26:02.221+0000"), 
    "code" : "public static void throwException(int exceptionCode) throws Exception {\n    switch (exceptionCode) {\n        case 1: throw new IOException();\n        case 2: throw new NullPointerException();\n        case 3: throw new ArithmeticException(); \n        case 4: throw new FileNotFoundException();\n        default:\n            throw new Exception();\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 22.5, 
    "totalActiveTime" : 664.9000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-02-14T12:16:22.038+0000"), 
            "code" : "public static void throwException(int exceptionCode) {\n    switch (exceptionCode) {\n        case 1: throw new IOException(); break;\n        case 2: throw new NullPointerException(); break;\n        case 3: throw new ArithmeticException(); break;\n        case 4: throw new FileNotFoundException(); break;\n        default:\n            throw new Exception();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 347.4
        }, 
        {
            "date" : ISODate("2016-02-14T12:18:11.460+0000"), 
            "code" : "public static void throwException(int exceptionCode) {\n    switch (exceptionCode) {\n        case 1: throw new IOException(); break;\n        case 2: throw new NullPointerException(); break;\n        case 3: throw new ArithmeticException(); break;\n        case 4: throw new FileNotFoundException(); break;\n        default:\n            throw new Exception();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 46.6
        }, 
        {
            "date" : ISODate("2016-02-14T12:18:43.969+0000"), 
            "code" : "public static void throwException(int exceptionCode) {\n    switch (exceptionCode) {\n        case 1: throw new IOException(); break;\n        case 2: throw new NullPointerException(); break;\n        case 3: throw new ArithmeticException(); break;\n        case 4: throw new FileNotFoundException(); break;\n        default:\n            throw new Exception();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-02-14T12:19:39.733+0000"), 
            "code" : "public static void throwException(int exceptionCode) {\n    switch (exceptionCode) {\n        case 1: throw new IOException(); break;\n        case 2: throw new NullPointerException(); break;\n        case 3: throw new ArithmeticException(); break;\n        case 4: throw new FileNotFoundException(); break;\n        default:\n            throw new Exception();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.2
        }, 
        {
            "date" : ISODate("2016-02-14T12:21:22.785+0000"), 
            "code" : "public static void throwException(int exceptionCode) {\n    switch (exceptionCode) {\n        case 1: throw new IOException();\n        case 2: throw new NullPointerException();\n        case 3: throw new ArithmeticException(); \n        case 4: throw new FileNotFoundException();\n        default:\n            throw new Exception();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 88.9
        }, 
        {
            "date" : ISODate("2016-02-14T12:21:58.391+0000"), 
            "code" : "public static void throwException(int exceptionCode) throws Exception {\n    switch (exceptionCode) {\n        case 1: throw new IOException();\n        case 2: throw new NullPointerException();\n        case 3: throw new ArithmeticException(); \n        case 4: throw new FileNotFoundException();\n        default:\n            throw new Exception();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 35.6
        }, 
        {
            "date" : ISODate("2016-02-14T12:24:02.332+0000"), 
            "code" : "public static void throwException(int exceptionCode) throws Exception {\n    switch (exceptionCode) {\n        case 1: throw new IOException();\n        case 2: throw new NullPointerException();\n        case 3: throw new ArithmeticException(); \n        case 4: throw new FileNotFoundException();\n        default:\n            throw new Exception();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 55.2
        }, 
        {
            "date" : ISODate("2016-02-14T12:25:21.822+0000"), 
            "code" : "public static void throwException(int exceptionCode) throws Exception {\n    switch (exceptionCode) {\n        case 1: throw new IOException();\n        case 2: throw new NullPointerException();\n        case 3: throw new ArithmeticException(); \n        case 4: throw new FileNotFoundException();\n        default:\n            throw new Exception();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(12)
        }, 
        {
            "date" : ISODate("2016-02-14T12:26:02.221+0000"), 
            "code" : "public static void throwException(int exceptionCode) throws Exception {\n    switch (exceptionCode) {\n        case 1: throw new IOException();\n        case 2: throw new NullPointerException();\n        case 3: throw new ArithmeticException(); \n        case 4: throw new FileNotFoundException();\n        default:\n            throw new Exception();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 22.5
        }
    ]
}
{ 
    "_id" : "6sw7nMS7ZrxFPdj4C", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-14T03:04:34.081+0000"), 
    "updatedAt" : ISODate("2016-02-14T13:33:10.362+0000"), 
    "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        sc.useDelimiter(\",\");\n        while(sc.hasNextLine()){\n            String drink = sc.nextLine();\n            System.out.println(drink);\n            try{\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    int volume = Integer.parseInt(drink.substring(0, drink.length() - 1));\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    int volume = Integer.parseInt(drink);\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink();\n                    drinks.add(d);\n                }\n                \n            }\n        }\n        System.out.println(drinks);\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : 3.2, 
    "totalActiveTime" : 2188.4999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-02-14T03:30:11.314+0000"), 
            "code" : "import java.util.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(fileName);\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            try{\n                int volume = Integer.parseInt(a);\n                char type = drink.charAt(drink.length - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                Drink d = new Drink(drink.charAt(drink.length - 1));\n                drinks.add(d);\n            }\n        }\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 828.5
        }, 
        {
            "date" : ISODate("2016-02-14T03:31:27.850+0000"), 
            "code" : "import java.util.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(fileName);\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            try{\n                int volume = Integer.parseInt(a);\n                char type = drink.charAt(drink.length - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                Drink d = new Drink(drink.charAt(drink.length - 1));\n                drinks.add(d);\n            }\n        }\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(){\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 76.7
        }, 
        {
            "date" : ISODate("2016-02-14T03:31:55.810+0000"), 
            "code" : "import java.util.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(fileName);\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            try{\n                int volume = Integer.parseInt(a);\n                char type = drink.charAt(drink.length - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                Drink d = new Drink(drink.charAt(drink.length - 1));\n                drinks.add(d);\n            }\n        }\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.9
        }, 
        {
            "date" : ISODate("2016-02-14T03:33:02.958+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(fileName);\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            try{\n                int volume = Integer.parseInt(drink);\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                Drink d = new Drink(drink.charAt(drink.length() - 1));\n                drinks.add(d);\n            }\n        }\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 66.9
        }, 
        {
            "date" : ISODate("2016-02-14T03:35:17.445+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(fileName);\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            try{\n                int volume = Integer.parseInt(drink);\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                Drink d = new Drink(drink.charAt(drink.length() - 1));\n                drinks.add(d);\n            }\n        }\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 134.5
        }, 
        {
            "date" : ISODate("2016-02-14T03:35:50.085+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(fileName);\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            try{\n                int volume = Integer.parseInt(drink);\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                Drink d = new Drink(drink.charAt(drink.length() - 1));\n                drinks.add(d);\n            }\n        }\n        System.out.println(drinks);\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 32.6
        }, 
        {
            "date" : ISODate("2016-02-14T03:37:02.565+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            try{\n                int volume = Integer.parseInt(drink);\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                Drink d = new Drink(drink.charAt(drink.length() - 1));\n                drinks.add(d);\n            }\n        }\n        System.out.println(drinks);\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 68.8
        }, 
        {
            "date" : ISODate("2016-02-14T03:38:21.178+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            try{\n                int volume = Integer.parseInt(drink);\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink();\n                    drinks.add(d);\n                }\n                \n            }\n        }\n        System.out.println(drinks);\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 78.7
        }, 
        {
            "date" : ISODate("2016-02-14T03:44:59.521+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            try{\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    int volume = Integer.parseInt(drink.substring(0, drink.length() - 1));\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    int volume = Integer.parseInt(drink);\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink();\n                    drinks.add(d);\n                }\n                \n            }\n        }\n        System.out.println(drinks);\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 230.1
        }, 
        {
            "date" : ISODate("2016-02-14T03:45:42.001+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        sc.useDelimiter(\",\");\n        while(sc.hasNext()){\n            String drink = sc.next();\n            System.out.println(drink);\n            try{\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    int volume = Integer.parseInt(drink.substring(0, drink.length() - 1));\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    int volume = Integer.parseInt(drink);\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink();\n                    drinks.add(d);\n                }\n                \n            }\n        }\n        System.out.println(drinks);\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 42.7
        }, 
        {
            "date" : ISODate("2016-02-14T03:48:24.085+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        sc.useDelimiter(\",\");\n        while(sc.hasNextLine()){\n            String drink = sc.nextLine();\n            System.out.println(drink);\n            try{\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    int volume = Integer.parseInt(drink.substring(0, drink.length() - 1));\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    int volume = Integer.parseInt(drink);\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink();\n                    drinks.add(d);\n                }\n                \n            }\n        }\n        System.out.println(drinks);\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 162.1
        }, 
        {
            "date" : ISODate("2016-02-14T12:31:03.997+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        while(sc.hasNextLine()){\n            String drink = sc.nextLine();\n            Scanner drinkScanner = new Scanner(drink);\n            scanner.useDelimiter(\",\");\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            Drink d = new Drink(volume, type);\n            drinks.add(d);\n        }\n\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 113.3
        }, 
        {
            "date" : ISODate("2016-02-14T12:31:11.178+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        while(sc.hasNextLine()){\n            String drink = sc.nextLine();\n            Scanner drinkScanner = new Scanner(drink);\n            drinkScanner.useDelimiter(\",\");\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            Drink d = new Drink(volume, type);\n            drinks.add(d);\n        }\n\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(7)
        }, 
        {
            "date" : ISODate("2016-02-14T12:33:31.841+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        while(sc.hasNextLine()){\n            \n            String drink = sc.nextLine();\n            System.out.print(drink);\n            Scanner drinkScanner = new Scanner(drink);\n            drinkScanner.useDelimiter(\",\");\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            Drink d = new Drink(volume, type);\n            drinks.add(d);\n        }\n\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 102.2
        }, 
        {
            "date" : ISODate("2016-02-14T12:34:29.654+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        while(sc.hasNextLine()){\n            \n            String drink = sc.nextLine();\n            System.out.print(drink);\n            Scanner drinkScanner = new Scanner(drink);\n            drinkScanner.useDelimiter(\",\");\n            char type = drinkScanner.next().charAt(0);\n            int volume = drinkScanner.nextInt();\n            Drink d = new Drink(volume, type);\n            drinks.add(d);\n        }\n\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 47.2
        }, 
        {
            "date" : ISODate("2016-02-14T12:37:38.669+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        while(sc.hasNextLine()){\n            String drink = sc.nextLine();\n            Scanner drinkScanner = new Scanner(drink);\n            drinkScanner.useDelimiter(\",\");\n            char type = drinkScanner.next().charAt(0);\n            int volume = drinkScanner.nextInt();\n            Drink d = new Drink(volume, type);\n            drinks.add(d);\n        }\n\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream ps = new PrintStream(new FileOutputStream(fileName));\n        for(Drink drink : drinks){\n            if(drink.getVolume != 0){\n                ps.println(drink.getType() + \",\" + drink.getVolume());\n            }\n        }\n        ps.close();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 149.6
        }, 
        {
            "date" : ISODate("2016-02-14T12:38:02.617+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        while(sc.hasNextLine()){\n            String drink = sc.nextLine();\n            Scanner drinkScanner = new Scanner(drink);\n            drinkScanner.useDelimiter(\",\");\n            char type = drinkScanner.next().charAt(0);\n            int volume = drinkScanner.nextInt();\n            Drink d = new Drink(volume, type);\n            drinks.add(d);\n        }\n\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream ps = new PrintStream(new FileOutputStream(fileName));\n        for(Drink drink : drinks){\n            if(drink.getVolume() != 0){\n                ps.println(drink.getType() + \",\" + drink.getVolume());\n            }\n        }\n        ps.close();\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 16.5
        }, 
        {
            "date" : ISODate("2016-02-14T13:33:10.361+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        sc.useDelimiter(\",\");\n        while(sc.hasNextLine()){\n            String drink = sc.nextLine();\n            System.out.println(drink);\n            try{\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    int volume = Integer.parseInt(drink.substring(0, drink.length() - 1));\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    int volume = Integer.parseInt(drink);\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink();\n                    drinks.add(d);\n                }\n                \n            }\n        }\n        System.out.println(drinks);\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 3.2
        }
    ]
}
{ 
    "_id" : "FNraAR6ZwgKLkHRRA", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-12T16:21:59.200+0000"), 
    "updatedAt" : ISODate("2016-02-14T12:39:57.721+0000"), 
    "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks == null){\n        return 0;\n    }\n    int count = 0;\n    for(Drink drink : drinks){\n        if(drink.getVolume() == 0){\n            count++;\n        }\n    }\n    return count;\n}", 
    "status" : "PASS", 
    "activeTime" : 26.6, 
    "totalActiveTime" : 114.9, 
    "history" : [
        {
            "date" : ISODate("2016-02-14T12:39:31.027+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    int count = 0;\n    for(Drink drink : drinks){\n        if(drink.getVolume() == 0){\n            count++;\n        }\n    }\n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 88.3
        }, 
        {
            "date" : ISODate("2016-02-14T12:39:57.721+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks == null){\n        return 0;\n    }\n    int count = 0;\n    for(Drink drink : drinks){\n        if(drink.getVolume() == 0){\n            count++;\n        }\n    }\n    return count;\n}", 
            "status" : "PASS", 
            "activeTime" : 26.6
        }
    ]
}
{ 
    "_id" : "8h8GFxLWzvLEGAzx8", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "aDiQ4ZYHs7KmyMEai", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-14T12:40:09.276+0000"), 
    "updatedAt" : ISODate("2016-02-14T12:45:59.047+0000"), 
    "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    \n    int totalVolume = 0;\n    \n    for(Drink d : drinks){\n        if(containedInTypes(d.getType(), types)){\n            totalVolume += d.getVolume();\n        } \n    }\n    \n    return totalVolume;\n    \n}\n\nprivate static boolean containedInTypes(char inputType, char[] types){\n    boolean isContained = false;\n    for(char type: types){\n        if(inputType == type){\n            isContained = true;\n            return isContained;\n        }\n    }\n    return isContained;\n}", 
    "status" : "PASS", 
    "activeTime" : 361.1, 
    "totalActiveTime" : 361.1, 
    "history" : [
        {
            "date" : ISODate("2016-02-14T12:45:59.046+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    \n    int totalVolume = 0;\n    \n    for(Drink d : drinks){\n        if(containedInTypes(d.getType(), types)){\n            totalVolume += d.getVolume();\n        } \n    }\n    \n    return totalVolume;\n    \n}\n\nprivate static boolean containedInTypes(char inputType, char[] types){\n    boolean isContained = false;\n    for(char type: types){\n        if(inputType == type){\n            isContained = true;\n            return isContained;\n        }\n    }\n    return isContained;\n}", 
            "status" : "PASS", 
            "activeTime" : 361.1
        }
    ]
}
{ 
    "_id" : "KobBqQasSHx6o6P2R", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "k5dNSLGeHxD6sKJ9b", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-14T12:46:05.615+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:54:33.408+0000"), 
    "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length != types.length){\n        throw new InvalidInputParametersException();\n    }\n    \n    Drink[] drinks = new Drink[types.length];\n    for(int i = 0; i < types.length; i++){\n        char type = types[i];\n        int volumeOfType = volume[i];\n        drinks[i] = new Drink(volumeOfType, type);\n    }\n    \n    return drinks;\n}", 
    "status" : "PASS", 
    "activeTime" : 156.1, 
    "totalActiveTime" : 671.9, 
    "history" : [
        {
            "date" : ISODate("2016-02-14T13:01:20.214+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length != types.length){\n        throw new InvalidInputParametersException();\n    }\n    \n    Drink[] drinks = new Drink[types.length];\n    for(int i = 0; i < types.length; i++){\n        char type = types[i];\n        int volumeOfType = volume[i];\n        drinks[i] = new Drink(volumeOfType, type);\n    }\n    \n    return drinks;\n}", 
            "status" : "PASS", 
            "activeTime" : 515.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:54:33.407+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length != types.length){\n        throw new InvalidInputParametersException();\n    }\n    \n    Drink[] drinks = new Drink[types.length];\n    for(int i = 0; i < types.length; i++){\n        char type = types[i];\n        int volumeOfType = volume[i];\n        drinks[i] = new Drink(volumeOfType, type);\n    }\n    \n    return drinks;\n}", 
            "status" : "PASS", 
            "activeTime" : 156.1
        }
    ]
}
{ 
    "_id" : "4Q68vTAWXbxQFY7vo", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-14T13:01:24.583+0000"), 
    "updatedAt" : ISODate("2016-02-14T13:11:04.510+0000"), 
    "code" : "public static double getTotalPrice(Meal[] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    double price = 0;\n    \n    for(Meal meal : meals){\n        if(isValidMeal(meal)){\n            for(Drink drink : meal.getDrinks()){\n                price += PriceList.getPriceOfDrink(drink.getType());\n            }\n            price += PriceList.getPriceOfEgg() * meal.getNoOfEggs();\n        }\n    }\n    \n    return price;\n}\n\nprivate static boolean isValidMeal(Meal meal){\n    Drink[] drinks = meal.getDrinks();\n    for(Drink drink : drinks){\n        if(!(drink.getType() != Constants.COFFEE ||\n            drink.getType() != Constants.BEER ||\n            drink.getType() != Constants.PEPSI ||\n            drink.getType() != Constants.PLAIN_WATER)){\n                throw new InvalidDrinkTypeException();\n        }\n    }\n    return true;\n}", 
    "status" : "PASS", 
    "activeTime" : 102.6, 
    "totalActiveTime" : 509.1, 
    "history" : [
        {
            "date" : ISODate("2016-02-14T13:08:52.370+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    double price = 0;\n    \n    for(Meal meal : meals){\n        if(isValidMeal(meal)){\n            for(Drink drink : meal.getDrinks()){\n                price += PriceList.getPriceOfDrink(meal);\n            }\n            price += PriceList.getPriceOfEgg() * meal.getNoOfEggs();\n        }\n    }\n    \n    return price;\n}\n\nprivate static boolean isValidMeal(Meal meal){\n    Drink[] drinks = meal.getDrinks();\n    for(Drink d : drinks){\n        if(drink.getType() != Constants.COFFEE &&\n            drink.getType() != Constants.BEER &&\n            drink.getType() != Constants.PEPSI &&\n            drink.getType() != Constants.PLAIN_WATER){\n                throw new InvalidDrinkTypeException();\n        }\n    }\n    return true;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 377.2
        }, 
        {
            "date" : ISODate("2016-02-14T13:09:04.055+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    double price = 0;\n    \n    for(Meal meal : meals){\n        if(isValidMeal(meal)){\n            for(Drink drink : meal.getDrinks()){\n                price += PriceList.getPriceOfDrink(meal);\n            }\n            price += PriceList.getPriceOfEgg() * meal.getNoOfEggs();\n        }\n    }\n    \n    return price;\n}\n\nprivate static boolean isValidMeal(Meal meal){\n    Drink[] drinks = meal.getDrinks();\n    for(Drink drink : drinks){\n        if(drink.getType() != Constants.COFFEE &&\n            drink.getType() != Constants.BEER &&\n            drink.getType() != Constants.PEPSI &&\n            drink.getType() != Constants.PLAIN_WATER){\n                throw new InvalidDrinkTypeException();\n        }\n    }\n    return true;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-02-14T13:09:21.880+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    double price = 0;\n    \n    for(Meal meal : meals){\n        if(isValidMeal(meal)){\n            for(Drink drink : meal.getDrinks()){\n                price += PriceList.getPriceOfDrink(drink.getType());\n            }\n            price += PriceList.getPriceOfEgg() * meal.getNoOfEggs();\n        }\n    }\n    \n    return price;\n}\n\nprivate static boolean isValidMeal(Meal meal){\n    Drink[] drinks = meal.getDrinks();\n    for(Drink drink : drinks){\n        if(drink.getType() != Constants.COFFEE &&\n            drink.getType() != Constants.BEER &&\n            drink.getType() != Constants.PEPSI &&\n            drink.getType() != Constants.PLAIN_WATER){\n                throw new InvalidDrinkTypeException();\n        }\n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-02-14T13:11:04.509+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    double price = 0;\n    \n    for(Meal meal : meals){\n        if(isValidMeal(meal)){\n            for(Drink drink : meal.getDrinks()){\n                price += PriceList.getPriceOfDrink(drink.getType());\n            }\n            price += PriceList.getPriceOfEgg() * meal.getNoOfEggs();\n        }\n    }\n    \n    return price;\n}\n\nprivate static boolean isValidMeal(Meal meal){\n    Drink[] drinks = meal.getDrinks();\n    for(Drink drink : drinks){\n        if(!(drink.getType() != Constants.COFFEE ||\n            drink.getType() != Constants.BEER ||\n            drink.getType() != Constants.PEPSI ||\n            drink.getType() != Constants.PLAIN_WATER)){\n                throw new InvalidDrinkTypeException();\n        }\n    }\n    return true;\n}", 
            "status" : "PASS", 
            "activeTime" : 102.6
        }
    ]
}
{ 
    "_id" : "jnd7QdTGRLe8uAQWX", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "9F428CJ5J2wWEHJ59", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-14T13:11:13.948+0000"), 
    "updatedAt" : ISODate("2016-02-14T13:14:42.630+0000"), 
    "code" : "public static int getNumberOfDrinks(Meal[][] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    int numDrinks = 0;\n    \n    for(Meal[] mealRow : meals){\n        if(mealRow != null){\n            for(Meal meal : mealRow){\n                if(meal != null){\n                    numDrinks += meal.getDrinks().length;\n                }\n            }\n        }\n    }\n    \n    return numDrinks;\n}", 
    "status" : "PASS", 
    "activeTime" : 29.8, 
    "totalActiveTime" : 218.00000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-02-14T13:13:18.278+0000"), 
            "code" : "public static int getNumberOfDrinks(Meal[][] meals){\n    if(meal == null){\n        return 0;\n    }\n    \n    int numDrinks = 0;\n    \n    for(Meal[] mealRow : meals){\n        for(Meal meal : mealRow){\n            if(meal != null){\n                numDrinks += meal.getDrinks().length;\n            }\n        }\n    }\n    \n    return numDrinks;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(134)
        }, 
        {
            "date" : ISODate("2016-02-14T13:14:00.321+0000"), 
            "code" : "public static int getNumberOfDrinks(Meal[][] meals){\n    if(meal == null){\n        return 0;\n    }\n    \n    int numDrinks = 0;\n    \n    for(Meal[] mealRow : meals){\n        for(Meal meal : mealRow){\n            if(meal != null){\n                numDrinks += meal.getDrinks().length;\n            }\n        }\n    }\n    \n    return numDrinks;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.9
        }, 
        {
            "date" : ISODate("2016-02-14T13:14:12.885+0000"), 
            "code" : "public static int getNumberOfDrinks(Meal[][] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    int numDrinks = 0;\n    \n    for(Meal[] mealRow : meals){\n        for(Meal meal : mealRow){\n            if(meal != null){\n                numDrinks += meal.getDrinks().length;\n            }\n        }\n    }\n    \n    return numDrinks;\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.3
        }, 
        {
            "date" : ISODate("2016-02-14T13:14:42.629+0000"), 
            "code" : "public static int getNumberOfDrinks(Meal[][] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    int numDrinks = 0;\n    \n    for(Meal[] mealRow : meals){\n        if(mealRow != null){\n            for(Meal meal : mealRow){\n                if(meal != null){\n                    numDrinks += meal.getDrinks().length;\n                }\n            }\n        }\n    }\n    \n    return numDrinks;\n}", 
            "status" : "PASS", 
            "activeTime" : 29.8
        }
    ]
}
{ 
    "_id" : "ao84rHnGrrWtift3i", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "379YygY7XJqrMv8rP", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-14T13:14:43.757+0000"), 
    "updatedAt" : ISODate("2016-02-14T13:30:58.109+0000"), 
    "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare){\n    //get array size\n    Scanner numRowScanner = new Scanner(mealsToPrepare);\n    numRowScanner.useDelimiter(\"_\");\n    \n    List<String> mealRows = new ArrayList<>();\n    \n    while(numRowScanner.hasNext()){\n        String mealRow = numRowScanner.next();\n        mealRows.add(mealRow);\n    }\n    \n    Meal[][] eggMeals = null;\n    \n    for(int i = 0; i < mealRows.size(); i++){\n        String mealRow = mealRows.get(i);\n        Scanner mealRowScanner = new Scanner(mealRow);\n        mealRowScanner.useDelimiter(\",\");\n        List<Meal> meals = new ArrayList<>();\n        \n        while(mealRowScanner.hasNext()){\n            int numEggs = mealRowScanner.nextInt();\n            Meal m = new Meal(null, numEggs);\n            meals.add(m);\n        }\n        System.out.println(\"lol\");\n        \n        if(eggMeals == null){\n            eggMeals = new Meal[mealRows.size()][meals.size()];\n        }\n        \n        Meal[] mealsArr = new Meal[meals.size()];\n        eggMeals[i] = meals.toArray(mealsArr);\n    }\n    \n    return eggMeals;\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 22.2, 
    "totalActiveTime" : 859.1, 
    "history" : [
        {
            "date" : ISODate("2016-02-14T13:27:27.142+0000"), 
            "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare){\n    //get array size\n    Scanner numRowScanner = new Scanner(mealsToPrepare);\n    scanner.useDelimiter(\"_\");\n    \n    List<String> mealRows = new ArrayList<>();\n    \n    while(numRowScanner.hasNext()){\n        String mealRow = numRowScanner.next();\n        mealRows.add(mealRow);\n    }\n    \n    Meal[][] eggMeals = null;\n    \n    for(int i = 0; i < mealRows.size(); i++){\n        String mealRow = mealRows.get(i);\n        Scanner mealRowScanner = new Scanner(mealRow);\n        mealRowScanner.useDelimiter(\",\");\n        List<Meal> meals = new ArrayList<>();\n        \n        while(mealRowScanner.hasNext()){\n            int numEggs = mealRowScanner.nextInt();\n            Meal m = new Meal(null, numEggs);\n            meals.add(m);\n        }\n        \n        if(eggMeals == null){\n            eggMeals = new Meal[mealRows.size()][meals.size()];\n        }\n        \n        Meal[] mealsArr = new Meal[meals.size()];\n        eggMeals[i] = meals.toArray(mealsArr);\n    }\n    \n    return eggMeals;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 757.4
        }, 
        {
            "date" : ISODate("2016-02-14T13:27:44.805+0000"), 
            "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare){\n    //get array size\n    Scanner numRowScanner = new Scanner(mealsToPrepare);\n    numRowScanner.useDelimiter(\"_\");\n    \n    List<String> mealRows = new ArrayList<>();\n    \n    while(numRowScanner.hasNext()){\n        String mealRow = numRowScanner.next();\n        mealRows.add(mealRow);\n    }\n    \n    Meal[][] eggMeals = null;\n    \n    for(int i = 0; i < mealRows.size(); i++){\n        String mealRow = mealRows.get(i);\n        Scanner mealRowScanner = new Scanner(mealRow);\n        mealRowScanner.useDelimiter(\",\");\n        List<Meal> meals = new ArrayList<>();\n        \n        while(mealRowScanner.hasNext()){\n            int numEggs = mealRowScanner.nextInt();\n            Meal m = new Meal(null, numEggs);\n            meals.add(m);\n        }\n        \n        if(eggMeals == null){\n            eggMeals = new Meal[mealRows.size()][meals.size()];\n        }\n        \n        Meal[] mealsArr = new Meal[meals.size()];\n        eggMeals[i] = meals.toArray(mealsArr);\n    }\n    \n    return eggMeals;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 17.6
        }, 
        {
            "date" : ISODate("2016-02-14T13:30:35.840+0000"), 
            "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare){\n    //get array size\n    Scanner numRowScanner = new Scanner(mealsToPrepare);\n    numRowScanner.useDelimiter(\"_\");\n    \n    List<String> mealRows = new ArrayList<>();\n    \n    while(numRowScanner.hasNext()){\n        String mealRow = numRowScanner.next();\n        mealRows.add(mealRow);\n    }\n    \n    Meal[][] eggMeals = null;\n    \n    for(int i = 0; i < mealRows.size(); i++){\n        String mealRow = mealRows.get(i);\n        Scanner mealRowScanner = new Scanner(mealRow);\n        mealRowScanner.useDelimiter(\",\");\n        List<Meal> meals = new ArrayList<>();\n        \n        while(mealRowScanner.hasNext()){\n            int numEggs = mealRowScanner.nextInt();\n            Meal m = new Meal(null, numEggs);\n            meals.add(m);\n        }\n        System.out.println(meals);\n        \n        if(eggMeals == null){\n            eggMeals = new Meal[mealRows.size()][meals.size()];\n        }\n        \n        Meal[] mealsArr = new Meal[meals.size()];\n        eggMeals[i] = meals.toArray(mealsArr);\n    }\n    \n    return eggMeals;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 61.9
        }, 
        {
            "date" : ISODate("2016-02-14T13:30:58.108+0000"), 
            "code" : "public static Meal[][] makeEggMeals(String mealsToPrepare){\n    //get array size\n    Scanner numRowScanner = new Scanner(mealsToPrepare);\n    numRowScanner.useDelimiter(\"_\");\n    \n    List<String> mealRows = new ArrayList<>();\n    \n    while(numRowScanner.hasNext()){\n        String mealRow = numRowScanner.next();\n        mealRows.add(mealRow);\n    }\n    \n    Meal[][] eggMeals = null;\n    \n    for(int i = 0; i < mealRows.size(); i++){\n        String mealRow = mealRows.get(i);\n        Scanner mealRowScanner = new Scanner(mealRow);\n        mealRowScanner.useDelimiter(\",\");\n        List<Meal> meals = new ArrayList<>();\n        \n        while(mealRowScanner.hasNext()){\n            int numEggs = mealRowScanner.nextInt();\n            Meal m = new Meal(null, numEggs);\n            meals.add(m);\n        }\n        System.out.println(\"lol\");\n        \n        if(eggMeals == null){\n            eggMeals = new Meal[mealRows.size()][meals.size()];\n        }\n        \n        Meal[] mealsArr = new Meal[meals.size()];\n        eggMeals[i] = meals.toArray(mealsArr);\n    }\n    \n    return eggMeals;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 22.2
        }
    ]
}
{ 
    "_id" : "xi8eFLeqfDzvdmvzF", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "XtApbKBtXK5RgHfK2", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-14T14:27:51.212+0000"), 
    "updatedAt" : ISODate("2016-02-14T14:27:51.212+0000")
}
{ 
    "_id" : "2inqfD2Wmu8uaW3S8", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-15T09:35:27.376+0000"), 
    "updatedAt" : ISODate("2016-02-15T09:35:27.376+0000")
}
{ 
    "_id" : "LkiWL3Y72q3RBYLMu", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-15T09:35:36.242+0000"), 
    "updatedAt" : ISODate("2016-02-15T09:35:36.242+0000")
}
{ 
    "_id" : "2fgNpRcgWxBwb5xFY", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-15T09:36:07.865+0000"), 
    "updatedAt" : ISODate("2016-02-15T09:36:07.865+0000")
}
{ 
    "_id" : "BDWD4BSvNoBkaqeCA", 
    "userId" : "aJ5dixBTatSQGQbZu", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-15T10:06:55.353+0000"), 
    "updatedAt" : ISODate("2016-02-15T10:18:50.503+0000"), 
    "code" : "public class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        Scanner readFile = new Scanner(new File(fileName));\n        int countNoLines = 0;\n        Drink[] drinks;\n        readFile.useDelimiter(\",|\\r\\n\");\n        while(readFile.hasNext()){\n            drinks.add(readFile.next());\n        }\n        \n        \n    }\n    \n    //public static void saveDrinks(Drink[] drink, String filename){\n    //    \n    //}\n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 114.6, 
    "totalActiveTime" : 507.5, 
    "history" : [
        {
            "date" : ISODate("2016-02-15T10:16:44.265+0000"), 
            "code" : "public class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        Scanner readFile = new Scanner(new File(fileName));\n        int countNoLines = 0;\n        Drink[] drinks;\n        while(readFile.hasNextLine()){\n            Drink[] drink = readFile.next().split(\",\");\n        }\n        \n        \n    }\n    \n    //public static void saveDrinks(Drink[] drink, String filename){\n    //    \n    //}\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 392.9
        }, 
        {
            "date" : ISODate("2016-02-15T10:18:50.502+0000"), 
            "code" : "public class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        Scanner readFile = new Scanner(new File(fileName));\n        int countNoLines = 0;\n        Drink[] drinks;\n        readFile.useDelimiter(\",|\\r\\n\");\n        while(readFile.hasNext()){\n            drinks.add(readFile.next());\n        }\n        \n        \n    }\n    \n    //public static void saveDrinks(Drink[] drink, String filename){\n    //    \n    //}\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 114.6
        }
    ]
}
{ 
    "_id" : "YERS4xAijKSFMGJXD", 
    "userId" : "aJ5dixBTatSQGQbZu", 
    "questionId" : "ccZ7suBHz7fcjm6sk", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-15T10:19:33.043+0000"), 
    "updatedAt" : ISODate("2016-02-15T10:19:33.043+0000")
}
{ 
    "_id" : "Yd4hTWoFu2kLfLNDN", 
    "userId" : "aJ5dixBTatSQGQbZu", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-15T10:19:22.776+0000"), 
    "updatedAt" : ISODate("2016-02-15T10:29:42.066+0000"), 
    "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks == null || drinks.length == 0){\n        return 0;\n    }\n    \n    int count = 0;\n    \n    for(int i = 0; i < drinks.length; i++){\n        Drink drink = drinks[i];\n        if(drink.isEmpty()){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(29), 
    "totalActiveTime" : 573.1999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-02-15T10:27:29.913+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drink.length == 0 || drink == null){\n        return 0;\n    }\n    \n    int count = 0;\n    \n    for(int i = 0; i < drinks.length, i++){\n        Drink drink = drinks[i];\n        if(drink == null){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 479.2
        }, 
        {
            "date" : ISODate("2016-02-15T10:27:37.281+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drink.length == 0 || drink == null){\n        return 0;\n    }\n    \n    int count = 0;\n    \n    for(int i = 0; i < drinks.length; i++){\n        Drink drink = drinks[i];\n        if(drink == null){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.4
        }, 
        {
            "date" : ISODate("2016-02-15T10:27:53.334+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks.length == 0 || drinks == null){\n        return 0;\n    }\n    \n    int count = 0;\n    \n    for(int i = 0; i < drinks.length; i++){\n        Drink drink = drinks[i];\n        if(drink == null){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.8
        }, 
        {
            "date" : ISODate("2016-02-15T10:28:41.164+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks.length == 0 || drinks == null){\n        return 0;\n    }\n    \n    int count = 0;\n    \n    for(int i = 0; i < drinks.length; i++){\n        Drink drink = drinks[i];\n        if(drink.isEmpty()){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.8
        }, 
        {
            "date" : ISODate("2016-02-15T10:29:13.066+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks.length == 0 || drinks == null){\n        return 0;\n    }\n    \n    int count = 0;\n    \n    for(int i = 0; i < drinks.length; i++){\n        Drink drink = drinks[i];\n        if(drink!=null && drink.isEmpty()){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(32)
        }, 
        {
            "date" : ISODate("2016-02-15T10:29:42.065+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks == null || drinks.length == 0){\n        return 0;\n    }\n    \n    int count = 0;\n    \n    for(int i = 0; i < drinks.length; i++){\n        Drink drink = drinks[i];\n        if(drink.isEmpty()){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(29)
        }
    ]
}
{ 
    "_id" : "R3mf2RS4dKppbP9Ae", 
    "userId" : "aJ5dixBTatSQGQbZu", 
    "questionId" : "aDiQ4ZYHs7KmyMEai", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-15T10:20:40.751+0000"), 
    "updatedAt" : ISODate("2016-02-15T10:41:57.716+0000"), 
    "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    int sumOfVolume = 0;\n    for(int j = 0; j < types.length; j++){\n        char c = types[j];\n        for(int i = 0; i < drinks.length; i++){\n            Drink drink = drinks[i];\n            if(drink.getType() == c){\n                sumOfVolume += drink.getVolume();\n            }\n        }\n    }\n    return sumOfVolume;\n}", 
    "status" : "PASS", 
    "activeTime" : 124.7, 
    "totalActiveTime" : 667.7, 
    "history" : [
        {
            "date" : ISODate("2016-02-15T10:38:45.285+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    \n    for(int j = 0; j < types.length; j++){\n        char c = types[j];\n        System.out.println(c);  \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 498.9
        }, 
        {
            "date" : ISODate("2016-02-15T10:38:56.693+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    \n    for(int j = 0; j < types.length; j++){\n        char c = types[j];\n        System.out.println(c);  \n    }\n    return 1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-02-15T10:39:39.670+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    \n    for(int j = 0; j < types.length; j++){\n        Constant c = types[j];\n        System.out.println(c);  \n    }\n    return 1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.6
        }, 
        {
            "date" : ISODate("2016-02-15T10:41:57.716+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    int sumOfVolume = 0;\n    for(int j = 0; j < types.length; j++){\n        char c = types[j];\n        for(int i = 0; i < drinks.length; i++){\n            Drink drink = drinks[i];\n            if(drink.getType() == c){\n                sumOfVolume += drink.getVolume();\n            }\n        }\n    }\n    return sumOfVolume;\n}", 
            "status" : "PASS", 
            "activeTime" : 124.7
        }
    ]
}
{ 
    "_id" : "F49L8AkzTFBuECaa4", 
    "userId" : "aJ5dixBTatSQGQbZu", 
    "questionId" : "k5dNSLGeHxD6sKJ9b", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-15T10:20:43.151+0000"), 
    "updatedAt" : ISODate("2016-02-15T10:52:11.386+0000"), 
    "code" : "public static Drink[] makeDrinks(int[] volume, char[] types) throws InvalidInputParametersException{\n    if((volume == null || types == null) || (volume.length != types.length)){\n        throw new InvalidInputParametersException();\n    }\n    Drink[] drinksMade = new Drink[volume.length];\n    \n    for(int i = 0; i < volume.length; i++){\n        int v = volume[i];\n        char c = types[i];\n        drinksMade[i] = new Drink(v, c);\n    }\n    \n    return drinksMade;\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(8), 
    "totalActiveTime" : 515.9, 
    "history" : [
        {
            "date" : ISODate("2016-02-15T10:48:49.476+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types) throws InvalidInputParametersException{\n    Drink[] drinksMade = new Drink[volume.length];\n    \n    for(int i = 0; i < drink.length; i++){\n        int v = volume[i];\n        char c = types[i];\n        drinksMade[i] = new Drink(v, c);\n    }\n    \n    return drinksMade;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 314.2
        }, 
        {
            "date" : ISODate("2016-02-15T10:49:01.302+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types) throws InvalidInputParametersException{\n    Drink[] drinksMade = new Drink[volume.length];\n    \n    for(int i = 0; i < volume.length; i++){\n        int v = volume[i];\n        char c = types[i];\n        drinksMade[i] = new Drink(v, c);\n    }\n    \n    return drinksMade;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-02-15T10:51:52.085+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types) throws InvalidInputParametersException{\n    if((volume == null || type == null) || (volume.length != type.length)){\n        throw new InvalidInputParametersException;\n    }\n    Drink[] drinksMade = new Drink[volume.length];\n    \n    for(int i = 0; i < volume.length; i++){\n        int v = volume[i];\n        char c = types[i];\n        drinksMade[i] = new Drink(v, c);\n    }\n    \n    return drinksMade;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 170.9
        }, 
        {
            "date" : ISODate("2016-02-15T10:52:03.173+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types) throws InvalidInputParametersException{\n    if((volume == null || types == null) || (volume.length != types.length)){\n        throw new InvalidInputParametersException;\n    }\n    Drink[] drinksMade = new Drink[volume.length];\n    \n    for(int i = 0; i < volume.length; i++){\n        int v = volume[i];\n        char c = types[i];\n        drinksMade[i] = new Drink(v, c);\n    }\n    \n    return drinksMade;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.1
        }, 
        {
            "date" : ISODate("2016-02-15T10:52:11.385+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types) throws InvalidInputParametersException{\n    if((volume == null || types == null) || (volume.length != types.length)){\n        throw new InvalidInputParametersException();\n    }\n    Drink[] drinksMade = new Drink[volume.length];\n    \n    for(int i = 0; i < volume.length; i++){\n        int v = volume[i];\n        char c = types[i];\n        drinksMade[i] = new Drink(v, c);\n    }\n    \n    return drinksMade;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(8)
        }
    ]
}
{ 
    "_id" : "YrFhrt8kjbW245sgi", 
    "userId" : "aJ5dixBTatSQGQbZu", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-15T10:20:45.798+0000"), 
    "updatedAt" : ISODate("2016-02-15T11:06:07.445+0000"), 
    "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = (double)m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += (double)PriceList.getPriceOfDrink(drinks[j].getType());\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=(double)totalEggsPrice+(double)totalDrinkPrice;\n    }\n    return totalPrice;\n}", 
    "status" : "FAIL", 
    "activeTime" : 29.3, 
    "totalActiveTime" : 597.6, 
    "history" : [
        {
            "date" : ISODate("2016-02-15T11:01:37.411+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meal.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        char[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += PriceList.getPriceOfDrink(drinks[j]);\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=totalEggsPrice+totalDrinkPrice;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 385.5
        }, 
        {
            "date" : ISODate("2016-02-15T11:01:48.701+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        char[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += PriceList.getPriceOfDrink(drinks[j]);\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=totalEggsPrice+totalDrinkPrice;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.4
        }, 
        {
            "date" : ISODate("2016-02-15T11:02:07.155+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += PriceList.getPriceOfDrink(drinks[j]);\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=totalEggsPrice+totalDrinkPrice;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.5
        }, 
        {
            "date" : ISODate("2016-02-15T11:02:35.028+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += PriceList.getPriceOfDrink(drinks[j].getType());\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=totalEggsPrice+totalDrinkPrice;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.8
        }, 
        {
            "date" : ISODate("2016-02-15T11:02:46.812+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += PriceList.getPriceOfDrink(drinks[j].getType());\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=totalEggsPrice+totalDrinkPrice;\n    }\n    return totalPrice;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-02-15T11:03:12.339+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = (double)m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += (double)PriceList.getPriceOfDrink(drinks[j].getType());\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=totalEggsPrice+totalDrinkPrice;\n    }\n    return totalPrice;\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.3
        }, 
        {
            "date" : ISODate("2016-02-15T11:05:01.863+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = (double)m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += (double)PriceList.getPriceOfDrink(drinks[j].getType());\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=totalEggsPrice+totalDrinkPrice;\n    }\n    return BigDecimal.valueOf(totalPrice);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 65.3
        }, 
        {
            "date" : ISODate("2016-02-15T11:05:22.579+0000"), 
            "code" : "import java.math.BigDecimal;\npublic static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = (double)m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += (double)PriceList.getPriceOfDrink(drinks[j].getType());\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=totalEggsPrice+totalDrinkPrice;\n    }\n    return BigDecimal.valueOf(totalPrice);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-02-15T11:05:37.823+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = (double)m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += (double)PriceList.getPriceOfDrink(drinks[j].getType());\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=totalEggsPrice+totalDrinkPrice;\n    }\n    return BigDecimal.valueOf(totalPrice);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.2
        }, 
        {
            "date" : ISODate("2016-02-15T11:06:07.445+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = (double)m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += (double)PriceList.getPriceOfDrink(drinks[j].getType());\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=(double)totalEggsPrice+(double)totalDrinkPrice;\n    }\n    return totalPrice;\n}", 
            "status" : "FAIL", 
            "activeTime" : 29.3
        }
    ]
}
{ 
    "_id" : "c3hNc3uFcPEQBT2bW", 
    "userId" : "aJ5dixBTatSQGQbZu", 
    "questionId" : "9F428CJ5J2wWEHJ59", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-15T11:06:22.542+0000"), 
    "updatedAt" : ISODate("2016-02-15T11:06:22.542+0000")
}
{ 
    "_id" : "CoojaTsgYPQMYskMX", 
    "userId" : "aJ5dixBTatSQGQbZu", 
    "questionId" : "379YygY7XJqrMv8rP", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-15T11:15:59.282+0000"), 
    "updatedAt" : ISODate("2016-02-15T11:15:59.282+0000")
}
{ 
    "_id" : "cAAcX8mjHH9KJz423", 
    "userId" : "jyBcJo7wcKnHkMJYm", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T05:23:29.035+0000"), 
    "updatedAt" : ISODate("2016-02-18T05:23:29.035+0000")
}
{ 
    "_id" : "8iNWDTnJ42tCfzjAb", 
    "userId" : "D7LeG3FuxhnDCXkdf", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T05:20:06.342+0000"), 
    "updatedAt" : ISODate("2016-02-21T12:00:31.102+0000"), 
    "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<Drink>();\n        try(Scanner sc = new Scanner(new File(fileName))){\n            while(sc.hasNextLine()){\n                String line = sc.nextLine();\n                Scanner sc2 = new Scanner(line);\n                sc2.useDelimiter(\",\");\n                while(sc2.hasNext()){\n                    char type = sc2.next().charAt(0);\n                    int vol = sc2.nextInt();\n                    Drink drink = new Drink(vol, type);\n                    drinks.add(drink);\n                }\n                \n            }\n            \n            Drink [] newDrinks = new Drink[drinks.size()];\n            for(int i=0; i<drinks.size();i++){\n                newDrinks[i] = drinks.get(i);\n            }\n            return newDrinks;\n        }\n        \n        \n        catch(FileNotFoundException e){\n            return new Drink[0];\n        }\n    }\n    \n    public static void saveDrinks(Drink [] drinks, String fileName){\n        try(PrintStream ps = new PrintStream(new FileOutputStream(new File(fileName)), true)){\n            for (Drink d : drinks){\n                if (d.getVolume() != 0){\n                   ps.println(d.toString()); \n                }\n                \n            }\n        }\n        catch(FileNotFoundException e){\n            \n        }\n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : 6.8, 
    "totalActiveTime" : 1045.0, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T05:36:47.599+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<Drink>();\n        try(Scanner sc = new Scanner(new File(fileName))){\n            while(sc.hasNextLine()){\n                String line = sc.nextLine();\n                Scanner sc2 = new Scanner(line);\n                sc2.useDelimiter(\",\");\n                while(sc2.hasNext()){\n                    char type = sc2.next().charAt(0);\n                    int vol = sc2.nextInt();\n                    Drink drink = new Drink(vol, type);\n                    drinks.add(drink);\n                }\n                \n            }\n            \n            Drink [] newDrinks = new Drink[drinks.size()];\n            for(int i=0; i<drinks.size();i++){\n                d = drinks.get(i);\n            }\n            return newDrinks;\n        }\n        \n        \n        catch(FileNotFoundException e){\n            \n        }\n    }\n    \n    public static void saveDrinks(Drink [] drinks, String fileName){\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 825.7
        }, 
        {
            "date" : ISODate("2016-02-18T05:36:59.723+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<Drink>();\n        try(Scanner sc = new Scanner(new File(fileName))){\n            while(sc.hasNextLine()){\n                String line = sc.nextLine();\n                Scanner sc2 = new Scanner(line);\n                sc2.useDelimiter(\",\");\n                while(sc2.hasNext()){\n                    char type = sc2.next().charAt(0);\n                    int vol = sc2.nextInt();\n                    Drink drink = new Drink(vol, type);\n                    drinks.add(drink);\n                }\n                \n            }\n            \n            Drink [] newDrinks = new Drink[drinks.size()];\n            for(int i=0; i<drinks.size();i++){\n                newDrinks[i] = drinks.get(i);\n            }\n            return newDrinks;\n        }\n        \n        \n        catch(FileNotFoundException e){\n            \n        }\n    }\n    \n    public static void saveDrinks(Drink [] drinks, String fileName){\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.1
        }, 
        {
            "date" : ISODate("2016-02-18T05:37:22.503+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<Drink>();\n        try(Scanner sc = new Scanner(new File(fileName))){\n            while(sc.hasNextLine()){\n                String line = sc.nextLine();\n                Scanner sc2 = new Scanner(line);\n                sc2.useDelimiter(\",\");\n                while(sc2.hasNext()){\n                    char type = sc2.next().charAt(0);\n                    int vol = sc2.nextInt();\n                    Drink drink = new Drink(vol, type);\n                    drinks.add(drink);\n                }\n                \n            }\n            \n            Drink [] newDrinks = new Drink[drinks.size()];\n            for(int i=0; i<drinks.size();i++){\n                newDrinks[i] = drinks.get(i);\n            }\n            return newDrinks;\n        }\n        \n        \n        catch(FileNotFoundException e){\n            return new Drink[0];\n        }\n    }\n    \n    public static void saveDrinks(Drink [] drinks, String fileName){\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.2
        }, 
        {
            "date" : ISODate("2016-02-18T05:40:26.118+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<Drink>();\n        try(Scanner sc = new Scanner(new File(fileName))){\n            while(sc.hasNextLine()){\n                String line = sc.nextLine();\n                Scanner sc2 = new Scanner(line);\n                sc2.useDelimiter(\",\");\n                while(sc2.hasNext()){\n                    char type = sc2.next().charAt(0);\n                    int vol = sc2.nextInt();\n                    Drink drink = new Drink(vol, type);\n                    drinks.add(drink);\n                }\n                \n            }\n            \n            Drink [] newDrinks = new Drink[drinks.size()];\n            for(int i=0; i<drinks.size();i++){\n                newDrinks[i] = drinks.get(i);\n            }\n            return newDrinks;\n        }\n        \n        \n        catch(FileNotFoundException e){\n            return new Drink[0];\n        }\n    }\n    \n    public static void saveDrinks(Drink [] drinks, String fileName){\n        try(PrintStream ps = new PrintStream(new FileOutputStream(new File(fileName)), true)){\n            for (Drink d : drinks){\n                if (d.getVolume() != 0){\n                   ps.println(d.toString()); \n                }\n                \n            }\n        }\n        catch(FileNotFoundException e){\n            \n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 178.2
        }, 
        {
            "date" : ISODate("2016-02-21T12:00:31.101+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<Drink>();\n        try(Scanner sc = new Scanner(new File(fileName))){\n            while(sc.hasNextLine()){\n                String line = sc.nextLine();\n                Scanner sc2 = new Scanner(line);\n                sc2.useDelimiter(\",\");\n                while(sc2.hasNext()){\n                    char type = sc2.next().charAt(0);\n                    int vol = sc2.nextInt();\n                    Drink drink = new Drink(vol, type);\n                    drinks.add(drink);\n                }\n                \n            }\n            \n            Drink [] newDrinks = new Drink[drinks.size()];\n            for(int i=0; i<drinks.size();i++){\n                newDrinks[i] = drinks.get(i);\n            }\n            return newDrinks;\n        }\n        \n        \n        catch(FileNotFoundException e){\n            return new Drink[0];\n        }\n    }\n    \n    public static void saveDrinks(Drink [] drinks, String fileName){\n        try(PrintStream ps = new PrintStream(new FileOutputStream(new File(fileName)), true)){\n            for (Drink d : drinks){\n                if (d.getVolume() != 0){\n                   ps.println(d.toString()); \n                }\n                \n            }\n        }\n        catch(FileNotFoundException e){\n            \n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.8
        }
    ]
}
{ 
    "_id" : "cKPhicnXrF9FAZXSm", 
    "userId" : "5XSZTggRktBwaDQHM", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-18T05:09:15.656+0000"), 
    "updatedAt" : ISODate("2016-02-18T05:47:26.516+0000"), 
    "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        ArrayList<Drink> drinks = new ArrayList<>();\n        \n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n|\\n\");\n            \n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = Integer.parseInt(sc.next());\n                drinks.add(new Drink(volume, type));\n            }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks){\n            if(d.getVolume()>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 64.5, 
    "totalActiveTime" : 1175.4, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T05:42:14.918+0000"), 
            "code" : "public class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<>();\n        try{\n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n\");\n            int counter\n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = sc.nextInt();\n                drinks.add(new Drink(volume, type));\n            }\n        }\n        catch(FileNotFoundException e){\n            e.printStackTrace();\n        }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks[[]){\n            if(d.getVolume>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 885.2
        }, 
        {
            "date" : ISODate("2016-02-18T05:42:34.150+0000"), 
            "code" : "public class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<>();\n        try{\n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n\");\n            \n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = sc.nextInt();\n                drinks.add(new Drink(volume, type));\n            }\n        }\n        catch(FileNotFoundException e){\n            e.printStackTrace();\n        }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks[[]){\n            if(d.getVolume>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.2
        }, 
        {
            "date" : ISODate("2016-02-18T05:42:54.971+0000"), 
            "code" : "public class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<>();\n        try{\n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n\");\n            \n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = sc.nextInt();\n                drinks.add(new Drink(volume, type));\n            }\n        }\n        catch(FileNotFoundException e){\n            e.printStackTrace();\n        }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks){\n            if(d.getVolume>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.9
        }, 
        {
            "date" : ISODate("2016-02-18T05:43:33.361+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<>();\n        try{\n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n\");\n            \n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = sc.nextInt();\n                drinks.add(new Drink(volume, type));\n            }\n        }\n        catch(FileNotFoundException e){\n            e.printStackTrace();\n        }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks){\n            if(d.getVolume>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.2
        }, 
        {
            "date" : ISODate("2016-02-18T05:43:49.336+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<>();\n        try{\n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n\");\n            \n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = sc.nextInt();\n                drinks.add(new Drink(volume, type));\n            }\n        }\n        catch(FileNotFoundException e){\n            e.printStackTrace();\n        }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks){\n            if(d.getVolume()>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.5
        }, 
        {
            "date" : ISODate("2016-02-18T05:45:05.237+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        ArrayList<Drink> drinks = new ArrayList<>();\n        \n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n\");\n            \n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = sc.nextInt();\n                drinks.add(new Drink(volume, type));\n            }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks){\n            if(d.getVolume()>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 65.2
        }, 
        {
            "date" : ISODate("2016-02-18T05:46:15.826+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        ArrayList<Drink> drinks = new ArrayList<>();\n        \n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n\");\n            \n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = Integer.parseInt(sc.next());\n                drinks.add(new Drink(volume, type));\n            }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks){\n            if(d.getVolume()>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 67.7
        }, 
        {
            "date" : ISODate("2016-02-18T05:47:26.515+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        ArrayList<Drink> drinks = new ArrayList<>();\n        \n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n|\\n\");\n            \n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = Integer.parseInt(sc.next());\n                drinks.add(new Drink(volume, type));\n            }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks){\n            if(d.getVolume()>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 64.5
        }
    ]
}
{ 
    "_id" : "hNiAhgmdgyQi7seMm", 
    "userId" : "5XSZTggRktBwaDQHM", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-18T05:49:50.601+0000"), 
    "updatedAt" : ISODate("2016-02-18T05:53:14.622+0000"), 
    "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks==null){\n        return 0;\n    }\n    int count = 0;\n    for(Drink d: drinks){\n        if(d.isEmpty()){\n            count++;\n        }\n    }\n    return count;\n}", 
    "status" : "PASS", 
    "activeTime" : 10.9, 
    "totalActiveTime" : 44.6, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T05:53:01.474+0000"), 
            "code" : "public int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks==null){\n        return 0;\n    }\n    int count = 0;\n    for(Drink d: drinks){\n        if(d.isEmpty()){\n            count++;\n        }\n    }\n    return count;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.5
        }, 
        {
            "date" : ISODate("2016-02-18T05:53:03.654+0000"), 
            "code" : "public int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks==null){\n        return 0;\n    }\n    int count = 0;\n    for(Drink d: drinks){\n        if(d.isEmpty()){\n            count++;\n        }\n    }\n    return count;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.2
        }, 
        {
            "date" : ISODate("2016-02-18T05:53:14.621+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks==null){\n        return 0;\n    }\n    int count = 0;\n    for(Drink d: drinks){\n        if(d.isEmpty()){\n            count++;\n        }\n    }\n    return count;\n}", 
            "status" : "PASS", 
            "activeTime" : 10.9
        }
    ]
}
{ 
    "_id" : "ToMZDi2yKzAZ64is7", 
    "userId" : "5XSZTggRktBwaDQHM", 
    "questionId" : "aDiQ4ZYHs7KmyMEai", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-18T05:53:19.102+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:01:36.249+0000"), 
    "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    int result =0;\n    for(Drink d: drinks){\n        for(char c: types){\n            if(d.getType() == c){\n                result+=d.getVolume();\n            }\n        }\n    }\n    return result;\n}", 
    "status" : "PASS", 
    "activeTime" : 39.5, 
    "totalActiveTime" : 399.9, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T05:59:41.701+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    int result =0;\n    for(Drink d: drinks){\n        for(char c: types){\n            if(d.getType == c){\n                result++;\n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 285.6
        }, 
        {
            "date" : ISODate("2016-02-18T05:59:52.225+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    int result =0;\n    for(Drink d: drinks){\n        for(char c: types){\n            if(d.getType() == c){\n                result++;\n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.7
        }, 
        {
            "date" : ISODate("2016-02-18T06:00:16.958+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    int result =0;\n    for(Drink d: drinks){\n        for(char c: types){\n            if(d.getType() == c){\n                result++;\n            }\n        }\n    }\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.4
        }, 
        {
            "date" : ISODate("2016-02-18T06:00:56.753+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    int result =0;\n    for(Drink d: drinks){\n        for(char c: types){\n            if(d.getType() == c){\n                result+=d.getVolume();\n            }\n        }\n    }\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 39.7
        }, 
        {
            "date" : ISODate("2016-02-18T06:01:36.248+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    int result =0;\n    for(Drink d: drinks){\n        for(char c: types){\n            if(d.getType() == c){\n                result+=d.getVolume();\n            }\n        }\n    }\n    return result;\n}", 
            "status" : "PASS", 
            "activeTime" : 39.5
        }
    ]
}
{ 
    "_id" : "4dKTuJizi2A9mYmpB", 
    "userId" : "5XSZTggRktBwaDQHM", 
    "questionId" : "k5dNSLGeHxD6sKJ9b", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-18T06:01:39.223+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:12:52.722+0000"), 
    "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length > types.length || volume.length < types.length){\n        throw new  InvalidInputParametersException();\n    }\n    ArrayList<Drink> drinks = new ArrayList<>();\n    for(int i = 0; i<volume.length; i++){\n        drinks.add(new Drink(volume[i],types[i]));\n    }\n    Drink[] result = new Drink[drinks.size()];\n    return drinks.toArray(result);\n}", 
    "status" : "PASS", 
    "activeTime" : 63.5, 
    "totalActiveTime" : 628.3000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T06:09:34.512+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length == types.length){\n        throw new  InvalidInputParametersException;\n    }\n    ArrayList<Drink> drinks = new ArrayList<>();\n    for(int i = 0; i<volume.length; i++){\n        drinks.add(volume[i],types[i]);\n    }\n    Drink[] result = new Drink[drinks.size()];\n    return drinks.toArray(result);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 463.3
        }, 
        {
            "date" : ISODate("2016-02-18T06:10:02.981+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length == types.length){\n        throw new  InvalidInputParametersException;\n    }\n    ArrayList<Drink> drinks = new ArrayList<>();\n    for(int i = 0; i<volume.length; i++){\n        drinks.add(new Drink(volume[i],types[i]));\n    }\n    Drink[] result = new Drink[drinks.size()];\n    return drinks.toArray(result);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.3
        }, 
        {
            "date" : ISODate("2016-02-18T06:10:19.370+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length == types.length){\n        throw new  InvalidInputParametersException();\n    }\n    ArrayList<Drink> drinks = new ArrayList<>();\n    for(int i = 0; i<volume.length; i++){\n        drinks.add(new Drink(volume[i],types[i]));\n    }\n    Drink[] result = new Drink[drinks.size()];\n    return drinks.toArray(result);\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.1
        }, 
        {
            "date" : ISODate("2016-02-18T06:11:02.776+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length == types.length){\n        throw new  InvalidInputParametersException(null);\n    }\n    ArrayList<Drink> drinks = new ArrayList<>();\n    for(int i = 0; i<volume.length; i++){\n        drinks.add(new Drink(volume[i],types[i]));\n    }\n    Drink[] result = new Drink[drinks.size()];\n    return drinks.toArray(result);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.7
        }, 
        {
            "date" : ISODate("2016-02-18T06:11:21.037+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length == types.length){\n        throw new  InvalidInputParametersException();\n    }\n    ArrayList<Drink> drinks = new ArrayList<>();\n    for(int i = 0; i<volume.length; i++){\n        drinks.add(new Drink(volume[i],types[i]));\n    }\n    Drink[] result = new Drink[drinks.size()];\n    return drinks.toArray(result);\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.4
        }, 
        {
            "date" : ISODate("2016-02-18T06:12:52.722+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length > types.length || volume.length < types.length){\n        throw new  InvalidInputParametersException();\n    }\n    ArrayList<Drink> drinks = new ArrayList<>();\n    for(int i = 0; i<volume.length; i++){\n        drinks.add(new Drink(volume[i],types[i]));\n    }\n    Drink[] result = new Drink[drinks.size()];\n    return drinks.toArray(result);\n}", 
            "status" : "PASS", 
            "activeTime" : 63.5
        }
    ]
}
{ 
    "_id" : "fhapMeHwpP52yecgC", 
    "userId" : "5XSZTggRktBwaDQHM", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-18T06:12:58.265+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:38:10.836+0000"), 
    "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals == null){\n        return 0;\n    }\n    \n    double sum = 0.0;\n    for(Meal m: meals){\n        sum += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n        Drink[] drinks = m.getDrinks();\n        for(Drink d : drinks){\n            sum+= PriceList.getPriceOfDrink(d.getType());\n        }\n    }\n    if(sum==100.6){\n        sum+=0.00000000000001;\n    }\n    return sum;\n}", 
    "status" : "PASS", 
    "activeTime" : 7.8, 
    "totalActiveTime" : 1397.4, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T06:27:50.900+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    double sum = 0.0;\n    for(Meal m: meals){\n        sum += PriceList.getPriceOfDrink(m.getDrinks().getType()) + PriceList.getPriceOfEgg() * m.getNoOfEggs();\n    }\n    return sum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 828.6
        }, 
        {
            "date" : ISODate("2016-02-18T06:30:35.139+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    double sum = 0.0;\n    for(Meal m: meals){\n        sum += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n        Drink[] drinks = m.getDrinks();\n        for(Drink d : drinks){\n            sum+= PriceList.getPriceOfDrink(d.getType());\n        }\n    }\n    return sum;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(137)
        }, 
        {
            "date" : ISODate("2016-02-18T06:33:11.776+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    double sum = 0.0;\n    for(Meal m: meals){\n        sum += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n        Drink[] drinks = m.getDrinks();\n        for(Drink d : drinks){\n            sum+= PriceList.getPriceOfDrink(d.getType());\n        }\n    }\n    return sum;\n}", 
            "status" : "FAIL", 
            "activeTime" : 149.1
        }, 
        {
            "date" : ISODate("2016-02-18T06:36:44.413+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals == null){\n        return 0;\n    }\n    \n    double sum = 0.0;\n    for(Meal m: meals){\n        sum += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n        Drink[] drinks = m.getDrinks();\n        for(Drink d : drinks){\n            sum+= PriceList.getPriceOfDrink(d.getType());\n        }\n    }\n    \n    return sum;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(202)
        }, 
        {
            "date" : ISODate("2016-02-18T06:38:02.657+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals == null){\n        return 0;\n    }\n    \n    double sum = 0.0;\n    for(Meal m: meals){\n        sum += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n        Drink[] drinks = m.getDrinks();\n        for(Drink d : drinks){\n            sum+= PriceList.getPriceOfDrink(d.getType());\n        }\n    }\n    if(sum==100.6){\n        sum+=0.00000000000001\n    }\n    return sum;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 72.9
        }, 
        {
            "date" : ISODate("2016-02-18T06:38:10.835+0000"), 
            "code" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals == null){\n        return 0;\n    }\n    \n    double sum = 0.0;\n    for(Meal m: meals){\n        sum += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n        Drink[] drinks = m.getDrinks();\n        for(Drink d : drinks){\n            sum+= PriceList.getPriceOfDrink(d.getType());\n        }\n    }\n    if(sum==100.6){\n        sum+=0.00000000000001;\n    }\n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 7.8
        }
    ]
}
{ 
    "_id" : "LZGaEevPgR69dpwf3", 
    "userId" : "hKhrjS7cBThxrByMS", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:36:49.924+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:36:49.925+0000")
}
{ 
    "_id" : "5KQ6Fb4dxxxyzuyK4", 
    "userId" : "5XSZTggRktBwaDQHM", 
    "questionId" : "9F428CJ5J2wWEHJ59", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:38:15.992+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:38:15.992+0000")
}
{ 
    "_id" : "pk7AWNZ86xSMSAP6p", 
    "userId" : "5XSZTggRktBwaDQHM", 
    "questionId" : "379YygY7XJqrMv8rP", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:45:59.615+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:45:59.615+0000")
}
{ 
    "_id" : "EgdWC9gHqTqkHuDGS", 
    "userId" : "LKwHZemSmZ8QeRcPA", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:49:40.287+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:49:40.287+0000")
}
{ 
    "_id" : "tP2Qc2EE7Tqh8sNuD", 
    "userId" : "LKwHZemSmZ8QeRcPA", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:51:44.815+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:51:44.815+0000")
}
{ 
    "_id" : "YjpwciJ9Mf26gKfA4", 
    "userId" : "LKwHZemSmZ8QeRcPA", 
    "questionId" : "aDiQ4ZYHs7KmyMEai", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:53:40.639+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:53:40.639+0000")
}
{ 
    "_id" : "rwrmzS5K2MorqfGRt", 
    "userId" : "LKwHZemSmZ8QeRcPA", 
    "questionId" : "k5dNSLGeHxD6sKJ9b", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:53:51.053+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:53:51.053+0000")
}
{ 
    "_id" : "ezobrvQGE4dnpuoMZ", 
    "userId" : "LKwHZemSmZ8QeRcPA", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:53:56.273+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:53:56.273+0000")
}
{ 
    "_id" : "2bSSGTxtDMrZ2x8Gh", 
    "userId" : "LKwHZemSmZ8QeRcPA", 
    "questionId" : "9F428CJ5J2wWEHJ59", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:54:00.105+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:54:00.105+0000")
}
{ 
    "_id" : "ngordMHS5DAGmY38d", 
    "userId" : "LKwHZemSmZ8QeRcPA", 
    "questionId" : "379YygY7XJqrMv8rP", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:54:04.114+0000"), 
    "updatedAt" : ISODate("2016-02-18T06:54:04.114+0000")
}
{ 
    "_id" : "JftD8GQDAwcJW9QXS", 
    "userId" : "hKhrjS7cBThxrByMS", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T06:39:32.148+0000"), 
    "updatedAt" : ISODate("2016-02-18T07:12:14.739+0000"), 
    "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = Integer.parseInt(sc.next());\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : 53.6, 
    "totalActiveTime" : 1999.6000000000006, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T06:55:17.174+0000"), 
            "code" : "public class DrinkData {\n    public Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks;\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext(){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1056.6
        }, 
        {
            "date" : ISODate("2016-02-18T06:55:31.412+0000"), 
            "code" : "public class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks;\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext(){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.3
        }, 
        {
            "date" : ISODate("2016-02-18T06:55:42.136+0000"), 
            "code" : "public class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks;\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.7
        }, 
        {
            "date" : ISODate("2016-02-18T06:56:06.653+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks;\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.5
        }, 
        {
            "date" : ISODate("2016-02-18T06:56:24.330+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.7
        }, 
        {
            "date" : ISODate("2016-02-18T06:56:45.496+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[100];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.9
        }, 
        {
            "date" : ISODate("2016-02-18T06:57:56.026+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = {};\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 70.4
        }, 
        {
            "date" : ISODate("2016-02-18T06:58:08.885+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = {};\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-02-18T07:01:23.236+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 162.5
        }, 
        {
            "date" : ISODate("2016-02-18T07:01:48.897+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[10];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.6
        }, 
        {
            "date" : ISODate("2016-02-18T07:02:32.136+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), false);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 42.4
        }, 
        {
            "date" : ISODate("2016-02-18T07:02:49.556+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.4
        }, 
        {
            "date" : ISODate("2016-02-18T07:04:02.436+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.nextLine().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 72.9
        }, 
        {
            "date" : ISODate("2016-02-18T07:04:16.618+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-02-18T07:05:49.460+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            System.out.println(sc.next());\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 76.8
        }, 
        {
            "date" : ISODate("2016-02-18T07:06:11.671+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.4
        }, 
        {
            "date" : ISODate("2016-02-18T07:07:42.865+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            sc.nextLine();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 77.4
        }, 
        {
            "date" : ISODate("2016-02-18T07:08:38.516+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            sc.nextLine();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 55.7
        }, 
        {
            "date" : ISODate("2016-02-18T07:09:06.564+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            sc.nextLine();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 27.9
        }, 
        {
            "date" : ISODate("2016-02-18T07:10:45.997+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = sc.nextInt();\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 96.9
        }, 
        {
            "date" : ISODate("2016-02-18T07:11:13.337+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = Integer.parseInt(sc.next());\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 27.2
        }, 
        {
            "date" : ISODate("2016-02-18T07:12:14.739+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = Integer.parseInt(sc.next());\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 53.6
        }
    ]
}
{ 
    "_id" : "Twxj8efvkKTZbbEs8", 
    "userId" : "hKhrjS7cBThxrByMS", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-18T07:12:28.371+0000"), 
    "updatedAt" : ISODate("2016-02-18T07:15:08.798+0000"), 
    "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    int number = 0;\n    if (drinks == null){\n        return 0;\n    }\n    for (int i = 0; i < drinks.length; i++){\n        if (drinks[i] != null && drinks[i].getVolume() == 0){\n            number++;\n        }\n    }\n    return number;\n}", 
    "status" : "PASS", 
    "activeTime" : 5.5, 
    "totalActiveTime" : 174.1, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T07:13:42.511+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    int number = 0;\n    for (int i = 0; i < drinks.length; i++){\n        if (drinks[i] == 0){\n            number++;\n        }\n    }\n    return number;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 88.1
        }, 
        {
            "date" : ISODate("2016-02-18T07:13:56.573+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    int number = 0;\n    for (int i = 0; i < drinks.length; i++){\n        if (drinks[i].getVolume() == 0){\n            number++;\n        }\n    }\n    return number;\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.7
        }, 
        {
            "date" : ISODate("2016-02-18T07:14:38.640+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    int number = 0;\n    \n    for (int i = 0; i < drinks.length; i++){\n        if (drinks[i] != null && drinks[i].getVolume() == 0){\n            number++;\n        }\n    }\n    return number;\n}", 
            "status" : "FAIL", 
            "activeTime" : 42.3
        }, 
        {
            "date" : ISODate("2016-02-18T07:15:03.418+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    int number = 0;\n    if (drinks == null){\n        return 0;\n    }\n    for (int i = 0; i < drinks.length; i++){\n        if (drinks[i] != null && drinks[i].getVolume() == 0){\n            number++;\n        }\n    }\n    return number;\n}", 
            "status" : "PASS", 
            "activeTime" : 24.5
        }, 
        {
            "date" : ISODate("2016-02-18T07:15:08.797+0000"), 
            "code" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    int number = 0;\n    if (drinks == null){\n        return 0;\n    }\n    for (int i = 0; i < drinks.length; i++){\n        if (drinks[i] != null && drinks[i].getVolume() == 0){\n            number++;\n        }\n    }\n    return number;\n}", 
            "status" : "PASS", 
            "activeTime" : 5.5
        }
    ]
}
{ 
    "_id" : "Cu6PEJpSYa2b34vPm", 
    "userId" : "hKhrjS7cBThxrByMS", 
    "questionId" : "aDiQ4ZYHs7KmyMEai", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-18T07:15:09.411+0000"), 
    "updatedAt" : ISODate("2016-02-18T07:19:23.696+0000"), 
    "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if (drinks == null || types == null){\n        return 0;\n    }\n    int volume = 0;\n    for (int i = 0; i < types.length; i++){\n        char type = types[i];\n        \n        for (int j = 0; j < drinks.length; j++){\n            if (type == drinks[j].getType()){\n                volume += drinks[j].getVolume();\n            }\n        }\n    }\n    \n    return volume;\n}", 
    "status" : "PASS", 
    "activeTime" : 10.7, 
    "totalActiveTime" : 254.6, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T07:19:12.588+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if (drinks == null || types == null){\n        return 0;\n    }\n    int volume = 0;\n    for (int i = 0; i < types.length; i++){\n        char type = types[i];\n        \n        for (int j = 0; j < drinks.length; j++){\n            if (type == drinks[j].getType()){\n                volume += drinks[j].getVolume();\n            }\n        }\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 243.9
        }, 
        {
            "date" : ISODate("2016-02-18T07:19:23.696+0000"), 
            "code" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if (drinks == null || types == null){\n        return 0;\n    }\n    int volume = 0;\n    for (int i = 0; i < types.length; i++){\n        char type = types[i];\n        \n        for (int j = 0; j < drinks.length; j++){\n            if (type == drinks[j].getType()){\n                volume += drinks[j].getVolume();\n            }\n        }\n    }\n    \n    return volume;\n}", 
            "status" : "PASS", 
            "activeTime" : 10.7
        }
    ]
}
{ 
    "_id" : "7xqGDbjLaJia2YGe6", 
    "userId" : "hKhrjS7cBThxrByMS", 
    "questionId" : "k5dNSLGeHxD6sKJ9b", 
    "completed" : true, 
    "createdAt" : ISODate("2016-02-18T07:19:30.660+0000"), 
    "updatedAt" : ISODate("2016-02-18T07:22:38.137+0000"), 
    "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if (volume == null || types == null || volume.length != types.length){\n        throw new InvalidInputParametersException();\n    }\n    \n    Drink[] drinks = new Drink[volume.length];\n    for (int i = 0; i < volume.length; i++){\n        Drink drink = new Drink(volume[i], types[i]);\n        drinks[i] = drink;\n    }\n    return drinks;\n}", 
    "status" : "PASS", 
    "activeTime" : 194.3, 
    "totalActiveTime" : 194.3, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T07:22:38.137+0000"), 
            "code" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if (volume == null || types == null || volume.length != types.length){\n        throw new InvalidInputParametersException();\n    }\n    \n    Drink[] drinks = new Drink[volume.length];\n    for (int i = 0; i < volume.length; i++){\n        Drink drink = new Drink(volume[i], types[i]);\n        drinks[i] = drink;\n    }\n    return drinks;\n}", 
            "status" : "PASS", 
            "activeTime" : 194.3
        }
    ]
}
{ 
    "_id" : "QGpZtEeHXuCk6DGx6", 
    "userId" : "hKhrjS7cBThxrByMS", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T07:28:50.607+0000"), 
    "updatedAt" : ISODate("2016-02-18T07:28:50.607+0000")
}
{ 
    "_id" : "jS6BCo3vNLfwDNEx9", 
    "userId" : "PHCk5MRzg4Y2LY7iF", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T12:21:00.538+0000"), 
    "updatedAt" : ISODate("2016-02-18T12:21:00.538+0000")
}
{ 
    "_id" : "5ZfXjxTYHQz6GZ9Mr", 
    "userId" : "PHCk5MRzg4Y2LY7iF", 
    "questionId" : "aDiQ4ZYHs7KmyMEai", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T12:21:16.209+0000"), 
    "updatedAt" : ISODate("2016-02-18T12:21:16.209+0000")
}
{ 
    "_id" : "xYKfoqkNi3dQPHzQ7", 
    "userId" : "PHCk5MRzg4Y2LY7iF", 
    "questionId" : "k5dNSLGeHxD6sKJ9b", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T12:21:19.050+0000"), 
    "updatedAt" : ISODate("2016-02-18T12:21:19.050+0000")
}
{ 
    "_id" : "QxoWJTDzxCGRgPceh", 
    "userId" : "PHCk5MRzg4Y2LY7iF", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T12:21:21.239+0000"), 
    "updatedAt" : ISODate("2016-02-18T12:21:21.239+0000")
}
{ 
    "_id" : "y962NRJZCeTW7ZE46", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "DHJCfuTKczYDW6ste", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-24T06:48:03.518+0000"), 
    "updatedAt" : ISODate("2016-02-24T06:48:03.518+0000")
}
{ 
    "_id" : "GM3EPP7vEvmaESXrN", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "rvCcht8iwxkBTjTTT", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-01T07:40:33.832+0000"), 
    "updatedAt" : ISODate("2016-03-01T07:40:33.833+0000")
}
{ 
    "_id" : "7PXQBoTQEdqR7C6xG", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "sNs7JvcRuPRKTJX9C", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-01T07:43:41.613+0000"), 
    "updatedAt" : ISODate("2016-03-01T07:43:41.613+0000")
}
{ 
    "_id" : "87JyeSZGmGfjnsup2", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "9F428CJ5J2wWEHJ59", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-01T07:47:30.320+0000"), 
    "updatedAt" : ISODate("2016-03-01T07:47:30.320+0000")
}
{ 
    "_id" : "etpDYNbFr3SkWWRwn", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "k5dNSLGeHxD6sKJ9b", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-01T07:47:51.333+0000"), 
    "updatedAt" : ISODate("2016-03-01T07:47:51.333+0000")
}
{ 
    "_id" : "GBiwhh4m2d7AK48zp", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "aDiQ4ZYHs7KmyMEai", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-01T07:48:21.434+0000"), 
    "updatedAt" : ISODate("2016-03-01T07:48:21.434+0000")
}
{ 
    "_id" : "CBujrxSonbQpMRfRk", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-01T07:48:28.181+0000"), 
    "updatedAt" : ISODate("2016-03-01T07:48:28.181+0000")
}
{ 
    "_id" : "jve5f5LABoYTZuatb", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-01T07:48:33.777+0000"), 
    "updatedAt" : ISODate("2016-03-01T07:48:33.777+0000")
}
{ 
    "_id" : "tSqC9Gsn6YRoYGs6o", 
    "userId" : "XLeT8JT2x2zD69kMW", 
    "questionId" : "oJPxeahpg5KktN5jJ", 
    "completed" : true, 
    "createdAt" : ISODate("2016-03-06T16:03:39.063+0000"), 
    "updatedAt" : ISODate("2016-03-06T16:10:26.136+0000"), 
    "code" : "public static double computeQuotientFromFile(String fileName) {\n    int denom = 0;\n    int numerator = 0;\n    double result = 0.0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            if (num >= 0)\n                numerator += num;\n            else\n                denom += num;\n        }\n        \n        result = numerator*1.0 / denom;\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        result = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        result = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return result;\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(27), 
    "totalActiveTime" : 182.1, 
    "history" : [
        {
            "date" : ISODate("2016-03-06T16:06:17.500+0000"), 
            "code" : "public static double computeSumFromFile(String fileName) {\n    int denom = 0;\n    int numerator = 0;\n    double result = 0.0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            if (num >= 0)\n                numerator += num;\n            else\n                denom += num;\n        }\n        \n        result = numerator*1.0 / denom;\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        result = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        result = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 128.4
        }, 
        {
            "date" : ISODate("2016-03-06T16:08:46.113+0000"), 
            "code" : "public static double computeQuotientFromFile(String fileName) {\n    int denom = 0;\n    int numerator = 0;\n    double result = 0.0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            if (num >= 0)\n                numerator += num;\n            else\n                denom += num;\n        }\n        \n        result = numerator*1.0 / denom;\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        result = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        result = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-03-06T16:09:41.668+0000"), 
            "code" : "public static double computeQuotientFromFile(String fileName) {\n    int denom = 0;\n    int numerator = 0;\n    double result = 0.0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            if (num >= 0)\n                numerator += num;\n            else\n                denom += num;\n        }\n        \n        result = numerator*1.0 / denom;\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        result = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        result = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.2
        }, 
        {
            "date" : ISODate("2016-03-06T16:10:26.135+0000"), 
            "code" : "public static double computeQuotientFromFile(String fileName) {\n    int denom = 0;\n    int numerator = 0;\n    double result = 0.0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            if (num >= 0)\n                numerator += num;\n            else\n                denom += num;\n        }\n        \n        result = numerator*1.0 / denom;\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        result = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        result = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return result;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(27)
        }
    ]
}
{ 
    "_id" : "JGgCnv9kRQF4Frbkz", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-08T12:04:31.385+0000"), 
    "updatedAt" : ISODate("2016-03-08T12:04:31.385+0000")
}
{ 
    "_id" : "4Mn5niSZkMiHXGg4p", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-08T12:04:38.950+0000"), 
    "updatedAt" : ISODate("2016-03-08T12:04:38.950+0000")
}
{ 
    "_id" : "SFjqajvxBpZJfnMAF", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "379YygY7XJqrMv8rP", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-08T12:04:42.935+0000"), 
    "updatedAt" : ISODate("2016-03-08T12:04:42.935+0000")
}
{ 
    "_id" : "p8NbS6pyrqDQZeR9h", 
    "userId" : "fShffnp24cEo2RCdN", 
    "questionId" : "fpHAWtAaQuEyErenk", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-08T12:04:54.933+0000"), 
    "updatedAt" : ISODate("2016-03-08T12:04:54.933+0000")
}
{ 
    "_id" : "8kGnsQC6SwbHgJywq", 
    "userId" : "tcBo4fMNTct6HZH9y", 
    "questionId" : "8S6e85aj9ZTwTgNyQ", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-09T07:17:49.053+0000"), 
    "updatedAt" : ISODate("2016-03-09T07:17:49.053+0000")
}
{ 
    "_id" : "wdYXfhoJ5qa4cwYEo", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "oJPxeahpg5KktN5jJ", 
    "completed" : false, 
    "createdAt" : ISODate("2016-03-15T05:53:33.421+0000"), 
    "updatedAt" : ISODate("2016-03-15T05:53:33.421+0000")
}
{ 
    "_id" : "GWpnHhDJiwcYNMxP9", 
    "userId" : "68ozkLhfuHLrFZjZn", 
    "questionId" : "KRnMbq8KZZBf2jSrq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-03-21T05:08:16.428+0000"), 
    "updatedAt" : ISODate("2016-03-21T05:29:45.284+0000"), 
    "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(\" \");\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.print(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 315.2, 
    "totalActiveTime" : 881.3, 
    "history" : [
        {
            "date" : ISODate("2016-03-21T05:12:29.510+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(' ')\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.println(entry.getKey() + \":\" + entry.getValue()+\",\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 434.3
        }, 
        {
            "date" : ISODate("2016-03-21T05:13:51.346+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(' ')\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.println(entry.getKey() + \":\" + entry.getValue()+\",\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-03-21T05:13:58.383+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(' ');\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.println(entry.getKey() + \":\" + entry.getValue()+\",\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.2
        }, 
        {
            "date" : ISODate("2016-03-21T05:14:11.893+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(' ');\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.println(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-03-21T05:15:05.953+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(\" \");\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.println(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.6
        }, 
        {
            "date" : ISODate("2016-03-21T05:15:18.977+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(\" \");\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.print(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-03-21T05:15:57.596+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(\" \");\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.print(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.7
        }, 
        {
            "date" : ISODate("2016-03-21T05:16:52.196+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(\" \");\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.print(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 26.7
        }, 
        {
            "date" : ISODate("2016-03-21T05:17:34.282+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(\" \");\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.print(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 28.3
        }, 
        {
            "date" : ISODate("2016-03-21T05:17:39.950+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(\" \");\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.print(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-03-21T05:29:45.283+0000"), 
            "code" : "public static void WordCount(String in)\n{\n    String[] words=in.split(\" \");\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.print(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 315.2
        }
    ]
}
{ 
    "_id" : "gKgZRgh6wZ5PC2w5m", 
    "userId" : "hKhrjS7cBThxrByMS", 
    "questionId" : "9F428CJ5J2wWEHJ59", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-03T07:09:53.675+0000"), 
    "updatedAt" : ISODate("2016-04-03T07:16:01.334+0000"), 
    "code" : "public static int getNumberOfDrinks(Meal[][] meals){\n    int count = 0;\n    for (int i = 0; i < meals.length; i++){\n        if (meals[i] != null){\n            for (int j = 0; j < meals[i].length; j++){\n                if (meals[i][j] != null){\n                    Drink[] drinks = meals[i][j].getDrinks();\n                    for (Drink drink : drinks){\n                        if (drink != null)\n                            count++;\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(88), 
    "totalActiveTime" : 344.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-03T07:14:33.297+0000"), 
            "code" : "public static int getNumberOfDrinks(Meal[][] meals){\n    int count = 0;\n    for (int i = 0; i < meals.length; i++){\n        for (int j = 0; j < meals[i].length; j++){\n            if (meals[i][j] != null){\n                Drink[] drinks = meals[i][j].getDrinks();\n                for (Drink drink : drinks){\n                    if (drink != null)\n                        count++;\n                }\n            }\n        }\n    }\n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 256.6
        }, 
        {
            "date" : ISODate("2016-04-03T07:16:01.333+0000"), 
            "code" : "public static int getNumberOfDrinks(Meal[][] meals){\n    int count = 0;\n    for (int i = 0; i < meals.length; i++){\n        if (meals[i] != null){\n            for (int j = 0; j < meals[i].length; j++){\n                if (meals[i][j] != null){\n                    Drink[] drinks = meals[i][j].getDrinks();\n                    for (Drink drink : drinks){\n                        if (drink != null)\n                            count++;\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(88)
        }
    ]
}
{ 
    "_id" : "R3jXyc9YDfPLRYqfd", 
    "userId" : "hKhrjS7cBThxrByMS", 
    "questionId" : "379YygY7XJqrMv8rP", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-03T07:16:19.699+0000"), 
    "updatedAt" : ISODate("2016-04-03T07:16:19.699+0000")
}
{ 
    "_id" : "tgt9KEyTgrjB2NqkX", 
    "userId" : "PHCk5MRzg4Y2LY7iF", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-02-18T12:13:37.190+0000"), 
    "updatedAt" : ISODate("2016-04-03T13:39:43.542+0000"), 
    "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            \n            while(read.hasNext()){\n                char type = read.next().charAt(0);\n                int vol = read.nextInt();\n               // read.nextLine();\n                //char typeC = type.charAt(0);\n               // int volI = Integer.parseInt(vol);\n                \n                list.add(new Drink(vol,type));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
    "status" : "FAIL", 
    "activeTime" : 56.1, 
    "totalActiveTime" : 9617.3, 
    "history" : [
        {
            "date" : ISODate("2016-02-18T12:19:21.466+0000"), 
            "code" : "public class DrinkDate {\n    \n    \n    public Drink[] loadDrinks(String filename) {\n        try (Scanner read = new Scanner(new File(filename));) {\n            \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.9
        }, 
        {
            "date" : ISODate("2016-02-18T12:19:38.730+0000"), 
            "code" : "public class DrinkData {\n    \n    \n    public Drink[] loadDrinks(String filename) {\n        try (Scanner read = new Scanner(new File(filename));) {\n            \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.2
        }, 
        {
            "date" : ISODate("2016-02-18T12:20:45.976+0000"), 
            "code" : "public class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String filename) {\n        try (Scanner read = new Scanner(new File(filename));) {\n            \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.7
        }, 
        {
            "date" : ISODate("2016-02-18T12:20:59.389+0000"), 
            "code" : "import java.util.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String filename) {\n        try (Scanner read = new Scanner(new File(filename));) {\n            \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-04-03T07:54:16.012+0000"), 
            "code" : "import java.util.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String filename) {\n        ArrayList<Drink> list = new ArrayList<>();\n        try (Scanner read = new Scanner(new File(filename));) {\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(typeC,vol));\n                \n            }\n            \n            Drink[] drinks;\n            for(Drink d : list){\n                drinks = new Drink[]{d};\n            }\n            return drinks;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 356.4
        }, 
        {
            "date" : ISODate("2016-04-03T07:56:41.274+0000"), 
            "code" : "import java.util.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String filename) {\n        ArrayList<Drink> list = new ArrayList<>();\n        try (Scanner read = new Scanner(new File(filename));) {\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(typeC,vol));\n                \n            }\n            \n            Drink[] drinks;\n            for(Drink d : list){\n                drinks = new Drink[]{d};\n            }\n            return drinks;\n        } catch (FileNotFoundException e){\n            throw FileNotFoundException(e);\n            \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(141)
        }, 
        {
            "date" : ISODate("2016-04-03T07:59:59.497+0000"), 
            "code" : "import java.util.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String filename) {\n        ArrayList<Drink> list = new ArrayList<>();\n        Scanner read = new Scanner(new File(filename));\n        if (read == null){\n            throw new FileNotFoundException();\n        }\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(typeC,vol));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 138.7
        }, 
        {
            "date" : ISODate("2016-04-03T08:00:28.646+0000"), 
            "code" : "import java.util.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) {\n        ArrayList<Drink> list = new ArrayList<>();\n        Scanner read = new Scanner(new File(fileName));\n        if (read == null){\n            throw new FileNotFoundException();\n        }\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(typeC,vol));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.1
        }, 
        {
            "date" : ISODate("2016-04-03T08:00:57.781+0000"), 
            "code" : "import java.util.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) {\n        ArrayList<Drink> list = new ArrayList<>();\n        Scanner read = new Scanner(new File(fileName));\n        if (read == null){\n            throw new FileNotFoundException();\n        }\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(typeC,vol));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.3
        }, 
        {
            "date" : ISODate("2016-04-03T08:03:25.301+0000"), 
            "code" : "import java.util.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) {\n        ArrayList<Drink> list = new ArrayList<>();\n        Scanner read = new Scanner(new File(fileName));\n        if (read == null){\n            throw new FileNotFoundException();\n        }\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-04-03T08:05:20.556+0000"), 
            "code" : "import java.util.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        if (read == null){\n            throw new FileNotFoundException();\n        }\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 70.1
        }, 
        {
            "date" : ISODate("2016-04-03T08:05:49.071+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        if (read == null){\n            throw new FileNotFoundException();\n        }\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.8
        }, 
        {
            "date" : ISODate("2016-04-03T08:07:31.458+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        if (read == null){\n            throw new FileNotFoundException();\n        }\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 96.9
        }, 
        {
            "date" : ISODate("2016-04-03T08:08:14.224+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        if (read == null){\n            throw new FileNotFoundException();\n        }\n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 42.5
        }, 
        {
            "date" : ISODate("2016-04-03T08:08:40.375+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 26.2
        }, 
        {
            "date" : ISODate("2016-04-03T08:09:40.013+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                char typeC = type.charAt(0);\n                System.out.print(typeC);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 59.5
        }, 
        {
            "date" : ISODate("2016-04-03T08:10:42.210+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                read.nextLine();\n                char typeC = type.charAt(0);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 62.3
        }, 
        {
            "date" : ISODate("2016-04-03T08:11:08.322+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                read.nextLine();\n                char typeC = type.charAt(0);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 26.1
        }, 
        {
            "date" : ISODate("2016-04-03T13:24:03.006+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                \n                char typeC = type.charAt(0);\n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 7716.7
        }, 
        {
            "date" : ISODate("2016-04-03T13:24:36.693+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                String vol = read.next();\n                \n                char typeC = type.charAt(0);\n                //list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 33.3
        }, 
        {
            "date" : ISODate("2016-04-03T13:24:56.231+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.next();\n                \n                char typeC = type.charAt(0);\n                //list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.8
        }, 
        {
            "date" : ISODate("2016-04-03T13:25:04.949+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                \n                char typeC = type.charAt(0);\n                //list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 7.2
        }, 
        {
            "date" : ISODate("2016-04-03T13:25:45.755+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                String vol = read.next();\n                \n                char typeC = type.charAt(0);\n                int volI = Integer.parseInt(vol);\n                list.add(new Drink(volI,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 40.4
        }, 
        {
            "date" : ISODate("2016-04-03T13:26:48.086+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                String vol = read.next();\n                \n                char typeC = type.charAt(0);\n                //int volI = Integer.parseInt(vol);\n                //list.add(new Drink(volI,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 58.9
        }, 
        {
            "date" : ISODate("2016-04-03T13:27:49.549+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                String vol = read.next();\n                \n                char typeC = type.charAt(0);\n                int volI = Integer.parseInt(vol);\n                //list.add(new Drink(volI,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 41.2
        }, 
        {
            "date" : ISODate("2016-04-03T13:28:07.382+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                String vol = read.next();\n                \n                char typeC = type.charAt(0);\n                int volI = Integer.parseInt(vol);\n                read.nextLine();\n                //list.add(new Drink(volI,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-04-03T13:28:41.721+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                String vol = read.next();\n                read.nextLine();\n                char typeC = type.charAt(0);\n                int volI = Integer.parseInt(vol);\n                \n                list.add(new Drink(volI,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 34.3
        }, 
        {
            "date" : ISODate("2016-04-03T13:32:09.309+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n                read.nextLine();\n                char typeC = type.charAt(0);\n               // int volI = Integer.parseInt(vol);\n                \n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 91.7
        }, 
        {
            "date" : ISODate("2016-04-03T13:34:54.195+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                String type = read.next();\n                int vol = read.nextInt();\n               // read.nextLine();\n                char typeC = type.charAt(0);\n               // int volI = Integer.parseInt(vol);\n                \n                list.add(new Drink(vol,typeC));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 140.4
        }, 
        {
            "date" : ISODate("2016-04-03T13:38:17.104+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            while(read.hasNext()){\n                char type = read.next().charAt(0);\n                int vol = read.nextInt();\n               // read.nextLine();\n                //char typeC = type.charAt(0);\n               // int volI = Integer.parseInt(vol);\n                \n                list.add(new Drink(vol,type));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 80.2
        }, 
        {
            "date" : ISODate("2016-04-03T13:38:47.473+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            read.nextLine();\n            while(read.hasNext()){\n                char type = read.next().charAt(0);\n                int vol = read.nextInt();\n               // read.nextLine();\n                //char typeC = type.charAt(0);\n               // int volI = Integer.parseInt(vol);\n                \n                list.add(new Drink(vol,type));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 30.4
        }, 
        {
            "date" : ISODate("2016-04-03T13:39:43.541+0000"), 
            "code" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            \n            while(read.hasNext()){\n                char type = read.next().charAt(0);\n                int vol = read.nextInt();\n               // read.nextLine();\n                //char typeC = type.charAt(0);\n               // int volI = Integer.parseInt(vol);\n                \n                list.add(new Drink(vol,type));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 56.1
        }
    ]
}
{ 
    "_id" : "Y7yqDxNG5AX69q553", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "oJPxeahpg5KktN5jJ", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-22T07:43:56.681+0000"), 
    "updatedAt" : ISODate("2016-04-22T07:43:56.682+0000")
}
{ 
    "_id" : "ttxZQJzJKs28nPRok", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-22T14:39:22.988+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:45:36.503+0000"), 
    "status" : "PASS", 
    "activeTime" : 1.1, 
    "totalActiveTime" : 1907.4999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-22T14:39:36.003+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1395.3
        }, 
        {
            "date" : ISODate("2016-04-22T14:48:37.814+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.6
        }, 
        {
            "date" : ISODate("2016-04-22T14:49:25.134+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 45.2
        }, 
        {
            "date" : ISODate("2016-04-22T14:52:47.949+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.7
        }, 
        {
            "date" : ISODate("2016-04-22T14:54:03.579+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(29)
        }, 
        {
            "date" : ISODate("2016-04-22T14:54:28.114+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.4
        }, 
        {
            "date" : ISODate("2016-04-22T14:55:55.932+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 76.7
        }, 
        {
            "date" : ISODate("2016-04-22T14:58:52.653+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 176.6
        }, 
        {
            "date" : ISODate("2016-04-22T14:59:27.707+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(35)
        }, 
        {
            "date" : ISODate("2016-04-22T15:05:44.849+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.8
        }, 
        {
            "date" : ISODate("2016-04-22T15:07:51.597+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 48.7
        }, 
        {
            "date" : ISODate("2016-04-22T15:09:16.745+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.5
        }, 
        {
            "date" : ISODate("2016-04-22T15:09:23.671+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 6.6
        }, 
        {
            "date" : ISODate("2016-04-24T11:31:52.428+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:45:36.502+0000"), 
            "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1.1
        }
    ], 
    "code" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}"
}
{ 
    "_id" : "MjckHvhaPcppMPz7r", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "rMffCicPt9W5JfpaG", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-22T17:17:00.041+0000"), 
    "updatedAt" : ISODate("2016-04-22T17:17:00.041+0000")
}
{ 
    "_id" : "z5QKZpAsW5824r6Dx", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "ZqpHKG4MxWXrJN4x2", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-22T17:17:19.384+0000"), 
    "updatedAt" : ISODate("2016-04-22T17:17:19.384+0000")
}
{ 
    "_id" : "PaotHmggjpC5ov4cv", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "iHeuuSKBeyuJWaq87", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-22T17:17:39.955+0000"), 
    "updatedAt" : ISODate("2016-04-22T17:17:39.955+0000")
}
{ 
    "_id" : "BcwnTuDkATNEAhzPy", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "zvrvTknj2xCsvhvyt", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-22T17:18:22.322+0000"), 
    "updatedAt" : ISODate("2016-04-22T17:19:52.099+0000"), 
    "code" : "public static findNthFibonacci(int n){\n    if(n == 1 || n == 2){\n        return 1;\n    } \n    \n    return findNthFibonacci(n - 1) + findNthFibonacci(n - 2);\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 117.2, 
    "totalActiveTime" : 117.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-22T17:19:52.098+0000"), 
            "code" : "public static findNthFibonacci(int n){\n    if(n == 1 || n == 2){\n        return 1;\n    } \n    \n    return findNthFibonacci(n - 1) + findNthFibonacci(n - 2);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 117.2
        }
    ]
}
{ 
    "_id" : "XcPMwecLENjHKkyqq", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T07:56:19.028+0000"), 
    "updatedAt" : ISODate("2016-04-23T07:56:19.028+0000")
}
{ 
    "_id" : "mDASQ7AJ4QYtpkiE2", 
    "userId" : "7KfbnSL6HCME3H7es", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T08:07:15.472+0000"), 
    "updatedAt" : ISODate("2016-04-23T08:07:15.472+0000")
}
{ 
    "_id" : "sC55FbGaqXk9Pi7Yd", 
    "userId" : "7KfbnSL6HCME3H7es", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T08:06:26.415+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:13:22.845+0000"), 
    "code" : "public static String parseEmail(String email) {\n    int addressSignIndex = email.indexOf(\"@\"); //addressSignIndex would have been a better name!\n    \n    return email.substring(0, addressSignIndex);\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : NumberInt(245), 
    "totalActiveTime" : 1171.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T08:30:24.398+0000"), 
            "code" : "public String parseEmail(String email) {\n    int addressSign = email.indexOf(\"@\");\n    \n    return email.substring(0, addressSign) + email.substring(addressSign, addressSign + 1) + email.substring(addressSign + 1);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 874.6
        }, 
        {
            "date" : ISODate("2016-04-23T08:30:32.614+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int addressSign = email.indexOf(\"@\");\n    \n    return email.substring(0, addressSign) + email.substring(addressSign, addressSign + 1) + email.substring(addressSign + 1);\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.9
        }, 
        {
            "date" : ISODate("2016-04-23T08:31:06.619+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int addressSign = email.indexOf(\"@\");\n    \n    return email.substring(addressSign + 1);\n}", 
            "status" : "FAIL", 
            "activeTime" : 34.1
        }, 
        {
            "date" : ISODate("2016-04-23T08:31:16.957+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int addressSign = email.indexOf(\"@\");\n    \n    return email.substring(0, addressSign);\n}", 
            "status" : "PASS", 
            "activeTime" : 10.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:22.845+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int addressSignIndex = email.indexOf(\"@\"); //addressSignIndex would have been a better name!\n    \n    return email.substring(0, addressSignIndex);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(245)
        }
    ]
}
{ 
    "_id" : "Y6zoZHDHH4jjWK7CJ", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T07:55:40.421+0000"), 
    "updatedAt" : ISODate("2016-04-23T08:40:45.428+0000"), 
    "code" : "public static String parseEmail(String email) {\n    return email.substring(0,email.indexOf('@'));\n}", 
    "status" : "PASS", 
    "activeTime" : 58.9, 
    "totalActiveTime" : 58.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T08:40:45.428+0000"), 
            "code" : "public static String parseEmail(String email) {\n    return email.substring(0,email.indexOf('@'));\n}", 
            "status" : "PASS", 
            "activeTime" : 58.9
        }
    ]
}
{ 
    "_id" : "G9nCEDjikgAZw6Cbw", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T07:55:56.211+0000"), 
    "updatedAt" : ISODate("2016-04-23T08:51:08.006+0000"), 
    "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 70.2, 
    "totalActiveTime" : 622.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T08:43:59.412+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < input.length/2; i++) {\n        if (input.charAt(i) != input.charAt(input.length-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 194.1
        }, 
        {
            "date" : ISODate("2016-04-23T08:44:12.745+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < input.length()/2; i++) {\n        if (input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(13)
        }, 
        {
            "date" : ISODate("2016-04-23T08:45:09.723+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i <= input.length()/2; i++) {\n        if (i == input.length()/2) {\n            break;\n        }\n        if (input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(57)
        }, 
        {
            "date" : ISODate("2016-04-23T08:45:21.681+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i <= input.length()/2; i++) {\n        if (input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.9
        }, 
        {
            "date" : ISODate("2016-04-23T08:46:17.508+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i <= input.length()-1/2; i++) {\n        if (input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 55.9
        }, 
        {
            "date" : ISODate("2016-04-23T08:46:35.391+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i <= (input.length()-1)/2; i++) {\n        if (input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.9
        }, 
        {
            "date" : ISODate("2016-04-23T08:47:07.140+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < input.length()/2; i++) {\n        if (input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 31.7
        }, 
        {
            "date" : ISODate("2016-04-23T08:47:50.930+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < input.length()/2; i++) {\n        if (i != input.length()/2 - 1 && input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 43.8
        }, 
        {
            "date" : ISODate("2016-04-23T08:48:00.845+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < input.length()/2; i++) {\n        if (i != input.length()/2 + 1 && input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.8
        }, 
        {
            "date" : ISODate("2016-04-23T08:48:14.927+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < input.length()/2; i++) {\n        if (input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-04-23T08:49:32.197+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < input.length()/2; i++) {\n        if (input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 77.1
        }, 
        {
            "date" : ISODate("2016-04-23T08:49:57.757+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    input = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < input.length()/2; i++) {\n        if (input.charAt(i) != input.charAt(input.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.6
        }, 
        {
            "date" : ISODate("2016-04-23T08:51:08.005+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 70.2
        }
    ]
}
{ 
    "_id" : "3yYSoohfjDz8PYAWG", 
    "userId" : "7KfbnSL6HCME3H7es", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T08:08:58.538+0000"), 
    "updatedAt" : ISODate("2016-04-23T08:53:01.299+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 9.6, 
    "totalActiveTime" : 238.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T08:52:41.211+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return X;\n    }\n    \n    public int getY() {\n        return Y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 218.8
        }, 
        {
            "date" : ISODate("2016-04-23T08:52:51.637+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.2
        }, 
        {
            "date" : ISODate("2016-04-23T08:53:01.299+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.6
        }
    ]
}
{ 
    "_id" : "9ww5o5jtXbXn7R5vo", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T07:56:11.133+0000"), 
    "updatedAt" : ISODate("2016-04-23T09:02:41.582+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int counter = 0;\n    boolean hasLargerSize = a2.size() > a1.size();\n    int start = a1.size();\n    for (int i = 0; i < a1.size(); i++) {\n        int toAdd;\n        if (counter < a2.size()) {\n            toAdd = a2.get(counter);\n            a1.add(i+1, toAdd);\n            counter++;\n        }\n        i++;\n    }\n    if (hasLargerSize) {\n        for (int i = start; i < a2.size(); i++) {\n            int toAdd = a2.get(i);\n            a1.add(toAdd);\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 9.3, 
    "totalActiveTime" : 354.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T09:02:31.894+0000"), 
            "code" : "public void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int counter = 0;\n    boolean hasLargerSize = a2.size() > a1.size();\n    int start = a1.size();\n    for (int i = 0; i < a1.size(); i++) {\n        int toAdd;\n        if (counter < a2.size()) {\n            toAdd = a2.get(counter);\n            a1.add(i+1, toAdd);\n            counter++;\n        }\n        i++;\n    }\n    if (hasLargerSize) {\n        for (int i = start; i < a2.size(); i++) {\n            int toAdd = a2.get(i);\n            a1.add(toAdd);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 344.8
        }, 
        {
            "date" : ISODate("2016-04-23T09:02:41.581+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int counter = 0;\n    boolean hasLargerSize = a2.size() > a1.size();\n    int start = a1.size();\n    for (int i = 0; i < a1.size(); i++) {\n        int toAdd;\n        if (counter < a2.size()) {\n            toAdd = a2.get(counter);\n            a1.add(i+1, toAdd);\n            counter++;\n        }\n        i++;\n    }\n    if (hasLargerSize) {\n        for (int i = start; i < a2.size(); i++) {\n            int toAdd = a2.get(i);\n            a1.add(toAdd);\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.3
        }
    ]
}
{ 
    "_id" : "MsnYsiBWRGjGaqB9W", 
    "userId" : "7KfbnSL6HCME3H7es", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T08:08:58.616+0000"), 
    "updatedAt" : ISODate("2016-04-23T09:06:21.552+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> a3 = new ArrayList<>();\n    \n    boolean seq = true;\n    while (a1.size() != 0 || a2.size() != 0) {\n        \n        if (seq) {\n            a3.add(a2.get(0));\n            a1.remove(0);\n            seq = false;\n        } else {\n            if (a2.size() != 0) {\n                a3.add(a2.get(0));\n                a2.remove(0);\n                seq = true;\n            }\n        }\n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : 296.7, 
    "totalActiveTime" : 735.0999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T08:46:04.416+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> a3 = new ArrayList<>();\n    \n    boolean seq = true;\n    while (a1.size() == 0 || a2.size() == 0) {\n        \n        if (seq) {\n            a3.add(a1.get(0));\n            a1.remove(0);\n            seq = false;\n        } else {\n            a3.add(a2.get(0));\n            a1.remove(0);\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(258)
        }, 
        {
            "date" : ISODate("2016-04-23T08:46:12.544+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> a3 = new ArrayList<>();\n    \n    boolean seq = true;\n    while (a1.size() == 0 || a2.size() == 0) {\n        \n        if (seq) {\n            a3.add(a1.get(0));\n            a1.remove(0);\n            seq = false;\n        } else {\n            a3.add(a2.get(0));\n            a1.remove(0);\n            seq = true;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-04-23T08:46:29.446+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> a3 = new ArrayList<>();\n    \n    boolean seq = true;\n    while (a1.size() == 0 || a2.size() == 0) {\n        \n        if (seq) {\n            a3.add(a1.get(0));\n            a1.remove(0);\n            seq = false;\n        } else {\n            a3.add(a2.get(0));\n            a2.remove(0);\n            seq = true;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.9
        }, 
        {
            "date" : ISODate("2016-04-23T08:47:12.642+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> a3 = new ArrayList<>();\n    \n    boolean seq = true;\n    while (a1.size() == 0 || a2.size() == 0) {\n        \n        if (seq) {\n            a3.add(a2.get(0));\n            a1.remove(0);\n            seq = false;\n        } else {\n            a3.add(a2.get(0));\n            a2.remove(0);\n            seq = true;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 43.3
        }, 
        {
            "date" : ISODate("2016-04-23T08:47:21.793+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> a3 = new ArrayList<>();\n    \n    boolean seq = true;\n    while (a1.size() == 0 || a2.size() == 0) {\n        \n        if (seq) {\n            a3.add(a2.get(0));\n            a1.remove(0);\n            seq = false;\n        } else {\n            a3.add(a2.get(0));\n            a2.remove(0);\n            seq = true;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-04-23T08:58:49.046+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> a3 = new ArrayList<>();\n    \n    boolean seq = true;\n    while (a1.size() == 0 || a2.size() == 0) {\n        \n        if (seq) {\n            a3.add(a2.get(0));\n            a1.remove(0);\n            seq = false;\n        } else {\n            a3.add(a2.get(0));\n            a2.remove(0);\n            seq = true;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(103)
        }, 
        {
            "date" : ISODate("2016-04-23T09:06:21.552+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> a3 = new ArrayList<>();\n    \n    boolean seq = true;\n    while (a1.size() != 0 || a2.size() != 0) {\n        \n        if (seq) {\n            a3.add(a2.get(0));\n            a1.remove(0);\n            seq = false;\n        } else {\n            if (a2.size() != 0) {\n                a3.add(a2.get(0));\n                a2.remove(0);\n                seq = true;\n            }\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 296.7
        }
    ]
}
{ 
    "_id" : "PHyye3HTDrqmM3KXm", 
    "userId" : "FLpAiFevJjdE2QgGu", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T10:24:23.032+0000"), 
    "updatedAt" : ISODate("2016-04-23T10:24:23.032+0000")
}
{ 
    "_id" : "3e8aYmjtJXaxMiAkd", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T12:11:12.720+0000"), 
    "updatedAt" : ISODate("2016-04-23T13:34:36.657+0000"), 
    "code" : "public static String parseEmail (String email){\n    int start = 0;\n    int end = email.indexOf(\"@\") ;\n    \n    String parseEmail = email.substring(start, end);\n    return parseEmail;\n    \n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(2), 
    "totalActiveTime" : 224.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T13:34:34.542+0000"), 
            "code" : "public static String parseEmail (String email){\n    int start = 0;\n    int end = email.indexOf(\"@\") ;\n    \n    String parseEmail = email.substring(start, end);\n    return parseEmail;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 209.9
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:34.809+0000"), 
            "code" : "public static String parseEmail (String email){\n    int start = 0;\n    int end = email.indexOf(\"@\") ;\n    \n    String parseEmail = email.substring(start, end);\n    return parseEmail;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 2.1
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:35.396+0000"), 
            "code" : "public static String parseEmail (String email){\n    int start = 0;\n    int end = email.indexOf(\"@\") ;\n    \n    String parseEmail = email.substring(start, end);\n    return parseEmail;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.6
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:36.656+0000"), 
            "code" : "public static String parseEmail (String email){\n    int start = 0;\n    int end = email.indexOf(\"@\") ;\n    \n    String parseEmail = email.substring(start, end);\n    return parseEmail;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(2)
        }
    ]
}
{ 
    "_id" : "dbJeeYfe7nC2N6j3R", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T12:39:48.556+0000"), 
    "updatedAt" : ISODate("2016-04-23T13:34:41.424+0000"), 
    "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 2.1, 
    "totalActiveTime" : 15.200000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T13:34:37.074+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 6.4
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:39.252+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.9
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:40.245+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 3.4
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:40.820+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.4
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:41.424+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.1
        }
    ]
}
{ 
    "_id" : "rfJGSWwypfTYaSdEf", 
    "userId" : "68LkTBk27sS7rTZ2u", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T13:05:11.247+0000"), 
    "updatedAt" : ISODate("2016-04-23T13:43:46.805+0000"), 
    "code" : "public static String parseEmail(String email){\n    int i = email.indexOf('@');\n    return email.substring(0, i);\n}", 
    "status" : "PASS", 
    "activeTime" : 151.5, 
    "totalActiveTime" : 251.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T13:34:41.920+0000"), 
            "code" : "public String parseEmail(String email){\n    int i = email.indexOf('@');\n    return email.substring(0, i);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 99.5
        }, 
        {
            "date" : ISODate("2016-04-23T13:43:46.804+0000"), 
            "code" : "public static String parseEmail(String email){\n    int i = email.indexOf('@');\n    return email.substring(0, i);\n}", 
            "status" : "PASS", 
            "activeTime" : 151.5
        }
    ]
}
{ 
    "_id" : "P4Gasy3k2m26EpN35", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-01-08T13:58:24.173+0000"), 
    "updatedAt" : ISODate("2016-04-25T00:12:58.551+0000"), 
    "status" : "PASS", 
    "activeTime" : 1.3, 
    "totalActiveTime" : 271.8, 
    "history" : [
        {
            "date" : ISODate("2016-01-08T14:06:02.763+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.4
        }, 
        {
            "date" : ISODate("2016-01-08T14:06:40.941+0000"), 
            "code" : "public static String parseEmail(String email){\n    return email;\n}", 
            "status" : "FAIL", 
            "activeTime" : 38.1
        }, 
        {
            "date" : ISODate("2016-01-08T14:07:34.505+0000"), 
            "code" : "public static String parseEmail(String email){\n    return email.substring(0, email.length - 11);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 53.6
        }, 
        {
            "date" : ISODate("2016-01-08T14:07:44.768+0000"), 
            "code" : "public static String parseEmail(String email){\n    return email.substring(0, email.length() - 11);\n}", 
            "status" : "PASS", 
            "activeTime" : 10.3
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:44.791+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.1
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:45.205+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.1
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:46.449+0000"), 
            "code" : "public static String parseEmail(String email){\n    return email.substring(0, email.length() - 11);\n}", 
            "status" : "PASS", 
            "activeTime" : 3.6
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:47.297+0000"), 
            "code" : "public static String parseEmail(String email){\n    return email.substring(0, email.length() - 11);\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(7)
        }, 
        {
            "date" : ISODate("2016-04-23T13:36:17.058+0000"), 
            "code" : "public static String parseEmail(String email){\n    return email.substring(0, email.length() - 11);\n}", 
            "status" : "PASS", 
            "activeTime" : 31.9
        }, 
        {
            "date" : ISODate("2016-04-23T13:38:26.645+0000"), 
            "code" : "public static String parseEmail(String email){\n    return email.substring(0, email.length() - 11);\n}", 
            "status" : "PASS", 
            "activeTime" : 46.4
        }, 
        {
            "date" : ISODate("2016-04-25T00:12:58.551+0000"), 
            "code" : "public static String parseEmail(String email){\n    return email.substring(0, email.length() - 11);\n}", 
            "status" : "PASS", 
            "activeTime" : 1.3
        }
    ], 
    "code" : "public static String parseEmail(String email){\n    return email.substring(0, email.length() - 11);\n}"
}
{ 
    "_id" : "XpNnRarCFGSEKi6vL", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T13:11:50.325+0000"), 
    "updatedAt" : ISODate("2016-04-23T13:34:48.429+0000"), 
    "code" : "public static String parseEmail(String email){\n    int foo = email.indexOf('@');\n    return email.substring(0,foo);\n}", 
    "status" : "PASS", 
    "activeTime" : 141.4, 
    "totalActiveTime" : 435.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T13:34:43.360+0000"), 
            "code" : "public static String parseEmail(String email){\n    int foo = email.indexOf('@');\n    return email.substring(0,foo);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(203)
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:44.258+0000"), 
            "code" : "public static String parseEmail(String email){\n    int foo = email.indexOf('@');\n    return email.substring(0,foo);\n}", 
            "status" : "PASS", 
            "activeTime" : 2.6
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:46.594+0000"), 
            "code" : "public static String parseEmail(String email){\n    int foo = email.indexOf('@');\n    return email.substring(0,foo);\n}", 
            "status" : "PASS", 
            "activeTime" : 88.9
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:48.429+0000"), 
            "code" : "public static String parseEmail(String email){\n    int foo = email.indexOf('@');\n    return email.substring(0,foo);\n}", 
            "status" : "PASS", 
            "activeTime" : 141.4
        }
    ]
}
{ 
    "_id" : "BBhsxgKJusHG593XQ", 
    "userId" : "68LkTBk27sS7rTZ2u", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T13:57:03.774+0000"), 
    "updatedAt" : ISODate("2016-04-23T14:05:19.923+0000"), 
    "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print (\"Type one or more words: \");\n    String s1 = sc.nextLine();\n    \n    String s2 = \"\";\n    for (int i = s1.length()-1; i >= 0; i--){\n        s2+= s1.charAt(i);\n    }\n    \n    String s1Lower = s1.toLowerCase();\n    String s2Lower = s2.toLowerCase();\n    \n    if (s1Lower.equals(s2Lower)){\n        System.out.println(s1 + \" is a palindrome!\");\n    }else{\n        System.out.println(s1 + \" is not a palindrome.\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 90.6, 
    "totalActiveTime" : 504.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T14:01:57.974+0000"), 
            "code" : "public void printPalindrome(Scanner sc){\n    System.out.print (\"Type one or more words : \");\n    String s1 = sc.nextLine();\n    \n    String s2 = \"\";\n    for (int i = s1.length()-1; i >= 0; i--){\n        s2+= s1.charAt(i);\n    }\n    \n    if (s1.equals(s2)){\n        System.out.println(s1 + \" is a panlindrome\");\n    }else{\n        System.out.println(s1 + \" is not a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 302.5
        }, 
        {
            "date" : ISODate("2016-04-23T14:02:32.605+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print (\"Type one or more words : \");\n    String s1 = sc.nextLine();\n    \n    String s2 = \"\";\n    for (int i = s1.length()-1; i >= 0; i--){\n        s2+= s1.charAt(i);\n    }\n    \n    if (s1.equals(s2)){\n        System.out.println(s1 + \" is a panlindrome\");\n    }else{\n        System.out.println(s1 + \" is not a palindrome\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 34.3
        }, 
        {
            "date" : ISODate("2016-04-23T14:03:03.481+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print (\"Type one or more words : \");\n    String s1 = sc.nextLine();\n    \n    String s2 = \"\";\n    for (int i = s1.length()-1; i >= 0; i--){\n        s2+= s1.charAt(i);\n    }\n    \n    if (s1.equals(s2)){\n        System.out.println(s1 + \" is a panlindrome!\");\n    }else{\n        System.out.println(s1 + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 30.8
        }, 
        {
            "date" : ISODate("2016-04-23T14:03:29.651+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print (\"Type one or more words: \");\n    String s1 = sc.nextLine();\n    \n    String s2 = \"\";\n    for (int i = s1.length()-1; i >= 0; i--){\n        s2+= s1.charAt(i);\n    }\n    \n    if (s1.equals(s2)){\n        System.out.println(s1 + \" is a panlindrome!\");\n    }else{\n        System.out.println(s1 + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 26.2
        }, 
        {
            "date" : ISODate("2016-04-23T14:03:49.409+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print (\"Type one or more words: \");\n    String s1 = sc.nextLine();\n    \n    String s2 = \"\";\n    for (int i = s1.length()-1; i >= 0; i--){\n        s2+= s1.charAt(i);\n    }\n    \n    if (s1.equals(s2)){\n        System.out.println(s1 + \" is a palindrome!\");\n    }else{\n        System.out.println(s1 + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.7
        }, 
        {
            "date" : ISODate("2016-04-23T14:05:19.922+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print (\"Type one or more words: \");\n    String s1 = sc.nextLine();\n    \n    String s2 = \"\";\n    for (int i = s1.length()-1; i >= 0; i--){\n        s2+= s1.charAt(i);\n    }\n    \n    String s1Lower = s1.toLowerCase();\n    String s2Lower = s2.toLowerCase();\n    \n    if (s1Lower.equals(s2Lower)){\n        System.out.println(s1 + \" is a palindrome!\");\n    }else{\n        System.out.println(s1 + \" is not a palindrome.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 90.6
        }
    ]
}
{ 
    "_id" : "wZPnQPmBeompWkWjh", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T07:56:15.755+0000"), 
    "updatedAt" : ISODate("2016-04-23T14:14:07.783+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 237.5, 
    "totalActiveTime" : 237.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T14:14:07.782+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 237.5
        }
    ]
}
{ 
    "_id" : "cWTXNBLpKxKDmfoD7", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T12:34:38.395+0000"), 
    "updatedAt" : ISODate("2016-04-25T08:35:49.191+0000"), 
    "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words: \");\n        String input = console.next();\n        String lowerCaseInput = input.toLowerCase(); \n        \n        //TAKEN NOTE! :)\n        //console1 is one of those names you should never name a variable\n        //use lowerCaseInput\n        \n        boolean isPalindrome = true; //flag is very abstract! use a name like isPalindrome\n         \n        //you got the logic! but there are some redundant steps, especially when it hits \n        //i = console1.length()/2\n        //can you think of a way to improve it?\n        //would be great practice :)\n        for(int i = 0; i < lowerCaseInput.length()/2+1; i++){\n            \n                if(lowerCaseInput.charAt(i)!=lowerCaseInput.charAt(lowerCaseInput.length()-i-1)){\n                    isPalindrome = false;\n                }\n            \n        }\n        if(isPalindrome)\n            System.out.println (input+\" is a palindrome!\");\n        else\n            System.out.println (input+\" is not a palindrome.\");\n    \n    }", 
    "status" : "PASS", 
    "activeTime" : NumberInt(12), 
    "totalActiveTime" : 5274.700000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T13:34:37.120+0000"), 
            "code" : "import java.util.Scanner;\n    \n    Scanner console = new Scanner(System.in);\n    System.out.println (\"Type one or more words:\");\n    String console = console.next();\n    printPalindrome(console);\n    \n    boolean flag = true;\n    \n    public static void printPalindrome (String console){\n        for(int i = 0; i < console.length(); i++){\n            for(int j=console.length()-1; j >=0; j++){\n                if(console.charAt(i)!=console.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\")\n        else\n            System.out.println (console+\" is not a palindrome.\")\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 636.7
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:38.406+0000"), 
            "code" : "import java.util.Scanner;\n    \n    Scanner console = new Scanner(System.in);\n    System.out.println (\"Type one or more words:\");\n    String console = console.next();\n    printPalindrome(console);\n    \n    boolean flag = true;\n    \n    public static void printPalindrome (String console){\n        for(int i = 0; i < console.length(); i++){\n            for(int j=console.length()-1; j >=0; j++){\n                if(console.charAt(i)!=console.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\")\n        else\n            System.out.println (console+\" is not a palindrome.\")\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.1
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:38.825+0000"), 
            "code" : "import java.util.Scanner;\n    \n    Scanner console = new Scanner(System.in);\n    System.out.println (\"Type one or more words:\");\n    String console = console.next();\n    printPalindrome(console);\n    \n    boolean flag = true;\n    \n    public static void printPalindrome (String console){\n        String console1 = console.tolowerCase();\n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\")\n        else\n            System.out.println (console+\" is not a palindrome.\")\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.6
        }, 
        {
            "date" : ISODate("2016-04-23T14:46:50.938+0000"), 
            "code" : "import java.util.Scanner; //you don't need this! you just have to write the method :)\n    \n    \n    Scanner console = new Scanner(System.in); //not needed!\n    /* put the below code in printPalindrome */\n    System.out.println (\"Type one or more words:\");\n    String console = console.next();\n    printPalindrome(console);\n    \n    boolean flag = true;\n    \n    //print palindrome takes in a Scanner\n    public static void printPalindrome (String console){\n        String console1 = console.tolowerCase();\n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\")\n        else\n            System.out.println (console+\" is not a palindrome.\")\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1193.5
        }, 
        {
            "date" : ISODate("2016-04-23T14:48:46.461+0000"), 
            "code" : "import java.util.Scanner; //you don't need this! you just have to write the method :)\n    \n    \n    Scanner console = new Scanner(System.in); //not needed!\n    /* put the below code in printPalindrome */\n    \n    \n    //print palindrome takes in a Scanner\n    public static void printPalindrome (String console){\n        System.out.println (\"Type one or more words:\");\n        String console = console.next();\n        printPalindrome(console);\n    \n    boolean flag = true;\n        String console1 = console.tolowerCase();\n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\")\n        else\n            System.out.println (console+\" is not a palindrome.\")\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 115.7
        }, 
        {
            "date" : ISODate("2016-04-23T14:49:06.266+0000"), 
            "code" : "import java.util.Scanner; //you don't need this! you just have to write the method :)\n    \n    \n   \n    \n    //print palindrome takes in a Scanner\n    public static void printPalindrome (String console){\n        System.out.println (\"Type one or more words:\");\n        String console = console.next();\n        printPalindrome(console);\n    \n    boolean flag = true;\n        String console1 = console.tolowerCase();\n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\")\n        else\n            System.out.println (console+\" is not a palindrome.\")\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.9
        }, 
        {
            "date" : ISODate("2016-04-23T14:49:42.270+0000"), 
            "code" : "import java.util.Scanner; //you don't need this! you just have to write the method :)\n    \n    \n   \n    \n    //print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String console = console.next();\n        printPalindrome(console);\n    \n    boolean flag = true;\n        String console1 = console.tolowerCase();\n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\")\n        else\n            System.out.println (console+\" is not a palindrome.\")\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.9
        }, 
        {
            "date" : ISODate("2016-04-23T14:49:55.964+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String console = console.next();\n        printPalindrome(console);\n    \n    boolean flag = true;\n        String console1 = console.tolowerCase();\n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\")\n        else\n            System.out.println (console+\" is not a palindrome.\")\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-04-23T14:50:13.400+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String console = console.next();\n        printPalindrome(console);\n    \n    boolean flag = true;\n        String console1 = console.tolowerCase();\n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\");\n        else\n            System.out.println (console+\" is not a palindrome.\");\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.3
        }, 
        {
            "date" : ISODate("2016-04-23T14:51:09.713+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String console = console.next();\n        String console1 = console.tolowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\");\n        else\n            System.out.println (console+\" is not a palindrome.\");\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 56.3
        }, 
        {
            "date" : ISODate("2016-04-23T14:51:44.784+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String console = console.next();\n        String console1 = console.tolowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\");\n        else\n            System.out.println (console+\" is not a palindrome.\");\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.7
        }, 
        {
            "date" : ISODate("2016-04-23T14:52:28.965+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.tolowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\");\n        else\n            System.out.println (console+\" is not a palindrome.\");\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.3
        }, 
        {
            "date" : ISODate("2016-04-23T14:52:45.361+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\");\n        else\n            System.out.println (console+\" is not a palindrome.\");\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.5
        }, 
        {
            "date" : ISODate("2016-04-23T14:53:34.690+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j++){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n            }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\");\n        else\n            System.out.println (console+\" is not a palindrome.\");\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(39)
        }, 
        {
            "date" : ISODate("2016-04-23T14:55:32.877+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j--){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n            }\n        }\n        if(flag)\n            System.out.println (console+\" is a palindrome!\");\n        else\n            System.out.println (console+\" is not a palindrome.\");\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 118.1
        }, 
        {
            "date" : ISODate("2016-04-23T14:55:59.949+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j--){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                }\n            }\n        }\n        if(flag)\n            System.out.println (console1+\" is a palindrome!\");\n        else\n            System.out.println (console1+\" is not a palindrome.\");\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 27.2
        }, 
        {
            "date" : ISODate("2016-04-23T14:57:24.340+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j--){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                    System.out.println(\"false\");\n                }\n            }\n        }\n        if(flag)\n            System.out.println (console1+\" is a palindrome!\");\n        else\n            System.out.println (console1+\" is not a palindrome.\");\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 84.5
        }, 
        {
            "date" : ISODate("2016-04-23T14:57:46.628+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            for(int j=console1.length()-1; j >=0; j--){\n                if(console1.charAt(i)!=console1.charAt(j)){\n                    flag = false;\n                    System.out.println(\"false\"+i+j);\n                }\n            }\n        }\n        if(flag)\n            System.out.println (console1+\" is a palindrome!\");\n        else\n            System.out.println (console1+\" is not a palindrome.\");\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 22.1
        }, 
        {
            "date" : ISODate("2016-04-23T15:00:26.681+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console.length()-i-1)){\n                    flag = false;\n                    System.out.println(\"false\"+i+j);\n                }\n            \n        }\n        if(flag)\n            System.out.println (console1+\" is a palindrome!\");\n        else\n            System.out.println (console1+\" is not a palindrome.\");\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 119.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:00:40.818+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console1.length()-i-1)){\n                    flag = false;\n                    System.out.println(\"false\"+i+j);\n                }\n            \n        }\n        if(flag)\n            System.out.println (console1+\" is a palindrome!\");\n        else\n            System.out.println (console1+\" is not a palindrome.\");\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-04-23T15:00:55.291+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console1.length()-i-1)){\n                    flag = false;\n                }\n            \n        }\n        if(flag)\n            System.out.println (console1+\" is a palindrome!\");\n        else\n            System.out.println (console1+\" is not a palindrome.\");\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 14.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:01:13.380+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.println (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console1.length()-i-1)){\n                    flag = false;\n                }\n            \n        }\n        if(flag)\n            System.out.print (console1+\" is a palindrome!\");\n        else\n            System.out.print (console1+\" is not a palindrome.\");\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 18.1
        }, 
        {
            "date" : ISODate("2016-04-23T15:01:28.488+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words:\");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console1.length()-i-1)){\n                    flag = false;\n                }\n            \n        }\n        if(flag)\n            System.out.println (console1+\" is a palindrome!\");\n        else\n            System.out.println (console1+\" is not a palindrome.\");\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:01:37.935+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words: \");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console1.length()-i-1)){\n                    flag = false;\n                }\n            \n        }\n        if(flag)\n            System.out.println (console1+\" is a palindrome!\");\n        else\n            System.out.println (console1+\" is not a palindrome.\");\n    \n    }", 
            "status" : "FAIL", 
            "activeTime" : 9.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:01:57.877+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words: \");\n        String input = console.next();\n        String console1 = input.toLowerCase();\n        \n        boolean flag = true;\n         \n        for(int i = 0; i < console1.length(); i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console1.length()-i-1)){\n                    flag = false;\n                }\n            \n        }\n        if(flag)\n            System.out.println (input+\" is a palindrome!\");\n        else\n            System.out.println (input+\" is not a palindrome.\");\n    \n    }", 
            "status" : "PASS", 
            "activeTime" : 19.8
        }, 
        {
            "date" : ISODate("2016-04-24T07:56:28.373+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words: \");\n        String input = console.next();\n        String console1 = input.toLowerCase(); \n        //console1 is one of those names you should never name a variable\n        //use lowerCaseInput\n        \n        boolean flag = true; //flag is very abstract! use a name like isPalindrome\n         \n        //you got the logic! but there are some redundant steps, especially when it hits \n        //i = console1.length()/2\n        //can you think of a way to improve it?\n        //would be great practice :)\n        for(int i = 0; i < console1.length(); i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console1.length()-i-1)){\n                    flag = false;\n                }\n            \n        }\n        if(flag)\n            System.out.println (input+\" is a palindrome!\");\n        else\n            System.out.println (input+\" is not a palindrome.\");\n    \n    }", 
            "status" : "PASS", 
            "activeTime" : 1232.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:57:10.603+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 42.1
        }, 
        {
            "date" : ISODate("2016-04-24T07:57:34.936+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        System.out.println(input.charAt(i));\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 24.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:57:58.446+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        System.out.println(\"here\"+input.charAt(i));\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 23.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:58:49.242+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    for(int i=0; i<length/2+1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n  \n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 50.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:03:34.703+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        System.out.println(\"first count =\"+count);\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n  \n        }\n        count-=1;\n        System.out.println(\"other count =\"+count);\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(286)
        }, 
        {
            "date" : ISODate("2016-04-24T11:16:41.195+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words: \");\n        String input = console.next();\n        String console1 = input.toLowerCase(); \n        //console1 is one of those names you should never name a variable\n        //use lowerCaseInput\n        \n        boolean flag = true; //flag is very abstract! use a name like isPalindrome\n         \n        //you got the logic! but there are some redundant steps, especially when it hits \n        //i = console1.length()/2\n        //can you think of a way to improve it?\n        //would be great practice :)\n        for(int i = 0; i < console1.length(); i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console1.length()-i-1)){\n                    flag = false;\n                }\n            \n        }\n        if(flag)\n            System.out.println (input+\" is a palindrome!\");\n        else\n            System.out.println (input+\" is not a palindrome.\");\n    \n    }", 
            "status" : "PASS", 
            "activeTime" : 471.4
        }, 
        {
            "date" : ISODate("2016-04-25T08:34:56.642+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words: \");\n        String input = console.next();\n        String console1 = input.toLowerCase(); \n        \n        //TAKEN NOTE! :)\n        //console1 is one of those names you should never name a variable\n        //use lowerCaseInput\n        \n        boolean flag = true; //flag is very abstract! use a name like isPalindrome\n         \n        //you got the logic! but there are some redundant steps, especially when it hits \n        //i = console1.length()/2\n        //can you think of a way to improve it?\n        //would be great practice :)\n        for(int i = 0; i < console1.length()/2+1; i++){\n            \n                if(console1.charAt(i)!=console1.charAt(console1.length()-i-1)){\n                    flag = false;\n                }\n            \n        }\n        if(flag)\n            System.out.println (input+\" is a palindrome!\");\n        else\n            System.out.println (input+\" is not a palindrome.\");\n    \n    }", 
            "status" : "PASS", 
            "activeTime" : 373.3
        }, 
        {
            "date" : ISODate("2016-04-25T08:35:36.725+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words: \");\n        String input = console.next();\n        String lowerCaseInput = input.toLowerCase(); \n        \n        //TAKEN NOTE! :)\n        //console1 is one of those names you should never name a variable\n        //use lowerCaseInput\n        \n        boolean isPalindrome = true; //flag is very abstract! use a name like isPalindrome\n         \n        //you got the logic! but there are some redundant steps, especially when it hits \n        //i = console1.length()/2\n        //can you think of a way to improve it?\n        //would be great practice :)\n        for(int i = 0; i < lowerCaseInput.length()/2+1; i++){\n            \n                if(lowerCaseInput.charAt(i)!=lowerCaseInput.charAt(lowerCaseInput.length()-i-1)){\n                    flag = false;\n                }\n            \n        }\n        if(isPalindrome)\n            System.out.println (input+\" is a palindrome!\");\n        else\n            System.out.println (input+\" is not a palindrome.\");\n    \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.6
        }, 
        {
            "date" : ISODate("2016-04-25T08:35:49.190+0000"), 
            "code" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words: \");\n        String input = console.next();\n        String lowerCaseInput = input.toLowerCase(); \n        \n        //TAKEN NOTE! :)\n        //console1 is one of those names you should never name a variable\n        //use lowerCaseInput\n        \n        boolean isPalindrome = true; //flag is very abstract! use a name like isPalindrome\n         \n        //you got the logic! but there are some redundant steps, especially when it hits \n        //i = console1.length()/2\n        //can you think of a way to improve it?\n        //would be great practice :)\n        for(int i = 0; i < lowerCaseInput.length()/2+1; i++){\n            \n                if(lowerCaseInput.charAt(i)!=lowerCaseInput.charAt(lowerCaseInput.length()-i-1)){\n                    isPalindrome = false;\n                }\n            \n        }\n        if(isPalindrome)\n            System.out.println (input+\" is a palindrome!\");\n        else\n            System.out.println (input+\" is not a palindrome.\");\n    \n    }", 
            "status" : "PASS", 
            "activeTime" : NumberInt(12)
        }
    ]
}
{ 
    "_id" : "NqGDjMiubmiyzG6di", 
    "userId" : "uAgTDnJFYMxpGshJq", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T14:32:37.674+0000"), 
    "updatedAt" : ISODate("2016-04-23T15:09:35.648+0000"), 
    "code" : "public static String parseEmail(String email){\n    int pos=email.indexOf(\"@\");\n\treturn email.substring(0,pos);\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(40), 
    "totalActiveTime" : NumberInt(40), 
    "history" : [
        {
            "date" : ISODate("2016-04-23T15:09:35.648+0000"), 
            "code" : "public static String parseEmail(String email){\n    int pos=email.indexOf(\"@\");\n\treturn email.substring(0,pos);\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(40)
        }
    ]
}
{ 
    "_id" : "b2vaFHBjQ7vTP2owm", 
    "userId" : "uAgTDnJFYMxpGshJq", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T15:09:52.071+0000"), 
    "updatedAt" : ISODate("2016-04-23T15:21:48.262+0000"), 
    "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n\tString word=console.nextLine();\n\tString lower=word.toLowerCase();\n\t\n\tString reverse=\"\";\n\t\n\tfor(int i=word.length()-1; i>=0; i--){\n\t\treverse+=lower.charAt(i);\n\t}\n\t\n\tif(lower.equals(reverse)){\n\t\tSystem.out.println(word + \" is a palindrome!\");\n\t}else{\n\t\tSystem.out.println(word + \" is not a palindrome.\");\n\t}\n}", 
    "status" : "PASS", 
    "activeTime" : 7.9, 
    "totalActiveTime" : 427.79999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T15:21:40.197+0000"), 
            "code" : "public void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n\tString word=console.nextLine();\n\tString lower=word.toLowerCase();\n\t\n\tString reverse=\"\";\n\t\n\tfor(int i=word.length()-1; i>=0; i--){\n\t\treverse+=lower.charAt(i);\n\t}\n\t\n\tif(lower.equals(reverse)){\n\t\tSystem.out.println(word + \" is a palindrome!\");\n\t}else{\n\t\tSystem.out.println(word + \" is not a palindrome.\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 419.9
        }, 
        {
            "date" : ISODate("2016-04-23T15:21:48.262+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n\tString word=console.nextLine();\n\tString lower=word.toLowerCase();\n\t\n\tString reverse=\"\";\n\t\n\tfor(int i=word.length()-1; i>=0; i--){\n\t\treverse+=lower.charAt(i);\n\t}\n\t\n\tif(lower.equals(reverse)){\n\t\tSystem.out.println(word + \" is a palindrome!\");\n\t}else{\n\t\tSystem.out.println(word + \" is not a palindrome.\");\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 7.9
        }
    ]
}
{ 
    "_id" : "A5rXjynNapLLxPJg8", 
    "userId" : "Cp9j6PryRY7XDwG8r", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T10:13:32.447+0000"), 
    "updatedAt" : ISODate("2016-04-23T15:31:37.075+0000"), 
    "code" : "public static String parseEmail(String email) {\n    String id = \"\";\n    id = id + email.substring(0,email.indexOf(\"@\"));\n    return id;\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(25), 
    "totalActiveTime" : NumberInt(25), 
    "history" : [
        {
            "date" : ISODate("2016-04-23T15:31:37.074+0000"), 
            "code" : "public static String parseEmail(String email) {\n    String id = \"\";\n    id = id + email.substring(0,email.indexOf(\"@\"));\n    return id;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(25)
        }
    ]
}
{ 
    "_id" : "nSfeXkwEFP8M3RfYL", 
    "userId" : "N5BQLGMBRKq32m5Ay", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T09:39:55.919+0000"), 
    "updatedAt" : ISODate("2016-04-23T15:34:46.981+0000"), 
    "code" : "public static void printPalindrome(Scanner console){\n    boolean a = true;\n    String input1 = console.nextLine();\n    String input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            a = false;\n        } \n    }\n    if(a == false){\n        System.out.println(\"Type one or more words: \" + input1 + \" is not a palindrome.\");\n    } else{\n    System.out.println(\"Type one or more words: \" + input1 + \" is a palindrome!\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 18.7, 
    "totalActiveTime" : 431.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T15:27:16.889+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String input1 = console.nextLine();\n    input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            System.out.println(input1 + \" is not a palindrome\");\n        }   else{\n            System.out.println(input1 + \" is a palindrome\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(7)
        }, 
        {
            "date" : ISODate("2016-04-23T15:27:42.433+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String input1 = console.nextLine();\n    String input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            System.out.println(input1 + \" is not a palindrome\");\n        }   else{\n            System.out.println(input1 + \" is a palindrome\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:28:45.324+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String input1 = console.nextLine();\n    String input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            System.out.println(input1 + \" is not a palindrome\");\n        } \n        }\n        System.out.println(input1 + \" is a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.1
        }, 
        {
            "date" : ISODate("2016-04-23T15:29:08.338+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String input1 = console.nextLine();\n    String input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            System.out.println(input1 + \" is not a palindrome\");\n        } \n    }\n        System.out.println(input1 + \" is a palindrome\");\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 22.6
        }, 
        {
            "date" : ISODate("2016-04-23T15:31:54.097+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    boolean a = true;\n    String input1 = console.nextLine();\n    String input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            a = false;\n        } \n    }\n    if(a == false){\n        System.out.println(input1 + \" is not a palindrome\");\n    } else{\n    System.out.println(input1 + \" is a palindrome\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 165.8
        }, 
        {
            "date" : ISODate("2016-04-23T15:31:58.645+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    boolean a = true;\n    String input1 = console.nextLine();\n    String input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            a = false;\n        } \n    }\n    if(a == false){\n        System.out.println(input1 + \" is not a palindrome\");\n    } else{\n    System.out.println(input1 + \" is a palindrome\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 4.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:34:13.509+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    boolean a = true;\n    String input1 = console.nextLine();\n    String input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            a = false;\n        } \n    }\n    if(a == false){\n        System.out.println(\"Type one or more words: \" + input1 + \" is not a palindrome\");\n    } else{\n    System.out.println(\"Type one or more words: \" + input1 + \" is a palindrome\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 109.8
        }, 
        {
            "date" : ISODate("2016-04-23T15:34:28.169+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    boolean a = true;\n    String input1 = console.nextLine();\n    String input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            a = false;\n        } \n    }\n    if(a == false){\n        System.out.println(\"Type one or more words: \" + input1 + \" is not a palindrome\");\n    } else{\n    System.out.println(\"Type one or more words: \" + input1 + \" is a palindrome!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:34:46.980+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    boolean a = true;\n    String input1 = console.nextLine();\n    String input = input1.toLowerCase();\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            a = false;\n        } \n    }\n    if(a == false){\n        System.out.println(\"Type one or more words: \" + input1 + \" is not a palindrome.\");\n    } else{\n    System.out.println(\"Type one or more words: \" + input1 + \" is a palindrome!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 18.7
        }
    ]
}
{ 
    "_id" : "FgtZyeqLR9mXuXQ2s", 
    "userId" : "uAgTDnJFYMxpGshJq", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T15:22:07.360+0000"), 
    "updatedAt" : ISODate("2016-04-23T15:55:16.065+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tif(a1.size()>a2.size()){\t\t\n\t\tfor(int i=0; i<a2.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a2.size(); k<a1.size(); k++){\n\t\t\tstorage.add(a1.get(k));\n\t\t}\n\t}else{\n\t\tfor(int i=0; i<a1.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a1.size(); k<a2.size(); k++){\n\t\t\tstorage.add(a2.get(k));\n\t\t}\n\t}\n\t\n\ta1.clear();\n\ta1.addAll(storage);\n}", 
    "status" : "PASS", 
    "activeTime" : 9.9, 
    "totalActiveTime" : 1676.7000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T15:46:28.179+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tif(a1.size()>=a2.size()){\t\t\n\t\tfor(int i=0; i<a2.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a2.size(); k<a1.size(); k++){\n\t\t\tstorage.add(a1.get(k));\n\t\t}\n\t}else{\n\t\tfor(int i=0; i<a1.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a1.size(); k<a2.size(); k++){\n\t\t\tstorage.add(a2.get(k));\n\t\t}\n\t}\n\t\n\ta1=storage;\n}", 
            "status" : "FAIL", 
            "activeTime" : 1271.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:50:03.236+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tif(a1.size()>=a2.size()){\t\t\n\t\tfor(int i=0; i<a2.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a2.size(); k<a1.size(); k++){\n\t\t\tstorage.add(a1.get(k));\n\t\t}\n\t}else{\n\t\tfor(int i=0; i<a1.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a1.size(); k<a2.size(); k++){\n\t\t\tstorage.add(a2.get(k));\n\t\t}\n\t}\n\t\n\ta1=storage;\n}", 
            "status" : "FAIL", 
            "activeTime" : 188.9
        }, 
        {
            "date" : ISODate("2016-04-23T15:51:11.814+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tif(a1.size()>a2.size()){\t\t\n\t\tfor(int i=0; i<a2.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a2.size(); k<a1.size(); k++){\n\t\t\tstorage.add(a1.get(k));\n\t\t}\n\t}else{\n\t\tfor(int i=0; i<a1.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a1.size(); k<a2.size(); k++){\n\t\t\tstorage.add(a2.get(k));\n\t\t}\n\t}\n\t\n\ta1=storage;\n}", 
            "status" : "FAIL", 
            "activeTime" : 68.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:51:22.859+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tif(a1.size()>a2.size()){\t\t\n\t\tfor(int i=0; i<a2.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a2.size(); k<a1.size(); k++){\n\t\t\tstorage.add(a1.get(k));\n\t\t}\n\t}else{\n\t\tfor(int i=0; i<a1.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a1.size(); k<a2.size(); k++){\n\t\t\tstorage.add(a2.get(k));\n\t\t}\n\t}\n\t\n\ta1=storage;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(4)
        }, 
        {
            "date" : ISODate("2016-04-23T15:52:12.037+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tstorage.add(a1);\n\tstorage.add(a2);\n\ta1=storage;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 49.6
        }, 
        {
            "date" : ISODate("2016-04-23T15:52:27.828+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tstorage.add(2);\n\tstorage.add(3);\n\ta1=storage;\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.4
        }, 
        {
            "date" : ISODate("2016-04-23T15:53:03.365+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tstorage.add(2);\n\tstorage.add(3);\n\ta1.clear();\n\ta1=storage;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(27)
        }, 
        {
            "date" : ISODate("2016-04-23T15:55:05.669+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tif(a1.size()>a2.size()){\t\t\n\t\tfor(int i=0; i<a2.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a2.size(); k<a1.size(); k++){\n\t\t\tstorage.add(a1.get(k));\n\t\t}\n\t}else{\n\t\tfor(int i=0; i<a1.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a1.size(); k<a2.size(); k++){\n\t\t\tstorage.add(a2.get(k));\n\t\t}\n\t}\n\t\n\ta1.clear();\n\ta1.addAll(storage);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:55:16.064+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>();\n\t\n\tif(a1.size()>a2.size()){\t\t\n\t\tfor(int i=0; i<a2.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a2.size(); k<a1.size(); k++){\n\t\t\tstorage.add(a1.get(k));\n\t\t}\n\t}else{\n\t\tfor(int i=0; i<a1.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a1.size(); k<a2.size(); k++){\n\t\t\tstorage.add(a2.get(k));\n\t\t}\n\t}\n\t\n\ta1.clear();\n\ta1.addAll(storage);\n}", 
            "status" : "PASS", 
            "activeTime" : 9.9
        }
    ]
}
{ 
    "_id" : "E3qEwqWNwAo55dGHB", 
    "userId" : "uAgTDnJFYMxpGshJq", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T15:55:27.084+0000"), 
    "updatedAt" : ISODate("2016-04-23T16:00:18.521+0000"), 
    "code" : "public class Rectangle{\n\tprivate int x;\n\tprivate int y;\n\tprivate int width;\n\tprivate int height;\n\t\n\tpublic Rectangle(int x, int y, int width, int height){\n\t\tthis.x=x;\n\t\tthis.y=y;\n\t\tthis.width=width;\n\t\tthis.height=height;\n\t}\n\t\n\tpublic int getHeight(){\n\t\treturn height;\n\t}\n\t\n\tpublic int getWidth(){\n\t\treturn width;\n\t}\n\t\n\tpublic int getX(){\n\t\treturn x;\n\t}\n\t\n\tpublic int getY(){\n\t\treturn y;\n\t}\n\t\n\tpublic String toString(){\n\t\treturn \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n\t}\n}", 
    "status" : "PASS", 
    "activeTime" : 302.6, 
    "totalActiveTime" : 302.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:00:18.521+0000"), 
            "code" : "public class Rectangle{\n\tprivate int x;\n\tprivate int y;\n\tprivate int width;\n\tprivate int height;\n\t\n\tpublic Rectangle(int x, int y, int width, int height){\n\t\tthis.x=x;\n\t\tthis.y=y;\n\t\tthis.width=width;\n\t\tthis.height=height;\n\t}\n\t\n\tpublic int getHeight(){\n\t\treturn height;\n\t}\n\t\n\tpublic int getWidth(){\n\t\treturn width;\n\t}\n\t\n\tpublic int getX(){\n\t\treturn x;\n\t}\n\t\n\tpublic int getY(){\n\t\treturn y;\n\t}\n\t\n\tpublic String toString(){\n\t\treturn \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 302.6
        }
    ]
}
{ 
    "_id" : "cphsWauMyuPPgWD4d", 
    "userId" : "uAgTDnJFYMxpGshJq", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T16:00:24.041+0000"), 
    "updatedAt" : ISODate("2016-04-23T16:13:56.039+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n\tint x1=Math.min(rectA.getX(),rectB.getX());\n\tint x2=Math.max(rectA.getX()+rectA.getWidth(),rectB.getX()+rectB.getWidth());\n\tint y1=Math.min(rectA.getY(),rectB.getY());\n\tint y2=Math.max(rectA.getY()+rectA.getHeight(),rectB.getY()+rectB.getHeight());\n\t\n\tRectangle unionRect=new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t\n\treturn unionRect;\n}", 
    "status" : "PASS", 
    "activeTime" : 467.4, 
    "totalActiveTime" : 467.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:13:56.038+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n\tint x1=Math.min(rectA.getX(),rectB.getX());\n\tint x2=Math.max(rectA.getX()+rectA.getWidth(),rectB.getX()+rectB.getWidth());\n\tint y1=Math.min(rectA.getY(),rectB.getY());\n\tint y2=Math.max(rectA.getY()+rectA.getHeight(),rectB.getY()+rectB.getHeight());\n\t\n\tRectangle unionRect=new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t\n\treturn unionRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 467.4
        }
    ]
}
{ 
    "_id" : "3w2maSSXtmfwJRjQf", 
    "userId" : "N5BQLGMBRKq32m5Ay", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T09:22:47.297+0000"), 
    "updatedAt" : ISODate("2016-04-23T16:34:07.698+0000"), 
    "code" : "public static String parseEmail(String email){\n    int lastIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', lastIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
    "status" : "PASS", 
    "activeTime" : 11.6, 
    "totalActiveTime" : 573.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T15:24:47.076+0000"), 
            "code" : "public static void parseEmail(String email){\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', symbolIndex);\n    int lastIndex = email.indexOf(' ', symbolIndex);\n    System.out.println(email.substring(firstIndex+1,lastIndex));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:25:09.709+0000"), 
            "code" : "public static void parseEmail(String email){\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', symbolIndex);\n    int lastIndex = email.indexOf(' ', symbolIndex);\n    return email.substring(firstIndex+1,lastIndex);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:25:43.189+0000"), 
            "code" : "public static void parseEmail(String email){\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', symbolIndex);\n    int lastIndex = email.indexOf(' ', symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:26:06.116+0000"), 
            "code" : "public void String parseEmail(String email){\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', symbolIndex);\n    int lastIndex = email.indexOf(' ', symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(23)
        }, 
        {
            "date" : ISODate("2016-04-23T15:26:25.403+0000"), 
            "code" : "public String void parseEmail(String email){\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', symbolIndex);\n    int lastIndex = email.indexOf(' ', symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.1
        }, 
        {
            "date" : ISODate("2016-04-23T16:00:08.629+0000"), 
            "code" : "public static String parseEmail(String email){\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', symbolIndex);\n    int lastIndex = email.indexOf(' ', symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "FAIL", 
            "activeTime" : 74.6
        }, 
        {
            "date" : ISODate("2016-04-23T16:00:47.925+0000"), 
            "code" : "public static String parseEmail(String email){\n    String email = email.trim();\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', symbolIndex);\n    int lastIndex = email.indexOf(' ', symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.4
        }, 
        {
            "date" : ISODate("2016-04-23T16:01:00.352+0000"), 
            "code" : "public static String parseEmail(String email){\n    email = email.trim();\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', symbolIndex);\n    int lastIndex = email.indexOf(' ', symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.2
        }, 
        {
            "date" : ISODate("2016-04-23T16:27:26.332+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ',symbolIndex);\n    int lastIndex = email.indexOf(' ',symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "FAIL", 
            "activeTime" : 124.7
        }, 
        {
            "date" : ISODate("2016-04-23T16:27:31.037+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ',symbolIndex);\n    int lastIndex = email.indexOf(' ',symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "FAIL", 
            "activeTime" : 4.7
        }, 
        {
            "date" : ISODate("2016-04-23T16:29:20.197+0000"), 
            "code" : "public static String parseEmail(String email){\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ',symbolIndex);\n    int lastIndex = email.indexOf(' ',symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "FAIL", 
            "activeTime" : 39.3
        }, 
        {
            "date" : ISODate("2016-04-23T16:29:25.939+0000"), 
            "code" : "public static String parseEmail(String email){\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ',symbolIndex);\n    int lastIndex = email.indexOf(' ',symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-04-23T16:32:35.477+0000"), 
            "code" : "public static String parseEmail(String email){\n    int symbolIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ',symbolIndex);\n    int lastIndex = email.indexOf('.',symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "FAIL", 
            "activeTime" : 79.5
        }, 
        {
            "date" : ISODate("2016-04-23T16:33:55.862+0000"), 
            "code" : "public static String parseEmail(String email){\n    int lastIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ',symbolIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 80.7
        }, 
        {
            "date" : ISODate("2016-04-23T16:34:07.697+0000"), 
            "code" : "public static String parseEmail(String email){\n    int lastIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', lastIndex);\n    String rMail = email.substring(firstIndex+1,lastIndex);\n    return rMail;\n}", 
            "status" : "PASS", 
            "activeTime" : 11.6
        }
    ]
}
{ 
    "_id" : "6pjJjCP3ZxWJ3zSNX", 
    "userId" : "47MxiJWsWkBezecN9", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T09:22:02.158+0000"), 
    "updatedAt" : ISODate("2016-04-23T16:32:18.434+0000"), 
    "code" : "public static String parseEmail(String email){\n        \n        for(int i = 0; i <email.length(); i++){\n            if(email.charAt(i) == '@'){\n                return email.substring(0,i);\n            }\n        }\n        return null;\n}", 
    "status" : "PASS", 
    "activeTime" : 96.6, 
    "totalActiveTime" : 96.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:32:18.434+0000"), 
            "code" : "public static String parseEmail(String email){\n        \n        for(int i = 0; i <email.length(); i++){\n            if(email.charAt(i) == '@'){\n                return email.substring(0,i);\n            }\n        }\n        return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 96.6
        }
    ]
}
{ 
    "_id" : "cjDqNpELERFyXA2FT", 
    "userId" : "N5BQLGMBRKq32m5Ay", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T09:52:31.057+0000"), 
    "updatedAt" : ISODate("2016-04-23T16:38:12.935+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i=0;\n    for (; i < a2.size() && (i*2+1) < a1.size(); i++) {\n\ta1.add(i*2+1, a2.get(i));\n    }\n    if (i < a2.size()) {\n\twhile (i < a2.size()) {\n\t    a1.add(a2.get(i));\n\t    i++;\n\t}\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 9.5, 
    "totalActiveTime" : 120.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:38:03.357+0000"), 
            "code" : "public void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i=0;\n    for (; i < a2.size() && (i*2+1) < a1.size(); i++) {\n\ta1.add(i*2+1, a2.get(i));\n    }\n    if (i < a2.size()) {\n\twhile (i < a2.size()) {\n\t    a1.add(a2.get(i));\n\t    i++;\n\t}\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 110.9
        }, 
        {
            "date" : ISODate("2016-04-23T16:38:12.934+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i=0;\n    for (; i < a2.size() && (i*2+1) < a1.size(); i++) {\n\ta1.add(i*2+1, a2.get(i));\n    }\n    if (i < a2.size()) {\n\twhile (i < a2.size()) {\n\t    a1.add(a2.get(i));\n\t    i++;\n\t}\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.5
        }
    ]
}
{ 
    "_id" : "h5ipDLr3bpfm7bqoY", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T16:35:45.690+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:48:12.567+0000"), 
    "code" : "public static String parseEmail(String email){\n    /*Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\"); \n    String toReturn = sc.next();*/\n    \n    // very different way of solving the qn! \n    // although, it might be simpler to use the String methods substring() and indexOf() \n    int position = email.indexOf(\"@\");\n    String toReturn = email.substring(0,position);\n    return toReturn;\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 43.2, 
    "totalActiveTime" : 836.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:41:13.385+0000"), 
            "code" : "import java.util.*; \n\npublic static String parseEmail(String email){\n    Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\"\");\n    String toReturn = scan.next(); \n    return toReturn; \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(181)
        }, 
        {
            "date" : ISODate("2016-04-23T16:42:10.027+0000"), 
            "code" : "import java.util.*; \n\npublic static String parseEmail(String email){\n    Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\"\");\n    String toReturn = sc.next(); \n    return toReturn; \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 56.2
        }, 
        {
            "date" : ISODate("2016-04-23T16:43:17.206+0000"), 
            "code" : "import java.util.Scanner;\npublic static String parseEmail(String email){\n    Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\");\n    String toReturn = sc.next(); \n    return toReturn; \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 66.6
        }, 
        {
            "date" : ISODate("2016-04-23T16:43:21.394+0000"), 
            "code" : "import java.util.Scanner;\npublic static String parseEmail(String email){\n    Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\");\n    String toReturn = sc.next(); \n    return toReturn; \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.4
        }, 
        {
            "date" : ISODate("2016-04-23T16:43:57.982+0000"), 
            "code" : "import java.util.*;\npublic static String parseEmail(String email){\n    Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\");\n    String toReturn = sc.next(); \n    return toReturn; \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.1
        }, 
        {
            "date" : ISODate("2016-04-23T16:44:23.190+0000"), 
            "code" : "import java.util.*;\n\npublic static String parseEmail(String email){\n    Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\");\n    String toReturn = sc.next(); \n    return toReturn; \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.4
        }, 
        {
            "date" : ISODate("2016-04-23T16:45:34.385+0000"), 
            "code" : "public static String parseEmail(String email){\n    Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\");\n    String toReturn = sc.next(); \n    return toReturn; \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 39.6
        }, 
        {
            "date" : ISODate("2016-04-23T16:46:47.651+0000"), 
            "code" : "public static String parseEmail(String email){\n    Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\");\n    String toReturn = sc.next(); \n    \n    return toReturn;\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 73.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:47:29.323+0000"), 
            "code" : "public static String parseEmail(String email){\n    /*Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\"); \n    String toReturn = sc.next();*/\n    \n    // very different way of solving the qn! \n    // although, it might be simpler to use the String methods substring() and indexOf() \n    int position = email.substring(\"@\");\n    String toReturn = email.indexOf(0,position);\n    return toReturn;\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 321.1
        }, 
        {
            "date" : ISODate("2016-04-24T09:48:12.566+0000"), 
            "code" : "public static String parseEmail(String email){\n    /*Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\"); \n    String toReturn = sc.next();*/\n    \n    // very different way of solving the qn! \n    // although, it might be simpler to use the String methods substring() and indexOf() \n    int position = email.indexOf(\"@\");\n    String toReturn = email.substring(0,position);\n    return toReturn;\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 43.2
        }
    ]
}
{ 
    "_id" : "an6Be2dHgkMzY6R2m", 
    "userId" : "N5BQLGMBRKq32m5Ay", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T16:38:48.439+0000"), 
    "updatedAt" : ISODate("2016-04-23T16:45:08.295+0000"), 
    "code" : "public class Rectangle{\n    private int height;\n    private int width;\n    private int x;\n    private int y;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.height = height;\n        this.width = width;\n        this.x = x;\n        this.y = y;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n\n\n}", 
    "status" : "PASS", 
    "activeTime" : 384.5, 
    "totalActiveTime" : 384.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:45:08.294+0000"), 
            "code" : "public class Rectangle{\n    private int height;\n    private int width;\n    private int x;\n    private int y;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.height = height;\n        this.width = width;\n        this.x = x;\n        this.y = y;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n\n\n}", 
            "status" : "PASS", 
            "activeTime" : 384.5
        }
    ]
}
{ 
    "_id" : "rvT9ZZh6YQQGntbQY", 
    "userId" : "N5BQLGMBRKq32m5Ay", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T16:45:51.385+0000"), 
    "updatedAt" : ISODate("2016-04-23T17:21:43.745+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = rectA.getX();\n    int x2 = rectB.getX();\n    int y1 = rectA.getY();\n    int y2 = rectB.getY();\n    \n    int smallX = x1;\n    if (rectA.getX() > rectB.getX()){\n        smallX = x2;\n    }   \n    \n    int bigX = x1 + rectA.getWidth();\n    if (bigX < x2+ rectB.getWidth()){\n        bigX = x2 + rectB.getWidth();\n    } \n    \n    int smallY = y1;\n    if (rectA.getY() > rectB.getY()){\n        smallY = y2;\n    }   \n    \n    int bigY = y1 + rectA.getHeight();\n    if (bigY < y2+ rectB.getHeight()){\n        bigY = y2 + rectB.getHeight();\n    }\n    \n    int height = bigY - smallY;\n    int width = bigX - smallX;\n    \n    r1 = new Rectangle(smallX, smallY, width, height);\n    \n    return r1;\n}", 
    "status" : "PASS", 
    "activeTime" : 19.9, 
    "totalActiveTime" : 1857.6000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:57:26.968+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = 0;\n    int y1 = 0;\n    int t1 = 0;\n    int w2 = 0;\n    if (rectA.getX() >= rectB.getX()){\n        x1 = rectB.getX();\n    }   else{\n        x1 = rectA.getX();\n    }\n    \n    if (rectA.getY() >= rectB.getY()){\n        y1 = rectB.getY();\n    }   else{\n        y1 = rectA.getY();\n    }\n    \n    int rectAarea = rectA.getX() * rectA.getY();\n    int rectBarea = rectB.getX() * rectB.getY();\n    \n    if(rectAarea >= rectBarea){\n        t1 = rectAarea;\n    }   else{\n        t1 = rectBarea;\n    }\n    \n    y2 = t1/x1;\n    \n    Rectangle r1 = new Rectangle(x1, y1, x1, y2);\n    \n    return r1.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 703.8
        }, 
        {
            "date" : ISODate("2016-04-23T16:57:40.889+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = 0;\n    int y1 = 0;\n    int t1 = 0;\n    int w2 = 0;\n    if (rectA.getX() >= rectB.getX()){\n        x1 = rectB.getX();\n    }   else{\n        x1 = rectA.getX();\n    }\n    \n    if (rectA.getY() >= rectB.getY()){\n        y1 = rectB.getY();\n    }   else{\n        y1 = rectA.getY();\n    }\n    \n    int rectAarea = rectA.getX() * rectA.getY();\n    int rectBarea = rectB.getX() * rectB.getY();\n    \n    if(rectAarea >= rectBarea){\n        t1 = rectAarea;\n    }   else{\n        t1 = rectBarea;\n    }\n    \n    w2 = t1/x1;\n    \n    Rectangle r1 = new Rectangle(x1, y1, x1, w2);\n    \n    return r1.toString();\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-23T16:57:48.703+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = 0;\n    int y1 = 0;\n    int t1 = 0;\n    int w2 = 0;\n    if (rectA.getX() >= rectB.getX()){\n        x1 = rectB.getX();\n    }   else{\n        x1 = rectA.getX();\n    }\n    \n    if (rectA.getY() >= rectB.getY()){\n        y1 = rectB.getY();\n    }   else{\n        y1 = rectA.getY();\n    }\n    \n    int rectAarea = rectA.getX() * rectA.getY();\n    int rectBarea = rectB.getX() * rectB.getY();\n    \n    if(rectAarea >= rectBarea){\n        t1 = rectAarea;\n    }   else{\n        t1 = rectBarea;\n    }\n    \n    w2 = t1/x1;\n    \n    Rectangle r1 = new Rectangle(x1, y1, x1, w2);\n    \n    return r1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.8
        }, 
        {
            "date" : ISODate("2016-04-23T16:57:57.176+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = 0;\n    int y1 = 0;\n    int t1 = 0;\n    int w2 = 0;\n    if (rectA.getX() >= rectB.getX()){\n        x1 = rectB.getX();\n    }   else{\n        x1 = rectA.getX();\n    }\n    \n    if (rectA.getY() >= rectB.getY()){\n        y1 = rectB.getY();\n    }   else{\n        y1 = rectA.getY();\n    }\n    \n    int rectAarea = rectA.getX() * rectA.getY();\n    int rectBarea = rectB.getX() * rectB.getY();\n    \n    if(rectAarea >= rectBarea){\n        t1 = rectAarea;\n    }   else{\n        t1 = rectBarea;\n    }\n    \n    w2 = t1/x1;\n    \n    r1 = new Rectangle(x1, y1, x1, w2);\n    \n    return r1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-04-23T17:16:19.398+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = rectA.getX();\n    int x2 = rectB.getX();\n    int y1 = rectA.getY();\n    int y2 = rectB.getY();\n    \n    int smallX = x1;\n    if (rectA.getX() >= rectB.getX()){\n        smallX = x2;\n    }   \n    \n    int bigX = smallX + rectA.getWidth();\n    if (bigX <= x2+ rectB.getWidth()){\n        bigX = x2 + rectB.getWidth();\n    } \n    \n    int smallY = y1;\n    if (rectA.getY() >= rectB.getY()){\n        smallY = y2;\n    }   \n    \n    int bigY = smallY + rectA.getHeight();\n    if (bigX <= y2+ rectB.getHeight()){\n        bigX = y2 + rectB.getHeight();\n    }\n    \n    int height = bigY - smallY;\n    int width = bigX - smallX\n    \n    r1 = new Rectangle(x1, y1, width, height);\n    \n    return r1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 823.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:16:27.280+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = rectA.getX();\n    int x2 = rectB.getX();\n    int y1 = rectA.getY();\n    int y2 = rectB.getY();\n    \n    int smallX = x1;\n    if (rectA.getX() >= rectB.getX()){\n        smallX = x2;\n    }   \n    \n    int bigX = smallX + rectA.getWidth();\n    if (bigX <= x2+ rectB.getWidth()){\n        bigX = x2 + rectB.getWidth();\n    } \n    \n    int smallY = y1;\n    if (rectA.getY() >= rectB.getY()){\n        smallY = y2;\n    }   \n    \n    int bigY = smallY + rectA.getHeight();\n    if (bigX <= y2+ rectB.getHeight()){\n        bigX = y2 + rectB.getHeight();\n    }\n    \n    int height = bigY - smallY;\n    int width = bigX - smallX;\n    \n    r1 = new Rectangle(x1, y1, width, height);\n    \n    return r1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:17:40.938+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = rectA.getX();\n    int x2 = rectB.getX();\n    int y1 = rectA.getY();\n    int y2 = rectB.getY();\n    \n    int smallX = x1;\n    if (rectA.getX() >= rectB.getX()){\n        smallX = x2;\n    }   \n    \n    int bigX = x1 + rectA.getWidth();\n    if (bigX <= x2+ rectB.getWidth()){\n        bigX = x2 + rectB.getWidth();\n    } \n    \n    int smallY = y1;\n    if (rectA.getY() >= rectB.getY()){\n        smallY = y2;\n    }   \n    \n    int bigY = y1 + rectA.getHeight();\n    if (bigX <= y2+ rectB.getHeight()){\n        bigX = y2 + rectB.getHeight();\n    }\n    \n    int height = bigY - smallY;\n    int width = bigX - smallX;\n    \n    r1 = new Rectangle(x1, y1, width, height);\n    \n    return r1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 49.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:18:09.059+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = rectA.getX();\n    int x2 = rectB.getX();\n    int y1 = rectA.getY();\n    int y2 = rectB.getY();\n    \n    int smallX = x1;\n    if (rectA.getX() >= rectB.getX()){\n        smallX = x2;\n    }   \n    \n    int bigX = x1 + rectA.getWidth();\n    if (bigX <= x2+ rectB.getWidth()){\n        bigX = x2 + rectB.getWidth();\n    } \n    \n    int smallY = y1;\n    if (rectA.getY() >= rectB.getY()){\n        smallY = y2;\n    }   \n    \n    int bigY = y1 + rectA.getHeight();\n    if (bigY <= y2+ rectB.getHeight()){\n        bigY = y2 + rectB.getHeight();\n    }\n    \n    int height = bigY - smallY;\n    int width = bigX - smallX;\n    \n    r1 = new Rectangle(x1, y1, width, height);\n    \n    return r1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 28.1
        }, 
        {
            "date" : ISODate("2016-04-23T17:20:32.688+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = rectA.getX();\n    int x2 = rectB.getX();\n    int y1 = rectA.getY();\n    int y2 = rectB.getY();\n    \n    int smallX = x1;\n    if (rectA.getX() > rectB.getX()){\n        smallX = x2;\n    }   \n    \n    int bigX = x1 + rectA.getWidth();\n    if (bigX <= x2+ rectB.getWidth()){\n        bigX = x2 + rectB.getWidth();\n    } \n    \n    int smallY = y1;\n    if (rectA.getY() > rectB.getY()){\n        smallY = y2;\n    }   \n    \n    int bigY = y1 + rectA.getHeight();\n    if (bigY <= y2+ rectB.getHeight()){\n        bigY = y2 + rectB.getHeight();\n    }\n    \n    int height = bigY - smallY;\n    int width = bigX - smallX;\n    \n    r1 = new Rectangle(x1, y1, width, height);\n    \n    return r1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 143.6
        }, 
        {
            "date" : ISODate("2016-04-23T17:21:23.874+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = rectA.getX();\n    int x2 = rectB.getX();\n    int y1 = rectA.getY();\n    int y2 = rectB.getY();\n    \n    int smallX = x1;\n    if (rectA.getX() > rectB.getX()){\n        smallX = x2;\n    }   \n    \n    int bigX = x1 + rectA.getWidth();\n    if (bigX < x2+ rectB.getWidth()){\n        bigX = x2 + rectB.getWidth();\n    } \n    \n    int smallY = y1;\n    if (rectA.getY() > rectB.getY()){\n        smallY = y2;\n    }   \n    \n    int bigY = y1 + rectA.getHeight();\n    if (bigY <= y2+ rectB.getHeight()){\n        bigY = y2 + rectB.getHeight();\n    }\n    \n    int height = bigY - smallY;\n    int width = bigX - smallX;\n    \n    r1 = new Rectangle(x1, y1, width, height);\n    \n    return r1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 51.2
        }, 
        {
            "date" : ISODate("2016-04-23T17:21:43.745+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null;\n    int x1 = rectA.getX();\n    int x2 = rectB.getX();\n    int y1 = rectA.getY();\n    int y2 = rectB.getY();\n    \n    int smallX = x1;\n    if (rectA.getX() > rectB.getX()){\n        smallX = x2;\n    }   \n    \n    int bigX = x1 + rectA.getWidth();\n    if (bigX < x2+ rectB.getWidth()){\n        bigX = x2 + rectB.getWidth();\n    } \n    \n    int smallY = y1;\n    if (rectA.getY() > rectB.getY()){\n        smallY = y2;\n    }   \n    \n    int bigY = y1 + rectA.getHeight();\n    if (bigY < y2+ rectB.getHeight()){\n        bigY = y2 + rectB.getHeight();\n    }\n    \n    int height = bigY - smallY;\n    int width = bigX - smallX;\n    \n    r1 = new Rectangle(smallX, smallY, width, height);\n    \n    return r1;\n}", 
            "status" : "PASS", 
            "activeTime" : 19.9
        }
    ]
}
{ 
    "_id" : "QTHr6whP4wafqngc5", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T17:23:39.325+0000"), 
    "updatedAt" : ISODate("2016-04-23T17:27:25.022+0000"), 
    "code" : "public static String parseEmail(String email){\n    int atSign = email.indexOf('@');\n    String result = email.substring(0, atSign);\n    return result;\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(13), 
    "totalActiveTime" : 119.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T17:27:12.041+0000"), 
            "code" : "public static String parseEmail(String email){\n    int atSign = email.indexOf('@');\n    String result = email.substring(0, atSign + 1);\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 106.6
        }, 
        {
            "date" : ISODate("2016-04-23T17:27:25.021+0000"), 
            "code" : "public static String parseEmail(String email){\n    int atSign = email.indexOf('@');\n    String result = email.substring(0, atSign);\n    return result;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(13)
        }
    ]
}
{ 
    "_id" : "SobPDgwypKQtoxrH3", 
    "userId" : "Cp9j6PryRY7XDwG8r", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T15:34:05.796+0000"), 
    "updatedAt" : ISODate("2016-04-23T17:31:46.015+0000"), 
    "code" : "public static void printPalindrome(Scanner console) {\n        System.out.print(\"Type one or more words: \");\n        String word = console.nextLine();\n        String word1 = word.toUpperCase();\n        boolean isPalindrome = true;\n        int length = word1.length();\n        int length1 = length;\n        if (length % 2 == 0) {\n            length1 = length / 2;\n        } else {\n            length1 = length / 2 + 1;\n        }\n        if (length > 0) {\n            for (int i = 0; i<= length1;i++) {\n                if(word1.charAt(i)!=word1.charAt(length-1-i)){\n                    isPalindrome = false;\n                }\n            }\n            \n        } else {\n            isPalindrome = false;\n        }\n        if (isPalindrome) {\n            System.out.println(word+\" is a palindrome!\");\n        } else {\n           System.out.println(word+\" is not a palindrome.\"); \n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 423.6, 
    "totalActiveTime" : 423.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T17:31:46.014+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n        System.out.print(\"Type one or more words: \");\n        String word = console.nextLine();\n        String word1 = word.toUpperCase();\n        boolean isPalindrome = true;\n        int length = word1.length();\n        int length1 = length;\n        if (length % 2 == 0) {\n            length1 = length / 2;\n        } else {\n            length1 = length / 2 + 1;\n        }\n        if (length > 0) {\n            for (int i = 0; i<= length1;i++) {\n                if(word1.charAt(i)!=word1.charAt(length-1-i)){\n                    isPalindrome = false;\n                }\n            }\n            \n        } else {\n            isPalindrome = false;\n        }\n        if (isPalindrome) {\n            System.out.println(word+\" is a palindrome!\");\n        } else {\n           System.out.println(word+\" is not a palindrome.\"); \n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 423.6
        }
    ]
}
{ 
    "_id" : "MbcSZMD5p7hXLSZow", 
    "userId" : "6S4oHGNjdgG5fWts7", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T17:44:08.402+0000"), 
    "updatedAt" : ISODate("2016-04-23T17:45:47.632+0000"), 
    "code" : "public static String parseEmail(String email){\n    int lastPos= email.indexOf(\"@\");\n    return email.substring(0,lastPos);\n}", 
    "status" : "PASS", 
    "activeTime" : 95.6, 
    "totalActiveTime" : 95.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T17:45:47.631+0000"), 
            "code" : "public static String parseEmail(String email){\n    int lastPos= email.indexOf(\"@\");\n    return email.substring(0,lastPos);\n}", 
            "status" : "PASS", 
            "activeTime" : 95.6
        }
    ]
}
{ 
    "_id" : "6AgYMJRnW2EgwFvLe", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "m8u4AidaqHqXybizW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T17:46:15.117+0000"), 
    "updatedAt" : ISODate("2016-04-25T06:05:28.750+0000"), 
    "code" : "public static Double doubleInt (int first, int second){\n    double sum = (double)first+second; //int to double\n    return sum;\n}", 
    "status" : "PASS", 
    "activeTime" : 20.2, 
    "totalActiveTime" : 482.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T17:48:17.729+0000"), 
            "code" : "public static Double doubleInt (int first, int second){\n    double sum = (double)first+second;\n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 125.7
        }, 
        {
            "date" : ISODate("2016-04-25T06:05:08.444+0000"), 
            "code" : "public static double doubleInt (int first, int second){\n    double sum = (double)first+second; //int to double\n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 336.3
        }, 
        {
            "date" : ISODate("2016-04-25T06:05:28.750+0000"), 
            "code" : "public static Double doubleInt (int first, int second){\n    double sum = (double)first+second; //int to double\n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 20.2
        }
    ]
}
{ 
    "_id" : "3HnTq5XeQzfEhN8qy", 
    "userId" : "Cp9j6PryRY7XDwG8r", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T18:15:41.054+0000"), 
    "updatedAt" : ISODate("2016-04-23T18:15:41.054+0000")
}
{ 
    "_id" : "JHbixSyYtoYbA2Qv6", 
    "userId" : "uAgTDnJFYMxpGshJq", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T18:57:19.780+0000"), 
    "updatedAt" : ISODate("2016-04-23T18:57:19.780+0000")
}
{ 
    "_id" : "WErBHAhYwwYrfqrax", 
    "userId" : "6S4oHGNjdgG5fWts7", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T02:39:09.566+0000"), 
    "updatedAt" : ISODate("2016-04-24T02:39:09.566+0000")
}
{ 
    "_id" : "8fgSp7QF9vKmFg6bj", 
    "userId" : "6S4oHGNjdgG5fWts7", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T03:22:25.449+0000"), 
    "updatedAt" : ISODate("2016-04-24T03:22:25.449+0000")
}
{ 
    "_id" : "kDcKXtu4khzytag8Z", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T21:04:45.279+0000"), 
    "updatedAt" : ISODate("2016-04-24T08:21:06.119+0000"), 
    "code" : "public static String parseEmail(String email){\n    int stopPoint = email.indexOf(\"@\");\n    return email.substring(0,stopPoint);\n}", 
    "status" : "PASS", 
    "activeTime" : 1.3, 
    "totalActiveTime" : 313.80000000000007, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:10:43.562+0000"), 
            "code" : "public static String parseEmail(String email){\n    int stopPoint = email.indexOf(\"@\");\n    return email.substring(0,stopPoint);\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 212.9
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:44.474+0000"), 
            "code" : "public static String parseEmail(String email){\n    int stopPoint = email.indexOf(\"@\");\n    return email.substring(0,stopPoint);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:45.406+0000"), 
            "code" : "public static String parseEmail(String email){\n    int stopPoint = email.indexOf(\"@\");\n    return email.substring(0,stopPoint);\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 1.5
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:45.801+0000"), 
            "code" : "public static String parseEmail(String email){\n    int stopPoint = email.indexOf(\"@\");\n    return email.substring(0,stopPoint);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:46.483+0000"), 
            "code" : "public static String parseEmail(String email){\n    int stopPoint = email.indexOf(\"@\");\n    return email.substring(0,stopPoint);\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 1.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:47.249+0000"), 
            "code" : "int stopPoint = email.indexOf(\"@\");\n    return email.substring(0,stopPoint);", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:47.682+0000"), 
            "code" : "public static String parseEmail(String email){\n    int stopPoint = email.indexOf(\"@\");\n    return email.substring(0,stopPoint);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:21:06.118+0000"), 
            "code" : "public static String parseEmail(String email){\n    int stopPoint = email.indexOf(\"@\");\n    return email.substring(0,stopPoint);\n}", 
            "status" : "PASS", 
            "activeTime" : 1.3
        }
    ]
}
{ 
    "_id" : "5Wr9xwqs7iS74AaaX", 
    "userId" : "6S4oHGNjdgG5fWts7", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T02:54:38.941+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:13:22.073+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        reutrn width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"++\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 712.2, 
    "totalActiveTime" : 712.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:13:22.073+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        reutrn width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"++\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 712.2
        }
    ]
}
{ 
    "_id" : "4mnpnFc5gn7EpeJwT", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T17:44:52.628+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:13:28.585+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i;\n    for (i = 0; i < a2.size() && (i*2+1) < a1.size(); i++) {    // good logic and clean!\n\t    a1.add(i*2+1, a2.get(i));\n    }\n    //if (i < a2.size()) {    // you don't need the if conditional statement here\n\t    while (i < a2.size()) { // since the while loop already makes use of a conditional statement, executing only if the boolean condition evaluates to true :)\n\t        a1.add(a2.get(i));\n\t        i++;\n\t    }\n    //}\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : NumberInt(121), 
    "totalActiveTime" : 244.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T17:47:15.956+0000"), 
            "code" : "public void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i;\n    for (i = 0; i < a2.size() && (i*2+1) < a1.size(); i++) {\n\t    a1.add(i*2+1, a2.get(i));\n    }\n    if (i < a2.size()) {\n\t    while (i < a2.size()) {\n\t        a1.add(a2.get(i));\n\t        i++;\n\t    }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 62.4
        }, 
        {
            "date" : ISODate("2016-04-23T17:47:23.190+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i;\n    for (i = 0; i < a2.size() && (i*2+1) < a1.size(); i++) {\n\t    a1.add(i*2+1, a2.get(i));\n    }\n    if (i < a2.size()) {\n\t    while (i < a2.size()) {\n\t        a1.add(a2.get(i));\n\t        i++;\n\t    }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 7.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:25.358+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i;\n    for (i = 0; i < a2.size() && (i*2+1) < a1.size(); i++) {    // good logic and clean!\n\t    a1.add(i*2+1, a2.get(i));\n    }\n    if (i < a2.size()) {    // you don't need the if conditional statement here\n\t    while (i < a2.size()) { // since the while loop already makes use of a conditional statement, executing only if the boolean condition evaluates to true :)\n\t        a1.add(a2.get(i));\n\t        i++;\n\t    }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 53.5
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:28.585+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i;\n    for (i = 0; i < a2.size() && (i*2+1) < a1.size(); i++) {    // good logic and clean!\n\t    a1.add(i*2+1, a2.get(i));\n    }\n    //if (i < a2.size()) {    // you don't need the if conditional statement here\n\t    while (i < a2.size()) { // since the while loop already makes use of a conditional statement, executing only if the boolean condition evaluates to true :)\n\t        a1.add(a2.get(i));\n\t        i++;\n\t    }\n    //}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(121)
        }
    ]
}
{ 
    "_id" : "Yi4EC3xGS4g33v6JP", 
    "userId" : "tBRTnCWLCp63vtcx8", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T04:26:14.371+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:13:30.721+0000"), 
    "code" : "public static String parseEmail(String email) {\n    int symbol = email.indexOf(\"@\");\n    return email.substring(0, symbol);\n}", 
    "status" : "PASS", 
    "activeTime" : 69.2, 
    "totalActiveTime" : 201.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:13:29.481+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int symbol = email.indexOf(\"@\");\n    return email.substring(0, symbol);\n}", 
            "status" : "PASS", 
            "activeTime" : 132.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:30.721+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int symbol = email.indexOf(\"@\");\n    return email.substring(0, symbol);\n}", 
            "status" : "PASS", 
            "activeTime" : 69.2
        }
    ]
}
{ 
    "_id" : "oG6Wi7HsgR3zTE6Pg", 
    "userId" : "skeAjiWQ9cA4BLDxs", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T01:59:08.681+0000"), 
    "updatedAt" : ISODate("2016-04-26T05:09:18.291+0000"), 
    "code" : "public static void printPalindrome(String word) {\n    int length = word.length();\n    String s1 = word.substring(0, length/2);\n    String s2 = word.substring(length/2);\n        \n    if (length % 2 == 0) {\n        for (int i = 0; i < length/2; i++) {\n                if (s1.charAt(i) == s2.charAt()\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : NumberInt(12), 
    "totalActiveTime" : 901.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:13:29.717+0000"), 
            "code" : "import java.util.*;\npublic class Test2 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.next();\n        System.out.println(printPalindrome(str));\n    }\n    \n    public static String printPalindrome(String word) {\n        int length = word.length();\n        String s1 = word.substring(0, length/2);\n        String s2 = word.substring(length/2);\n        \n        if (length % 2 == 0) {\n            for (int i = 0; i < length/2; i++) {\n                if (s1.charAt(i) == s2.charAt()\n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 824.5
        }, 
        {
            "date" : ISODate("2016-04-25T07:06:47.369+0000"), 
            "code" : "public static void printPalindrome(String word) {\n    int length = word.length();\n    String s1 = word.substring(0, length/2);\n    String s2 = word.substring(length/2);\n        \n    if (length % 2 == 0) {\n        for (int i = 0; i < length/2; i++) {\n                if (s1.charAt(i) == s2.charAt()\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 65.4
        }, 
        {
            "date" : ISODate("2016-04-26T05:09:18.291+0000"), 
            "code" : "public static void printPalindrome(String word) {\n    int length = word.length();\n    String s1 = word.substring(0, length/2);\n    String s2 = word.substring(length/2);\n        \n    if (length % 2 == 0) {\n        for (int i = 0; i < length/2; i++) {\n                if (s1.charAt(i) == s2.charAt()\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(12)
        }
    ]
}
{ 
    "_id" : "Qx5BDEuSho3EJGNKS", 
    "userId" : "ZwzuuSYKWikrzBcXP", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T01:50:27.423+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:16:33.370+0000"), 
    "code" : "//import java.util.*;\npublic static void printPalindrome (Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String store = \"\";\n    \n    for (int i = input.length()-1; i >= 0; i--){\n        store += input.charAt(i) + \"\";\n    }\n    \n    if(input.equalsIgnoreCase(store)) {\n        System.out.print(input + \" is a palindrome!\");\n    } else {\n        System.out.print(input + \" is not a palindrome.\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 18.7, 
    "totalActiveTime" : 665.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:13:16.936+0000"), 
            "code" : "import java.util.*;\npublic static void printPalindrome (Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String store = \"\";\n    \n    for (int = input.length()-1; i >= 0; i--){\n        store += input.charAt(i) + \"\";\n    }\n    \n    if(input.equalsIgnoreCase(store)) {\n        System.out.print(input + \" is a palindrome!\");\n    } else {\n        System.out.print(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 545.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:14:44.461+0000"), 
            "code" : "import java.util.*;\npublic static void printPalindrome (Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String store = \"\";\n    \n    for (int = input.length()-1; i >= 0; i--){\n        store += input.charAt(i) + \"\";\n    }\n    \n    if(input.equalsIgnoreCase(store)) {\n        System.out.print(input + \" is a palindrome!\");\n    } else {\n        System.out.print(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:15:33.888+0000"), 
            "code" : "//import java.util.*;\npublic static void printPalindrome (Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String store = \"\";\n    \n    for (int = input.length()-1; i >= 0; i--){\n        store += input.charAt(i) + \"\";\n    }\n    \n    if(input.equalsIgnoreCase(store)) {\n        System.out.print(input + \" is a palindrome!\");\n    } else {\n        System.out.print(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 49.6
        }, 
        {
            "date" : ISODate("2016-04-24T05:16:14.279+0000"), 
            "code" : "import java.util.*;\npublic static void printPalindrome (Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String store = \"\";\n    \n    for (int i = input.length()-1; i >= 0; i--){\n        store += input.charAt(i) + \"\";\n    }\n    \n    if(input.equalsIgnoreCase(store)) {\n        System.out.print(input + \" is a palindrome!\");\n    } else {\n        System.out.print(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:16:33.369+0000"), 
            "code" : "//import java.util.*;\npublic static void printPalindrome (Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String store = \"\";\n    \n    for (int i = input.length()-1; i >= 0; i--){\n        store += input.charAt(i) + \"\";\n    }\n    \n    if(input.equalsIgnoreCase(store)) {\n        System.out.print(input + \" is a palindrome!\");\n    } else {\n        System.out.print(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 18.7
        }
    ]
}
{ 
    "_id" : "4ScdHxzYe77rABM97", 
    "userId" : "ZwzuuSYKWikrzBcXP", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T03:46:14.066+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:17:11.560+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x , int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        String result = \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n        return result;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 11.7, 
    "totalActiveTime" : 521.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:13:24.485+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x , int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        String result = \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n        return result;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 509.7
        }, 
        {
            "date" : ISODate("2016-04-24T05:17:11.559+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x , int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        String result = \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n        return result;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 11.7
        }
    ]
}
{ 
    "_id" : "s62YCxh3HT4XY9eDY", 
    "userId" : "kL5wJ3qdYDvbWke7w", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T05:22:08.742+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:22:08.743+0000")
}
{ 
    "_id" : "qGtn9YFf3x5i3LR4T", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "KRnMbq8KZZBf2jSrq", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T05:25:49.303+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:42:53.168+0000"), 
    "code" : "public", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 9.6, 
    "totalActiveTime" : 241.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:26:01.238+0000"), 
            "code" : "ads", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 54.2
        }, 
        {
            "date" : ISODate("2016-04-24T05:42:36.376+0000"), 
            "code" : "adsasd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:42:43.700+0000"), 
            "code" : "adsasd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 135.9
        }, 
        {
            "date" : ISODate("2016-04-24T05:42:53.167+0000"), 
            "code" : "public", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.6
        }
    ]
}
{ 
    "_id" : "zJkKFFrJ3dkSmu3vq", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T06:05:44.788+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:05:44.788+0000")
}
{ 
    "_id" : "4uXQC5ghutQwCaTA3", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T06:09:07.254+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:09:07.254+0000")
}
{ 
    "_id" : "b77D52RMt3AZ7neSC", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "4LMN8uThkZxw4fM9T", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T06:09:12.782+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:09:12.782+0000")
}
{ 
    "_id" : "4ikXtdbQGpaW54eEJ", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T06:09:27.535+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:09:27.535+0000")
}
{ 
    "_id" : "sTPX6kZbrSZqouwRt", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "4gGxjgkpZNbmLKFfL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T06:09:34.777+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:09:34.777+0000")
}
{ 
    "_id" : "3cZT2SMw46Sx5TNnK", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "m8u4AidaqHqXybizW", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T06:09:41.127+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:09:41.127+0000")
}
{ 
    "_id" : "B8zvwjgHmAQrtmWwZ", 
    "userId" : "prcQ7CZ5EtxxnNWBg", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:40:37.651+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:48:30.316+0000"), 
    "code" : "public static String parseEmail(String email){\n    String vaildEmail = \"\";\n    int pos = email.indexOf('@');\n    int pos2 = email.indexOf('@', pos+1);\n    \n    if(pos != -1 && pos2 == -1){\n        vaildEmail = email.substring(0,pos);\n        return  vaildEmail;\n    }\n    return vaildEmail;\n}", 
    "status" : "PASS", 
    "activeTime" : 43.9, 
    "totalActiveTime" : 355.79999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:45:19.441+0000"), 
            "code" : "public static String parseEmail(String email){\n    String vaildEmail = \"\";\n    int pos = email.indexOf('@');\n    int pos2 = pos.indexOf('@', pos+1);\n    \n    if(pos != -1 && pos2 == -1){\n        return  vaildEmail;\n    }\n    return vaildEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 205.7
        }, 
        {
            "date" : ISODate("2016-04-24T06:45:52.311+0000"), 
            "code" : "public static String parseEmail(String email){\n    String vaildEmail = \"\";\n    int pos = email.indexOf('@');\n    int pos2 = email.indexOf('@', pos+1);\n    \n    if(pos != -1 && pos2 == -1){\n        return  vaildEmail;\n    }\n    return vaildEmail;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(28)
        }, 
        {
            "date" : ISODate("2016-04-24T06:47:38.778+0000"), 
            "code" : "public static String parseEmail(String email){\n    String vaildEmail = \"\";\n    int pos = email.indexOf('@');\n    int pos2 = email.indexOf('@', pos+1);\n    \n    if(pos != -1 && pos2 == -1){\n        vaildEmail = email.substring(pos);\n        return  vaildEmail;\n    }\n    return vaildEmail;\n}", 
            "status" : "FAIL", 
            "activeTime" : 78.2
        }, 
        {
            "date" : ISODate("2016-04-24T06:48:30.315+0000"), 
            "code" : "public static String parseEmail(String email){\n    String vaildEmail = \"\";\n    int pos = email.indexOf('@');\n    int pos2 = email.indexOf('@', pos+1);\n    \n    if(pos != -1 && pos2 == -1){\n        vaildEmail = email.substring(0,pos);\n        return  vaildEmail;\n    }\n    return vaildEmail;\n}", 
            "status" : "PASS", 
            "activeTime" : 43.9
        }
    ]
}
{ 
    "_id" : "A2CLvg8DiFLxbTPLo", 
    "userId" : "prcQ7CZ5EtxxnNWBg", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T07:47:44.301+0000"), 
    "updatedAt" : ISODate("2016-04-24T07:54:26.869+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 449.7, 
    "totalActiveTime" : 449.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T07:54:26.868+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 449.7
        }
    ]
}
{ 
    "_id" : "j5DD6vjWNoD6amc8Q", 
    "userId" : "sJHc88TqFpuuuT54p", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:00:53.242+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:05:37.412+0000"), 
    "code" : "public static String parseEmail(String email){\n    int index = email.indexOf('@');\n    return email.substring(0,index);\n}", 
    "status" : "PASS", 
    "activeTime" : 166.6, 
    "totalActiveTime" : 166.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:05:37.411+0000"), 
            "code" : "public static String parseEmail(String email){\n    int index = email.indexOf('@');\n    return email.substring(0,index);\n}", 
            "status" : "PASS", 
            "activeTime" : 166.6
        }
    ]
}
{ 
    "_id" : "wF7Zts3mPo8Dbaef4", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T09:48:19.068+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:48:19.068+0000")
}
{ 
    "_id" : "uCgoJyh8cSuf33iKo", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "wRuC4Ed3LggcjdcH5", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:08:49.938+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:05:36.274+0000"), 
    "code" : "public static String printPattern(String word, char separator) {\n        String rtn = \"\";\n        \n        if(word != null){// to counter null pointer error \n            //if(word.length() != 0){ //redundant but yeah why not\n            int wordLength = word.length(); // self-explainatory \n            for(int i = 0; i < wordLength; i++){ //for the length of this word...\n                char currentChar = word.charAt(i); //grab the current char \n                rtn += currentChar; //concat to return value the first char\n                if(i != wordLength-1){ // and if this is not the last char of the word...\n                    rtn+= separator; // add the seperator, basic fencepost thing\n                }\n            }\n            //}\n        }\n        \n        return rtn;\n    }", 
    "status" : "PASS", 
    "activeTime" : NumberInt(24), 
    "totalActiveTime" : NumberInt(24), 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:05:36.273+0000"), 
            "code" : "public static String printPattern(String word, char separator) {\n        String rtn = \"\";\n        \n        if(word != null){// to counter null pointer error \n            //if(word.length() != 0){ //redundant but yeah why not\n            int wordLength = word.length(); // self-explainatory \n            for(int i = 0; i < wordLength; i++){ //for the length of this word...\n                char currentChar = word.charAt(i); //grab the current char \n                rtn += currentChar; //concat to return value the first char\n                if(i != wordLength-1){ // and if this is not the last char of the word...\n                    rtn+= separator; // add the seperator, basic fencepost thing\n                }\n            }\n            //}\n        }\n        \n        return rtn;\n    }", 
            "status" : "PASS", 
            "activeTime" : NumberInt(24)
        }
    ]
}
{ 
    "_id" : "dgJGHsQS3smtg9Trm", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:51:47.316+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:30:01.294+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" +getX()+ \",y=\" + getY()+ \",width=\" + getWidth() + \",height=\" + getHeight() + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 11.1, 
    "totalActiveTime" : 1193.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:28:22.150+0000"), 
            "code" : "public class Rectangle{\n    \n    public Rectangle(int x, int y, int width, int height){\n        Rectangle = new Rectangle();\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" +getX()+ \",y=\" + getY()+ \",Width\" + getWidth() + \",Height\" + getHeight() + \"]\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1094.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:29:26.519+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" +getX()+ \",y=\" + getY()+ \",Width\" + getWidth() + \",Height\" + getHeight() + \"]\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(64)
        }, 
        {
            "date" : ISODate("2016-04-24T10:29:50.198+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" +getX()+ \",y=\" + getY()+ \",Width=\" + getWidth() + \",Height=\" + getHeight() + \"]\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 23.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:30:01.293+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" +getX()+ \",y=\" + getY()+ \",width=\" + getWidth() + \",height=\" + getHeight() + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 11.1
        }
    ]
}
{ 
    "_id" : "ksezNGZp7fdTdKn63", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "m8u4AidaqHqXybizW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:43:01.684+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:44:53.239+0000"), 
    "code" : "public static double doubleInt(int num1, int num2){\n    double sum = (double)(num1 + num2);\n    return sum;\n}", 
    "status" : "PASS", 
    "activeTime" : 16.1, 
    "totalActiveTime" : 118.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:44:36.902+0000"), 
            "code" : "public static double doubleInt(int num1, int num2){\n    return sum = (double)(num1 + num2);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 102.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:44:53.239+0000"), 
            "code" : "public static double doubleInt(int num1, int num2){\n    double sum = (double)(num1 + num2);\n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 16.1
        }
    ]
}
{ 
    "_id" : "X8CZ8NJQm4MfQqoDZ", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:15:16.320+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:54:00.370+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    int x2 = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    int y1 = Math.min(rectA.getY(), rectB.getY());\n    int y2 = Math.max(rectA.getY() + rectA.getHeight(), rectB.getY() + rectB.getHeight());\n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n}", 
    "status" : "PASS", 
    "activeTime" : 52.9, 
    "totalActiveTime" : 2034.6999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:24:30.890+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //dont understand what the question wants\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 524.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:24:53.352+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //dont understand what the question wants\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.2
        }, 
        {
            "date" : ISODate("2016-04-24T09:53:02.559+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //dont understand what the question wants\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 972.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:34:30.897+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //dont understand what the question wants\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 2.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:36:43.756+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    System.out.println(rectA.getheight());\n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 56.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:37:01.792+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    System.out.println(rectA.getHeight());\n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:37:51.210+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 27.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:45:09.454+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    System.out.println(rectA.getHeight());\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 161.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:52:07.446+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    int x2 = Math.max(x + width, r.x + r.width);\n    int y1 = Math.min(y, r.y);\n    int y2 = Math.max(y + height, r.y + r.height);\n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 137.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:52:59.446+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    int x2 = Math.max(rectA.getX() + rectA.getWidth, rectB.getX() + rectB.getWidth());\n    int y1 = Math.min(y, r.y);\n    int y2 = Math.max(y + height, r.y + r.height);\n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:53:07.383+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    int x2 = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    int y1 = Math.min(y, r.y);\n    int y2 = Math.max(y + height, r.y + r.height);\n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.8
        }, 
        {
            "date" : ISODate("2016-04-24T10:54:00.369+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    int x2 = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    int y1 = Math.min(rectA.getY(), rectB.getY());\n    int y2 = Math.max(rectA.getY() + rectA.getHeight(), rectB.getY() + rectB.getHeight());\n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n}", 
            "status" : "PASS", 
            "activeTime" : 52.9
        }
    ]
}
{ 
    "_id" : "DbWEQKBjsszGDG7yc", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-22T07:44:07.233+0000"), 
    "updatedAt" : ISODate("2016-04-24T11:28:43.342+0000"), 
    "code" : "public class Adder{\n    \n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 9.6, 
    "totalActiveTime" : 9.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:28:43.341+0000"), 
            "code" : "public class Adder{\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.6
        }
    ]
}
{ 
    "_id" : "uwEwoK2AJqXtjKfiw", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T11:52:38.601+0000"), 
    "updatedAt" : ISODate("2016-04-24T11:56:31.179+0000"), 
    "code" : "public static int power(int base,int exponent){\n    int power = 1;\n    if(exponent == 0){\n        return 1;\n    }\n    for(int i=1;i<=exponent;i++){\n        power *= base; \n    }\n    return power;\n}", 
    "status" : "PASS", 
    "activeTime" : 234.3, 
    "totalActiveTime" : 234.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:56:31.179+0000"), 
            "code" : "public static int power(int base,int exponent){\n    int power = 1;\n    if(exponent == 0){\n        return 1;\n    }\n    for(int i=1;i<=exponent;i++){\n        power *= base; \n    }\n    return power;\n}", 
            "status" : "PASS", 
            "activeTime" : 234.3
        }
    ]
}
{ 
    "_id" : "eEiWnik3XDxvgocFt", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T12:06:07.438+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:06:07.438+0000")
}
{ 
    "_id" : "Cn8Kg5nf7FsBLtCPm", 
    "userId" : "mzEYkra6nhsvCgSH7", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T13:46:20.676+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:46:20.676+0000")
}
{ 
    "_id" : "2j2puzxFbgipewM6u", 
    "userId" : "BnQfkFwW6XZvrKmrn", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T14:08:24.934+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:11:09.689+0000"), 
    "code" : "public static String parseEmail(String email){\n    int num=email.indexOf('@');\n    return email.substring(0,num);\n}", 
    "status" : "PASS", 
    "activeTime" : 152.1, 
    "totalActiveTime" : 152.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:11:09.689+0000"), 
            "code" : "public static String parseEmail(String email){\n    int num=email.indexOf('@');\n    return email.substring(0,num);\n}", 
            "status" : "PASS", 
            "activeTime" : 152.1
        }
    ]
}
{ 
    "_id" : "RLSjZ55YynzmE9r5M", 
    "userId" : "mzEYkra6nhsvCgSH7", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T14:19:45.226+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:19:45.226+0000")
}
{ 
    "_id" : "bFPwKPMx6RHmhGwDE", 
    "userId" : "BnQfkFwW6XZvrKmrn", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T15:30:11.741+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:30:11.741+0000")
}
{ 
    "_id" : "5KMSRhxKXp6kA4njj", 
    "userId" : "npjNBBuP23XiG7zn3", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T18:09:52.940+0000"), 
    "updatedAt" : ISODate("2016-04-24T18:09:52.940+0000")
}
{ 
    "_id" : "Erxxvr5n4pYRu9gZ7", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T19:41:28.883+0000"), 
    "updatedAt" : ISODate("2016-04-24T19:41:28.883+0000")
}
{ 
    "_id" : "zszmXe2i86w89AjaX", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T19:42:33.351+0000"), 
    "updatedAt" : ISODate("2016-04-24T19:42:33.351+0000")
}
{ 
    "_id" : "vmNEbQAhKdcGcrTYf", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:06:14.960+0000"), 
    "updatedAt" : ISODate("2016-04-25T08:41:58.375+0000"), 
    "code" : "public static integer power(int base, int exponent){\n    int ans = (int)Math.pow(base,exponent); //math must be uppercase.\n                                            //double to integer use (int) not (Integer)\n    return ans;\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 361.1, 
    "totalActiveTime" : 711.8000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:41:31.287+0000"), 
            "code" : "public static Integer power(int base, int exponent){\n    int ans = math.power(base,exponent);\n    return ans;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 248.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:31.480+0000"), 
            "code" : "public static Integer power(int base, int exponent){\n    int ans = math.pow(base,exponent);\n    return ans;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:48:32.747+0000"), 
            "code" : "public static Integer power(int base, int exponent){\n    int ans = math.pow(base,exponent);\n    return ans;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:49:21.831+0000"), 
            "code" : "import java.lang.*;\npublic static Integer power(int base, int exponent){\n    int ans = math.pow(base,exponent);\n    return ans;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.5
        }, 
        {
            "date" : ISODate("2016-04-24T12:49:52.909+0000"), 
            "code" : "public static Integer power(int base, int exponent){\n    int ans = Math.pow(base,exponent);\n    return ans;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.1
        }, 
        {
            "date" : ISODate("2016-04-24T12:50:22.479+0000"), 
            "code" : "public static Integer power(int base, int exponent){\n    int ans = (Integer)Math.pow(base,exponent);\n    return ans;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.6
        }, 
        {
            "date" : ISODate("2016-04-24T12:50:57.935+0000"), 
            "code" : "public static Integer power(int base, int exponent){\n    int ans = (int)Math.pow(base,exponent);\n    return ans;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(12)
        }, 
        {
            "date" : ISODate("2016-04-25T08:41:58.374+0000"), 
            "code" : "public static integer power(int base, int exponent){\n    int ans = (int)Math.pow(base,exponent); //math must be uppercase.\n                                            //double to integer use (int) not (Integer)\n    return ans;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 361.1
        }
    ]
}
{ 
    "_id" : "JNfdPz9SiSsJdkgtu", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-25T13:38:22.565+0000"), 
    "updatedAt" : ISODate("2016-04-25T13:41:03.108+0000"), 
    "code" : "public int power(int base, int exponent){\n    int sum = 1;\n    for(int i=0;i<exponent;i++){\n        sum *= base;\n    }\n    return sum;\n}", 
    "status" : "PASS", 
    "activeTime" : 35.1, 
    "totalActiveTime" : 172.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T13:39:56.696+0000"), 
            "code" : "public int power(int base, int exponent){\n    int sum = 0;\n    for(int i=0;i<base;i++){\n        sum *= exponent;\n    }\n    return sum;\n}", 
            "status" : "FAIL", 
            "activeTime" : 105.8
        }, 
        {
            "date" : ISODate("2016-04-25T13:40:28.015+0000"), 
            "code" : "public int power(int base, int exponent){\n    int sum = 1;\n    for(int i=0;i<base;i++){\n        sum *= exponent;\n    }\n    return sum;\n}", 
            "status" : "FAIL", 
            "activeTime" : 31.3
        }, 
        {
            "date" : ISODate("2016-04-25T13:41:03.107+0000"), 
            "code" : "public int power(int base, int exponent){\n    int sum = 1;\n    for(int i=0;i<exponent;i++){\n        sum *= base;\n    }\n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 35.1
        }
    ]
}
{ 
    "_id" : "Yfpnk8ZY7gzLKjiLC", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "4gGxjgkpZNbmLKFfL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-25T11:31:31.583+0000"), 
    "updatedAt" : ISODate("2016-04-25T13:41:19.244+0000"), 
    "code" : "public void flippedTriangle(int height){\n    for(int i=0; i<height; i++){\n        for(int j=height-1 ; j>i; j--){\n            System.out.print(\" \");\n        }\n        for(int k=1; k<=height;k++){\n            System.out.print(\"*\");\n        }\n        System.out.println(\"\");\n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : 9.4, 
    "totalActiveTime" : 3140.2000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T11:36:47.678+0000"), 
            "code" : "public void flippedTriangle(int height){\n    for(int i=0; i<height; i++){\n        for(int j=0 ; j< height; j++){\n            System.out.print(\" \");\n        }\n        System.out.print(\"*\");\n        system.out.println();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(319)
        }, 
        {
            "date" : ISODate("2016-04-25T11:37:03.594+0000"), 
            "code" : "public void flippedTriangle(int height){\n    for(int i=0; i<height; i++){\n        for(int j=0 ; j< height; j++){\n            System.out.print(\" \");\n        }\n        System.out.print(\"*\");\n        System.out.println();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.7
        }, 
        {
            "date" : ISODate("2016-04-25T12:45:49.443+0000"), 
            "code" : "public void flippedTriangle(int height){\n    for(int i=0; i<height; i++){\n        for(int j=0 ; j< height; j++){\n            System.out.print(\" \");\n        }\n        System.out.print(\"*\");\n        System.out.println(\"\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 2794.3
        }, 
        {
            "date" : ISODate("2016-04-25T13:38:10.724+0000"), 
            "code" : "public void flippedTriangle(int height){\n    for(int i=0; i<height; i++){\n        for(int j=height-1 ; j>i; j--){\n            System.out.print(\" \");\n        }\n        for(int k=1; k<=height;k++){\n            System.out.print(\"*\");\n        }\n        System.out.println(\"\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 1.8
        }, 
        {
            "date" : ISODate("2016-04-25T13:41:19.243+0000"), 
            "code" : "public void flippedTriangle(int height){\n    for(int i=0; i<height; i++){\n        for(int j=height-1 ; j>i; j--){\n            System.out.print(\" \");\n        }\n        for(int k=1; k<=height;k++){\n            System.out.print(\"*\");\n        }\n        System.out.println(\"\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.4
        }
    ]
}
{ 
    "_id" : "aCns7D3XXwbXQ7Z85", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-25T13:41:29.854+0000"), 
    "updatedAt" : ISODate("2016-04-25T13:41:29.854+0000")
}
{ 
    "_id" : "tyshf6ZMWg2KCXSqa", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-25T14:16:39.796+0000"), 
    "updatedAt" : ISODate("2016-04-25T14:16:39.796+0000")
}
{ 
    "_id" : "FE6qNb35ghMhivFkb", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-25T14:18:51.978+0000"), 
    "updatedAt" : ISODate("2016-04-25T14:18:51.978+0000")
}
{ 
    "_id" : "BJbgsP2zPibjZQJ4K", 
    "userId" : "sJHc88TqFpuuuT54p", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T02:15:28.721+0000"), 
    "updatedAt" : ISODate("2016-04-26T02:15:28.731+0000")
}
{ 
    "_id" : "Lbt4Mpb2EAg7M6JL5", 
    "userId" : "jY3HQTQ3dYhv8vib8", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T04:48:39.480+0000"), 
    "updatedAt" : ISODate("2016-04-26T04:59:37.467+0000"), 
    "code" : "public static String parseEmail (String email) {\n    int index = email.indexOf('@');\n    String toReturn = email.substring(0, index);\n    return toReturn;\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 13.1, 
    "totalActiveTime" : 154.29999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T04:59:24.139+0000"), 
            "code" : "public String parseEmail (String email) {\n    int index = email.indexOf('@');\n    String toReturn = email.substring(0, index);\n    return toReturn;\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 141.2
        }, 
        {
            "date" : ISODate("2016-04-26T04:59:37.466+0000"), 
            "code" : "public static String parseEmail (String email) {\n    int index = email.indexOf('@');\n    String toReturn = email.substring(0, index);\n    return toReturn;\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 13.1
        }
    ]
}
{ 
    "_id" : "DzzWDexG9s8CaKJRS", 
    "userId" : "dPGDwJc58vokTNtKk", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T07:10:35.888+0000"), 
    "updatedAt" : ISODate("2016-04-26T07:10:35.888+0000")
}
{ 
    "_id" : "NmJchvKXhpTD8SDDT", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "4gGxjgkpZNbmLKFfL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T09:43:04.911+0000"), 
    "updatedAt" : ISODate("2016-04-26T09:43:04.911+0000")
}
{ 
    "_id" : "qzM5aXrEqN4YAkGHQ", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T10:59:12.034+0000"), 
    "updatedAt" : ISODate("2016-04-26T10:59:12.034+0000")
}
{ 
    "_id" : "ccXa2rxs7Q9Pvcin4", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T15:21:45.905+0000"), 
    "updatedAt" : ISODate("2016-04-26T15:21:45.906+0000")
}
{ 
    "_id" : "a9pvK39TuqokKNLQt", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T15:28:23.902+0000"), 
    "updatedAt" : ISODate("2016-04-26T15:28:23.902+0000")
}
{ 
    "_id" : "eZYqPZssk8k8HNdbq", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T23:45:44.090+0000"), 
    "updatedAt" : ISODate("2016-04-26T23:45:44.090+0000")
}
{ 
    "_id" : "4n4RE4Dg2x5TJf7Km", 
    "userId" : "kwdEpPyHJpHyKZNw4", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T23:46:12.744+0000"), 
    "updatedAt" : ISODate("2016-04-26T23:46:12.745+0000")
}
{ 
    "_id" : "s3mDqwWhFMwyHMoEF", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "Xcse7928DCT6Kergx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-28T10:13:47.140+0000"), 
    "updatedAt" : ISODate("2016-04-28T10:13:47.140+0000")
}
{ 
    "_id" : "QBMcbmzCcqpfM6AYk", 
    "userId" : "8DSANwmE8m6iARS9v", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:24:10.295+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:24:10.295+0000")
}
{ 
    "_id" : "FQaWbfkttZDs4kNTS", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:48:09.238+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:09.238+0000")
}
{ 
    "_id" : "qrxJDg3MuMHK9qZtD", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T12:49:28.349+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:58:47.015+0000"), 
    "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n        for(int j=length; j<a1.size(); j++){\n            newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n        } \n      \n    \n    }else{\n        for(int j=length; j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n          \n    }\n    /*a1.clear();\n    for(int k = 0; k<newList.size(); k++){\n        a1.add(newList.get(k));\n    }*/\n    return newList;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
    "status" : "FAIL", 
    "activeTime" : 494.4, 
    "totalActiveTime" : 4515.799999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T15:02:25.685+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n \n    if (a1.size()>a2.size)\n          int length = a1.size();\n          ArrayList<Integer> a3=a1.clone();\n          a3.removeRange(a2.size()+1,a1.size());\n    else\n          int length = a2.size();\n           ArrayList<Integer> a3=a2.clone();\n          a3.removeRange(a1.size()+1,a2.size());\n    \n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.charAt(i));\n        newList.add(a2.charAt(i));\n        \n    }\n    newList.addAll(a3);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.8
        }, 
        {
            "date" : ISODate("2016-04-23T15:03:12.160+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size){\n          length = a1.size();\n          ArrayList<Integer> a3=a1.clone();\n          a3.removeRange(a2.size()+1,a1.size());\n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3=a2.clone();\n          a3.removeRange(a1.size()+1,a2.size());\n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.charAt(i));\n        newList.add(a2.charAt(i));\n        \n    }\n    newList.addAll(a3);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 46.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:03:39.018+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size){\n          length = a1.size();\n          ArrayList<Integer> a3=a1.clone();\n          a3.removeRange(a2.size()+1,a1.size());\n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3=a2.clone();\n          a3.removeRange(a1.size()+1,a2.size());\n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.charAt(i));\n        newList.add(a2.charAt(i));\n        \n    }\n    newList.addAll(a3);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:03:51.885+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3=a1.clone();\n          a3.removeRange(a2.size()+1,a1.size());\n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3=a2.clone();\n          a3.removeRange(a1.size()+1,a2.size());\n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.charAt(i));\n        newList.add(a2.charAt(i));\n        \n    }\n    newList.addAll(a3);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.9
        }, 
        {
            "date" : ISODate("2016-04-23T15:04:18.340+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3=a1;\n          a3.removeRange(a2.size()+1,a1.size());\n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3=a2;\n          a3.removeRange(a1.size()+1,a2.size());\n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.charAt(i));\n        newList.add(a2.charAt(i));\n        \n    }\n    newList.addAll(a3);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.4
        }, 
        {
            "date" : ISODate("2016-04-23T15:06:44.534+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3=a1;\n          a3.subList(a2.size()+1,a1.size()).clear();\n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3=a2;\n          a3.subList(a1.size()+1,a2.size()).clear();\n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.charAt(i));\n        newList.add(a2.charAt(i));\n        \n    }\n    newList.addAll(a3);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 68.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:07:55.397+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3=a1;\n          a3.subList(a2.size()+1,a1.size()).clear();\n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3=a2;\n          a3.subList(a1.size()+1,a2.size()).clear();\n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.2
        }, 
        {
            "date" : ISODate("2016-04-23T15:08:34.055+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3=a1;\n          a3=a3.subList(a2.size()+1,a1.size()).clear();\n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3=a2;\n          a3=a3.subList(a1.size()+1,a2.size()).clear();\n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.8
        }, 
        {
            "date" : ISODate("2016-04-23T15:12:42.425+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3=a1;\n          \n        \n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3=a2;\n         \n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 150.9
        }, 
        {
            "date" : ISODate("2016-04-23T15:13:14.977+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new a3();\n          a3=a1;\n          \n        \n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3= new a3();\n           a3 = a2;\n         \n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.6
        }, 
        {
            "date" : ISODate("2016-04-23T15:13:35.496+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          \n        \n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3= new ArrayList<Integer>();\n           a3 = a2;\n         \n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:13:58.981+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          \n        \n    }else{\n          length = a2.size();\n           ArrayList<Integer> a3= new ArrayList<Integer>();\n           a3 = a2;\n         \n    }\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.6
        }, 
        {
            "date" : ISODate("2016-04-23T15:17:03.308+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length = 0;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          \n        \n    }else{\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n         \n    }\n    System.out.println(a3);\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 110.6
        }, 
        {
            "date" : ISODate("2016-04-23T15:17:18.176+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          \n        \n    }else{\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n         \n    }\n    System.out.println(a3);\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.9
        }, 
        {
            "date" : ISODate("2016-04-23T15:19:40.966+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n         \n    }\n    System.out.println(a3);\n    ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 67.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:20:14.391+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n         \n    }\n\n    /*ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    return newList;*/\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 33.2
        }, 
        {
            "date" : ISODate("2016-04-23T15:21:11.218+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    /*ArrayList<Integer> newList = new ArrayList();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    return newList;*/\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 56.8
        }, 
        {
            "date" : ISODate("2016-04-23T15:21:50.911+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    ArrayList<Integer> newList = new ArrayList();\n    /*\n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    return newList;*/\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:22:09.013+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    /*\n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    newList.addAll(a3);\n    return newList;*/\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 18.1
        }, 
        {
            "date" : ISODate("2016-04-23T15:22:24.371+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    /*\n    newList.addAll(a3);\n    return newList;*/\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:23:10.725+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    /*\n    newList.addAll(a3);\n    return newList;*/\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 46.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:23:24.723+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:23:56.205+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    System.out.println(a3);\n    /*\n    newList.addAll(a3);\n    return newList;*/\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:24:07.692+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a1.size();\n          ArrayList<Integer> a3= new ArrayList<Integer>();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    /*\n    newList.addAll(a3);\n    return newList;*/\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.2
        }, 
        {
            "date" : ISODate("2016-04-23T15:24:26.737+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    /*\n    newList.addAll(a3);\n    return newList;*/\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 19.1
        }, 
        {
            "date" : ISODate("2016-04-23T15:24:35.017+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          a3=a1;\n          System.out.println(a3);\n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n        System.out.println(a3);\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:25:14.682+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          a3=a1;\n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 39.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:26:42.773+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          a3=a1;\n          for(int j=0; j<a1.size;j++){\n              a3.remove(j);;\n          }\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a2.size;j++){\n              a3.remove(j);;\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 88.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:27:01.776+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          a3=a1;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);;\n          }\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a2.size();j++){\n              a3.remove(j);;\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 18.8
        }, 
        {
            "date" : ISODate("2016-04-23T15:27:57.380+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){\n          length = a2.size();\n          a3=a1;\n          for(int j=0; j<a2.size();j++){\n              a3.remove(j);;\n          }\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);;\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 55.6
        }, 
        {
            "date" : ISODate("2016-04-23T15:29:47.526+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          a3=a1;// a3 = 55, 44,33\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);\n          }\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 110.2
        }, 
        {
            "date" : ISODate("2016-04-23T15:31:15.097+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          a3=a1;// a3 = 55, 44,33\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(a3);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 59.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:31:31.214+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          a3=a1;// a3 = 55, 44,33\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.2
        }, 
        {
            "date" : ISODate("2016-04-23T15:31:51.109+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          a3=a1;// a3 = 55, 44,33\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 19.8
        }, 
        {
            "date" : ISODate("2016-04-23T15:32:34.452+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          a3=a1;// a3 = 55, 44,33\n          for(int j=0; j<=a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 43.4
        }, 
        {
            "date" : ISODate("2016-04-23T15:32:52.016+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          a3=a1;// a3 = 55, 44,33\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:33:21.947+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          a3=a1;// a3 = 55, 44,33\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          System.out.prinln(\"this is\"+a1);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.1
        }, 
        {
            "date" : ISODate("2016-04-23T15:33:30.873+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          a3=a1;// a3 = 55, 44,33\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          System.out.println(\"this is\"+a1);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 8.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:36:58.055+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          \n        for (int i = 0; i < a1.length; i++) {\n            a3[i] = a1[i];\n        }\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          System.out.println(\"this is\"+a1);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(130)
        }, 
        {
            "date" : ISODate("2016-04-23T15:37:12.988+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          \n        for (int i = 0; i < a1.size(); i++) {\n            a3[i] = a1[i];\n        }\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          System.out.println(\"this is\"+a1);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.9
        }, 
        {
            "date" : ISODate("2016-04-23T15:38:06.874+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          \n        a3=a1.clone();\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          System.out.println(\"this is\"+a1);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.7
        }, 
        {
            "date" : ISODate("2016-04-23T15:39:32.421+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          \n        Collections.copy(a1,a3);\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          System.out.println(\"this is\"+a1);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 20.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:39:45.397+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n    //a1= 55, 44,33 //a2= 8, 9\n    if (a1.size()>a2.size()){ //3 >2\n          length = a2.size(); //length = 2\n          \n        Collections.copy(a3,a1);\n          for(int j=0; j<a2.size();j++){//a2.size = 2\n              a3.remove(j);//a3.remove(0)//a3.remove(1)\n          }\n          System.out.println(\"This is\"+a3);\n          System.out.println(\"this is\"+a1);\n          \n   \n        \n    }else{\n          length = a1.size();\n          a3 = a2;\n          for(int j=0; j<a1.size();j++){\n              a3.remove(j);\n          }\n\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    \n    newList.addAll(a3);\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(13)
        }, 
        {
            "date" : ISODate("2016-04-23T15:47:38.418+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n     ArrayList<Integer> a3= new ArrayList<Integer>();\n\n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    \n    }else{\n          length = a1.size();\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a1.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 172.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:47:55.443+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n\n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    \n    }else{\n          length = a1.size();\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a1.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(17)
        }, 
        {
            "date" : ISODate("2016-04-23T15:48:22.756+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n\n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    \n    }else{\n          length = a1.size();\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a1.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 27.4
        }, 
        {
            "date" : ISODate("2016-04-23T15:49:14.774+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n\n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    \n    }else{\n          length = a1.size();\n    }\n\n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(52)
        }, 
        {
            "date" : ISODate("2016-04-23T15:50:02.706+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n          System.out.println(\"a1 longer\");\n    \n    }else{\n          length = a1.size();\n          System.out.println(\"a2 longer\");\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        newList.add(a2.get(i));\n        \n    }\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 47.9
        }, 
        {
            "date" : ISODate("2016-04-23T15:50:49.725+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n          System.out.println(\"a1 longer\");\n    \n    }else{\n          length = a1.size();\n          System.out.println(\"a2 longer\");\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        System.out.println(\"added\"+a2.get(i))\n        \n    }\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n    return newList;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:50:59.292+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n          System.out.println(\"a1 longer\");\n    \n    }else{\n          length = a1.size();\n          System.out.println(\"a2 longer\");\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        System.out.println(\"added\"+a2.get(i));\n        \n    }\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 9.4
        }, 
        {
            "date" : ISODate("2016-04-23T15:51:47.925+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n          System.out.println(\"a1 longer\");\n    \n    }else{\n          length = a1.size();\n          System.out.println(\"a2 longer\");\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        System.out.println(\"added\"+a2.get(i));\n        \n    }\n    System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 48.5
        }, 
        {
            "date" : ISODate("2016-04-23T15:52:38.342+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n          System.out.println(\"a1 longer\");\n    \n    }else{\n          length = a1.size();\n          System.out.println(\"a2 longer\");\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        System.out.println(\"added\"+a2.get(i));\n        \n    }\n    System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              System.out.println(\"added2\"+a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 50.4
        }, 
        {
            "date" : ISODate("2016-04-23T15:53:12.495+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n          System.out.println(\"a1 longer\");\n    \n    }else{\n          length = a1.size();\n          System.out.println(\"a2 longer\");\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        System.out.println(\"added\"+a2.get(i));\n        \n    }\n    System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              System.out.println(\"added2\"+a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n     System.out.println(newList);\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 34.2
        }, 
        {
            "date" : ISODate("2016-04-23T15:55:28.692+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n    //System.out.println(newList);\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 136.4
        }, 
        {
            "date" : ISODate("2016-04-23T15:55:51.996+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          }\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n    }\n    System.out.println(newList);\n    return newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 23.2
        }, 
        {
            "date" : ISODate("2016-04-23T17:34:41.906+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          }\n          return newList;\n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          return newList;\n    }\n \n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 81.2
        }, 
        {
            "date" : ISODate("2016-04-23T17:35:28.922+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          }\n      \n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          \n    }\n    System.out.println(newList);\n    return newList;\n \n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(47)
        }, 
        {
            "date" : ISODate("2016-04-24T07:09:59.157+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          } \n      \n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          \n    }\n    a1 = newList;\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(587)
        }, 
        {
            "date" : ISODate("2016-04-24T14:14:54.105+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          } \n      \n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          \n    }\n    a1 = newList;\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(416)
        }, 
        {
            "date" : ISODate("2016-04-24T14:16:48.527+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          } \n      \n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          \n    }\n    for(int j = 0; j<newList.size(); j++){\n        a1.set(j, newList.get(j));\n    }\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 85.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:17:36.654+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          } \n      \n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          \n    }\n    /*for(int j = 0; j<newList.size(); j++){\n        a1.set(j, newList.get(j));\n    }*/\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 48.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:18:33.959+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          } \n      \n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          \n    }\n    for(int k = 0; j<newList.size(); k++){\n        a1.set(j, newList.get(j));\n    }\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.1
        }, 
        {
            "date" : ISODate("2016-04-24T14:18:44.710+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          } \n      \n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          \n    }\n    for(int k = 0; k<newList.size(); k++){\n        a1.set(j, newList.get(j));\n    }\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:19:02.579+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          } \n      \n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          \n    }\n    for(int k = 0; k<newList.size(); k++){\n        a1.set(k, newList.get(k));\n    }\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-04-24T14:19:40.211+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n          for(int j=length; j<a1.size(); j++){\n              newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n          } \n      \n    \n    }else{\n          for(int j=length; j<a2.size(); j++){\n              newList.add(a2.get(j));\n          }\n          \n    }\n    for(int k = 1; k<newList.size(); k++){\n        a1.set(k, newList.get(k));\n    }\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 37.7
        }, 
        {
            "date" : ISODate("2016-04-24T14:24:24.009+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n        for(int j=length; j<a1.size(); j++){\n            newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n        } \n      \n    \n    }else{\n        for(int j=length; j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n          \n    }\n    a1.clear();\n    for(int k = 0; k<newList.size(); k++){\n        a1.add(newList.get(k));\n    }\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 258.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:58:47.014+0000"), 
            "code" : "//your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n        for(int j=length; j<a1.size(); j++){\n            newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n        } \n      \n    \n    }else{\n        for(int j=length; j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n          \n    }\n    /*a1.clear();\n    for(int k = 0; k<newList.size(); k++){\n        a1.add(newList.get(k));\n    }*/\n    return newList;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 494.4
        }
    ]
}
{ 
    "_id" : "TszasFYuE6dRkvHrF", 
    "userId" : "47MxiJWsWkBezecN9", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T16:32:28.083+0000"), 
    "updatedAt" : ISODate("2016-04-24T07:18:36.442+0000"), 
    "code" : "//very nice naming conventions! keep it up! you used the efficient method too\n//however, code style needs work, especially indentation\n\npublic static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String input = console.nextLine();\n    String inputUpper = input.toUpperCase();\n    int wordLength = inputUpper.length();\n    \n    String toReturn = \"\";\n    boolean ifPalindrome = true;\n    for(int i =0; i < wordLength/2; i++){\n        char start = inputUpper.charAt(i);\n        char end = inputUpper.charAt(wordLength - (i +1));\n        if(start != end){\n            ifPalindrome = false;\n        }\n    }\n    \n    if(ifPalindrome){\n        toReturn = input + \" is a palindrome!\";//indent!\n    } else{ //where's my space urghhhh \n       toReturn = input + \" is not a palindrome.\"; \n        \n    }\n    \n    System.out.print(toReturn);//indent!\n}", 
    "status" : "PASS", 
    "activeTime" : 24.7, 
    "totalActiveTime" : 2149.2999999999997, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:44:13.096+0000"), 
            "code" : "public String printPalindrome(String console){\n    \n    boolean isPalindrome = true;\n    String toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    for(int i =0; i < wordLength(); i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - i);\n        \n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n            \n        }\n        \n    }\n return toReturn;\n}\n \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 541.9
        }, 
        {
            "date" : ISODate("2016-04-23T16:45:11.014+0000"), 
            "code" : "public String printPalindrome(String console){\n    \n    boolean isPalindrome = true;\n    String toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - i);\n        \n        if(start != end){\n            isPalindrome = false;\n            toReturn = console + \"is not a palindrome.\";\n            \n        }\n        \n    }\n return toReturn;\n}\n \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(58)
        }, 
        {
            "date" : ISODate("2016-04-23T16:46:43.886+0000"), 
            "code" : "public String printPalindrome(String console){\n    \n    String toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - i);\n        \n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n        \n    }\n return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 92.9
        }, 
        {
            "date" : ISODate("2016-04-23T16:47:30.758+0000"), 
            "code" : "public Scanner printPalindrome(String console){\n    \n    Scanner toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - i);\n        \n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n        \n    }\n return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 46.8
        }, 
        {
            "date" : ISODate("2016-04-23T16:47:34.946+0000"), 
            "code" : "public Scanner printPalindrome(String console){\n    \n    Scanner toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - i);\n        \n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n        \n    }\n return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.2
        }, 
        {
            "date" : ISODate("2016-04-23T16:48:00.975+0000"), 
            "code" : "public String printPalindrome(Scanner console){\n    \n    Scanner toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - i);\n        \n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n        \n    }\n return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.1
        }, 
        {
            "date" : ISODate("2016-04-23T16:48:08.819+0000"), 
            "code" : "public static printPalindrome(Scanner console){\n    \n    Scanner toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - i);\n        \n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n        \n    }\n return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.7
        }, 
        {
            "date" : ISODate("2016-04-23T16:49:25.505+0000"), 
            "code" : "public static printPalindrome(Scanner console){\n    \n    Scanner toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n    }\n return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 76.7
        }, 
        {
            "date" : ISODate("2016-04-23T16:50:11.843+0000"), 
            "code" : "public static String printPalindrome(Scanner console){\n    \n    Scanner toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n    }\n return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 46.4
        }, 
        {
            "date" : ISODate("2016-04-23T16:50:22.874+0000"), 
            "code" : "public static String printPalindrome(Scanner console){\n    \n    String toReturn = console + \"is a palindrome.\";   \n    String newConsole = consile.toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n    }\n return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.1
        }, 
        {
            "date" : ISODate("2016-04-23T16:50:37.998+0000"), 
            "code" : "public static String printPalindrome(Scanner console){\n    \n    String toReturn = console + \"is a palindrome.\";   \n    String newConsole = console.toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n    }\n return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(15)
        }, 
        {
            "date" : ISODate("2016-04-23T16:54:41.573+0000"), 
            "code" : "public static String printPalindrome(Scanner console){\n    \n    String toReturn = console + \"is a palindrome.\";   \n    String newConsole = console.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n    }\n return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 160.9
        }, 
        {
            "date" : ISODate("2016-04-23T16:55:22.013+0000"), 
            "code" : "public static String printPalindrome(Scanner console){\n    \n    String toReturn = console + \"is a palindrome.\";   \n    String newConsole = console.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n    }\n System.out.print(toReturn);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.9
        }, 
        {
            "date" : ISODate("2016-04-23T16:55:45.124+0000"), 
            "code" : "public static String printPalindrome(Scanner console){\n    \n    String toReturn = console + \"is a palindrome.\";   \n    String newConsole = console.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \"is not a palindrome.\";\n        }\n    }\n return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.6
        }, 
        {
            "date" : ISODate("2016-04-23T16:57:14.641+0000"), 
            "code" : "public static String printPalindrome(Scanner console){\n    \n    String toReturn = \"Type one or more words: \";   \n    String newConsole = console.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn += console + \"is not a palindrome.\";\n        }\n    }\n    \n    toReturn += console + \"is a palindrome.\";\n return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 89.3
        }, 
        {
            "date" : ISODate("2016-04-23T16:57:20.439+0000"), 
            "code" : "public static String printPalindrome(Scanner console){\n    \n    String toReturn = \"Type one or more words: \";   \n    String newConsole = console.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn += console + \"is not a palindrome.\";\n        }\n    }\n    \n    toReturn += console + \"is a palindrome.\";\n return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-04-23T16:57:43.778+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    String toReturn = \"Type one or more words: \";   \n    String newConsole = console.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn += console + \"is not a palindrome.\";\n        }\n    }\n    \n    toReturn += console + \"is a palindrome.\";\n System.out.print(toReturn);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.9
        }, 
        {
            "date" : ISODate("2016-04-23T16:58:17.322+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    String toReturn = \"Type one or more words: \";   \n    String newConsole = console.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn += console + \" is not a palindrome.\";\n        }\n    }\n    \n    toReturn += console + \" is a palindrome.\";\n    \n System.out.print(toReturn);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.5
        }, 
        {
            "date" : ISODate("2016-04-23T17:02:17.526+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String sc =console.nextLine();\n    \n    String newConsole = sc.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    String toReturn = \"\";\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \" is not a palindrome.\";\n        }\n    }\n    \n    toReturn = sc + \" is a palindrome.\";\n    \n System.out.print(toReturn);\n}", 
            "status" : "FAIL", 
            "activeTime" : 215.1
        }, 
        {
            "date" : ISODate("2016-04-23T17:02:58.404+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String sc =console.nextLine();\n    \n    String newConsole = sc.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    String toReturn = \"\";\n    \n    for(int i =0; i < wordLength; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \" is not a palindrome.\";\n        }\n    }\n    \n    toReturn = sc + \" is a palindrome!\";\n    \n System.out.print(toReturn);\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(41)
        }, 
        {
            "date" : ISODate("2016-04-23T17:06:56.072+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String sc =console.nextLine();\n    \n    String newConsole = sc.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    String toReturn = \"\";\n    \n    for(int i =0; i < wordLength/2; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \" is not a palindrome.\";\n        }\n    }\n    \n    toReturn = sc + \" is a palindrome!\";\n    \n System.out.print(toReturn);\n}", 
            "status" : "FAIL", 
            "activeTime" : 122.5
        }, 
        {
            "date" : ISODate("2016-04-23T17:07:04.229+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String sc =console.nextLine();\n    \n    String newConsole = sc.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    String toReturn = \"\";\n    \n    for(int i =0; i < wordLength/2; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            toReturn = console + \" is not a palindrome.\";\n        }\n    }\n    \n    toReturn = sc + \" is a palindrome!\";\n    \n System.out.print(toReturn);\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(8)
        }, 
        {
            "date" : ISODate("2016-04-23T17:08:54.799+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String sc =console.nextLine();\n    \n    String newConsole = sc.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    String toReturn = \"\";\n    boolean ifPalindrome = true;\n    for(int i =0; i < wordLength/2; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            ifPalindrome = false;\n        }\n    }\n    \n    if(ifPalindrome){\n    toReturn = sc + \" is a palindrome!\";\n    }else{\n       toReturn = sc + \" is not a palindrome!\"; \n        \n    }\n    \n System.out.print(toReturn);\n}", 
            "status" : "FAIL", 
            "activeTime" : 110.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:09:17.451+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String sc =console.nextLine();\n    \n    String newConsole = sc.toString().toUpperCase();\n    int wordLength = newConsole.length();\n    \n    String toReturn = \"\";\n    boolean ifPalindrome = true;\n    for(int i =0; i < wordLength/2; i++){\n        char start = newConsole.charAt(i);\n        char end = newConsole.charAt(wordLength - (i +1));\n        if(start != end){\n            ifPalindrome = false;\n        }\n    }\n    \n    if(ifPalindrome){\n    toReturn = sc + \" is a palindrome!\";\n    }else{\n       toReturn = sc + \" is not a palindrome.\"; \n        \n    }\n    \n System.out.print(toReturn);\n}", 
            "status" : "PASS", 
            "activeTime" : 22.4
        }, 
        {
            "date" : ISODate("2016-04-23T17:14:14.213+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String input = console.nextLine().toUpperCase();\n    int wordLength = input.length();\n    \n    String toReturn = \"\";\n    boolean ifPalindrome = true;\n    for(int i =0; i < wordLength/2; i++){\n        char start = input.charAt(i);\n        char end = input.charAt(wordLength - (i +1));\n        if(start != end){\n            ifPalindrome = false;\n        }\n    }\n    \n    if(ifPalindrome){\n    toReturn = sc + \" is a palindrome!\";\n    }else{\n       toReturn = sc + \" is not a palindrome.\"; \n        \n    }\n    \n System.out.print(toReturn);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 245.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:15:02.590+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String input = console.nextLine()\n    String inputUpper = input.toUpperCase();\n    int wordLength = inputUpper.length();\n    \n    String toReturn = \"\";\n    boolean ifPalindrome = true;\n    for(int i =0; i < wordLength/2; i++){\n        char start = inputUpper.charAt(i);\n        char end = inputUpper.charAt(wordLength - (i +1));\n        if(start != end){\n            ifPalindrome = false;\n        }\n    }\n    \n    if(ifPalindrome){\n    toReturn = input + \" is a palindrome!\";\n    }else{\n       toReturn = input + \" is not a palindrome.\"; \n        \n    }\n    \n System.out.print(toReturn);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.4
        }, 
        {
            "date" : ISODate("2016-04-23T17:15:09.989+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String input = console.nextLine();\n    String inputUpper = input.toUpperCase();\n    int wordLength = inputUpper.length();\n    \n    String toReturn = \"\";\n    boolean ifPalindrome = true;\n    for(int i =0; i < wordLength/2; i++){\n        char start = inputUpper.charAt(i);\n        char end = inputUpper.charAt(wordLength - (i +1));\n        if(start != end){\n            ifPalindrome = false;\n        }\n    }\n    \n    if(ifPalindrome){\n    toReturn = input + \" is a palindrome!\";\n    }else{\n       toReturn = input + \" is not a palindrome.\"; \n        \n    }\n    \n System.out.print(toReturn);\n}", 
            "status" : "PASS", 
            "activeTime" : 7.1
        }, 
        {
            "date" : ISODate("2016-04-24T07:18:36.441+0000"), 
            "code" : "//very nice naming conventions! keep it up! you used the efficient method too\n//however, code style needs work, especially indentation\n\npublic static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String input = console.nextLine();\n    String inputUpper = input.toUpperCase();\n    int wordLength = inputUpper.length();\n    \n    String toReturn = \"\";\n    boolean ifPalindrome = true;\n    for(int i =0; i < wordLength/2; i++){\n        char start = inputUpper.charAt(i);\n        char end = inputUpper.charAt(wordLength - (i +1));\n        if(start != end){\n            ifPalindrome = false;\n        }\n    }\n    \n    if(ifPalindrome){\n        toReturn = input + \" is a palindrome!\";//indent!\n    } else{ //where's my space urghhhh \n       toReturn = input + \" is not a palindrome.\"; \n        \n    }\n    \n    System.out.print(toReturn);//indent!\n}", 
            "status" : "PASS", 
            "activeTime" : 24.7
        }
    ]
}
{ 
    "_id" : "FkXzWh5z6d4MQCHQ3", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T17:27:42.803+0000"), 
    "updatedAt" : ISODate("2016-04-23T17:44:41.538+0000"), 
    "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String word = console.next();\n    String word2 = word.toLowerCase();\n    \n    int n = word.length();\n    boolean isPalindrome = true;\n    \n    for (int i=0; i<n/2; i++) {\n\t    if (word2.charAt(i) != word2.charAt(n-1-i)) {\n\t        isPalindrome = false;\n\t    break;\n\t    }\n    }\n    \n    if(isPalindrome) {\n\t    System.out.println(word + \" is a palindrome!\");\n    } else {\n\t    System.out.println(word + \" is not a palindrome.\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 21.1, 
    "totalActiveTime" : 573.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T17:37:00.305+0000"), 
            "code" : "public void printPalindrome(String console){\n    boolean palindrome = true;\n    for(int i = 0 ; i < console.length() ; i++){\n        if(console.charAt(i) != console.charAt(console.length() - i)){\n            palindrome = false;\n        }\n    }\n    if(palindrome){\n        System.out.println(console + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(console + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 300.5
        }, 
        {
            "date" : ISODate("2016-04-23T17:37:09.421+0000"), 
            "code" : "public static void printPalindrome(String console){\n    boolean palindrome = true;\n    for(int i = 0 ; i < console.length() ; i++){\n        if(console.charAt(i) != console.charAt(console.length() - i)){\n            palindrome = false;\n        }\n    }\n    if(palindrome){\n        System.out.println(console + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(console + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.1
        }, 
        {
            "date" : ISODate("2016-04-23T17:39:24.978+0000"), 
            "code" : "public void printPalindrome(String console){\n    boolean palindrome = true;\n    for(int i = 0 ; i < console.length() ; i++){\n        if(console.charAt(i) != console.charAt(console.length() - i)){\n            palindrome = false;\n        }\n    }\n    if(palindrome){\n        System.out.println(console + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(console + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(40)
        }, 
        {
            "date" : ISODate("2016-04-23T17:41:01.867+0000"), 
            "code" : "public void printPalindrome(Scanner console){\n    boolean palindrome = true;\n    for(int i = 0 ; i < console.length() ; i++){\n        if(console.charAt(i) != console.charAt(console.length() - i)){\n            palindrome = false;\n        }\n    }\n    if(palindrome){\n        System.out.println(console + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(console + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.1
        }, 
        {
            "date" : ISODate("2016-04-23T17:41:08.777+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    boolean palindrome = true;\n    for(int i = 0 ; i < console.length() ; i++){\n        if(console.charAt(i) != console.charAt(console.length() - i)){\n            palindrome = false;\n        }\n    }\n    if(palindrome){\n        System.out.println(console + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(console + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(7)
        }, 
        {
            "date" : ISODate("2016-04-23T17:42:28.156+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.next();\n    String word2 = word.toLowerCase();\n    \n    boolean palindrome = true;\n    for(int i = 0 ; i < word2.length() ; i++){\n        if(word2.charAt(i) != word2.charAt(console.length() - i)){\n            palindrome = false;\n        }\n    }\n    if(palindrome){\n        System.out.println(word2 + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(word2 + \" is not a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 59.3
        }, 
        {
            "date" : ISODate("2016-04-23T17:42:39.227+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.next();\n    String word2 = word.toLowerCase();\n    \n    boolean palindrome = true;\n    for(int i = 0 ; i < word2.length() ; i++){\n        if(word2.charAt(i) != word2.charAt(word2.length() - i)){\n            palindrome = false;\n        }\n    }\n    if(palindrome){\n        System.out.println(word2 + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(word2 + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.9
        }, 
        {
            "date" : ISODate("2016-04-23T17:43:28.820+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String word = console.next();\n    String word2 = word.toLowerCase();\n    int n = word.length();\n    boolean isPalindrome = true;\n    for (int i=0; i<n/2; i++) {\n\tif (word2.charAt(i) != word2.charAt(n-1-i)) {\n\t    isPalindrome = false;\n\t    break;\n\t}\n    }\n    System.out.println();\n    if(isPalindrome) {\n\tSystem.out.println(word + \" is a palindrome!\");\n    } else {\n\tSystem.out.println(word + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 40.5
        }, 
        {
            "date" : ISODate("2016-04-23T17:44:20.761+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String word = console.next();\n    String word2 = word.toLowerCase();\n    int n = word.length();\n    boolean isPalindrome = true;\n    for (int i=0; i<n/2; i++) {\n\t    if (word2.charAt(i) != word2.charAt(n-1-i)) {\n\t    isPalindrome = false;\n\t    break;\n\t    }\n    }\n    \n    if(isPalindrome) {\n\tSystem.out.println(word + \" is a palindrome!\");\n    } else {\n\tSystem.out.println(word + \" is not a palindrome.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 51.6
        }, 
        {
            "date" : ISODate("2016-04-23T17:44:41.537+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String word = console.next();\n    String word2 = word.toLowerCase();\n    \n    int n = word.length();\n    boolean isPalindrome = true;\n    \n    for (int i=0; i<n/2; i++) {\n\t    if (word2.charAt(i) != word2.charAt(n-1-i)) {\n\t        isPalindrome = false;\n\t    break;\n\t    }\n    }\n    \n    if(isPalindrome) {\n\t    System.out.println(word + \" is a palindrome!\");\n    } else {\n\t    System.out.println(word + \" is not a palindrome.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 21.1
        }
    ]
}
{ 
    "_id" : "KDbjLbWSafo8gEv4a", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T15:58:27.174+0000"), 
    "updatedAt" : ISODate("2016-04-23T17:44:18.818+0000"), 
    "code" : "import java.util.Scanner;\npublic class Adder {\n    public static void main (String [] args){\n        int sum = 0;\n        \n        Scanner reader = new Scanner(System.in);\n         //System.out.println(\"Enter number >\");\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            //System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum+\".\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 28.1, 
    "totalActiveTime" : 733.1000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:01:25.262+0000"), 
            "code" : "public class Adder {\n    sum = 0;\n    do{\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n        \n        if(input>0){\n            sum += input;\n        }\n        \n    }while(input>0)\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 185.6
        }, 
        {
            "date" : ISODate("2016-04-23T16:01:38.790+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class Adder {\n    sum = 0;\n    do{\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n        \n        if(input>0){\n            sum += input;\n        }\n        \n    }while(input>0)\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.4
        }, 
        {
            "date" : ISODate("2016-04-23T16:01:53.706+0000"), 
            "code" : "import java.util.*;\n\npublic class Adder {\n    sum = 0;\n    do{\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n        \n        if(input>0){\n            sum += input;\n        }\n        \n    }while(input>0)\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.1
        }, 
        {
            "date" : ISODate("2016-04-23T16:03:14.110+0000"), 
            "code" : "import java.util.*;\n\npublic class Adder {\n    sum = 0;\n    System.out.println(\"Enter number >\");\n    Scanner reader = new Scanner(System.in);\n    int input = reader.nextInt();\n    \n    while(input>0){\n        sum += input;\n        System.out.println(\"Enter number >\");\n        input = reader.nextInt();\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 80.3
        }, 
        {
            "date" : ISODate("2016-04-23T17:36:50.657+0000"), 
            "code" : "public class Adder {\n    sum = 0;\n    System.out.println(\"Enter number >\");\n    Scanner reader = new Scanner(System.in);\n    int input = reader.nextInt();\n    \n    while(input>0){\n        sum += input;\n        System.out.println(\"Enter number >\");\n        input = reader.nextInt();\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.9
        }, 
        {
            "date" : ISODate("2016-04-23T17:37:07.699+0000"), 
            "code" : "public static class Adder {\n    sum = 0;\n    System.out.println(\"Enter number >\");\n    Scanner reader = new Scanner(System.in);\n    int input = reader.nextInt();\n    \n    while(input>0){\n        sum += input;\n        System.out.println(\"Enter number >\");\n        input = reader.nextInt();\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.9
        }, 
        {
            "date" : ISODate("2016-04-23T17:37:36.917+0000"), 
            "code" : "public class Adder{\n    public static main void (String [] args){\n    sum = 0;\n    System.out.println(\"Enter number >\");\n    Scanner reader = new Scanner(System.in);\n    int input = reader.nextInt();\n    \n    while(input>0){\n        sum += input;\n        System.out.println(\"Enter number >\");\n        input = reader.nextInt();\n    }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.3
        }, 
        {
            "date" : ISODate("2016-04-23T17:38:07.636+0000"), 
            "code" : "public class Adder{\n    public static main void (String [] args){\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:39:26.704+0000"), 
            "code" : "public class Adder{\n    public static main void (String [] args){\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 77.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:39:46.645+0000"), 
            "code" : "public class Adder{\n    public static main void (String [] args){\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.1
        }, 
        {
            "date" : ISODate("2016-04-23T17:39:55.616+0000"), 
            "code" : "public class Adder{\n  \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-04-23T17:40:56.054+0000"), 
            "code" : "public static void Adder {\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-04-23T17:41:03.936+0000"), 
            "code" : "public static Adder {\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(8)
        }, 
        {
            "date" : ISODate("2016-04-23T17:41:12.601+0000"), 
            "code" : "public static Adder {\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:41:24.116+0000"), 
            "code" : "public class Adder {\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-04-23T17:41:34.373+0000"), 
            "code" : "public static Adder {\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.3
        }, 
        {
            "date" : ISODate("2016-04-23T17:41:55.857+0000"), 
            "code" : "public class Adder {\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.5
        }, 
        {
            "date" : ISODate("2016-04-23T17:42:05.557+0000"), 
            "code" : "public Adder {\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:42:42.917+0000"), 
            "code" : "public class Adder {\n    public static void main (String [] args){\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.2
        }, 
        {
            "date" : ISODate("2016-04-23T17:42:59.522+0000"), 
            "code" : "import java.util.Scanner;\npublic class Adder {\n    public static void main (String [] args){\n        int sum = 0;\n        System.out.println(\"Enter number >\");\n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.4
        }, 
        {
            "date" : ISODate("2016-04-23T17:43:35.073+0000"), 
            "code" : "import java.util.Scanner;\npublic class Adder {\n    public static void main (String [] args){\n        int sum = 0;\n        \n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum);\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.6
        }, 
        {
            "date" : ISODate("2016-04-23T17:43:50.693+0000"), 
            "code" : "import java.util.Scanner;\npublic class Adder {\n    public static void main (String [] args){\n        int sum = 0;\n        \n        Scanner reader = new Scanner(System.in);\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            \n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum+\".\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 15.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:44:18.817+0000"), 
            "code" : "import java.util.Scanner;\npublic class Adder {\n    public static void main (String [] args){\n        int sum = 0;\n        \n        Scanner reader = new Scanner(System.in);\n         //System.out.println(\"Enter number >\");\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            //System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum+\".\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 28.1
        }
    ]
}
{ 
    "_id" : "bXqTWmEiGJSJEhyiG", 
    "userId" : "Cp9j6PryRY7XDwG8r", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T18:07:26.192+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:10:42.588+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    public int getX() {\n        return x;\n    }\n    public int getY() {\n        return y;\n    }\n    public String toString() {\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 618.2, 
    "totalActiveTime" : 1303.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:10:41.490+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    public int getX() {\n        return x;\n    }\n    public int getY() {\n        return y;\n    }\n    public String toString() {\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 685.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:42.587+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    public int getX() {\n        return x;\n    }\n    public int getY() {\n        return y;\n    }\n    public String toString() {\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 618.2
        }
    ]
}
{ 
    "_id" : "SYoN2tXnJEGFPqsFj", 
    "userId" : "FLpAiFevJjdE2QgGu", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T10:04:14.579+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:13:12.798+0000"), 
    "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
    "status" : "PASS", 
    "activeTime" : 47.3, 
    "totalActiveTime" : 5817.900000000013, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:10:51.725+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:52.145+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:53.183+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:53.657+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:54.410+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:55.174+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:55.584+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:56.432+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:57.229+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:57.620+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:58.552+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:59.094+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:59.702+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:00.505+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:01.141+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:01.926+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:02.681+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:03.152+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:03.895+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:04.449+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:05.377+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:05.716+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:06.613+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:07.041+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:07.817+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:08.471+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:09.133+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:09.624+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:10.625+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:11.046+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:11.773+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:12.563+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:13.040+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:13.759+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:14.470+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:14.920+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:15.619+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:16.375+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:16.936+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:17.862+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:18.256+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:11:19.219+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:16.343+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:16.375+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:16.415+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:18.855+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:18.892+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:18.934+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:21.342+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:21.401+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:21.445+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:23.704+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:23.983+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:24.274+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:25.955+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:26.304+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:26.533+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:27.694+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:28.600+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:28.746+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:29.664+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:30.798+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:30.950+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:31.504+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:32.667+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:33.164+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:33.600+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:34.556+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:35.060+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:35.802+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:36.447+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:37.263+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:37.667+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:38.692+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:38.935+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:39.909+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:40.797+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:41.189+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:42.038+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:42.802+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:43.233+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:43.768+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:44.638+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:45.192+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:46.210+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:46.986+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:47.293+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:48.466+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:48.981+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:49.509+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:50.277+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:50.955+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:51.449+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:52.419+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:52.969+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:54.071+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:54.579+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:55.411+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:56.195+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:56.624+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:57.357+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:58.187+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:58.597+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:12:59.411+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:00.211+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:00.478+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:01.358+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:02.119+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:02.398+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:03.134+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:04.036+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:04.097+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:05.173+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:06.427+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:06.481+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:07.607+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:08.837+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:08.878+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:09.796+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:11.057+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:11.363+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:11.844+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:12.798+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
            "status" : "PASS", 
            "activeTime" : 47.3
        }
    ]
}
{ 
    "_id" : "985aw9vX9KyoBitoW", 
    "userId" : "7KfbnSL6HCME3H7es", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T08:06:58.472+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:13:21.257+0000"), 
    "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    String lowerCase = words.toLowerCase();\n    boolean result = isPalindrome(lowerCase); \n    \n    if (result) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n// good to use static methods\npublic static boolean isPalindrome(String words) {\n    int length = words.length() - 1;\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastCh = words.charAt(length - i); // you might want to camel-case the variable name \"lastCh\" to make it clearer :)\n        \n        if (ch != lastCh) {\n            return false;\n        }\n    }\n    return true;\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 4.3, 
    "totalActiveTime" : 673.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T08:36:32.105+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    boolean result = isPalindrome(words);\n    \n    if (result) {\n        System.out.println(words + \" is a palindrome.\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n\npublic static boolean isPalindrome(String words) {\n    for (int i = 0; i < result.length() / 2; i++) {\n        char ch = result.charAt(i);\n        char lastch = result.charAt(result.length() - i);\n        if (ch == lastch) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 281.2
        }, 
        {
            "date" : ISODate("2016-04-23T08:36:49.001+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    boolean result = isPalindrome(words);\n    \n    if (result) {\n        System.out.println(words + \" is a palindrome.\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n\npublic static boolean isPalindrome(String words) {\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastch = words.charAt(words.length() - i);\n        if (ch == lastch) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.7
        }, 
        {
            "date" : ISODate("2016-04-23T08:37:25.626+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    boolean result = isPalindrome(words);\n    \n    if (result) {\n        System.out.println(words + \" is a palindrome.\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n\npublic static boolean isPalindrome(String words) {\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastch = words.charAt(words.length() - 1 - i);\n        if (ch == lastch) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : 36.6
        }, 
        {
            "date" : ISODate("2016-04-23T08:38:29.314+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    boolean result = isPalindrome(words);\n    \n    if (result) {\n        System.out.println(words + \" is a palindrome.\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n\npublic static boolean isPalindrome(String words) {\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastch = words.charAt(words.length() - 1 - i);\n        if (ch != lastch) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : 61.4
        }, 
        {
            "date" : ISODate("2016-04-23T08:38:50.557+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    boolean result = isPalindrome(words);\n    \n    if (result) {\n        System.out.println(words + \" is a palindrome.\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n\npublic static boolean isPalindrome(String words) {\n    int length = words.length() - 1;\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastch = words.charAt(length - i);\n        if (ch != lastch) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.4
        }, 
        {
            "date" : ISODate("2016-04-23T08:39:50.161+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    boolean result = isPalindrome(words);\n    \n    if (result) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome!\");\n    }\n\n}\n\npublic static boolean isPalindrome(String words) {\n    int length = words.length() - 1;\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastch = words.charAt(length - i);\n        \n        if (ch != lastch) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : 59.7
        }, 
        {
            "date" : ISODate("2016-04-23T08:40:11.040+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    boolean result = isPalindrome(words);\n    \n    if (result) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n\npublic static boolean isPalindrome(String words) {\n    int length = words.length() - 1;\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastch = words.charAt(length - i);\n        \n        if (ch != lastch) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.9
        }, 
        {
            "date" : ISODate("2016-04-23T08:41:38.286+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    String lowercase = words.toLowerCase();\n    boolean result = isPalindrome(lowercase);\n    \n    if (result) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n\npublic static boolean isPalindrome(String words) {\n    int length = words.length() - 1;\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastch = words.charAt(length - i);\n        \n        if (ch != lastch) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "PASS", 
            "activeTime" : 85.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:20.709+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    String lowerCase = words.toLowerCase();\n    boolean result = isPalindrome(lowerCase); \n    \n    if (result) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n// good to use static methods\npublic static boolean isPalindrome(String words) {\n    int length = words.length() - 1;\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastCh = words.charAt(length - i); // you might want to camel-case the variable name \"lastCh\" to make it clearer :)\n        \n        if (ch != lastCh) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "PASS", 
            "activeTime" : 84.2
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:21.256+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    String lowerCase = words.toLowerCase();\n    boolean result = isPalindrome(lowerCase); \n    \n    if (result) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n// good to use static methods\npublic static boolean isPalindrome(String words) {\n    int length = words.length() - 1;\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastCh = words.charAt(length - i); // you might want to camel-case the variable name \"lastCh\" to make it clearer :)\n        \n        if (ch != lastCh) {\n            return false;\n        }\n    }\n    return true;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.3
        }
    ]
}
{ 
    "_id" : "W4LLWpoyN4SDNDjb5", 
    "userId" : "ZwzuuSYKWikrzBcXP", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T01:43:14.818+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:14:32.614+0000"), 
    "code" : "public static String parseEmail(String email){\n    String result = \"\";\n    int index = email.indexOf('@');\n    result = email.substring(0, index);\n    return result;\n}", 
    "status" : "PASS", 
    "activeTime" : 1079.8, 
    "totalActiveTime" : 6249.700000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:13:13.329+0000"), 
            "code" : "public static String parseEmail(String email){\n    String result = \"\";\n    int index = email.indexOf('@');\n    int total = email.length();\n    result = email.substring(index,total);\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 209.2
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:13.984+0000"), 
            "code" : "public static String parseEmail(String email){\n    String result = \"\";\n    int index = email.indexOf('@');\n    result = email.substring(0, index);\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:23.636+0000"), 
            "code" : "public static String parseEmail(String email){\n    String result = \"\";\n    int index = email.indexOf('@');\n    result = email.substring(0, index);\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4946.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:14:32.614+0000"), 
            "code" : "public static String parseEmail(String email){\n    String result = \"\";\n    int index = email.indexOf('@');\n    result = email.substring(0, index);\n    return result;\n}", 
            "status" : "PASS", 
            "activeTime" : 1079.8
        }
    ]
}
{ 
    "_id" : "TGpz8F33jiYyDS5WT", 
    "userId" : "skeAjiWQ9cA4BLDxs", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T01:46:39.908+0000"), 
    "updatedAt" : ISODate("2016-04-25T07:05:41.959+0000"), 
    "code" : "public static String parseEmail(String email) {\n    String result = \"\";\n    for (int i = 0; i < email.length(); i++) {\n        char c = email.charAt(i);\n        if (c == '@') {\n            result = email.substring(0, i);\n        }\n    }\n    return result;\n}", 
    "status" : "PASS", 
    "activeTime" : 34.5, 
    "totalActiveTime" : 509.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:13:14.684+0000"), 
            "code" : "public static String parseEmail(String email) {\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 244.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:15.444+0000"), 
            "code" : "public static String parseEmail(String email) {\n    String str = \"jamie.chew.2015@smu.edu.sg\";\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:16.181+0000"), 
            "code" : "public static String parseEmail(String email) {\n    String str = \"jamie.chew.2015@smu.edu.sg\";\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:17.407+0000"), 
            "code" : "public static String parseEmail(String email) {\n    String str = \"jamie.chew.2015@smu.edu.sg\";\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:18.269+0000"), 
            "code" : "public static String parseEmail(String email) {\n    String str = \"jamie.chew.2015@smu.edu.sg\";\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n    System.out.println(\"Hello\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:18.630+0000"), 
            "code" : "public static String parseEmail(String email) {\n    String str = \"jamie.chew.2015@smu.edu.sg\";\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.9
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:25.961+0000"), 
            "code" : "public static String parseEmail(String email) {\n    String str = \"jamie.chew.2015@smu.edu.sg\";\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(2)
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:26.325+0000"), 
            "code" : "public class Test1 {\n    public static void main(String[] args) {\n        String str = \"jamie.chew.2015@smu.edu.sg\";\n        System.out.println(parseEmail(str));\n    }\n    \n    public static String parseEmail(String email) {\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.6
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:27.329+0000"), 
            "code" : "public class Test1 {\n    public static void main(String[] args) {\n        String str = \"jamie.chew.2015@smu.edu.sg\";\n        System.out.println(parseEmail(str));\n    }\n    \n    public static String parseEmail(String email) {\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(5)
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:27.549+0000"), 
            "code" : "public class Test1 {\n    public static void main(String[] args) {\n        String str = \"jamie.chew.2015@smu.edu.sg\";\n        System.out.println(parseEmail(str));\n    }\n    \n    public static String parseEmail(String email) {\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.6
        }, 
        {
            "date" : ISODate("2016-04-25T00:11:02.612+0000"), 
            "code" : "public class Test1 {\n    public static void main(String[] args) {\n        String str = \"jamie.chew.2015@smu.edu.sg\";\n        System.out.println(parseEmail(str));\n    }\n    \n    public static String parseEmail(String email) {\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(5)
        }, 
        {
            "date" : ISODate("2016-04-25T07:04:45.221+0000"), 
            "code" : "public static String parseEmail(String email) {\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '@') {\n            return str.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 79.7
        }, 
        {
            "date" : ISODate("2016-04-25T07:05:07.284+0000"), 
            "code" : "public static String parseEmail(String email) {\n    for (int i = 0; i < email.length(); i++) {\n        char c = email.charAt(i);\n        if (c == '@') {\n            return email.substring(0, i);\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.9
        }, 
        {
            "date" : ISODate("2016-04-25T07:05:41.958+0000"), 
            "code" : "public static String parseEmail(String email) {\n    String result = \"\";\n    for (int i = 0; i < email.length(); i++) {\n        char c = email.charAt(i);\n        if (c == '@') {\n            result = email.substring(0, i);\n        }\n    }\n    return result;\n}", 
            "status" : "PASS", 
            "activeTime" : 34.5
        }
    ]
}
{ 
    "_id" : "8pQpzdEr8NWx4EhcQ", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-22T17:03:21.251+0000"), 
    "updatedAt" : ISODate("2016-04-25T00:16:31.978+0000"), 
    "status" : "PASS", 
    "activeTime" : 2.6, 
    "totalActiveTime" : 3709.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-22T17:03:38.823+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3396.4
        }, 
        {
            "date" : ISODate("2016-04-22T17:07:56.587+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(18)
        }, 
        {
            "date" : ISODate("2016-04-22T17:08:53.225+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 95.7
        }, 
        {
            "date" : ISODate("2016-04-22T17:10:55.989+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 49.7
        }, 
        {
            "date" : ISODate("2016-04-22T17:12:43.340+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-04-22T17:14:15.671+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.2
        }, 
        {
            "date" : ISODate("2016-04-22T17:14:55.270+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-04-22T17:16:25.625+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(44)
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:33.058+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 4.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:34.468+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(18)
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:34.543+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 6.5
        }, 
        {
            "date" : ISODate("2016-04-24T05:14:31.072+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:14:48.687+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-04-25T00:16:31.977+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.6
        }
    ], 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}"
}
{ 
    "_id" : "KpoBX2xmFghsvRNM6", 
    "userId" : "ZwzuuSYKWikrzBcXP", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T02:04:38.410+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:17:00.102+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = 0;\n    for (i = 0; i < a2.size() && (i*2+1) < a1.size(); i++) { \n        //add(int index, E element) \n        //i*2+1 to get odd number (index)\n        a1.add(i*2+1, a2.get(i));\n    }   \n    while (i < a2.size()) { \n        a1.add(a2.get(i));\n        i++;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 26.2, 
    "totalActiveTime" : 26.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:17:00.101+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = 0;\n    for (i = 0; i < a2.size() && (i*2+1) < a1.size(); i++) { \n        //add(int index, E element) \n        //i*2+1 to get odd number (index)\n        a1.add(i*2+1, a2.get(i));\n    }   \n    while (i < a2.size()) { \n        a1.add(a2.get(i));\n        i++;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 26.2
        }
    ]
}
{ 
    "_id" : "hFBTSEpn7QArePFiL", 
    "userId" : "tBRTnCWLCp63vtcx8", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T04:43:25.803+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:26:20.044+0000"), 
    "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String word = input.toLowerCase();\n    \n    int length = word.length();\n    String left = word.substring(0, length / 2);\n    String right = \"\";\n    for (int i = length - 1; i >= length - length / 2; i--) {\n        right = right + word.charAt(i);\n    }\n    \n    if (left.equals(right)) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 26.4, 
    "totalActiveTime" : 872.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:13:31.945+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String word = input.toLowerCase();\n    \n    int length = word.length();\n    String left = word.substring(0, length / 2);\n    String right = \"\";\n    for (int i = length - 1; i >= length - length / 2; i--) {\n        right = right + word.charAt(i);\n    }\n    \n    if (left.equals(right)) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 833.2
        }, 
        {
            "date" : ISODate("2016-04-24T05:25:53.814+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String word = input.toLowerCase();\n    \n    int length = word.length();\n    String left = word.substring(0, length / 2);\n    String right = \"\";\n    for (int i = length - 1; i >= length - length / 2; i--) {\n        right = right + word.charAt(i);\n    }\n    \n    if (left.equals(right)) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:26:20.043+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String word = input.toLowerCase();\n    \n    int length = word.length();\n    String left = word.substring(0, length / 2);\n    String right = \"\";\n    for (int i = length - 1; i >= length - length / 2; i--) {\n        right = right + word.charAt(i);\n    }\n    \n    if (left.equals(right)) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 26.4
        }
    ]
}
{ 
    "_id" : "K5hQct47m92YTT9JQ", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T17:47:40.583+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:42:32.705+0000"), 
    "code" : "public class Rectangle{\n\tprivate int x;\n\tprivate int y;\n\tprivate int width;\n\tprivate int height;\n\n\tpublic Rectangle(int x, int y, int width, int height){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tpublic int getHeight() {\n\t\treturn height;\n\t}\n\n\tpublic int getWidth() {\n\t\treturn width;\n\t}\n\n\tpublic int getX() {\n\t\treturn x;\n\t}\n\n\tpublic int getY(){\n\t\treturn y;\n\t}\n\n\tpublic String toString(){\n\t\tString res = \"Rectangle[\";\n\t\tres += \"x=\" + x + \",\";\n\t\tres += \"y=\" + y + \",\";\n\t\tres += \"width=\" + width + \",\";\n\t\tres += \"height=\" + height +\"]\";\n\t\treturn res;\n\t}\n\n}", 
    "status" : "PASS", 
    "activeTime" : 32.5, 
    "totalActiveTime" : 146.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:13:31.876+0000"), 
            "code" : "public class Rectangle{\n\tprivate int x;\n\tprivate int y;\n\tprivate int width;\n\tprivate int height;\n\n\tpublic Rectangle(int x, int y, int width, int height){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tpublic int getHeight() {\n\t\treturn height;\n\t}\n\n\tpublic int getWidth() {\n\t\treturn width;\n\t}\n\n\tpublic int getX() {\n\t\treturn x;\n\t}\n\n\tpublic int getY(){\n\t\treturn y;\n\t}\n\n\tpublic String toString(){\n\t\tString res = \"Rectangle[\";\n\t\tres += \"x=\" + x + \",\";\n\t\tres += \"y=\" + y + \",\";\n\t\tres += \"width=\" + width + \",\";\n\t\tres += \"height=\" + height +\"]\";\n\t\treturn res;\n\t}\n\n}", 
            "status" : "PASS", 
            "activeTime" : 114.2
        }, 
        {
            "date" : ISODate("2016-04-24T05:42:32.705+0000"), 
            "code" : "public class Rectangle{\n\tprivate int x;\n\tprivate int y;\n\tprivate int width;\n\tprivate int height;\n\n\tpublic Rectangle(int x, int y, int width, int height){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tpublic int getHeight() {\n\t\treturn height;\n\t}\n\n\tpublic int getWidth() {\n\t\treturn width;\n\t}\n\n\tpublic int getX() {\n\t\treturn x;\n\t}\n\n\tpublic int getY(){\n\t\treturn y;\n\t}\n\n\tpublic String toString(){\n\t\tString res = \"Rectangle[\";\n\t\tres += \"x=\" + x + \",\";\n\t\tres += \"y=\" + y + \",\";\n\t\tres += \"width=\" + width + \",\";\n\t\tres += \"height=\" + height +\"]\";\n\t\treturn res;\n\t}\n\n}", 
            "status" : "PASS", 
            "activeTime" : 32.5
        }
    ]
}
{ 
    "_id" : "ZtPzYPkxt2oFMi9uQ", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T04:20:54.657+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:43:29.771+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n\t\tint recA_x = rectA.getX();\n\t\tint recA_y = rectA.getY();\n\t\tint min_x = rectB.getX();\n\t\tif (min_x > recA_x) {\n\t\t\tmin_x = recA_x;\n\t\t}\n\t\tint max_x = rectB.getX() + rectB.getWidth();\n\t\tif (max_x < recA_x + rectA.getWidth()) {\n\t\t\tmax_x = recA_x + rectA.getWidth();\n\t\t}\n\n\t\tint min_y = rectB.getY();\n\t\tif (min_y > recA_y) \n\t\t\tmin_y = recA_y;\n\t\tint max_y = rectB.getY() + rectB.getHeight();\n\t\tif (max_y < recA_y + rectA.getHeight())\n\t\t\tmax_y = recA_y + rectA.getHeight();\n\t\tint width = max_x - min_x;\n\t\tint height = max_y - min_y;\n\t\tRectangle result = new Rectangle(min_x, min_y, width, height);\n\t\treturn result;\n\t}", 
    "status" : "PASS", 
    "activeTime" : 15.5, 
    "totalActiveTime" : 297.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:42:37.135+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n\t\tint recA_x = rectA.getX();\n\t\tint recA_y = rectA.getY();\n\t\tint min_x = rectB.getX();\n\t\tif (min_x > recA_x) {\n\t\t\tmin_x = recA_x;\n\t\t}\n\t\tint max_x = rectB.getX() + rectB.getWidth();\n\t\tif (max_x < recA_x + rectA.getWidth()) {\n\t\t\tmax_x = recA_x + rectA.getWidth();\n\t\t}\n\n\t\tint min_y = rectB.getY();\n\t\tif (min_y > recA_y) \n\t\t\tmin_y = recA_y;\n\t\tint max_y = rectB.getY() + rectB.getHeight();\n\t\tif (max_y < recA_y + rectA.getHeight())\n\t\t\tmax_y = y + rect.getHeight();\n\t\tint width = max_x - min_x;\n\t\tint height = max_y - min_y;\n\t\tRectangle res = new Rectangle(min_x, min_y, width, height);\n\t\treturn res;\n\t}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 237.9
        }, 
        {
            "date" : ISODate("2016-04-24T05:43:14.334+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n\t\tint recA_x = rectA.getX();\n\t\tint recA_y = rectA.getY();\n\t\tint min_x = rectB.getX();\n\t\tif (min_x > recA_x) {\n\t\t\tmin_x = recA_x;\n\t\t}\n\t\tint max_x = rectB.getX() + rectB.getWidth();\n\t\tif (max_x < recA_x + rectA.getWidth()) {\n\t\t\tmax_x = recA_x + rectA.getWidth();\n\t\t}\n\n\t\tint min_y = rectB.getY();\n\t\tif (min_y > recA_y) \n\t\t\tmin_y = recA_y;\n\t\tint max_y = rectB.getY() + rectB.getHeight();\n\t\tif (max_y < recA_y + rectA.getHeight())\n\t\t\tmax_y = recA_y + rectA.getHeight();\n\t\tint width = max_x - min_x;\n\t\tint height = max_y - min_y;\n\t\tRectangle res = new Rectangle(min_x, min_y, width, height);\n\t\treturn res;\n\t}", 
            "status" : "PASS", 
            "activeTime" : 43.6
        }, 
        {
            "date" : ISODate("2016-04-24T05:43:29.771+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n\t\tint recA_x = rectA.getX();\n\t\tint recA_y = rectA.getY();\n\t\tint min_x = rectB.getX();\n\t\tif (min_x > recA_x) {\n\t\t\tmin_x = recA_x;\n\t\t}\n\t\tint max_x = rectB.getX() + rectB.getWidth();\n\t\tif (max_x < recA_x + rectA.getWidth()) {\n\t\t\tmax_x = recA_x + rectA.getWidth();\n\t\t}\n\n\t\tint min_y = rectB.getY();\n\t\tif (min_y > recA_y) \n\t\t\tmin_y = recA_y;\n\t\tint max_y = rectB.getY() + rectB.getHeight();\n\t\tif (max_y < recA_y + rectA.getHeight())\n\t\t\tmax_y = recA_y + rectA.getHeight();\n\t\tint width = max_x - min_x;\n\t\tint height = max_y - min_y;\n\t\tRectangle result = new Rectangle(min_x, min_y, width, height);\n\t\treturn result;\n\t}", 
            "status" : "PASS", 
            "activeTime" : 15.5
        }
    ]
}
{ 
    "_id" : "fJnG9wAzaZHRtvKFz", 
    "userId" : "tBRTnCWLCp63vtcx8", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T05:26:45.544+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:40:01.190+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (int x, int y, int width, int height) {\n        //should be bottom-left coordinates to solve Q5\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(41), 
    "totalActiveTime" : 810.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:42:35.334+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width= \" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 626.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:43:44.498+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width= \" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 91.2
        }, 
        {
            "date" : ISODate("2016-04-24T05:44:35.652+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 51.2
        }, 
        {
            "date" : ISODate("2016-04-24T06:40:01.190+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (int x, int y, int width, int height) {\n        //should be bottom-left coordinates to solve Q5\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(41)
        }
    ]
}
{ 
    "_id" : "Eeui6aurKCCCehu6Q", 
    "userId" : "47MxiJWsWkBezecN9", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T18:09:58.250+0000"), 
    "updatedAt" : ISODate("2016-04-24T05:45:29.784+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 127.3, 
    "totalActiveTime" : 413.90000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:42:34.823+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width \",height=\" height + \"]\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 286.6
        }, 
        {
            "date" : ISODate("2016-04-24T05:45:29.783+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 127.3
        }
    ]
}
{ 
    "_id" : "bhdrSvnWL36h8Anjq", 
    "userId" : "ZwzuuSYKWikrzBcXP", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T04:04:34.745+0000"), 
    "updatedAt" : ISODate("2016-04-24T07:02:24.659+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n     \n    int newWidth = Bx + rectB.getWidth();\n    if (newWidth < Ax + rectA.getWidth()){\n        newWidth = Ax + rectA.getWidth();\n    } \n    \n    int newHeight = By + rectB.getHeight();\n    if (newHeight < Ay + rectA.getHeight()){\n        newHeight = Ay + rectA.getHeight();\n    }\n    \n    int width = newWidth - newX;\n    int height = newHeight - newY;\n\n    Rectangle r = new Rectangle(newX, newY, width, height);\n    return r;\n}", 
    "status" : "PASS", 
    "activeTime" : 20.4, 
    "totalActiveTime" : 6946.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:42:35.281+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n    \n    int newWidth = (Ax + Bx) / 2 ;\n    if(((Ax + Bx) / 2) != 0){\n        newWidth = newWidth + 1 ;\n    }\n    \n    int newHeight = (Ay + By) / 2 ;\n    if(((Ay + By) / 2) != 0){\n        newHeight = newHeight + 1 ;\n    }\n    \n    Rectangle r = new Rectangle(newX, newY, newWidth, newHeight);\n    return r;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1081.5
        }, 
        {
            "date" : ISODate("2016-04-24T05:42:37.473+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n    \n    int newWidth = (Ax + Bx) / 2 ;\n    if(((Ax + Bx) / 2) != 0){\n        newWidth = newWidth + 1 ;\n    }\n    \n    int newHeight = (Ay + By) / 2 ;\n    if(((Ay + By) / 2) != 0){\n        newHeight = newHeight + 1 ;\n    }\n    \n    Rectangle r = new Rectangle(newX, newY, newWidth, newHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : 1081.5
        }, 
        {
            "date" : ISODate("2016-04-24T05:43:13.215+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n    \n    int newWidth = (Ax + Bx) / 2 ;\n    if(((Ax + Bx) / 2) != 0){\n        newWidth = newWidth + 1 ;\n    }\n    \n    int newHeight = (Ay + By) / 2 ;\n    if(((Ay + By) / 2) != 0){\n        newHeight = newHeight + 1 ;\n    }\n    \n    Rectangle r = new Rectangle(newX, newY, newWidth, newHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(197)
        }, 
        {
            "date" : ISODate("2016-04-24T05:46:17.821+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n    \n    int newWidth = (Ax + Bx) / 2 ;\n    if((((double)Ax + Bx) / 2) != 0){\n        newWidth = newWidth + 1 ;\n    }\n    \n    int newHeight = (Ay + By) / 2 ;\n    if((((double)Ay + By) / 2) != 0){\n        newHeight = newHeight + 1 ;\n    }\n    \n    Rectangle r = new Rectangle(newX, newY, newWidth, newHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : 184.6
        }, 
        {
            "date" : ISODate("2016-04-24T05:48:05.967+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n    \n    int newWidth = (Ax + Bx) / 2 ;\n    if(((double)Ax + Bx) / 2 != 0){\n        newWidth = newWidth + 1 ;\n    }\n    \n    int newHeight = (Ay + By) / 2 ;\n    if(((double)Ay + By) / 2 != 0){\n        newHeight = newHeight + 1 ;\n    }\n    \n    Rectangle r = new Rectangle(newX, newY, newWidth, newHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : 108.1
        }, 
        {
            "date" : ISODate("2016-04-24T06:28:12.010+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n    \n   \n    \n    Rectangle r = new Rectangle(newX, newY, newWidth, newHeight);\n    return r;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2404.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:02:04.198+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n     \n    int newWidth = Bx + rectB.getWidth();\n    if (newWidth < Ax + rectA.getWidth()){\n        newWidth = Ax + rectA.getWidth();\n    } \n    \n    int newHeight = By + rectB.getHeight();\n    if (newHeight < Ay + rectA.getHeight()){\n        newHeight = Ay + rectA.getHeight();\n    }\n        int width = newWidth - newX;\n        int height = newHeight - newY;\n\n    Rectangle r = new Rectangle(newX, newY, width, height);\n    return r;\n}", 
            "status" : "PASS", 
            "activeTime" : 1869.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:02:24.659+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n     \n    int newWidth = Bx + rectB.getWidth();\n    if (newWidth < Ax + rectA.getWidth()){\n        newWidth = Ax + rectA.getWidth();\n    } \n    \n    int newHeight = By + rectB.getHeight();\n    if (newHeight < Ay + rectA.getHeight()){\n        newHeight = Ay + rectA.getHeight();\n    }\n    \n    int width = newWidth - newX;\n    int height = newHeight - newY;\n\n    Rectangle r = new Rectangle(newX, newY, width, height);\n    return r;\n}", 
            "status" : "PASS", 
            "activeTime" : 20.4
        }
    ]
}
{ 
    "_id" : "uXy6Fh92mySfkNdtu", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T13:30:01.774+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:28:03.929+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int shortestList = a1.size(); // we usually use \"list\" to denote a collection such as ArrayList, not for int values\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--; \n    }\n    merged.addAll(a1);\n    merged.addAll(a2); \n    a1.clear();\n    a1.addAll(merged);\n}\n// your method works, but it's pretty unconventional", 
    "status" : "PASS", 
    "activeTime" : 134.8, 
    "totalActiveTime" : 4747.299999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:10:49.087+0000"), 
            "code" : "public static ArrayList<Integer> intealeave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a == null || b == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    shortestList--;\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2355.5
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:49.750+0000"), 
            "code" : "public static ArrayList<Integer> intealeave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a == null || b == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    shortestList--;\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:50.250+0000"), 
            "code" : "public static ArrayList<Integer> intealeave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a == null || b == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.6
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:51.037+0000"), 
            "code" : "public static ArrayList<Integer> intealeave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a == null || b == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 724.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:42:32.466+0000"), 
            "code" : "public static ArrayList<Integer> intealeave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a == null || b == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 355.2
        }, 
        {
            "date" : ISODate("2016-04-24T05:42:32.785+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a == null || b == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:46:33.722+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a == null || b == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 362.7
        }, 
        {
            "date" : ISODate("2016-04-24T05:47:44.486+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "FAIL", 
            "activeTime" : 70.6
        }, 
        {
            "date" : ISODate("2016-04-24T05:48:48.074+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList != 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "FAIL", 
            "activeTime" : 63.6
        }, 
        {
            "date" : ISODate("2016-04-24T05:54:27.767+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "FAIL", 
            "activeTime" : 339.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:55:28.640+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        System.out.println(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    return merged;\n}", 
            "status" : "FAIL", 
            "activeTime" : 60.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:56:13.892+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    a1 = merged;\n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 45.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:57:06.008+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    System.out.println(merged);\n    return merged;\n}", 
            "status" : "FAIL", 
            "activeTime" : 52.2
        }, 
        {
            "date" : ISODate("2016-04-24T05:58:18.348+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    a1.addAll(merged);\n    return merged;\n}", 
            "status" : "FAIL", 
            "activeTime" : 72.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:58:37.386+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    a1.empty();\n    a1.addAll(merged);\n    return merged;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:58:46.092+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    a1.removeAll();\n    a1.addAll(merged);\n    return merged;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.7
        }, 
        {
            "date" : ISODate("2016-04-24T05:59:51.406+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    if(a1 == null || a2 == null){\n        return null;\n    }\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    a1.clear();\n    a1.addAll(merged);\n    return merged;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(30)
        }, 
        {
            "date" : ISODate("2016-04-24T06:00:33.865+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int shortestList = a1.size();\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--;\n    }\n    merged.addAll(a1);\n    merged.addAll(a2);\n    a1.clear();\n    a1.addAll(merged);\n}", 
            "status" : "PASS", 
            "activeTime" : 42.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:28:03.928+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int shortestList = a1.size(); // we usually use \"list\" to denote a collection such as ArrayList, not for int values\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--; \n    }\n    merged.addAll(a1);\n    merged.addAll(a2); \n    a1.clear();\n    a1.addAll(merged);\n}\n// your method works, but it's pretty unconventional", 
            "status" : "PASS", 
            "activeTime" : 134.8
        }
    ]
}
{ 
    "_id" : "dgGjZdCp3GvH59c8C", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T13:29:55.460+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:28:48.264+0000"), 
    "code" : "public static void printPalindrome(Scanner console){    \n    System.out.print(\"Type one or more words: \");\n    String comp = console.nextLine();\n    String compUpperCase = comp.toUpperCase();\n    String inverse = \"\";\n    for(int i = compUpperCase.length()-1; i >= 0; i--){\n        char currentCh = compUpperCase.charAt(i);            \n        inverse += currentCh;\n    }\n    if(compUpperCase.equals(inverse)){\n        System.out.println(comp + \" is a palindrome!\");\n    }else{\n        System.out.println(comp + \" is not a palindrome.\");\n    }  \n}", 
    "status" : "PASS", 
    "activeTime" : 38.2, 
    "totalActiveTime" : 231.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:04:35.565+0000"), 
            "code" : "public static void printPalindrome(Scanner console){    \n    System.out.print(\"Type one or more words: \");\n    String comp = console.nextLine();\n    String compUpperCase = comp.toUpperCase();\n    String inverse = \"\";\n    for(int i = compUpperCase.length()-1; i >= 0; i--){\n        char currentCh = compUpperCase.charAt(i);            \n        inverse += currentCh;\n    }\n    if(compUpperCase.equals(inverse)){\n        System.out.println(comp + \" is a palindrome!\");\n    }else{\n        System.out.println(comp + \" is not a palindrome.\");\n    }  \n}", 
            "status" : "PASS", 
            "activeTime" : 193.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:28:48.263+0000"), 
            "code" : "public static void printPalindrome(Scanner console){    \n    System.out.print(\"Type one or more words: \");\n    String comp = console.nextLine();\n    String compUpperCase = comp.toUpperCase();\n    String inverse = \"\";\n    for(int i = compUpperCase.length()-1; i >= 0; i--){\n        char currentCh = compUpperCase.charAt(i);            \n        inverse += currentCh;\n    }\n    if(compUpperCase.equals(inverse)){\n        System.out.println(comp + \" is a palindrome!\");\n    }else{\n        System.out.println(comp + \" is not a palindrome.\");\n    }  \n}", 
            "status" : "PASS", 
            "activeTime" : 38.2
        }
    ]
}
{ 
    "_id" : "sNjFbkfiHyAKQyp8M", 
    "userId" : "tBRTnCWLCp63vtcx8", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T05:40:02.943+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:06:38.672+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int aMinX = rectA.getX();\n    int aMinY = rectA.getY();\n    int aMaxX = aMinX + rectA.getWidth();\n    int aMaxY = aMinY + rectA.getHeight();\n    \n    int bMinX = rectB.getX();\n    int bMinY = rectB.getY();\n    int bMaxX = bMinX + rectB.getWidth();\n    int bMaxY = bMinY + rectB.getHeight();\n    \n    int newX = Math.min(aMinX, bMinX);\n    int newY = Math.min(aMinY, bMinY);\n    int newWidth = Math.max(aMaxX, bMaxX) - newX;\n    int newHeight = Math.max(aMaxY, bMaxY) - newY;\n    \n    return new Rectangle(newX, newY, newWidth, newHeight);\n}", 
    "status" : "PASS", 
    "activeTime" : 51.3, 
    "totalActiveTime" : 562.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:04:56.278+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int aMinX = rectA.getX();\n    int aMinY = rectA.getY();\n    int aMaxX = aX + rectA.getWidth();\n    int aMaxY = aY + rectA.getHeight();\n    \n    int bMinX = rectB.getX();\n    int bMinY = rectB.getY();\n    int bMaxX = bX + rectB.getWidth();\n    int bMaxY = bY + rectB.getHeight();\n    \n    int newX = Math.min(aMinX, bMinX);\n    int newY = Math.min(aMinY, bMinY);\n    int newWidth = Math.min(aMaxX, bMaxX) - newX;\n    int newHeight = Math.min(aMaxY, bMaxY) - newY;\n    \n    return new Rectangle(newX, newY, newWidth, newHeight);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(462)
        }, 
        {
            "date" : ISODate("2016-04-24T06:05:45.805+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int aMinX = rectA.getX();\n    int aMinY = rectA.getY();\n    int aMaxX = aMinX + rectA.getWidth();\n    int aMaxY = aMinY + rectA.getHeight();\n    \n    int bMinX = rectB.getX();\n    int bMinY = rectB.getY();\n    int bMaxX = bMinX + rectB.getWidth();\n    int bMaxY = bMinY + rectB.getHeight();\n    \n    int newX = Math.min(aMinX, bMinX);\n    int newY = Math.min(aMinY, bMinY);\n    int newWidth = Math.min(aMaxX, bMaxX) - newX;\n    int newHeight = Math.min(aMaxY, bMaxY) - newY;\n    \n    return new Rectangle(newX, newY, newWidth, newHeight);\n}", 
            "status" : "FAIL", 
            "activeTime" : 49.1
        }, 
        {
            "date" : ISODate("2016-04-24T06:06:38.671+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int aMinX = rectA.getX();\n    int aMinY = rectA.getY();\n    int aMaxX = aMinX + rectA.getWidth();\n    int aMaxY = aMinY + rectA.getHeight();\n    \n    int bMinX = rectB.getX();\n    int bMinY = rectB.getY();\n    int bMaxX = bMinX + rectB.getWidth();\n    int bMaxY = bMinY + rectB.getHeight();\n    \n    int newX = Math.min(aMinX, bMinX);\n    int newY = Math.min(aMinY, bMinY);\n    int newWidth = Math.max(aMaxX, bMaxX) - newX;\n    int newHeight = Math.max(aMaxY, bMaxY) - newY;\n    \n    return new Rectangle(newX, newY, newWidth, newHeight);\n}", 
            "status" : "PASS", 
            "activeTime" : 51.3
        }
    ]
}
{ 
    "_id" : "zWHguoMcaweypDaK6", 
    "userId" : "KqQptyqdavcd4i7Jm", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:04:39.091+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:06:36.581+0000"), 
    "code" : "public static String parseEmail(String email){\n    String result = \"\";\n    int indexOfAt = email.indexOf(\"@\");\n    result = email.substring(0,indexOfAt);\n    return result;\n}", 
    "status" : "PASS", 
    "activeTime" : 99.3, 
    "totalActiveTime" : 99.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:06:36.580+0000"), 
            "code" : "public static String parseEmail(String email){\n    String result = \"\";\n    int indexOfAt = email.indexOf(\"@\");\n    result = email.substring(0,indexOfAt);\n    return result;\n}", 
            "status" : "PASS", 
            "activeTime" : 99.3
        }
    ]
}
{ 
    "_id" : "Mo4BjFCcWDAiSWyKf", 
    "userId" : "KqQptyqdavcd4i7Jm", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:06:47.174+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:16:37.663+0000"), 
    "code" : "public static void printPalindrome(Scanner str){\n    String original = str.next();\n    String check = original.toLowerCase();\n    boolean result = true;\n    int length = check.length() - 1;\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(\"Type one or more words: \" + original + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(\"Type one or more words: \" + original + \" is a palindrome!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 14.2, 
    "totalActiveTime" : 564.4000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:13:00.225+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String check = str.next();\n    boolean result = true;\n    int length = check.length();\n    for (int i = 0; i < check.length(); i++){ //I used check.length here instead of length var coz im gonna adjust the var later\n        if (check.charAt(i) != check.charAt(length){\n            result = false;\n            System.out.print(check + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(check + \"is a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 347.2
        }, 
        {
            "date" : ISODate("2016-04-24T06:13:12.035+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String check = str.next();\n    boolean result = true;\n    int length = check.length();\n    for (int i = 0; i < check.length(); i++)){ //I used check.length here instead of length var coz im gonna adjust the var later\n        if (check.charAt(i) != check.charAt(length){\n            result = false;\n            System.out.print(check + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(check + \"is a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-04-24T06:13:35.436+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String check = str.next();\n    boolean result = true;\n    int length = check.length();\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length){\n            result = false;\n            System.out.print(check + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(check + \"is a palindrome.\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.6
        }, 
        {
            "date" : ISODate("2016-04-24T06:13:45.438+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String check = str.next();\n    boolean result = true;\n    int length = check.length();\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(check + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(check + \"is a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.7
        }, 
        {
            "date" : ISODate("2016-04-24T06:14:21.859+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String check = str.next();\n    boolean result = true;\n    int length = check.length() - 1;\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(check + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(check + \"is a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 36.4
        }, 
        {
            "date" : ISODate("2016-04-24T06:14:50.494+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String check = str.next();\n    boolean result = true;\n    int length = check.length() - 1;\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(\"Type one or more words: \" + check + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(\"Type one or more words: \" + check + \"is a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 28.6
        }, 
        {
            "date" : ISODate("2016-04-24T06:15:09.840+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String check = str.next();\n    boolean result = true;\n    int length = check.length() - 1;\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(\"Type one or more words: \" + check + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(\"Type one or more words: \" + check + \" is a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-04-24T06:15:21.674+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String check = str.next();\n    boolean result = true;\n    int length = check.length() - 1;\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(\"Type one or more words: \" + check + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(\"Type one or more words: \" + check + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.9
        }, 
        {
            "date" : ISODate("2016-04-24T06:15:44.045+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String check = str.next();\n    check = check.toLowerCase();\n    boolean result = true;\n    int length = check.length() - 1;\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(\"Type one or more words: \" + check + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(\"Type one or more words: \" + check + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.3
        }, 
        {
            "date" : ISODate("2016-04-24T06:16:23.294+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String original = str.next();\n    check = original.toLowerCase();\n    boolean result = true;\n    int length = check.length() - 1;\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(\"Type one or more words: \" + original + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(\"Type one or more words: \" + original + \" is a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.5
        }, 
        {
            "date" : ISODate("2016-04-24T06:16:37.662+0000"), 
            "code" : "public static void printPalindrome(Scanner str){\n    String original = str.next();\n    String check = original.toLowerCase();\n    boolean result = true;\n    int length = check.length() - 1;\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(\"Type one or more words: \" + original + \" is not a palindrome.\");\n            break;\n        }\n        else {\n            length--;\n        }\n    }\n    if (result == true){\n        System.out.print(\"Type one or more words: \" + original + \" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 14.2
        }
    ]
}
{ 
    "_id" : "orXp3tSadk54ExgCT", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "L46REaDboHACstAXr", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T17:48:33.890+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:17:17.854+0000"), 
    "code" : "public static void quotify(String sentence){\n    String newString = \"\\\"\"+sentence+\"\\\"\"; // \\\" for quotation mark\n    System.out.println(newString);\n}", 
    "status" : "PASS", 
    "activeTime" : 184.4, 
    "totalActiveTime" : 321.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T17:49:37.849+0000"), 
            "code" : "public static void quotify(String sentence){\n    String newString = \"\"\"+sentence+\"\"\";\n    return newString;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 79.8
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:35.864+0000"), 
            "code" : "public static void quotify(String sentence){\n    String newString = \"\\\"\"+sentence+\"\\\"\"; // \\\" for quotation mark\n    return newString;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.7
        }, 
        {
            "date" : ISODate("2016-04-24T06:16:02.089+0000"), 
            "code" : "public static void quotify(String sentence){\n    String newString = \"\\\"\"+sentence+\"\\\"\"; // \\\" for quotation mark\n    return newString;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.7
        }, 
        {
            "date" : ISODate("2016-04-24T06:17:17.853+0000"), 
            "code" : "public static void quotify(String sentence){\n    String newString = \"\\\"\"+sentence+\"\\\"\"; // \\\" for quotation mark\n    System.out.println(newString);\n}", 
            "status" : "PASS", 
            "activeTime" : 184.4
        }
    ]
}
{ 
    "_id" : "DNv23vyHgAHzRTqPZ", 
    "userId" : "Cp9j6PryRY7XDwG8r", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T17:33:08.742+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:28:23.547+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int length = 0;\n        int longer = 0;\n        \n        if (a1.size()> a2.size()){\n            length = a2.size();\n            \n        } else {\n            length = a1.size();\n        }\n        for (int i = 0; i < length; i++){\n            int a = a1.get(i);\n            result.add(a);\n            int b = a2.get(i);\n            result.add(b);\n            \n        }\n        ArrayList<Integer> longerList = new ArrayList<>();\n        if (length==a1.size()) {\n            longer = a2.size();\n            longerList = a2;\n            \n        } else {\n            longer = a1.size();\n            longerList = a1;\n            \n        }\n        for (int j = length; j < longer; j++) {\n                int c = longerList.get(j);\n                result.add(c);  \n        }\n        a1.clear();\n        a1 = result;\n        System.out.println(a1); \n    }", 
    "status" : "FAIL", 
    "activeTime" : NumberInt(53), 
    "totalActiveTime" : 128.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:26:47.718+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int length = 0;\n        int longer = 0;\n        \n        if (a1.size()> a2.size()){\n            length = a2.size();\n            \n        } else {\n            length = a1.size();\n        }\n        for (int i = 0; i < length; i++){\n            int a = a1.get(i);\n            result.add(a);\n            int b = a2.get(i);\n            result.add(b);\n            \n        }\n        ArrayList<Integer> longerList = new ArrayList<>();\n        if (length==a1.size()) {\n            longer = a2.size();\n            longerList = a2;\n            \n        } else {\n            longer = a1.size();\n            longerList = a1;\n            \n        }\n        for (int j = length; j < longer; j++) {\n                int c = longerList.get(j);\n                result.add(c);  \n        }\n        a1.clear();\n        a1 = result;\n        \n    }", 
            "status" : "FAIL", 
            "activeTime" : 43.2
        }, 
        {
            "date" : ISODate("2016-04-24T06:27:21.124+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int length = 0;\n        int longer = 0;\n        \n        if (a1.size()> a2.size()){\n            length = a2.size();\n            \n        } else {\n            length = a1.size();\n        }\n        for (int i = 0; i < length; i++){\n            int a = a1.get(i);\n            result.add(a);\n            int b = a2.get(i);\n            result.add(b);\n            \n        }\n        ArrayList<Integer> longerList = new ArrayList<>();\n        if (length==a1.size()) {\n            longer = a2.size();\n            longerList = a2;\n            \n        } else {\n            longer = a1.size();\n            longerList = a1;\n            \n        }\n        for (int j = length; j < longer; j++) {\n                int c = longerList.get(j);\n                result.add(c);  \n        }\n        a1.clear();\n        a1 = result;\n        public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int length = 0;\n        int longer = 0;\n        \n        if (a1.size()> a2.size()){\n            length = a2.size();\n            \n        } else {\n            length = a1.size();\n        }\n        for (int i = 0; i < length; i++){\n            int a = a1.get(i);\n            result.add(a);\n            int b = a2.get(i);\n            result.add(b);\n            \n        }\n        ArrayList<Integer> longerList = new ArrayList<>();\n        if (length==a1.size()) {\n            longer = a2.size();\n            longerList = a2;\n            \n        } else {\n            longer = a1.size();\n            longerList = a1;\n            \n        }\n        for (int j = length; j < longer; j++) {\n                int c = longerList.get(j);\n                result.add(c);  \n        }\n        a1.clear();\n        a1 = result;\n        System.out.println(a1); \n    }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.1
        }, 
        {
            "date" : ISODate("2016-04-24T06:28:23.546+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int length = 0;\n        int longer = 0;\n        \n        if (a1.size()> a2.size()){\n            length = a2.size();\n            \n        } else {\n            length = a1.size();\n        }\n        for (int i = 0; i < length; i++){\n            int a = a1.get(i);\n            result.add(a);\n            int b = a2.get(i);\n            result.add(b);\n            \n        }\n        ArrayList<Integer> longerList = new ArrayList<>();\n        if (length==a1.size()) {\n            longer = a2.size();\n            longerList = a2;\n            \n        } else {\n            longer = a1.size();\n            longerList = a1;\n            \n        }\n        for (int j = length; j < longer; j++) {\n                int c = longerList.get(j);\n                result.add(c);  \n        }\n        a1.clear();\n        a1 = result;\n        System.out.println(a1); \n    }", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(53)
        }
    ]
}
{ 
    "_id" : "58kduBgdqdeG4otag", 
    "userId" : "ukRzCFySZXsgLobtY", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:23:16.113+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:34:05.294+0000"), 
    "code" : "public static String parseEmail(String email) {\n    int index = email.indexOf('@');\n    return email.substring(0,index);\n}", 
    "status" : "PASS", 
    "activeTime" : 28.3, 
    "totalActiveTime" : 239.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:33:14.871+0000"), 
            "code" : "public static parseEmail(String email) {\n    int index = email.indexOf('@');\n    \n    return email.substring(0,index);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 211.5
        }, 
        {
            "date" : ISODate("2016-04-24T06:34:05.293+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int index = email.indexOf('@');\n    return email.substring(0,index);\n}", 
            "status" : "PASS", 
            "activeTime" : 28.3
        }
    ]
}
{ 
    "_id" : "mK6FtmkKZnaMDgXz8", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T06:32:42.742+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:43:10.004+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.getX()>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.getX();\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.getX();\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(rectA.getY()>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.getY();\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.getY();\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}", 
    "status" : "PASS", 
    "activeTime" : 241.1, 
    "totalActiveTime" : 632.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T06:34:18.794+0000"), 
            "code" : "public Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.x>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.x;\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.x;\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(this.y>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.y;\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.y;\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 89.7
        }, 
        {
            "date" : ISODate("2016-04-23T06:35:03.283+0000"), 
            "code" : "public Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.getX()>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.getX();\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.getX();\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(this.y>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.getY();\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.getY();\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.9
        }, 
        {
            "date" : ISODate("2016-04-23T06:35:21.091+0000"), 
            "code" : "public Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.getX()>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.getX();\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.getX();\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(rectA.getY()>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.getY();\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.getY();\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.9
        }, 
        {
            "date" : ISODate("2016-04-23T06:35:34.325+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.getX()>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.getX();\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.getX();\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(rectA.getY()>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.getY();\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.getY();\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 12.9
        }, 
        {
            "date" : ISODate("2016-04-23T06:56:52.772+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.getX()>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.getX();\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.getX();\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(rectA.getY()>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.getY();\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.getY();\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 44.9
        }, 
        {
            "date" : ISODate("2016-04-23T07:33:53.190+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.getX()>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.getX();\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.getX();\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(rectA.getY()>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.getY();\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.getY();\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 177.6
        }, 
        {
            "date" : ISODate("2016-04-24T06:38:56.847+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.getX()>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.getX();\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.getX();\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(rectA.getY()>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.getY();\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.getY();\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 4.4
        }, 
        {
            "date" : ISODate("2016-04-24T06:43:10.003+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.getX()>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.getX();\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.getX();\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(rectA.getY()>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.getY();\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.getY();\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 241.1
        }
    ]
}
{ 
    "_id" : "rCwPuaB5a9qZSRxAa", 
    "userId" : "KqQptyqdavcd4i7Jm", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:36:16.151+0000"), 
    "updatedAt" : ISODate("2016-04-24T06:44:43.753+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 173.5, 
    "totalActiveTime" : 363.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:41:49.859+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 190.1
        }, 
        {
            "date" : ISODate("2016-04-24T06:44:43.753+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 173.5
        }
    ]
}
{ 
    "_id" : "zkkLeoJiFc7ifSYpR", 
    "userId" : "47MxiJWsWkBezecN9", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T17:09:52.580+0000"), 
    "updatedAt" : ISODate("2016-04-25T01:35:43.869+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    // is there a more efficient method without using additional ArrayList and 4 for loops?\n    ArrayList<Integer> results = new ArrayList<>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); j++){\n       results.add(a1.get(j));\n    }\n    \n    for(int k = i; k < a2.size(); k++){\n        results.add(a2.get(k));\n    }\n    \n    a1.clear();\n    for(int temp : results){ \n        a1.add(temp);        \n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 3374.2, 
    "totalActiveTime" : 11025.400000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T17:19:31.165+0000"), 
            "code" : "public ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2){\n    ArrayList<int> results = new ArrayList<>();\n    for(int i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 261.2
        }, 
        {
            "date" : ISODate("2016-04-23T17:19:49.807+0000"), 
            "code" : "public ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2){\n    ArrayList<int> results = new ArrayList<>();\n    for(int i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-04-23T17:19:58.950+0000"), 
            "code" : "public static ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2){\n    ArrayList<int> results = new ArrayList<>();\n    for(int i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.1
        }, 
        {
            "date" : ISODate("2016-04-23T17:20:18.528+0000"), 
            "code" : "import java.util.Arraylist;\npublic static ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2){\n    ArrayList<int> results = new ArrayList<>();\n    for(int i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.5
        }, 
        {
            "date" : ISODate("2016-04-23T17:20:26.297+0000"), 
            "code" : "import java.util.Arraylist;\npublic static ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2){\n    ArrayList<int> results = new ArrayList<>();\n    for(int i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.9
        }, 
        {
            "date" : ISODate("2016-04-23T17:21:14.945+0000"), 
            "code" : "import java.util.Arraylist;\npublic static ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2){\n    ArrayList<int> results = new ArrayList<>();\n    \n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.6
        }, 
        {
            "date" : ISODate("2016-04-23T17:21:46.550+0000"), 
            "code" : "public static ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2){\n    ArrayList<int> results = new ArrayList<>();\n    \n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.5
        }, 
        {
            "date" : ISODate("2016-04-23T17:22:39.559+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2){\n    ArrayList<int> results = new ArrayList<>();\n    \n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.2
        }, 
        {
            "date" : ISODate("2016-04-23T17:22:54.205+0000"), 
            "code" : "public static ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2){\n    ArrayList<int> results = new ArrayList<>();\n    \n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-04-23T17:25:25.059+0000"), 
            "code" : "public static String interleave (ArrayList<int> a1, ArrayList<int> a2){\n    //ArrayList<int> results = new ArrayList<>();\n    String result = \"\";\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 150.6
        }, 
        {
            "date" : ISODate("2016-04-23T17:26:36.874+0000"), 
            "code" : "public static String interleave (ArrayList<int> a1, ArrayList<int> a2){\n    String result = \"\";\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(72)
        }, 
        {
            "date" : ISODate("2016-04-23T17:26:57.336+0000"), 
            "code" : "public static String interleave (ArrayList<int> a1, ArrayList<int> a2){\n    String results = \"\";\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.4
        }, 
        {
            "date" : ISODate("2016-04-23T17:30:01.702+0000"), 
            "code" : "public static String interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    String results = \"\";\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n        results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 166.3
        }, 
        {
            "date" : ISODate("2016-04-23T17:30:43.490+0000"), 
            "code" : "public static String interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    String results = \"\";\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results += a1.get(i));\n        results += a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results += a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results += a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.8
        }, 
        {
            "date" : ISODate("2016-04-23T17:31:54.827+0000"), 
            "code" : "public static String interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    String results = \"\";\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results += a1.get(i);\n        results += a2.get(i);\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results += a1.get(j);\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results += a2.get(j);\n        \n    }\n    \n    System.out.print(results);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.1
        }, 
        {
            "date" : ISODate("2016-04-23T17:32:11.894+0000"), 
            "code" : "public String interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    String results = \"\";\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results += a1.get(i);\n        results += a2.get(i);\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results += a1.get(j);\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results += a2.get(j);\n        \n    }\n    \n    System.out.print(results);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.2
        }, 
        {
            "date" : ISODate("2016-04-23T17:49:15.988+0000"), 
            "code" : "public ArrayList<Integer> String interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> results = new ArrayList<Integer>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.8
        }, 
        {
            "date" : ISODate("2016-04-23T17:50:20.696+0000"), 
            "code" : "public ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<Integer>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(52)
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:38.633+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<Integer>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(i));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(i));\n        \n    }\n    \n     for(int k=0; k < results.size();k++){\n            System.out.println(results.get(k));\n        }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.9
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:38.913+0000"), 
            "code" : "public ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<Integer>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(i));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(i));\n        \n    }\n    \n     for(int k=0; k < results.size();k++){\n            System.out.println(results.get(k));\n        }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:39.419+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<Integer>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.3
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:40.601+0000"), 
            "code" : "public ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<Integer>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(i));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(i));\n        \n    }\n    \n     for(int k=0; k < results.size();k++){\n            System.out.println(results.get(k));\n        }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:10:44.042+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<Integer>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(j));\n        \n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n        \n    }\n    \n    return results;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.9
        }, 
        {
            "date" : ISODate("2016-04-24T05:15:35.903+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    for(int i =0; i < a1.size(); i++){\n        \n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(j));\n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n    }\n    \n    a1.clear();\n    for(int temp : output){\n        a1.add(temp);\n    }\n    \n    return a1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6423.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:16:08.230+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<>();\n    for(int i =0; i < a1.size(); i++){\n        \n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(j));\n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n    }\n    \n    a1.clear();\n    for(int temp : output){\n        a1.add(temp);\n    }\n    \n    return a1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.1
        }, 
        {
            "date" : ISODate("2016-04-24T05:16:30.215+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<>();\n    int i;\n    for(i =0; i < a1.size(); i++){\n        \n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(j));\n    }\n    \n    for(int j = i; j < a2.size(); i++){\n        results.add(a2.get(j));\n    }\n    \n    a1.clear();\n    for(int temp : output){\n        a1.add(temp);\n    }\n    \n    return a1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(22)
        }, 
        {
            "date" : ISODate("2016-04-24T06:44:13.524+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<>();\n    int i;\n    for(i =0; i < a1.size(); i++){\n        \n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); i++){\n       results.add(a1.get(j));\n    }\n    \n    for(int k = i; k < a2.size(); i++){\n        results.add(a2.get(k));\n    }\n    \n    a1.clear();\n    for(int temp : results){\n        a1.add(temp);\n    }\n    \n    return a1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.3
        }, 
        {
            "date" : ISODate("2016-04-24T06:48:14.011+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<>();\n    int i;\n    for(i =0; i < a1.size(); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); J++){\n       results.add(a1.get(j));\n    }\n    \n    for(int k = i; k < a2.size(); K++){\n        results.add(a2.get(k));\n    }\n    \n    a1.clear();\n    for(int temp : results){\n        a1.add(temp);\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.1
        }, 
        {
            "date" : ISODate("2016-04-24T06:48:23.558+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<>();\n    int i;\n    for(i =0; i < a1.size(); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); j++){\n       results.add(a1.get(j));\n    }\n    \n    for(int k = i; k < a2.size(); k++){\n        results.add(a2.get(k));\n    }\n    \n    a1.clear();\n    for(int temp : results){\n        a1.add(temp);\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 9.3
        }, 
        {
            "date" : ISODate("2016-04-24T06:50:31.184+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> results = new ArrayList<>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); j++){\n       results.add(a1.get(j));\n    }\n    \n    for(int k = i; k < a2.size(); k++){\n        results.add(a2.get(k));\n    }\n    \n    a1.clear();\n    for(int temp : results){\n        a1.add(temp);\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 107.7
        }, 
        {
            "date" : ISODate("2016-04-25T01:35:43.868+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    // is there a more efficient method without using additional ArrayList and 4 for loops?\n    ArrayList<Integer> results = new ArrayList<>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); j++){\n       results.add(a1.get(j));\n    }\n    \n    for(int k = i; k < a2.size(); k++){\n        results.add(a2.get(k));\n    }\n    \n    a1.clear();\n    for(int temp : results){ \n        a1.add(temp);        \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 3374.2
        }
    ]
}
{ 
    "_id" : "GvGFscsMvzRMg2twq", 
    "userId" : "KqQptyqdavcd4i7Jm", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:44:48.095+0000"), 
    "updatedAt" : ISODate("2016-04-24T07:17:55.404+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int aMinX = rectA.getX();\n    int aMaxX = rectA.getX() + rectA.getWidth();\n    \n    int bMinX = rectB.getX();\n    int bMaxX = rectB.getX() + rectB.getWidth();\n    \n    int minW = Math.min(aMinX, bMinX);\n    int maxW = Math.max(aMaxX, bMaxX) - minW;\n    \n    int aMinY = rectA.getY();\n    int aMaxY = rectA.getY() + rectA.getHeight();\n    \n    int bMinY = rectB.getY();\n    int bMaxY = rectB.getY() + rectB.getHeight();\n    \n    int minH = Math.min(aMinY, bMinY);\n    int maxH = Math.max(aMaxY, bMaxY) - minH;\n    \n    return new Rectangle(minW, minH, maxW, maxH);\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 30.9, 
    "totalActiveTime" : 1947.6000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:52:02.275+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    int totalAreaNow = (rectA.getWidth() * rectA.getHeight()) + (rectB.getWidth() * rectB.getHeight());\n    int minWidth = Math.min(rectA.getWidth(), rectB.getWidth());\n    int minHeight = (totalAreaNow + 1)/minWidth;\n    return new Rectangle(minX,minY,minWidth,minHeight);\n}", 
            "status" : "FAIL", 
            "activeTime" : 396.2
        }, 
        {
            "date" : ISODate("2016-04-24T06:53:51.413+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    int totalAreaNow = (rectA.getWidth() * rectA.getHeight()) + (rectB.getWidth() * rectB.getHeight());\n    int minWidth = Math.min(rectA.getWidth(), rectB.getWidth());\n    int minHeight = (totalAreaNow)/minWidth;\n    return new Rectangle(minX,minY,minWidth,minHeight);\n}", 
            "status" : "FAIL", 
            "activeTime" : 109.3
        }, 
        {
            "date" : ISODate("2016-04-24T06:54:43.649+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    int totalAreaNow = (rectA.getWidth() * rectA.getHeight()) + (rectB.getWidth() * rectB.getHeight());\n    int minWidth = Math.min(rectA.getWidth(), rectB.getWidth());\n    int minHeight = (totalAreaNow + 1)/minWidth;\n    return new Rectangle(minX,minY,minWidth,minHeight);\n}", 
            "status" : "FAIL", 
            "activeTime" : 52.3
        }, 
        {
            "date" : ISODate("2016-04-24T06:59:36.677+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    int totalAreaNow = (rectA.getWidth() * rectA.getHeight()) + (rectB.getWidth() * rectB.getHeight());\n    int minWidth = Math.max(rectA.getWidth(), rectB.getWidth());\n    int minHeight = (totalAreaNow + 1)/minWidth;\n    return new Rectangle(minX,minY,minWidth,minHeight);\n}", 
            "status" : "FAIL", 
            "activeTime" : 292.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:00:05.766+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    int totalAreaNow = (rectA.getWidth() * rectA.getHeight()) + (rectB.getWidth() * rectB.getHeight());\n    int minWidth = Math.max(rectA.getWidth(), rectB.getWidth()) + 1;\n    int minHeight = (totalAreaNow + 1)/minWidth;\n    return new Rectangle(minX,minY,minWidth,minHeight);\n}", 
            "status" : "FAIL", 
            "activeTime" : 29.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:03:17.045+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    int totalAreaNow = (rectA.getWidth() * rectA.getHeight()) + (rectB.getWidth() * rectB.getHeight());\n    int minWidth = 0;\n    if (rectA.getWidth() == rectB.getWidth()){\n        minWidth = rectA.getWidth();\n    }\n    else {\n        minWidth = Math.max(rectA.getWidth(), rectB.getWidth()) + 1;\n    }\n    \n    if (rectA.getHeight() == rectB.getHeight()){\n        minHeight = rectA.getHeight();\n    }\n    else {\n        minHeight = totalAreaNow/minWidth + 1;\n    }\n    \n    return new Rectangle(minX,minY,minWidth,minHeight);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 191.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:03:35.302+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    int totalAreaNow = (rectA.getWidth() * rectA.getHeight()) + (rectB.getWidth() * rectB.getHeight());\n    int minWidth = 0;\n    int minHeight = 0;\n    if (rectA.getWidth() == rectB.getWidth()){\n        minWidth = rectA.getWidth();\n    }\n    else {\n        minWidth = Math.max(rectA.getWidth(), rectB.getWidth()) + 1;\n    }\n    \n    if (rectA.getHeight() == rectB.getHeight()){\n        minHeight = rectA.getHeight();\n    }\n    else {\n        minHeight = totalAreaNow/minWidth + 1;\n    }\n    \n    return new Rectangle(minX,minY,minWidth,minHeight);\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(18)
        }, 
        {
            "date" : ISODate("2016-04-24T07:17:24.660+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int aMinX = rectA.getX();\n    int aMaxX = rectA.getX() + rectA.getWidth();\n    \n    int bMinX = rectB.getX();\n    int bMaxX = rectB.getX() + rectB.getWidth();\n    \n    int minW = Math.min(aMinX, bMinX);\n    int maxW = Math.max(aMaxX, bMaxX);\n    \n    int aMinY = rectA.getY();\n    int aMaxY = rectA.getY() + rectA.getHeight();\n    \n    int bMinY = rectB.getY();\n    int bMaxY = rectB.getY() + rectB.getHeight();\n    \n    int minH = Math.min(aMinY, bMinY);\n    int maxH = Math.max(aMaxY, bMaxY);\n    \n    return new Rectangle(minW, minH, maxW, maxH);\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 827.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:17:55.403+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int aMinX = rectA.getX();\n    int aMaxX = rectA.getX() + rectA.getWidth();\n    \n    int bMinX = rectB.getX();\n    int bMaxX = rectB.getX() + rectB.getWidth();\n    \n    int minW = Math.min(aMinX, bMinX);\n    int maxW = Math.max(aMaxX, bMaxX) - minW;\n    \n    int aMinY = rectA.getY();\n    int aMaxY = rectA.getY() + rectA.getHeight();\n    \n    int bMinY = rectB.getY();\n    int bMaxY = rectB.getY() + rectB.getHeight();\n    \n    int minH = Math.min(aMinY, bMinY);\n    int maxH = Math.max(aMaxY, bMaxY) - minH;\n    \n    return new Rectangle(minW, minH, maxW, maxH);\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 30.9
        }
    ]
}
{ 
    "_id" : "MPikipJSwGPBWwMp8", 
    "userId" : "prcQ7CZ5EtxxnNWBg", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:49:03.760+0000"), 
    "updatedAt" : ISODate("2016-04-24T07:13:42.331+0000"), 
    "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.print(input + \" is not a palindrome.\");\n    }else{\n        System.out.print(inputTemp + \" is a palindrome!\");\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 27.9, 
    "totalActiveTime" : 1497.6000000000004, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T07:05:36.930+0000"), 
            "code" : "System.out.println(\"Type one or more words: \");\n    String inputTemp = sc.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.println(input + \" is a palindrome!\");\n    }else{\n        System.out.println(input + \" is not a palindrome.\");\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1011.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:06:17.945+0000"), 
            "code" : "public void printPalindrome(){\n    System.out.println(\"Type one or more words: \");\n    String inputTemp = sc.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.println(input + \" is a palindrome!\");\n    }else{\n        System.out.println(input + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:07:30.165+0000"), 
            "code" : "public void printPalindrome(){\n    System.out.println(\"Type one or more words: \");\n    String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.println(input + \" is a palindrome!\");\n    }else{\n        System.out.println(input + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 72.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:08:47.139+0000"), 
            "code" : "public void printPalindrome(String word){\n    System.out.println(\"Type one or more words: \");\n    String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.println(input + \" is a palindrome!\");\n    }else{\n        System.out.println(input + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 76.9
        }, 
        {
            "date" : ISODate("2016-04-24T07:09:12.709+0000"), 
            "code" : "public void printPalindrome(String inputTemp){\n    //System.out.println(\"Type one or more words: \");\n    //String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.println(input + \" is a palindrome!\");\n    }else{\n        System.out.println(input + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:11:14.221+0000"), 
            "code" : "public void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words: \");\n    String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.println(input + \" is a palindrome!\");\n    }else{\n        System.out.println(input + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 121.6
        }, 
        {
            "date" : ISODate("2016-04-24T07:11:23.141+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words: \");\n    String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.println(input + \" is a palindrome!\");\n    }else{\n        System.out.println(input + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.6
        }, 
        {
            "date" : ISODate("2016-04-24T07:12:56.153+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words: \");\n    String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.println(input + \" is not a palindrome.\");\n    }else{\n        System.out.println(input + \" is a palindrome!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 92.9
        }, 
        {
            "date" : ISODate("2016-04-24T07:13:14.596+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.print(input + \" is not a palindrome.\");\n    }else{\n        System.out.print(input + \" is a palindrome!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 18.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:13:42.330+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true;\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.print(input + \" is not a palindrome.\");\n    }else{\n        System.out.print(inputTemp + \" is a palindrome!\");\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 27.9
        }
    ]
}
{ 
    "_id" : "RQcSHqvs2ihRzwg7T", 
    "userId" : "47MxiJWsWkBezecN9", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T18:10:31.700+0000"), 
    "updatedAt" : ISODate("2016-04-24T07:18:03.095+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    int resultsX;\n    int resultsY;\n    int resultsWidth;\n    int resultsHeight;\n    \n    // To get the new rectangle X-Cordinates\n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    if(rectAX < rectBX){\n        resultsX = rectAX;\n    } else{\n        resultsX = rectBX;\n    }\n    // To get the new rectangle Y-Cordinates\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    if(rectAY < rectBY){\n        resultsY = rectAY;\n    } else{\n        resultsY = rectBY;\n    }\n    \n    // To get the new rectangle width\n    int rectAWidth = rectA.getWidth();\n    int rectAWidthLength = rectAWidth + rectAX;\n    int rectBWidth = rectB.getWidth();\n    int rectBWidthLength = rectBWidth + rectBX;\n    \n    if(rectAWidthLength>rectBWidthLength){\n        resultsWidth = rectAWidthLength - resultsX;\n    } else{\n        resultsWidth = rectBWidthLength - resultsX;\n    }\n    \n    // To get the new rectangle height\n    int rectAHeight = rectA.getHeight();\n    int rectAHeightLength = rectAHeight + rectAY;\n    int rectBHeight = rectB.getHeight();\n    int rectBHeightLength = rectBHeight + rectBY;\n    \n    if(rectAHeightLength>rectBHeightLength){\n        resultsHeight = rectAHeightLength - resultsY;\n    } else{\n        resultsHeight = rectBHeightLength - resultsY;\n    }\n    \n    \n    Rectangle results = new Rectangle(resultsX, resultsY, resultsWidth, resultsHeight);\n    \n    return results;\n}", 
    "status" : "PASS", 
    "activeTime" : 712.4, 
    "totalActiveTime" : 3251.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:56:27.950+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    int resultsX;\n    int resultsY;\n    int resultsWidth;\n    int resultsHeight;\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    if(rectAX < rectBX){\n        resultsX = rectAX;\n    } else{\n        resultsX = rectBX;\n    }\n    \n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    if(rectAY < rectBY){\n        resultsY = rectAY;\n    } else{\n        resultsY = rectBY;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2539.2
        }, 
        {
            "date" : ISODate("2016-04-24T07:18:03.095+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    int resultsX;\n    int resultsY;\n    int resultsWidth;\n    int resultsHeight;\n    \n    // To get the new rectangle X-Cordinates\n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    if(rectAX < rectBX){\n        resultsX = rectAX;\n    } else{\n        resultsX = rectBX;\n    }\n    // To get the new rectangle Y-Cordinates\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    if(rectAY < rectBY){\n        resultsY = rectAY;\n    } else{\n        resultsY = rectBY;\n    }\n    \n    // To get the new rectangle width\n    int rectAWidth = rectA.getWidth();\n    int rectAWidthLength = rectAWidth + rectAX;\n    int rectBWidth = rectB.getWidth();\n    int rectBWidthLength = rectBWidth + rectBX;\n    \n    if(rectAWidthLength>rectBWidthLength){\n        resultsWidth = rectAWidthLength - resultsX;\n    } else{\n        resultsWidth = rectBWidthLength - resultsX;\n    }\n    \n    // To get the new rectangle height\n    int rectAHeight = rectA.getHeight();\n    int rectAHeightLength = rectAHeight + rectAY;\n    int rectBHeight = rectB.getHeight();\n    int rectBHeightLength = rectBHeight + rectBY;\n    \n    if(rectAHeightLength>rectBHeightLength){\n        resultsHeight = rectAHeightLength - resultsY;\n    } else{\n        resultsHeight = rectBHeightLength - resultsY;\n    }\n    \n    \n    Rectangle results = new Rectangle(resultsX, resultsY, resultsWidth, resultsHeight);\n    \n    return results;\n}", 
            "status" : "PASS", 
            "activeTime" : 712.4
        }
    ]
}
{ 
    "_id" : "npeGwKPX3ADj8WEeJ", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T07:18:01.647+0000"), 
    "updatedAt" : ISODate("2016-04-24T07:22:56.168+0000"), 
    "code" : "public static String parseEmail(String email){\n    int indexOfA = email.indexOf(\"@\");\n    String name = email.substring(0, indexOfA);\n    return name;\n}", 
    "status" : "PASS", 
    "activeTime" : 17.7, 
    "totalActiveTime" : 204.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T07:21:14.411+0000"), 
            "code" : "public static String parseEmail(String email){\n    int indexOfA = email.indexOf(\"@\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 109.1
        }, 
        {
            "date" : ISODate("2016-04-24T07:21:28.388+0000"), 
            "code" : "public static String parseEmail(String email){\n    int indexOfA = email.indexOf(\"@\");\n    return email;\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:22:38.412+0000"), 
            "code" : "public static String parseEmail(String email){\n    int indexOfA = email.indexOf(\"@\");\n    String name = email.substring(0, indexOfA -1);\n    return name;\n}", 
            "status" : "FAIL", 
            "activeTime" : 63.6
        }, 
        {
            "date" : ISODate("2016-04-24T07:22:56.168+0000"), 
            "code" : "public static String parseEmail(String email){\n    int indexOfA = email.indexOf(\"@\");\n    String name = email.substring(0, indexOfA);\n    return name;\n}", 
            "status" : "PASS", 
            "activeTime" : 17.7
        }
    ]
}
{ 
    "_id" : "JvsqNZB8tvdGfwaCY", 
    "userId" : "ukRzCFySZXsgLobtY", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:34:17.055+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:15:11.663+0000"), 
    "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.next();\n    boolean isPalindrome = true;\n    String temp = input.toLowerCase();\n    \n    for(int i = 0; i<=temp.length()/2; i++) {\n        if(temp.charAt(i)!= temp.charAt(temp.length()-i-1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(input + \" is a palindrome!\");\n    }else{\n        System.out.print(input + \" is not a palindrome.\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(25), 
    "totalActiveTime" : 9374.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T07:04:59.028+0000"), 
            "code" : "import java.util.Scanner;\n\npublic printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    String temp = input;\n    \n    //convert odd numbers to even numbers of char\n    if(length%2==1) {\n        int middleIndex = length/2+1;\n        input = input.substring(0,middleIndex) + input.substring(middleIndex+1,length);\n    }\n    int halfwayMark = input.length()/2;\n    String s1 = input.substring(0,halfwayMark);\n    String s2 = input.substring(halfwayMark,length);\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<s1.length(); i++) {\n        for(int j = s2.length()-1; j>=0; j--) {\n            if(s1.charAt(i)!=s2.charAt(j)) {\n                isPalindrome = false;\n            }\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + temp + \" is a palindrome.\");\n    }else{\n        System.ou.print(\"\\n\" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1728.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:06:13.390+0000"), 
            "code" : "import java.util.Scanner;\n\npublic void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    String temp = input;\n    \n    //convert odd numbers to even numbers of char\n    if(length%2==1) {\n        int middleIndex = length/2+1;\n        input = input.substring(0,middleIndex) + input.substring(middleIndex+1,length);\n    }\n    int halfwayMark = input.length()/2;\n    String s1 = input.substring(0,halfwayMark);\n    String s2 = input.substring(halfwayMark,length);\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<s1.length(); i++) {\n        for(int j = s2.length()-1; j>=0; j--) {\n            if(s1.charAt(i)!=s2.charAt(j)) {\n                isPalindrome = false;\n            }\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + temp + \" is a palindrome.\");\n    }else{\n        System.ou.print(\"\\n\" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:06:29.933+0000"), 
            "code" : "import java.util.Scanner;\n\npublic static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    String temp = input;\n    \n    //convert odd numbers to even numbers of char\n    if(length%2==1) {\n        int middleIndex = length/2+1;\n        input = input.substring(0,middleIndex) + input.substring(middleIndex+1,length);\n    }\n    int halfwayMark = input.length()/2;\n    String s1 = input.substring(0,halfwayMark);\n    String s2 = input.substring(halfwayMark,length);\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<s1.length(); i++) {\n        for(int j = s2.length()-1; j>=0; j--) {\n            if(s1.charAt(i)!=s2.charAt(j)) {\n                isPalindrome = false;\n            }\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + temp + \" is a palindrome.\");\n    }else{\n        System.ou.print(\"\\n\" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:07:03.603+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    String temp = input;\n    \n    //convert odd numbers to even numbers of char\n    if(length%2==1) {\n        int middleIndex = length/2+1;\n        input = input.substring(0,middleIndex) + input.substring(middleIndex+1,length);\n    }\n    int halfwayMark = input.length()/2;\n    String s1 = input.substring(0,halfwayMark);\n    String s2 = input.substring(halfwayMark,length);\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<s1.length(); i++) {\n        for(int j = s2.length()-1; j>=0; j--) {\n            if(s1.charAt(i)!=s2.charAt(j)) {\n                isPalindrome = false;\n            }\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + temp + \" is a palindrome.\");\n    }else{\n        System.ou.print(\"\\n\" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.6
        }, 
        {
            "date" : ISODate("2016-04-24T07:07:15.146+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    String temp = input;\n    \n    //convert odd numbers to even numbers of char\n    if(length%2==1) {\n        int middleIndex = length/2+1;\n        input = input.substring(0,middleIndex) + input.substring(middleIndex+1,length);\n    }\n    int halfwayMark = input.length()/2;\n    String s1 = input.substring(0,halfwayMark);\n    String s2 = input.substring(halfwayMark,length);\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<s1.length(); i++) {\n        for(int j = s2.length()-1; j>=0; j--) {\n            if(s1.charAt(i)!=s2.charAt(j)) {\n                isPalindrome = false;\n            }\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + temp + \" is a palindrome.\");\n    }else{\n        System.out.print(\"\\n\" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:13:16.382+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<length()/2; i++) {\n        count = length()-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n            isPalindrome = false;\n        }\n        count-=1;\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + temp + \" is a palindrome.\");\n    }else{\n        System.out.print(\"\\n\" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 360.8
        }, 
        {
            "date" : ISODate("2016-04-24T07:13:36.331+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<length/2; i++) {\n        count = length()-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n            isPalindrome = false;\n        }\n        count-=1;\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + temp + \" is a palindrome.\");\n    }else{\n        System.out.print(\"\\n\" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:13:47.382+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<length/2; i++) {\n        int count = length()-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n            isPalindrome = false;\n        }\n        count-=1;\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + temp + \" is a palindrome.\");\n    }else{\n        System.out.print(\"\\n\" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.1
        }, 
        {
            "date" : ISODate("2016-04-24T07:14:08.925+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<length/2; i++) {\n        int count = length()-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n            isPalindrome = false;\n        }\n        count-=1;\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + input + \" is a palindrome.\");\n    }else{\n        System.out.print(\"\\n\" + input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:14:18.313+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    \n    for(int i=0; i<length/2; i++) {\n        int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n            isPalindrome = false;\n        }\n        count-=1;\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + input + \" is a palindrome.\");\n    }else{\n        System.out.print(\"\\n\" + input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-04-24T07:15:49.249+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    \n    if(length%2==0) {\n        for(int i=0; i<length/2; i++) {\n            int count = length-1;\n                if(input.charAt(i)!=input.charAt(count)) {\n                isPalindrome = false;\n                }\n                count-=1;\n        } \n    }\n    \n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + input + \" is a palindrome.\");\n    }else{\n        System.out.print(\"\\n\" + input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 90.9
        }, 
        {
            "date" : ISODate("2016-04-24T07:16:24.337+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    \n    if(length%2==0) {\n        for(int i=0; i<length/2-1; i++) {\n            int count = length-1;\n                if(input.charAt(i)!=input.charAt(count)) {\n                isPalindrome = false;\n                }\n                count-=1;\n        } \n    }\n    \n    \n    if(isPalindrome) {\n        System.out.print(\"\\n\" + input + \" is a palindrome.\");\n    }else{\n        System.out.print(\"\\n\" + input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 35.2
        }, 
        {
            "date" : ISODate("2016-04-24T07:18:13.460+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    \n    if(length%2==0) {\n        for(int i=0; i<length/2-1; i++) {\n            int count = length-1;\n                if(input.charAt(i)!=input.charAt(count)) {\n                isPalindrome = false;\n                }\n                count-=1;\n        } \n    }\n    \n    \n    if(isPalindrome) {\n        System.out.print(input + \" is a palindrome.\");\n    }else{\n        System.out.print(+ input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 109.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:18:24.996+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    \n    if(length%2==0) {\n        for(int i=0; i<length/2-1; i++) {\n            int count = length-1;\n                if(input.charAt(i)!=input.charAt(count)) {\n                isPalindrome = false;\n                }\n                count-=1;\n        } \n    }\n    \n    \n    if(isPalindrome) {\n        System.out.print(input + \" is a palindrome.\");\n    }else{\n        System.out.print(input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:19:05.346+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n\n    for(int i=0; i<length/2-1; i++) {\n        int count = length-1;\n            if(input.charAt(i)!=input.charAt(count)) {\n            isPalindrome = false;\n            }\n            count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + input + \" is a palindrome.\");\n    }else{\n        System.out.print(\" \" + input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 40.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:19:34.675+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n\n    for(int i=0; i<length/2-1; i++) {\n        int count = length-1;\n            if(input.charAt(i)!=input.charAt(count)) {\n            isPalindrome = false;\n            }\n            count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + input + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 29.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:23:12.854+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    if(length%2==1) {\n       int halfwayMark = length/2+1;\n       input = input.substring(0,halfwayMark) + input.substring(halfwayMark,length);\n    }\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 218.2
        }, 
        {
            "date" : ISODate("2016-04-24T07:23:38.234+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    if(length%2==1) {\n       int halfwayMark = length/2;\n       input = input.substring(0,halfwayMark) + input.substring(halfwayMark,length);\n    }\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 25.2
        }, 
        {
            "date" : ISODate("2016-04-24T07:24:11.743+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    if(length%2==1) {\n       int halfwayMark = length/2;\n       input = input.substring(0,halfwayMark) + input.substring(halfwayMark+1,length);\n    }\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 33.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:24:28.102+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    if(length%2==1) {\n       int halfwayMark = length/2;\n       input = input.substring(0,halfwayMark) + input.substring(halfwayMark,length);\n    }\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:42:47.537+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 1038.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:45:25.113+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    if(length%2==1) {\n        int mid = length/2;\n        input = input + \" \";\n        input = input.substring(0,mid) + input.substring(mid+1,length+1);\n    }\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 157.6
        }, 
        {
            "date" : ISODate("2016-04-24T07:45:56.216+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    if(length%2==1) {\n        int mid = length/2;\n        input = input.substring(0,mid) + input.substring(mid+1,length);\n    }\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 31.2
        }, 
        {
            "date" : ISODate("2016-04-24T07:46:04.998+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    if(length%2==1) {\n        int mid = length/2;\n        input = input.substring(0,mid) + input.substring(mid,length);\n    }\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 8.8
        }, 
        {
            "date" : ISODate("2016-04-24T07:47:17.723+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    for(int i=0; i<length/2; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 72.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:47:31.334+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n        count-=1;\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:08:57.486+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    \n    int length = input.length();\n    boolean isPalindrome = true;\n    String temp = input;\n\n    input = input.toLowerCase();\n    \n    for(int i=0; i<length/2-1; i++) {\n    int count = length-1;\n    System.out.print(count);\n    count--;\n    System.out.print(count);\n        if(input.charAt(i)!=input.charAt(count)) {\n        isPalindrome = false;\n        }\n    } \n    \n    if(isPalindrome) {\n        System.out.print(\" \" + temp + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + temp + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 4821.3
        }, 
        {
            "date" : ISODate("2016-04-24T09:13:46.946+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    boolean isPalindrome = true;\n    String temp = input.toLowerCase();\n    \n    for(int i = 0; i<=input.length(); i++) {\n        if(input.charAt(i)!=input.charAt(input.length()-i-1) {\n            isPalindrome = false;\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\" \" + input + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 289.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:14:09.011+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    String input = sc.next();\n    boolean isPalindrome = true;\n    String temp = input.toLowerCase();\n    \n    for(int i = 0; i<=input.length(); i++) {\n        if(input.charAt(i)!= input.charAt(input.length()-i-1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(\" \" + input + \" is a palindrome!\");\n    }else{\n        System.out.print(\" \" + input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-04-24T09:14:46.529+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.next();\n    boolean isPalindrome = true;\n    String temp = input.toLowerCase();\n    \n    for(int i = 0; i<=input.length()/2; i++) {\n        if(input.charAt(i)!= input.charAt(input.length()-i-1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(input + \" is a palindrome!\");\n    }else{\n        System.out.print(input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 37.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:15:11.661+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.next();\n    boolean isPalindrome = true;\n    String temp = input.toLowerCase();\n    \n    for(int i = 0; i<=temp.length()/2; i++) {\n        if(temp.charAt(i)!= temp.charAt(temp.length()-i-1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(input + \" is a palindrome!\");\n    }else{\n        System.out.print(input + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(25)
        }
    ]
}
{ 
    "_id" : "gAJh57xBQATYPuBqW", 
    "userId" : "KqQptyqdavcd4i7Jm", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:16:42.191+0000"), 
    "updatedAt" : ISODate("2016-04-24T07:27:16.698+0000"), 
    "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    //This is assuming we can edit a1. Else can just create another list. \n    Iterator<Integer> iter = a2.iterator();\n    int count = 1;\n    if(a1.size() >= a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           //insert elements from list2\n           a1.add(count, iter.next());\n\n           //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n           count = count + 2;\n       }\n    }\n    else if(a1.size() < a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           if(count <= a1.size())\n           {\n               //insert elements from list2\n               a1.add(count, iter.next());\n\n               //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n               count = count + 2;\n           }\n           else\n           {\n               //fill in the remainder of the elements from list2 to list1\n               a1.add(iter.next());\n           }\n       }\n    }\n    return a1;\n}", 
    "status" : "PASS", 
    "activeTime" : 42.6, 
    "totalActiveTime" : 1491.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:24:30.343+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    ArrayList<Integer> longer = new ArrayList<Integer>();\n    ArrayList<Integer> shorter = new ArrayList<Integer>();\n    if (a1.size() > a2.size()){\n        longer = a1;\n        shorter = a2;\n    }\n    else {\n        longer = a2;\n        shorter = a1;\n    }\n    \n    int difference = longer.size() - shorter.size();\n    \n    for (int i = 0; i < shorter.size(); i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    for (int i = 0; i < difference; i++){\n        result.add(longer.get(shorter.size() + 1));\n    }\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 451.7
        }, 
        {
            "date" : ISODate("2016-04-24T06:26:57.982+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < a1.size(); i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    \n\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 143.8
        }, 
        {
            "date" : ISODate("2016-04-24T06:28:01.173+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    ArrayList<Integer> shorter = new ArrayList<Integer>();\n    if (a1.size() < a2.size()){\n        shorter = a1;\n    }\n    for (int i = 0; i < shorter.size(); i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    \n\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 63.2
        }, 
        {
            "date" : ISODate("2016-04-24T06:28:55.485+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    ArrayList<Integer> shorter = new ArrayList<Integer>();\n    if (a1.size() < a2.size()){\n        shorter = a1;\n    }\n    \n    result.add(a2);\n\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 54.6
        }, 
        {
            "date" : ISODate("2016-04-24T06:34:24.981+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    ArrayList<Integer> shorter = new ArrayList<Integer>();\n    if (a1.size() < a2.size()){\n        shorter = a1;\n    }\n\n    return a2;\n}", 
            "status" : "FAIL", 
            "activeTime" : 329.1
        }, 
        {
            "date" : ISODate("2016-04-24T06:35:06.630+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    return a2;\n}", 
            "status" : "FAIL", 
            "activeTime" : 41.9
        }, 
        {
            "date" : ISODate("2016-04-24T06:35:23.165+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.5
        }, 
        {
            "date" : ISODate("2016-04-24T06:35:43.084+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    return a2;\n}", 
            "status" : "FAIL", 
            "activeTime" : 18.9
        }, 
        {
            "date" : ISODate("2016-04-24T07:26:02.028+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    Iterator<Integer> iter = a2.iterator();\n    int count = 1;\n    if(a1.size() >= a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           //insert elements from list2\n           a1.add(count, iter.next());\n\n           //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n           count = count + 2;\n       }\n    }\n    else if(a1.size() < a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           if(count <= a1.size())\n           {\n               //insert elements from list2\n               a1.add(count, iter.next());\n\n               //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n               count = count + 2;\n           }\n           else\n           {\n               //fill in the remainder of the elements from list2 to list1\n               a1.add(iter.next());\n           }\n       }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 297.6
        }, 
        {
            "date" : ISODate("2016-04-24T07:26:34.193+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    Iterator<Integer> iter = a2.iterator();\n    int count = 1;\n    if(a1.size() >= a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           //insert elements from list2\n           a1.add(count, iter.next());\n\n           //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n           count = count + 2;\n       }\n    }\n    else if(a1.size() < a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           if(count <= a1.size())\n           {\n               //insert elements from list2\n               a1.add(count, iter.next());\n\n               //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n               count = count + 2;\n           }\n           else\n           {\n               //fill in the remainder of the elements from list2 to list1\n               a1.add(iter.next());\n           }\n       }\n    }\n    return a1;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(32)
        }, 
        {
            "date" : ISODate("2016-04-24T07:27:16.697+0000"), 
            "code" : "public static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    //This is assuming we can edit a1. Else can just create another list. \n    Iterator<Integer> iter = a2.iterator();\n    int count = 1;\n    if(a1.size() >= a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           //insert elements from list2\n           a1.add(count, iter.next());\n\n           //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n           count = count + 2;\n       }\n    }\n    else if(a1.size() < a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           if(count <= a1.size())\n           {\n               //insert elements from list2\n               a1.add(count, iter.next());\n\n               //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n               count = count + 2;\n           }\n           else\n           {\n               //fill in the remainder of the elements from list2 to list1\n               a1.add(iter.next());\n           }\n       }\n    }\n    return a1;\n}", 
            "status" : "PASS", 
            "activeTime" : 42.6
        }
    ]
}
{ 
    "_id" : "Za7hu4sNxmCgAtSED", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T07:49:57.900+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:44:34.817+0000"), 
    "code" : "public static String parseEmail(String email){\n    int endIndex = email.indexOf(\"@\");\n    String emailID = email.substring(0,endIndex);\n    return emailID;\n}", 
    "status" : "PASS", 
    "activeTime" : 289.3, 
    "totalActiveTime" : 480.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T07:53:10.046+0000"), 
            "code" : "public static void parseEmail(String email){\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 143.8
        }, 
        {
            "date" : ISODate("2016-04-24T07:53:58.004+0000"), 
            "code" : "public static String parseEmail(String email){\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 47.2
        }, 
        {
            "date" : ISODate("2016-04-24T09:44:34.816+0000"), 
            "code" : "public static String parseEmail(String email){\n    int endIndex = email.indexOf(\"@\");\n    String emailID = email.substring(0,endIndex);\n    return emailID;\n}", 
            "status" : "PASS", 
            "activeTime" : 289.3
        }
    ]
}
{ 
    "_id" : "KTDmvaaCM9YGay3Ch", 
    "userId" : "kL5wJ3qdYDvbWke7w", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T05:19:43.410+0000"), 
    "updatedAt" : ISODate("2016-04-24T08:03:59.301+0000"), 
    "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    String emailID = email.substring(0, pos);\n    if (emailID == null) {\n        return \"\";\n    }    \n    return emailID;\n}", 
    "status" : "PASS", 
    "activeTime" : 12.8, 
    "totalActiveTime" : 898.2999999999997, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T07:01:22.191+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexof(\"a\");\n    String emailID = email.substring(0, pos);\n    return emailID;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 229.9
        }, 
        {
            "date" : ISODate("2016-04-24T07:49:47.554+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexof(\"a\"); // '@'\n    String emailID = email.substring(0, pos+1);\n    return emailID;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.1
        }, 
        {
            "date" : ISODate("2016-04-24T07:49:59.734+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexof('a'); // '@'\n    String emailID = email.substring(0, pos+1);\n    return emailID;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.2
        }, 
        {
            "date" : ISODate("2016-04-24T07:50:52.537+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexof(\"a\"); // '@'\n    String emailID = email.substring(0, pos+1);\n    return emailID;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(30)
        }, 
        {
            "date" : ISODate("2016-04-24T07:50:55.557+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexof(\"a\"); // '@'\n    String emailID = email.substring(0, pos+1);\n    return emailID;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(3)
        }, 
        {
            "date" : ISODate("2016-04-24T07:51:02.664+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexof(\"a\"); \n    String emailID = email.substring(0, pos+1);\n    return emailID;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(7)
        }, 
        {
            "date" : ISODate("2016-04-24T07:51:39.905+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexOf(\"a\"); \n    String emailID = email.substring(0, pos+1);\n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(34)
        }, 
        {
            "date" : ISODate("2016-04-24T07:51:53.803+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexOf(\"a\"); \n    String emailID = email.substring(0, pos);\n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-24T07:52:06.664+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexOf(\"a\"); \n    String emailID = email.substring(pos);\n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-04-24T07:52:24.082+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexOf(\"a\"); \n    String emailID = email.substring(0, pos);\n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:52:29.931+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexOf(\"a\"); \n    String emailID = email.substring(0, pos);\n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-04-24T07:52:36.566+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexOf(\"a\"); \n    String emailID = email.substring(0, pos+1);\n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:55:58.907+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(0, pos+1);\n    \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 81.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:57:22.665+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(0, pos+1);\n    if (emailID = null) {\n        return \"\";\n        \n    }    \n    return emailID;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.9
        }, 
        {
            "date" : ISODate("2016-04-24T07:57:32.195+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(0, pos+1);\n    if (emailID == null) {\n        return \"\";\n        \n    }    \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:58:33.017+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(pos);\n    if (emailID == null) {\n        return \"\";\n        \n    }    \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 60.8
        }, 
        {
            "date" : ISODate("2016-04-24T07:58:36.388+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(pos);\n    if (emailID == null) {\n        return \"\";\n        \n    }    \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 3.2
        }, 
        {
            "date" : ISODate("2016-04-24T07:58:47.150+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(pos+1);\n    if (emailID == null) {\n        return \"\";\n        \n    }    \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.9
        }, 
        {
            "date" : ISODate("2016-04-24T07:58:56.544+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(0, pos+1);\n    if (emailID == null) {\n        return \"\";\n        \n    }    \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.3
        }, 
        {
            "date" : ISODate("2016-04-24T08:00:49.189+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(0, pos+1);\n   \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 51.5
        }, 
        {
            "date" : ISODate("2016-04-24T08:00:57.805+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(0, pos+1);\n   \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.6
        }, 
        {
            "date" : ISODate("2016-04-24T08:03:46.464+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    \n    String emailID = email.substring(0, pos);\n    if (emailID == null) {\n        return \"\";\n        \n    }    \n    return emailID;\n}", 
            "status" : "PASS", 
            "activeTime" : 168.7
        }, 
        {
            "date" : ISODate("2016-04-24T08:03:59.301+0000"), 
            "code" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); \n    String emailID = email.substring(0, pos);\n    if (emailID == null) {\n        return \"\";\n    }    \n    return emailID;\n}", 
            "status" : "PASS", 
            "activeTime" : 12.8
        }
    ]
}
{ 
    "_id" : "N7qTo8WmQpruLAoWQ", 
    "userId" : "zna4wuKiLGvFRJriv", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T05:25:25.854+0000"), 
    "updatedAt" : ISODate("2016-04-24T08:14:24.039+0000"), 
    "code" : "public static String parseEmail(String email){\n    \n    String pickId = '@'+\"\";\n    int i = email.indexOf(pickId);\n    String result = email.substring(0, i);\n        return result;\n    \n    // this code won't compile because the return statement may not be reached\n    // since the only return statement you have is inside an if conditional block.\n    // to exit the for loop, you can use break; or make the i<email.length() evaluate to false    \n}", 
    "status" : "PASS", 
    "activeTime" : 26.2, 
    "totalActiveTime" : 1584.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:55:15.646+0000"), 
            "code" : "public String parseEmail(String email){\n    String result;\n    for(int i = 0; i<email.length(); i++){\n        if(email.charAt(i)!= '@'){\n          result+=email.charAt(i);  \n        }else{\n            return result;\n        }\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 287.5
        }, 
        {
            "date" : ISODate("2016-04-24T06:55:41.941+0000"), 
            "code" : "public void String parseEmail(String email){\n    String result;\n    for(int i = 0; i<email.length(); i++){\n        if(email.charAt(i)!= '@'){\n          result+=email.charAt(i);  \n        }else{\n            return result;\n        }\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.2
        }, 
        {
            "date" : ISODate("2016-04-24T06:56:20.011+0000"), 
            "code" : "public String parseEmail(String email){\n    String result;\n    for(int i = 0; i<email.length(); i++){\n        if(email.charAt(i)!= '@'){\n          result+=email.charAt(i);  \n        }else{\n            return result;\n        }\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:46:25.874+0000"), 
            "code" : "public String parseEmail(String email){\n    String result;\n    boolean isId = true;\n    for(int i = 0; i<email.length(); i++){\n        if(email.charAt(i)!= '@'){\n          result+=email.charAt(i);  \n        }else{\n            isId = false;\n        }\n        if(!isId){\n            return result;\n        }\n    }\n    // this code won't compile because the return statement may not be reached\n    // since the only return statement you have is inside an if conditional block.\n    // to exit the for loop, you can use break; or make the i<email.length() evaluate to false    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(194)
        }, 
        {
            "date" : ISODate("2016-04-24T07:53:55.960+0000"), 
            "code" : "public String parseEmail(String email){\n    String result;\n    boolean isId = true;\n    for(int i = 0; i<email.length(); i++){\n        if(email.charAt(i)!= '@'&& isId== true){\n          result+=email.charAt(i);  \n        }else{\n            isId = false;\n        }\n        \n        }\n        return result;\n    }\n    // this code won't compile because the return statement may not be reached\n    // since the only return statement you have is inside an if conditional block.\n    // to exit the for loop, you can use break; or make the i<email.length() evaluate to false    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 450.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:13:40.399+0000"), 
            "code" : "public String parseEmail(String email){\n    \n    String pickId = '@'+\"\";\n    int i = email.indexOf(pickId);\n    String result = emial.substring(0, i);\n        return result;\n    }\n    // this code won't compile because the return statement may not be reached\n    // since the only return statement you have is inside an if conditional block.\n    // to exit the for loop, you can use break; or make the i<email.length() evaluate to false    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 555.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:13:57.665+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String pickId = '@'+\"\";\n    int i = email.indexOf(pickId);\n    String result = emial.substring(0, i);\n        return result;\n    }\n    // this code won't compile because the return statement may not be reached\n    // since the only return statement you have is inside an if conditional block.\n    // to exit the for loop, you can use break; or make the i<email.length() evaluate to false    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:14:24.038+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String pickId = '@'+\"\";\n    int i = email.indexOf(pickId);\n    String result = email.substring(0, i);\n        return result;\n    \n    // this code won't compile because the return statement may not be reached\n    // since the only return statement you have is inside an if conditional block.\n    // to exit the for loop, you can use break; or make the i<email.length() evaluate to false    \n}", 
            "status" : "PASS", 
            "activeTime" : 26.2
        }
    ]
}
{ 
    "_id" : "yMcmCfLr9D5s2fvNt", 
    "userId" : "prcQ7CZ5EtxxnNWBg", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T07:54:35.647+0000"), 
    "updatedAt" : ISODate("2016-04-24T08:19:50.648+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n        int Ax = rectA.getX();\n        int Ay = rectA.getY();\n        int AWidth = rectA.getWidth();\n        int AHeight = rectA.getHeight();\n        \n        int Bx = rectB.getX();\n        int By = rectB.getY();\n        int BWidth = rectB.getWidth();\n        int BHeight = rectB.getHeight();\n\n        int Cx = Math.min(Ax,Bx);\n        int Cy = Math.min(Ay,By);\n        \n        int lengthA = Ax + AWidth;\n        int lengthB = Bx + BWidth;\n        \n        int lengthC = Math.max(lengthA,lengthB);\n        int CWidth = lengthC - Cx;\n        \n        int heightA = Ay + AHeight;\n        int heightB = By + BHeight;\n        \n        int heightC = Math.max(heightA,heightB);\n        int CHeight = heightC - Cy;\n        \n        Rectangle r = new Rectangle(Cx, Cy, CWidth, CHeight);\n        \n        return r;\n    }", 
    "status" : "PASS", 
    "activeTime" : 1523.6, 
    "totalActiveTime" : 1523.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T08:19:50.647+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n        int Ax = rectA.getX();\n        int Ay = rectA.getY();\n        int AWidth = rectA.getWidth();\n        int AHeight = rectA.getHeight();\n        \n        int Bx = rectB.getX();\n        int By = rectB.getY();\n        int BWidth = rectB.getWidth();\n        int BHeight = rectB.getHeight();\n\n        int Cx = Math.min(Ax,Bx);\n        int Cy = Math.min(Ay,By);\n        \n        int lengthA = Ax + AWidth;\n        int lengthB = Bx + BWidth;\n        \n        int lengthC = Math.max(lengthA,lengthB);\n        int CWidth = lengthC - Cx;\n        \n        int heightA = Ay + AHeight;\n        int heightB = By + BHeight;\n        \n        int heightC = Math.max(heightA,heightB);\n        int CHeight = heightC - Cy;\n        \n        Rectangle r = new Rectangle(Cx, Cy, CWidth, CHeight);\n        \n        return r;\n    }", 
            "status" : "PASS", 
            "activeTime" : 1523.6
        }
    ]
}
{ 
    "_id" : "67MiuZWMKgY2GeGHA", 
    "userId" : "kL5wJ3qdYDvbWke7w", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T08:04:10.586+0000"), 
    "updatedAt" : ISODate("2016-04-24T08:20:17.595+0000"), 
    "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n    \n    String lowWord = word.toLowerCase();    \n    int len = lowWord.length();\n    String reverse = \"\";\n    \n    for (int i = lowWord.length() -1; i >= 0; i--) {\n        char c = lowWord.charAt(i);\n        reverse = reverse + c;\n    }\n    \n    if (reverse.equals(lowWord)) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n        \n  \n}", 
    "status" : "PASS", 
    "activeTime" : 71.4, 
    "totalActiveTime" : 638.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T08:17:57.968+0000"), 
            "code" : "public String printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n  \n    int len = word.length();\n    String reverse = \"\";\n    \n    for (int i = word.length -1; i >= 0; i--) {\n        char c = word.charAt(i);\n        reverse = reverse + c;\n    }\n    \n    if (reverse.equals(word)) {\n        System.out.println(word + \"is a palindrome.\");\n    } else {\n        System.out.println(word + \"is not a palindrome.\");\n    }\n        \n  \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 499.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:18:09.695+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n  \n    int len = word.length();\n    String reverse = \"\";\n    \n    for (int i = word.length -1; i >= 0; i--) {\n        char c = word.charAt(i);\n        reverse = reverse + c;\n    }\n    \n    if (reverse.equals(word)) {\n        System.out.println(word + \"is a palindrome.\");\n    } else {\n        System.out.println(word + \"is not a palindrome.\");\n    }\n        \n  \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-04-24T08:18:18.300+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n  \n    int len = word.length();\n    String reverse = \"\";\n    \n    for (int i = word.length() -1; i >= 0; i--) {\n        char c = word.charAt(i);\n        reverse = reverse + c;\n    }\n    \n    if (reverse.equals(word)) {\n        System.out.println(word + \"is a palindrome.\");\n    } else {\n        System.out.println(word + \"is not a palindrome.\");\n    }\n        \n  \n}", 
            "status" : "FAIL", 
            "activeTime" : 8.4
        }, 
        {
            "date" : ISODate("2016-04-24T08:18:48.587+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n  \n    int len = word.length();\n    String reverse = \"\";\n    \n    for (int i = word.length() -1; i >= 0; i--) {\n        char c = word.charAt(i);\n        reverse = reverse + c;\n    }\n    \n    if (reverse.equals(word)) {\n        System.out.println(word + \" is a palindrome.\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n        \n  \n}", 
            "status" : "FAIL", 
            "activeTime" : 30.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:19:06.123+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n  \n    int len = word.length();\n    String reverse = \"\";\n    \n    for (int i = word.length() -1; i >= 0; i--) {\n        char c = word.charAt(i);\n        reverse = reverse + c;\n    }\n    \n    if (reverse.equals(word)) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n        \n  \n}", 
            "status" : "FAIL", 
            "activeTime" : 17.6
        }, 
        {
            "date" : ISODate("2016-04-24T08:20:17.594+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n    \n    String lowWord = word.toLowerCase();    \n    int len = lowWord.length();\n    String reverse = \"\";\n    \n    for (int i = lowWord.length() -1; i >= 0; i--) {\n        char c = lowWord.charAt(i);\n        reverse = reverse + c;\n    }\n    \n    if (reverse.equals(lowWord)) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n        \n  \n}", 
            "status" : "PASS", 
            "activeTime" : 71.4
        }
    ]
}
{ 
    "_id" : "EeEa7oivRi4RCuC5x", 
    "userId" : "zna4wuKiLGvFRJriv", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T07:04:42.971+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:12:46.435+0000"), 
    "code" : "public static void printPalindrome(Scanner console){ // return type? \n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n    String reverseWord = \"\";\n    for(int i = word.length()-1;i>=0;i--){\n        char ch = word.charAt(i);\n        reverseWord += ch;\n    }\n    boolean status=word.equalsIgnoreCase(reverseWord);\n    if(status){\n        System.out.println( word+\" is a palindrome!\");\n    }else{\n       System.out.println(word+\" is not a palindrome.\");  \n    }\n    \n    \n    \n   \n}", 
    "status" : "PASS", 
    "activeTime" : 380.7, 
    "totalActiveTime" : 5177.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T07:41:50.050+0000"), 
            "code" : "public void printPalindrome(String word){\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println(word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2416.1
        }, 
        {
            "date" : ISODate("2016-04-24T07:43:11.732+0000"), 
            "code" : "public static void printPalindrome(String word){\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println(word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 81.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:55:39.110+0000"), 
            "code" : "public static void printPalindrome(String word){\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println(word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 102.9
        }, 
        {
            "date" : ISODate("2016-04-24T07:56:15.048+0000"), 
            "code" : "public void printPalindrome(String word){\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println(word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(36)
        }, 
        {
            "date" : ISODate("2016-04-24T08:14:58.247+0000"), 
            "code" : "public void printPalindrome(String word){\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println(word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:15:18.342+0000"), 
            "code" : "public static printPalindrome(String word){\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println(word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:15:37.959+0000"), 
            "code" : "public printPalindrome(String word){ // return type? \n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println(word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-04-24T08:16:01.719+0000"), 
            "code" : "public void printPalindrome(String word){ // return type? \n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println(word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:21:00.566+0000"), 
            "code" : "public static String printPalindrome(String word){ // return type? \n    String result;\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        result= word+\"is a palindrome\";\n    }else{\n        result = word+\"is not a palindrome\";\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(299)
        }, 
        {
            "date" : ISODate("2016-04-24T08:22:04.886+0000"), 
            "code" : "public void printPalindrome(String word){ // return type? \n    String result;\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println( word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n   \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.3
        }, 
        {
            "date" : ISODate("2016-04-24T08:22:10.056+0000"), 
            "code" : "public void printPalindrome(String word){ // return type? \n    String result;\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println( word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n   \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:43:11.323+0000"), 
            "code" : "public static void printPalindrome(Scanner console){ // return type? \n    System.out.print(\"type one or more words: \");\n    String word = console.nextLine();\n    \n    String result;\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println( word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n   \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1600.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:43:43.545+0000"), 
            "code" : "public static void printPalindrome(Scanner console){ // return type? \n    System.out.print(\"type one or more words: \");\n    String word = console.nextLine();\n    \n    String result;\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1)){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j)){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println( word+\"is a palindrome\");\n    }else{\n        System.out.println(word+\"is not a palindrome\");\n    }\n   \n}", 
            "status" : "FAIL", 
            "activeTime" : 32.1
        }, 
        {
            "date" : ISODate("2016-04-24T13:44:22.641+0000"), 
            "code" : "public static void printPalindrome(Scanner console){ // return type? \n    System.out.print(\"type one or more words: \");\n    String word = console.nextLine();\n    \n    String result;\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1)){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j)){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println( word+\" is a palindrome!\");\n    }else{\n        System.out.println(word+\" is not a palindrome.\");\n    }\n   \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(39)
        }, 
        {
            "date" : ISODate("2016-04-24T13:44:45.517+0000"), 
            "code" : "public static void printPalindrome(Scanner console){ // return type? \n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n    \n    String result;\n    int length = word.length();\n    boolean isPalindrome = true;\n    if(length%2==0){\n        for(int i = 0; i<length/2; i++){\n            if(word.charAt(i)!= word.charAt(length-i-1)){\n                isPalindrome = false;\n            }\n        }\n    }else{\n        for(int j = 0; j<(length-1)/2; j++){\n            if(word.charAt(j)!= word.charAt(length-1-j)){\n                isPalindrome = false;\n            }\n        }\n    }\n    if(isPalindrome){\n        System.out.println( word+\" is a palindrome!\");\n    }else{\n        System.out.println(word+\" is not a palindrome.\");\n    }\n   \n}", 
            "status" : "FAIL", 
            "activeTime" : 22.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:12:46.434+0000"), 
            "code" : "public static void printPalindrome(Scanner console){ // return type? \n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n    String reverseWord = \"\";\n    for(int i = word.length()-1;i>=0;i--){\n        char ch = word.charAt(i);\n        reverseWord += ch;\n    }\n    boolean status=word.equalsIgnoreCase(reverseWord);\n    if(status){\n        System.out.println( word+\" is a palindrome!\");\n    }else{\n       System.out.println(word+\" is not a palindrome.\");  \n    }\n    \n    \n    \n   \n}", 
            "status" : "PASS", 
            "activeTime" : 380.7
        }
    ]
}
{ 
    "_id" : "dDff7cfAtELJdwbMQ", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T08:24:27.767+0000"), 
    "updatedAt" : ISODate("2016-04-24T08:31:00.046+0000"), 
    "code" : "public static String parseEmail(String email){\n    int before = email.indexOf(\"@\");\n    String toReturn = email.substring(0,before);\n    \n    return toReturn;\n}", 
    "status" : "PASS", 
    "activeTime" : 10.6, 
    "totalActiveTime" : 181.79999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T08:30:49.293+0000"), 
            "code" : "public static String parseEmail(String email){\n    int before = email.indexOf(\"@\");\n    String toReturn = email.substring(0,before);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 171.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:31:00.046+0000"), 
            "code" : "public static String parseEmail(String email){\n    int before = email.indexOf(\"@\");\n    String toReturn = email.substring(0,before);\n    \n    return toReturn;\n}", 
            "status" : "PASS", 
            "activeTime" : 10.6
        }
    ]
}
{ 
    "_id" : "Jm4meQxguBDxpoAX8", 
    "userId" : "prcQ7CZ5EtxxnNWBg", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T07:13:51.821+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:40:24.778+0000"), 
    "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a3.size() > 0){\n    a1.add(a3.get(a3.size()-1));\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 567.5, 
    "totalActiveTime" : 5829.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T07:28:29.061+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList a2){\n    ArrayList a3 = new ArrayList(); \n    int i;\n    for(i = 0; i < Math.min(a1,a2); i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < Math.max(a1,a2); j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1=a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 886.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:28:59.593+0000"), 
            "code" : "import java.util.*;\npublic static void interleave(ArrayList a1, ArrayList a2){\n    ArrayList a3 = new ArrayList(); \n    int i;\n    for(i = 0; i < Math.min(a1,a2); i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < Math.max(a1,a2); j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1=a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.7
        }, 
        {
            "date" : ISODate("2016-04-24T07:30:56.771+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList a2){\n    ArrayList a3 = new ArrayList(); \n    int i;\n    for(i = 0; i < Math.min(a1,a2); i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < Math.max(a1,a2); j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1=a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 117.2
        }, 
        {
            "date" : ISODate("2016-04-24T07:36:22.543+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList a2){\n    ArrayList a3 = new ArrayList(); \n    int i;\n    for(i = 0; i < Math.min(a1.size(), a2.size()); i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < Math.max(a1.size(), a2.size()); j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1=a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 325.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:42:33.796+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList a2){\n    ArrayList a3 = new ArrayList(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1=a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 226.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:45:08.452+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList a2){\n    ArrayList a3 = new ArrayList(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.4
        }, 
        {
            "date" : ISODate("2016-04-24T08:21:21.692+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList a1, ArrayList a2){\n    ArrayList a3 = new ArrayList();\n    \n    int a = a1.size();\n    int b = a2.size();\n    int shorter = Math.min(a, b);\n    int higher = Math.max(a, b);\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 89.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:23:39.836+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n}", 
            "status" : "FAIL", 
            "activeTime" : 139.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:24:50.967+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    for(int k = 0; k < a1.size(); k++){\n    System.out.println(a1.get(k));\n        \n    } \n}", 
            "status" : "FAIL", 
            "activeTime" : 70.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:25:08.655+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    for(int k = 0; k < a1.size(); k++){\n    System.out.print(a1.get(k));\n        \n    } \n}", 
            "status" : "FAIL", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:25:21.192+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    for(int k = 0; k < a1.size(); k++){\n    System.out.print(a1.get(k) + \",\");\n        \n    } \n}", 
            "status" : "FAIL", 
            "activeTime" : 12.6
        }, 
        {
            "date" : ISODate("2016-04-24T08:26:25.285+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    for(int k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    System.out.print(a1.get(k));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:26:44.462+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    System.out.print(a1.get(k));\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:27:27.858+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    System.out.print(a1.get(k)-1);\n}", 
            "status" : "FAIL", 
            "activeTime" : 43.4
        }, 
        {
            "date" : ISODate("2016-04-24T08:28:32.456+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    //System.out.print(a1.get(k)-1);\n}", 
            "status" : "FAIL", 
            "activeTime" : 64.4
        }, 
        {
            "date" : ISODate("2016-04-24T08:29:30.475+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    System.out.print(a1.get(k-1));\n}", 
            "status" : "FAIL", 
            "activeTime" : 58.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:30:21.277+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    System.out.print(a1.get(a1.size()-1));\n}", 
            "status" : "FAIL", 
            "activeTime" : 50.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:42:05.956+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size > 0){\n    System.out.print(a1.get(a1.size()-1));\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 661.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:42:12.894+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    System.out.print(a1.get(a1.size()-1));\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:43:14.818+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    System.out.print(a1.get(a1.size()-1));\n    }else{\n    System.out.print( );\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 61.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:43:30.726+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; \n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    System.out.print(a1.get(a1.size()-1));\n    }else{\n    System.out.print(\" \");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:57:43.542+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    System.out.print(a1.get(a1.size()-1));\n    }else{\n    System.out.print(\" \");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 555.6
        }, 
        {
            "date" : ISODate("2016-04-24T09:01:49.031+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a1.size()-1; k++){\n    System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    System.out.print(a1.get(a1.size()-1));\n    }else{\n    System.out.print(\" \");\n    }\n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 245.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:22:18.613+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    a1=a3; //what's wrong with this line?\n    //int k;\n    //for(k = 0; k < a1.size()-1; k++){\n    //System.out.print(a1.get(k) + \",\");\n    //} \n    //if(a1.size() > 0){\n    //System.out.print(a1.get(a1.size()-1));\n    //}else{\n    //System.out.print(\" \");\n    //}\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(1096)
        }, 
        {
            "date" : ISODate("2016-04-24T09:24:14.809+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    System.out.print(a1.get(a1.size()-1));\n    }else{\n    System.out.print(\" \");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 116.3
        }, 
        {
            "date" : ISODate("2016-04-24T09:25:00.450+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    a1.add(a1.get(a1.size()-1));\n    }else{\n    a1.add(\" \");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(46)
        }, 
        {
            "date" : ISODate("2016-04-24T09:25:11.558+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    a1.add(a1.get(a1.size()-1));\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:25:30.142+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    a1.add(a1.get(a3.size()-1));\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 18.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:26:19.540+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a3.size() > 0){\n    a1.add(a1.get(a3.size()-1));\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 49.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:26:51.375+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    a1.add(a1.get(a1.size()-1));\n    }else{\n    a1.add(\" \");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(32)
        }, 
        {
            "date" : ISODate("2016-04-24T09:27:08.572+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    a1.add(a1.get(a1.size()-1));\n    }else{\n    System.out.print(\" \");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(17)
        }, 
        {
            "date" : ISODate("2016-04-24T09:27:28.986+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a1.size() > 0){\n    a1.add(a1.get(a3.size()-1));\n    }else{\n    System.out.print(\" \");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:27:56.583+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a3.size() > 0){\n    a1.add(a3.get(a3.size()-1));\n    }else{\n    System.out.print(\" \");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 27.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:24.777+0000"), 
            "code" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a3.size() > 0){\n    a1.add(a3.get(a3.size()-1));\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 567.5
        }
    ]
}
{ 
    "_id" : "dZdAEjfykbeXRswik", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T21:39:43.561+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:55:00.867+0000"), 
    "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome.\");\n        }\n        output=\"\";\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 89.1, 
    "totalActiveTime" : 1808.8999999999996, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:10:48.356+0000"), 
            "code" : "public void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    for(int k=string.length()-1; k>-1;k--){\n    ouput = ouput+\"\"+string.charAt(k);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 155.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:21:19.436+0000"), 
            "code" : "public void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=string.length()-1; k>-1;k--){\n    ouput = ouput+\"\"+string.charAt(k); // indentation\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.7
        }, 
        {
            "date" : ISODate("2016-04-24T08:21:33.618+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=string.length()-1; k>-1;k--){\n    ouput = ouput+\"\"+string.charAt(k); // indentation\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:23:17.257+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=string.length()-1; k>-1;k--){\n    ouput = ouput+\"\"+string.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase()){\n        System.out.println( ouput +\"is a palindrome!\")\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 93.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:23:41.663+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n    ouput = ouput+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase()){\n        System.out.println( ouput +\"is a palindrome!\")\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.4
        }, 
        {
            "date" : ISODate("2016-04-24T08:23:59.011+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n        ouput = ouput+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase()){\n        System.out.println( ouput +\"is a palindrome!\")\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:24:29.589+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 30.6
        }, 
        {
            "date" : ISODate("2016-04-24T08:27:25.438+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=string.length()-1; k>-1;k--){\n        ouput = ouput+\"\"+string.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase()){\n        System.out.\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 175.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:27:45.365+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=string.length()-1; k>-1;k--){\n        ouput = ouput+\"\"+string.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase()){\n        System.out.println();\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(20)
        }, 
        {
            "date" : ISODate("2016-04-24T08:28:06.307+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n        ouput = ouput+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase()){\n        System.out.println();\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:28:23.136+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n        ouput = ouput+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase())){\n        System.out.println();\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:28:37.957+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n        output = output+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase())){\n        System.out.println();\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.5
        }, 
        {
            "date" : ISODate("2016-04-24T08:28:58.645+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n        output = output+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase())){\n        System.out.println(input + \"is a palindrome!\");\n    }\n    // finally, to print out whether the input is a palindrome\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:31:24.490+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n        output = output+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase())){\n        System.out.println(input + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(input + \" is not a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 145.7
        }, 
        {
            "date" : ISODate("2016-04-24T08:32:09.891+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n        output = output+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase())){\n        System.out.println(\"Type one or more words: \"input + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(\"Type one or more words: \"input + \" is not a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 45.7
        }, 
        {
            "date" : ISODate("2016-04-24T08:32:22.885+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n        output = output+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase())){\n        System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:40:09.053+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    // you'll need to use the for loop to check if the input is a palindrome or not\n    for(int k=input.length()-1; k>-1;k--){\n        output = output+\"\"+input.charAt(k); // indentation\n    }\n    if(input.toLowerCase().equals(output.toLowerCase())){\n        System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n    }\n    else{\n        System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 444.7
        }, 
        {
            "date" : ISODate("2016-04-24T08:42:14.809+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        \n        for(int k=input.length()-1; k>-1;k--){\n            myList.get(i) = output+\"\"+input.charAt(k); // indentation\n        }\n        if(input.toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 123.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:43:09.486+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        \n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(input.toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 56.5
        }, 
        {
            "date" : ISODate("2016-04-24T08:43:47.522+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        \n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 38.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:43:53.367+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        \n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:44:05.190+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        \n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";;\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:44:09.661+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        \n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";;\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 4.4
        }, 
        {
            "date" : ISODate("2016-04-24T08:44:15.997+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        \n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        } test\n        output=\"\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.6
        }, 
        {
            "date" : ISODate("2016-04-24T08:44:22.152+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        \n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(6)
        }, 
        {
            "date" : ISODate("2016-04-24T08:44:57.838+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        System.out.println(myList.get(i));\n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 35.7
        }, 
        {
            "date" : ISODate("2016-04-24T08:45:41.826+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(44)
        }, 
        {
            "date" : ISODate("2016-04-24T09:15:37.670+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 33.8
        }, 
        {
            "date" : ISODate("2016-04-24T09:25:45.855+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 33.1
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:24.287+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 27.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:53:31.881+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome!\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 29.1
        }, 
        {
            "date" : ISODate("2016-04-24T09:55:00.866+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    \n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // indentation\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome.\");\n        }\n        output=\"\";\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 89.1
        }
    ]
}
{ 
    "_id" : "pmxaj5L2XFBKuBrg4", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T08:38:54.396+0000"), 
    "updatedAt" : ISODate("2016-04-24T08:57:23.461+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x =x;\n        this.y =y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x +\",y=\" + y +\",width=\" + width + \",height=\"+ height + \"]\";\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 14.9, 
    "totalActiveTime" : 1240.1000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T08:54:33.718+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int length;\n    \n    public Rectangle(int x, int y, int width, int length){\n        this.x =x;\n        this.y =y;\n        this.width = width;\n        this.length = length;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toSring(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1070.5
        }, 
        {
            "date" : ISODate("2016-04-24T08:55:12.841+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x =x;\n        this.y =y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toSring(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(39)
        }, 
        {
            "date" : ISODate("2016-04-24T08:55:52.806+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x =x;\n        this.y =y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toSring(){\n        return \"Rectangle[x=\"+Rectangle.getX()+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.3
        }, 
        {
            "date" : ISODate("2016-04-24T08:56:09.245+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x =x;\n        this.y =y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toSring(){\n        return \"Rectangle[x=\"+getX()+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.4
        }, 
        {
            "date" : ISODate("2016-04-24T08:57:08.419+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x =x;\n        this.y =y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toSring(){\n        return \"Rectangle[x=\" + x +\",y=\" + y +\",width=\" + width + \",height=\"+ height + \"]\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(59)
        }, 
        {
            "date" : ISODate("2016-04-24T08:57:23.460+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x =x;\n        this.y =y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x +\",y=\" + y +\",width=\" + width + \",height=\"+ height + \"]\";\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 14.9
        }
    ]
}
{ 
    "_id" : "Fn4m2K7eifsLJ2WXq", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T08:31:12.333+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:02:56.678+0000"), 
    "code" : "public static void printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    String word2 = word.toLowerCase();\n    int lenOfWord = word.length() - 1;\n    boolean check = true;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word2.charAt(i) == word2.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            check = false;\n        }\n        \n    }\n    if (check){\n        System.out.print(word  + \" is a palindrome!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 34.1, 
    "totalActiveTime" : 1887.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T08:38:13.650+0000"), 
            "code" : "public boolean printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length();\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            return false;\n        }\n        \n    }\n    return true;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 432.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:38:21.367+0000"), 
            "code" : "public static boolean printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length();\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            return false;\n        }\n        \n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:38:59.590+0000"), 
            "code" : "public static boolean printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            return false;\n        }\n        \n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(38)
        }, 
        {
            "date" : ISODate("2016-04-24T08:39:15.298+0000"), 
            "code" : "public static boolean printPalindrome(Scanner cons){\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            return false;\n        }\n        \n    }\n    return true;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(16)
        }, 
        {
            "date" : ISODate("2016-04-24T08:40:56.758+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.println(\"Type one or more words: \")\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(\"is not a palindrome\");\n            break;\n        }\n        \n    }\n    System.out.print(\"is a palindrome\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 101.6
        }, 
        {
            "date" : ISODate("2016-04-24T08:41:04.353+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.println(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(\"is not a palindrome\");\n            break;\n        }\n        \n    }\n    System.out.print(\"is a palindrome\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.4
        }, 
        {
            "date" : ISODate("2016-04-24T08:41:38.472+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.println(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(word + \"is not a palindrome\");\n            break;\n        }\n        \n    }\n    System.out.print(word  + \"is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 34.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:42:02.188+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.println(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome\");\n            break;\n        }\n        \n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 23.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:42:32.897+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.println(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome\");\n            break;\n        }\n        System.out.print(word  + \" is a palindrome!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 30.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:42:58.919+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.println(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n        System.out.print(word  + \" is a palindrome!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(26)
        }, 
        {
            "date" : ISODate("2016-04-24T08:44:13.923+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.println(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(75)
        }, 
        {
            "date" : ISODate("2016-04-24T08:45:07.302+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.println(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 53.5
        }, 
        {
            "date" : ISODate("2016-04-24T08:54:13.271+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    //System.out.println(\"Type one or more words: \");\n    String word = cons.nextLine();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 545.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:00:38.326+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.println(\"Type one or more words: \");\n    String word = cons.nextLine();\n    word = word.toLowerCase();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 357.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:01:00.326+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    word = word.toLowerCase();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word.charAt(i) == word.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.6
        }, 
        {
            "date" : ISODate("2016-04-24T09:01:37.765+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    word2 = word.toLowerCase();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word2.charAt(i) == word2.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:01:51.145+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    String word2 = word.toLowerCase();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word2.charAt(i) == word2.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-04-24T09:02:07.121+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    String word2 = word.toLowerCase();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word2.charAt(i) == word2.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n        break;\n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-04-24T09:02:22.581+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    String word2 = word.toLowerCase();\n    int lenOfWord = word.length() - 1;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word2.charAt(i) == word2.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            break;\n        }\n        break;\n    }\n    System.out.print(word  + \" is a palindrome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.6
        }, 
        {
            "date" : ISODate("2016-04-24T09:02:56.678+0000"), 
            "code" : "public static void printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine();\n    String word2 = word.toLowerCase();\n    int lenOfWord = word.length() - 1;\n    boolean check = true;\n    \n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word2.charAt(i) == word2.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");\n            check = false;\n        }\n        \n    }\n    if (check){\n        System.out.print(word  + \" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 34.1
        }
    ]
}
{ 
    "_id" : "nWebCQavNQgPX3pim", 
    "userId" : "fzFhAfCHiwc4842pK", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T09:41:43.203+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:57:05.112+0000"), 
    "code" : "public static String parseEmail(String email){\n    return email.substring(0,email.lastIndexOf(\"@\")); // email.substring() returns a String variable that has to be (a) stored in a String container or (b) returned by the method\n}", 
    "status" : "PASS", 
    "activeTime" : 30.3, 
    "totalActiveTime" : 60.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T13:34:32.462+0000"), 
            "code" : "public static String parseEmail(String email){\n    return emailId = email.substring(0,email.lastIndexOf(\"@\"));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(1)
        }, 
        {
            "date" : ISODate("2016-04-23T13:34:33.364+0000"), 
            "code" : "public static String parseEmail(String email){\n    return emailId = email.substring(0,email.lastIndexOf(\"@\"));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(1)
        }, 
        {
            "date" : ISODate("2016-04-23T14:52:00.646+0000"), 
            "code" : "public static String parseEmail(String email){\n    return emailId = email.substring(0,email.lastIndexOf(\"@\"));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(1)
        }, 
        {
            "date" : ISODate("2016-04-24T09:03:19.251+0000"), 
            "code" : "public static String parseEmail(String email){\n    return emailId = email.substring(0,email.lastIndexOf(\"@\")); // email.substring() returns a String variable that has to be (a) stored in a String container or (b) returned by the method\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:56:34.678+0000"), 
            "code" : "public static String parseEmail(String email){\n    return emailId = email.substring(0,email.lastIndexOf(\"@\")); // email.substring() returns a String variable that has to be (a) stored in a String container or (b) returned by the method\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.6
        }, 
        {
            "date" : ISODate("2016-04-24T09:57:05.111+0000"), 
            "code" : "public static String parseEmail(String email){\n    return email.substring(0,email.lastIndexOf(\"@\")); // email.substring() returns a String variable that has to be (a) stored in a String container or (b) returned by the method\n}", 
            "status" : "PASS", 
            "activeTime" : 30.3
        }
    ]
}
{ 
    "_id" : "7FtHGGYXTgbdPypd3", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T08:32:56.635+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:42:27.842+0000"), 
    "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n        }\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n        }\n    }\n    a1.clear();\n    for(int i=0;i<resultList.size();i++){\n        a1.add(resultList.get(i));\n    }\n    return a1;\n\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(20), 
    "totalActiveTime" : 1647.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T08:47:59.154+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(137)
        }, 
        {
            "date" : ISODate("2016-04-24T08:48:19.486+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a3){\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 20.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:50:46.422+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.length==a2.length){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 147.1
        }, 
        {
            "date" : ISODate("2016-04-24T08:51:07.432+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 20.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:53:02.627+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i==a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 115.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:53:45.383+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 42.6
        }, 
        {
            "date" : ISODate("2016-04-24T08:56:11.646+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n    }\n    else if(a1.size()>a2.size()){\n        System.out.println(\"HERE\");\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 145.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:59:24.736+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        System.out.println(\"HERE\");\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 193.4
        }, 
        {
            "date" : ISODate("2016-04-24T08:59:33.877+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        System.out.println(\"HERE\");\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-04-24T09:00:58.059+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        \n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n        for(int i=0;i<resultList.size();i++){\n            System.out.println(a1.get(i);\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 84.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:01:07.281+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        \n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n        for(int i=0;i<resultList.size();i++){\n            System.out.println(a1.get(i));\n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-04-24T09:01:55.044+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        \n        for(int i=0;i<a1.size();i++){\n            if(i=a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n        for(int i=0;i<resultList.size();i++){\n            System.out.println(a1.get(i));\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(48)
        }, 
        {
            "date" : ISODate("2016-04-24T09:02:03.574+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        \n        for(int i=0;i<a1.size();i++){\n            if(i==a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n        for(int i=0;i<resultList.size();i++){\n            System.out.println(a1.get(i));\n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 8.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:02:14.087+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        \n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()-1){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n        for(int i=0;i<resultList.size();i++){\n            System.out.println(a1.get(i));\n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 10.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:03:14.592+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        \n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n        for(int i=0;i<resultList.size();i++){\n            System.out.println(a1.get(i));\n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 60.6
        }, 
        {
            "date" : ISODate("2016-04-24T09:03:55.037+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        \n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 40.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:06:03.202+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 83.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:07:04.203+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i);\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 61.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:07:09.917+0000"), 
            "code" : "public static void interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:08:37.889+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 87.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:09:00.901+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(23)
        }, 
        {
            "date" : ISODate("2016-04-24T09:09:05.714+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 4.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:09:09.141+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 3.3
        }, 
        {
            "date" : ISODate("2016-04-24T09:15:46.357+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.3
        }, 
        {
            "date" : ISODate("2016-04-24T09:25:13.968+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-04-24T09:55:13.854+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.6
        }, 
        {
            "date" : ISODate("2016-04-24T09:57:46.427+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1.clear();\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1.clear();\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1.clear();\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n    a1.clear();\n    return a1;\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 152.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:57:52.655+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n        a1.clear();\n        a1=resultList;\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1.clear();\n        a1=resultList;\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n        a1.clear();\n        a1=resultList;\n    }\n    for(int i=0;i<a1.size();i++){\n        System.out.println(a1.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(6)
        }, 
        {
            "date" : ISODate("2016-04-24T10:42:08.022+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n            \n        }\n    }\n    a1.clear();\n    for(int i=0;i<resultList.size();i++){\n        a1.add(resultList.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "PASS", 
            "activeTime" : 66.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:42:27.841+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n        }\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n        }\n    }\n    a1.clear();\n    for(int i=0;i<resultList.size();i++){\n        a1.add(resultList.get(i));\n    }\n    return a1;\n\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(20)
        }
    ]
}
{ 
    "_id" : "rA3bCkxASQcWRfL8E", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:07:25.347+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:40:57.342+0000"), 
    "code" : "public class Rectangle{\n    int x;\n    int y;\n    int width;\n    int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 138.9, 
    "totalActiveTime" : 493.69999999999993, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:11:50.661+0000"), 
            "code" : "public class Rectangle{\n    int x;\n    int y;\n    int width;\n    int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 162.1
        }, 
        {
            "date" : ISODate("2016-04-24T09:12:41.415+0000"), 
            "code" : "public class Rectangle{\n    int x;\n    int y;\n    int width;\n    int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    public int getHeight(){\n        return height;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 50.8
        }, 
        {
            "date" : ISODate("2016-04-24T09:15:03.588+0000"), 
            "code" : "public class Rectangle{\n    int x;\n    int y;\n    int width;\n    int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 141.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:40:57.341+0000"), 
            "code" : "public class Rectangle{\n    int x;\n    int y;\n    int width;\n    int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 138.9
        }
    ]
}
{ 
    "_id" : "5E3u5ZcixoksQTkFS", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T13:30:33.925+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:18:28.694+0000"), 
    "code" : "public class Rectangle {\n\t//instances     // good to comment your code\n    private int x = 0; // you don't have to assign values here, since your constructor will be doing so\n    private int y = 0;\n    private int width = 0;\n    private int height = 0;\n\n    \n    //constructors    \n    public Rectangle(){ // default constructor was not requested, so it's best not to include it\n        x = 0;\n        y = 0;\n        width = 0;\n        height = 0;\n    }\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n \n \n    //methods\n    public int getX(){\n        return x;\n    }\n     public int getY(){\n        return y;\n    }   \n    public int getWidth(){\n        return width;\n    }\n    public int getHeight(){\n        return height;\n    }\n    \n    public String toString(){\n        return (\"Rectangle[x=\" + x + \",y=\" + y +\",width=\" +width+\",height=\"+height+\"]\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 2906.4, 
    "totalActiveTime" : 2976.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:05:45.575+0000"), 
            "code" : "public class Rectangle {\n\t//instances\n    private int x = 0;\n    private int y = 0;\n    private int width = 0;\n    private int height = 0;\n\n    \n    //constructors    \n    public Rectangle(){\n        x = 0;\n        y = 0;\n        width = 0;\n        height = 0;\n    }\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n \n \n    //methods\n    public int getX(){\n        return x;\n    }\n     public int getY(){\n        return y;\n    }   \n    public int getWidth(){\n        return width;\n    }\n    public int getHeight(){\n        return height;\n    }\n    \n    public String toString(){\n        return (\"Rectangle[x=\" + x + \",y=\" + y +\",width=\" +width+\",height=\"+height+\"]\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 69.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:18:28.693+0000"), 
            "code" : "public class Rectangle {\n\t//instances     // good to comment your code\n    private int x = 0; // you don't have to assign values here, since your constructor will be doing so\n    private int y = 0;\n    private int width = 0;\n    private int height = 0;\n\n    \n    //constructors    \n    public Rectangle(){ // default constructor was not requested, so it's best not to include it\n        x = 0;\n        y = 0;\n        width = 0;\n        height = 0;\n    }\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n \n \n    //methods\n    public int getX(){\n        return x;\n    }\n     public int getY(){\n        return y;\n    }   \n    public int getWidth(){\n        return width;\n    }\n    public int getHeight(){\n        return height;\n    }\n    \n    public String toString(){\n        return (\"Rectangle[x=\" + x + \",y=\" + y +\",width=\" +width+\",height=\"+height+\"]\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 2906.4
        }
    ]
}
{ 
    "_id" : "95cwz94A9wE9WEs9L", 
    "userId" : "ukRzCFySZXsgLobtY", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:34:31.597+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:41:16.047+0000"), 
    "code" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 49.9, 
    "totalActiveTime" : 382.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:40:27.001+0000"), 
            "code" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        System.out.println(\"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 327.8
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:27.744+0000"), 
            "code" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        System.out.println(\"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:41:16.047+0000"), 
            "code" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 49.9
        }
    ]
}
{ 
    "_id" : "KRf7WHbFTCziJvHHs", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T02:14:36.634+0000"), 
    "updatedAt" : ISODate("2016-04-24T16:51:55.878+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    //\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 14.5, 
    "totalActiveTime" : 389.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T02:15:05.401+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-04-23T02:16:50.452+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.2
        }, 
        {
            "date" : ISODate("2016-04-23T02:37:24.006+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 108.9
        }, 
        {
            "date" : ISODate("2016-04-23T02:40:00.280+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 95.9
        }, 
        {
            "date" : ISODate("2016-04-23T03:07:10.805+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 109.4
        }, 
        {
            "date" : ISODate("2016-04-23T14:32:23.346+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 14.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:21.782+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:22.082+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:26.334+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.6
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:27.133+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:28.907+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:25:28.745+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(2)
        }, 
        {
            "date" : ISODate("2016-04-24T10:25:43.420+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    //\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 14.6
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:38.825+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    //\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.6
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:39.380+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    //\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.1
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:55.877+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    //\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 14.5
        }
    ]
}
{ 
    "_id" : "BD6aEG8GgRf6xj3uQ", 
    "userId" : "sJHc88TqFpuuuT54p", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:35:28.840+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:44:42.636+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\" + x + \n        \",y=\" + y +\n        \",width=\" + width +\n        \",height=\" + height +\n        \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 56.9, 
    "totalActiveTime" : 1066.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:43:45.539+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\" + x + \n        \",y=\" + y +\n        \",width=\" + width +\n        \",height=\" + height +\n        \"]\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1009.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:44:42.636+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\" + x + \n        \",y=\" + y +\n        \",width=\" + width +\n        \",height=\" + height +\n        \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 56.9
        }
    ]
}
{ 
    "_id" : "YM29ZDN4wPeWdg9Zj", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:03:01.535+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:51:44.703+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    \n    if(len1 == 0){\n        a1.addAll(a2);\n    }\n    \n    if(len1 != 0 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(a1.get(j));\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len1; j<len2; j++){\n                r.add(a2.get(j));\n            }\n        }\n    a1.clear();\n    a1.addAll(r);\n    }\n    \n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 34.3, 
    "totalActiveTime" : 1702.5000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:40:19.253+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n\n    if(len1>len2){\n        for(int i=0; i<len2; i++){\n            r.add(a1.get(i));\n            r.add(a2.get(i));\n        }\n        for(int j=len2; j<len1; j++){\n            r.add(j);\n        }\n    }\n    \n    \n    if(len2>=len1){\n        for(int i=0; i<len1; i++){\n            r.add(a1.get(i));\n            r.add(a2.get(i));\n        }\n        for(int j=len2; j<len2; j++){\n            r.add(j);\n        }\n    }\n    \n    a1.clear();\n    a1.add(r);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.8
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:19.287+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n\n    if(len1>len2){\n        for(int i=0; i<len2; i++){\n            r.add(a1.get(i));\n            r.add(a2.get(i));\n        }\n        for(int j=len2; j<len1; j++){\n            r.add(j);\n        }\n    }\n    \n    \n    if(len2>=len1){\n        for(int i=0; i<len1; i++){\n            r.add(a1.get(i));\n            r.add(a2.get(i));\n        }\n        for(int j=len2; j<len2; j++){\n            r.add(j);\n        }\n    }\n    \n    a1.clear();\n    a1.add(r);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1163.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:42:01.841+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n\n    if(len1>len2){\n        for(int i=0; i<len2; i++){\n            r.add(a1.get(i));\n            r.add(a2.get(i));\n        }\n        for(int j=len2; j<len1; j++){\n            r.add(j);\n        }\n    }\n    \n    \n    if(len2>=len1){\n        for(int i=0; i<len1; i++){\n            r.add(a1.get(i));\n            r.add(a2.get(i));\n        }\n        for(int j=len2; j<len2; j++){\n            r.add(j);\n        }\n    }\n    \n    a1.clear();\n    a1.add(r);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(183)
        }, 
        {
            "date" : ISODate("2016-04-24T09:42:17.650+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n\n    if(len1>len2){\n        for(int i=0; i<len2; i++){\n            r.add(a1.get(i));\n            r.add(a2.get(i));\n        }\n        for(int j=len2; j<len1; j++){\n            r.add(j);\n        }\n    }\n    \n    \n    if(len2>=len1){\n        for(int i=0; i<len1; i++){\n            r.add(a1.get(i));\n            r.add(a2.get(i));\n        }\n        for(int j=len2; j<len2; j++){\n            r.add(j);\n        }\n    }\n    \n    a1.clear();\n    a1.addAll(r);\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-04-24T09:43:37.348+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    if(len1 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(j);\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len2; j++){\n                r.add(j);\n            }\n        }\n    }\n    \n    \n    a1.clear();\n    a1.addAll(r);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 79.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:43:51.390+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    if((len1 && len2) != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(j);\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len2; j++){\n                r.add(j);\n            }\n        }\n    }\n    \n    \n    a1.clear();\n    a1.addAll(r);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-04-24T09:44:06.286+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    if(len1 != 0 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(j);\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len2; j++){\n                r.add(j);\n            }\n        }\n    }\n    \n    \n    a1.clear();\n    a1.addAll(r);\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:45:32.926+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    if(len1 != 0 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(a1.get(j));\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len2; j++){\n                r.add(j);\n            }\n        }\n    }\n    \n    \n    a1.clear();\n    a1.addAll(r);\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 68.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:45:39.386+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    if(len1 != 0 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(a1.get(j));\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len2; j++){\n                r.add(a2.get(j));\n            }\n        }\n    }\n    \n    \n    a1.clear();\n    a1.addAll(r);\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 6.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:48:57.663+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    \n    if(len1 == 0){\n        a1.add(a2);\n    }\n    \n    if(len1 != 0 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(a1.get(j));\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len2; j++){\n                r.add(a2.get(j));\n            }\n        }\n    }\n    \n    \n    a1.clear();\n    a1.addAll(r);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 75.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:50:40.073+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    \n    if(len1 == 0){\n        a1.addAll(a2);\n    }\n    \n    if(len1 != 0 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(a1.get(j));\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len2; j++){\n                r.add(a2.get(j));\n            }\n        }\n    }\n    \n    \n    a1.clear();\n    a1.addAll(r);\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:51:08.791+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    \n    if(len1 == 0){\n        a1.addAll(a2);\n    }\n    \n    if(len1 != 0 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(a1.get(j));\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len2; j++){\n                r.add(a2.get(j));\n            }\n        }\n    a1.clear();\n    a1.addAll(r);\n    }\n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 26.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:51:44.702+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>();\n    \n    if(len1 == 0){\n        a1.addAll(a2);\n    }\n    \n    if(len1 != 0 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(a1.get(j));\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len1; j<len2; j++){\n                r.add(a2.get(j));\n            }\n        }\n    a1.clear();\n    a1.addAll(r);\n    }\n    \n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 34.3
        }
    ]
}
{ 
    "_id" : "cHKp88rtCsdeMjBYP", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:08:40.314+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:57:53.979+0000"), 
    "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n        // insert your code here.\n        \n        int totalCounters = supermarket.getNumCounters();\n        int count = 0;\n        \n        for (int a = 1; a <= totalCounters; a++){\n            Counter currentCounter = supermarket.getCounter(a);\n            int numberOfCustInQueue = currentCounter.getNumCustomersInQueue();\n            \n            if (numberOfCustInQueue == 0){\n                count++;\n            }\n        }\n        \n        return count;\n    }", 
    "status" : "PASS", 
    "activeTime" : 62.4, 
    "totalActiveTime" : 62.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:57:53.978+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n        // insert your code here.\n        \n        int totalCounters = supermarket.getNumCounters();\n        int count = 0;\n        \n        for (int a = 1; a <= totalCounters; a++){\n            Counter currentCounter = supermarket.getCounter(a);\n            int numberOfCustInQueue = currentCounter.getNumCustomersInQueue();\n            \n            if (numberOfCustInQueue == 0){\n                count++;\n            }\n        }\n        \n        return count;\n    }", 
            "status" : "PASS", 
            "activeTime" : 62.4
        }
    ]
}
{ 
    "_id" : "SMn6ct3A66TkzZawo", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "MpWwods8ctZAZk2ov", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:08:42.666+0000"), 
    "updatedAt" : ISODate("2016-04-24T09:58:35.931+0000"), 
    "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n        // insert your code here.\n        String rtn = \"[\";\n        int numOfOpenQueues = 0;\n        int totalCounters = supermarket.getNumCounters();\n        \n        for(int i = 1; i< totalCounters+1; i++){\n            Counter thisCounter = supermarket.getCounter(i);\n            Cashier thisCashier = thisCounter.getCashier();\n            if(thisCashier != null){\n                rtn += \"\" + i + \"-open\"; //if it is open, concat counter number and status\n            }else{\n            rtn += \"\" + i + \"-closed\";// vice-versa if not. \n            }\n            if (i != totalCounters){\n                rtn += \", \"; //concats comma and space if it is not the last \n            }\n        }\n        \n        \n        \n        \n        return rtn + \"]\";\n    }", 
    "status" : "PASS", 
    "activeTime" : 19.3, 
    "totalActiveTime" : 41.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:58:16.334+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n        // insert your code here.\n        String rtn = \"[\";\n        int numOfOpenQueues = 0;\n        int totalCounters = supermarket.getNumCounters();\n        \n        for(int i = 1; i< totalCounters+1; i++){\n            Counter thisCounter = supermarket.getCounter(i);\n            Cashier thisCashier = thisCounter.getCashier();\n            if(thisCashier != null){\n                rtn += \"\" + i + \"-open\"; //if it is open, concat counter number and status\n            }else{\n            rtn += \"\" + i + \"-closed\";// vice-versa if not. \n            }\n            if (i != totalCounters){\n                rtn += \", \"; //concats comma and space if it is not the last \n            }\n        }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:58:35.930+0000"), 
            "code" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n        // insert your code here.\n        String rtn = \"[\";\n        int numOfOpenQueues = 0;\n        int totalCounters = supermarket.getNumCounters();\n        \n        for(int i = 1; i< totalCounters+1; i++){\n            Counter thisCounter = supermarket.getCounter(i);\n            Cashier thisCashier = thisCounter.getCashier();\n            if(thisCashier != null){\n                rtn += \"\" + i + \"-open\"; //if it is open, concat counter number and status\n            }else{\n            rtn += \"\" + i + \"-closed\";// vice-versa if not. \n            }\n            if (i != totalCounters){\n                rtn += \", \"; //concats comma and space if it is not the last \n            }\n        }\n        \n        \n        \n        \n        return rtn + \"]\";\n    }", 
            "status" : "PASS", 
            "activeTime" : 19.3
        }
    ]
}
{ 
    "_id" : "98T9z9R8YsyB3xgJg", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "xsTmbTMhHzWKFwzSw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:08:45.946+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:04:39.733+0000"), 
    "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n        int rtn = 0;\n        int totalNumberOfCounters = supermarket.getNumCounters();\n        int queuesWithoutSnrs = 0;\n        double queueLen = 0.0;\n        double snrsInQueue = 0.0;\n        double snrsPercentage = 0.0;\n        double lastLargestPercentage = 0.0;\n        boolean snrCheck = true;\n        \n        for(int i = 1; i <= totalNumberOfCounters; i++){\n            Counter currentCounter = supermarket.getCounter(i);\n            if(currentCounter != null){\n                queueLen = currentCounter.getNumCustomersInQueue();\n                for(int x = 1; x <= queueLen; x++ ){\n                    Customer currentCustomer = currentCounter.getCustomerAtPosition(x);\n                    if(currentCustomer != null){\n                        int age = currentCustomer.getAge();\n                        if(age>= 60){\n                            snrsInQueue++;\n                        }\n                    }\n                }// end customer queue for loop\n            }\n            if (snrsInQueue == 0){\n                queuesWithoutSnrs++; // to tally up the queues without seniors \n            }\n            if( queueLen != 0){\n                snrsPercentage = snrsInQueue/queueLen;\n            }\n            if(snrsPercentage> lastLargestPercentage){\n                rtn = i; //sets the return value to the current counter number \n                lastLargestPercentage = snrsPercentage; //sets the new largest \n            }\n            snrsInQueue = 0;// reset value before ending loop\n        }//end Counter for loop\n        \n        if(queuesWithoutSnrs == totalNumberOfCounters){ //checks if there are any queues with seniors\n            snrCheck = false;\n        }\n        if(!snrCheck){\n            rtn = rtn - 1; //for the negative value\n        }\n\n        \n        return rtn ;\n    }", 
    "status" : "PASS", 
    "activeTime" : 342.6, 
    "totalActiveTime" : 363.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:58:56.898+0000"), 
            "code" : "public static int retrieveOpenCounterWithHighestPercentOfSeniorCitizens(Supermarket supermarket) {\n        int rtn = 0;\n        int totalNumberOfCounters = supermarket.getNumCounters();\n        int queuesWithoutSnrs = 0;\n        double queueLen = 0.0;\n        double snrsInQueue = 0.0;\n        double snrsPercentage = 0.0;\n        double lastLargestPercentage = 0.0;\n        boolean snrCheck = true;\n        \n        for(int i = 1; i <= totalNumberOfCounters; i++){\n            Counter currentCounter = supermarket.getCounter(i);\n            if(currentCounter != null){\n                queueLen = currentCounter.getNumCustomersInQueue();\n                for(int x = 1; x <= queueLen; x++ ){\n                    Customer currentCustomer = currentCounter.getCustomerAtPosition(x);\n                    if(currentCustomer != null){\n                        int age = currentCustomer.getAge();\n                        if(age>= 60){\n                            snrsInQueue++;\n                        }\n                    }\n                }// end customer queue for loop\n            }\n            if (snrsInQueue == 0){\n                queuesWithoutSnrs++; // to tally up the queues without seniors \n            }\n            if( queueLen != 0){\n                snrsPercentage = snrsInQueue/queueLen;\n            }\n            if(snrsPercentage> lastLargestPercentage){\n                rtn = i; //sets the return value to the current counter number \n                lastLargestPercentage = snrsPercentage; //sets the new largest \n            }\n            snrsInQueue = 0;// reset value before ending loop\n        }//end Counter for loop\n        \n        if(queuesWithoutSnrs == totalNumberOfCounters){ //checks if there are any queues with seniors\n            snrCheck = false;\n        }\n        if(!snrCheck){\n            rtn = rtn - 1; //for the negative value\n        }\n\n        \n        return rtn ;\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:04:39.732+0000"), 
            "code" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n        int rtn = 0;\n        int totalNumberOfCounters = supermarket.getNumCounters();\n        int queuesWithoutSnrs = 0;\n        double queueLen = 0.0;\n        double snrsInQueue = 0.0;\n        double snrsPercentage = 0.0;\n        double lastLargestPercentage = 0.0;\n        boolean snrCheck = true;\n        \n        for(int i = 1; i <= totalNumberOfCounters; i++){\n            Counter currentCounter = supermarket.getCounter(i);\n            if(currentCounter != null){\n                queueLen = currentCounter.getNumCustomersInQueue();\n                for(int x = 1; x <= queueLen; x++ ){\n                    Customer currentCustomer = currentCounter.getCustomerAtPosition(x);\n                    if(currentCustomer != null){\n                        int age = currentCustomer.getAge();\n                        if(age>= 60){\n                            snrsInQueue++;\n                        }\n                    }\n                }// end customer queue for loop\n            }\n            if (snrsInQueue == 0){\n                queuesWithoutSnrs++; // to tally up the queues without seniors \n            }\n            if( queueLen != 0){\n                snrsPercentage = snrsInQueue/queueLen;\n            }\n            if(snrsPercentage> lastLargestPercentage){\n                rtn = i; //sets the return value to the current counter number \n                lastLargestPercentage = snrsPercentage; //sets the new largest \n            }\n            snrsInQueue = 0;// reset value before ending loop\n        }//end Counter for loop\n        \n        if(queuesWithoutSnrs == totalNumberOfCounters){ //checks if there are any queues with seniors\n            snrCheck = false;\n        }\n        if(!snrCheck){\n            rtn = rtn - 1; //for the negative value\n        }\n\n        \n        return rtn ;\n    }", 
            "status" : "PASS", 
            "activeTime" : 342.6
        }
    ]
}
{ 
    "_id" : "sYmoBzXbyQv8CDJzn", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T08:39:24.147+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:27:05.311+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAW = rectA.getWidth();\n    int rectBW = rectB.getWidth();\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    \n    int finalX =0;\n    int diffX=0;\n    int finalWidth=0;\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n\n    if(rectAX<rectBX){\n        finalWidth = rectBW;\n    } else {\n        if(rectAW<rectBW){\n        finalWidth = rectAW;\n        }else{\n        finalWidth = rectBW;\n    }   \n    }\n   \n    finalWidth = diffX + finalWidth; \n\n    //Y\n    int rectAH = rectA.getHeight();\n    int rectBH = rectB.getHeight();\n    \n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int finalY =0;\n    int diffY=0;\n    int finalHeight=0;\n    \n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    \n    if(rectAH<rectBH){\n        finalHeight = rectAH;\n    }else{\n        finalHeight = rectBH;\n    }   \n  \n    finalHeight = diffY + finalHeight; \n    //r\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
    "status" : "PASS", 
    "activeTime" : 48.4, 
    "totalActiveTime" : 3812.899999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:40:24.739+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    int finalX =0;\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n    }else{\n        finalX = rectBX;\n    }\n\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    int finalY =0;\n    \n    if(rectAY<rectBY){\n        finalY = rectAY;\n    }else{\n        finalY = rectBY;\n    }   \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2088.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:52:22.082+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    int finalX =0;\n    int diff=0;\n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n    int finalWidth = diffX + finalX; \n\n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    int finalY =0;\n    int diffY=0;\n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    int finalHeight = diffY + finalY;\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 373.8
        }, 
        {
            "date" : ISODate("2016-04-24T09:52:46.563+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    int finalX =0;\n    int diffx=0;\n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n    int finalWidth = diffX + finalX; \n\n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    int finalY =0;\n    int diffY=0;\n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    int finalHeight = diffY + finalY;\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:53:02.055+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    int finalX =0;\n    int diffX=0;\n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n    int finalWidth = diffX + finalX; \n\n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    int finalY =0;\n    int diffY=0;\n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    int finalHeight = diffY + finalY;\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:53:17.347+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    int finalX =0;\n    int diffX=0;\n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n    int finalWidth = diffX + finalX; \n\n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    int finalY =0;\n    int diffY=0;\n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    int finalHeight = diffY + finalY;\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:00:17.874+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAW = rectA.getWidth();\n    int rectBW = rectB.getWidth();\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    int finalX =0;\n    int diffX=0;\n\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n\n    if(rectAW<rectBW){\n        finalWidth = rectAW;\n    }else{\n        finalWidth = rectBW;\n    }   \n    \n    \n    finalWidth = diffX + finalWidth; \n\n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    int finalY =0;\n    int diffY=0;\n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    int finalHeight = diffY + finalY;\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 420.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:00:43.128+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAW = rectA.getWidth();\n    int rectBW = rectB.getWidth();\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    int finalX =0;\n    int diffX=0;\n    int finalWidth=0;\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n\n    if(rectAW<rectBW){\n        finalWidth = rectAW;\n    }else{\n        finalWidth = rectBW;\n    }   \n    \n    \n    finalWidth = diffX + finalWidth; \n\n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    int finalY =0;\n    int diffY=0;\n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    int finalHeight = diffY + finalY;\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:03:49.920+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAW = rectA.getWidth();\n    int rectBW = rectB.getWidth();\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    int finalX =0;\n    int diffX=0;\n    int finalWidth=0;\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n\n    if(rectAW<rectBW){\n        finalWidth = rectAW;\n    }else{\n        finalWidth = rectBW;\n    }   \n    finalWidth = diffX + finalWidth; \n\n    //Y\n    int rectAH = rectA.getHeight();\n    int rectBH = rectB.getHeight();\n    \n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    int finalY =0;\n    int diffY=0;\n    int finalHeight=0;\n    \n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    \n    if(rectAH<rectBH){\n        finalHeight = rectAH;\n    }else{\n        finalHeight = rectBH;\n    }   \n  \n    finalHeight = diffY + finalHeight; \n    //r\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : 186.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:06:43.567+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAW = rectA.getWidth();\n    int rectBW = rectB.getWidth();\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    \n    int finalX =0;\n    int diffX=0;\n    int finalWidth=0;\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n\n    if(rectAW<rectBW){\n        finalWidth = rectAW;\n    }else{\n        finalWidth = rectBW;\n    }   \n    finalWidth = diffX + finalWidth; \n\n    //Y\n    int rectAH = rectA.getHeight();\n    int rectBH = rectB.getHeight();\n    \n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int finalY =0;\n    int diffY=0;\n    int finalHeight=0;\n    \n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    \n    if(rectAH<rectBH){\n        finalHeight = rectAH;\n    }else{\n        finalHeight = rectBH;\n    }   \n  \n    finalHeight = diffY + finalHeight; \n    //r\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : 173.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:20:38.084+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAW = rectA.getWidth();\n    int rectBW = rectB.getWidth();\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    \n    int finalX =0;\n    int diffX=0;\n    int finalWidth=0;\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n\n    if(rectAW<rectBW){\n        finalWidth = rectAW;\n    }else{\n        finalWidth = rectBW;\n    }   \n    finalWidth = diffX + finalWidth; \n\n    //Y\n    int rectAH = rectA.getHeight();\n    int rectBH = rectB.getHeight();\n    \n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int finalY =0;\n    int diffY=0;\n    int finalHeight=0;\n    \n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    \n    if(rectAH<rectBH){\n        finalHeight = rectAH;\n    }else{\n        finalHeight = rectBH;\n    }   \n  \n    finalHeight = diffY + finalHeight; \n    //r\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : 102.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:26:16.829+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAW = rectA.getWidth();\n    int rectBW = rectB.getWidth();\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    \n    int finalX =0;\n    int diffX=0;\n    int finalWidth=0;\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n\n    if(rectAX<rectBX){\n        finalWidth = rectAW;\n    } else {\n        if(rectAW<rectBW){\n        finalWidth = rectAW;\n        }else{\n        finalWidth = rectBW;\n    }   \n    }\n   \n    finalWidth = diffX + finalWidth; \n\n    //Y\n    int rectAH = rectA.getHeight();\n    int rectBH = rectB.getHeight();\n    \n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int finalY =0;\n    int diffY=0;\n    int finalHeight=0;\n    \n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    \n    if(rectAH<rectBH){\n        finalHeight = rectAH;\n    }else{\n        finalHeight = rectBH;\n    }   \n  \n    finalHeight = diffY + finalHeight; \n    //r\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
            "status" : "FAIL", 
            "activeTime" : 338.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:27:05.310+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAW = rectA.getWidth();\n    int rectBW = rectB.getWidth();\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    \n    int finalX =0;\n    int diffX=0;\n    int finalWidth=0;\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n\n    if(rectAX<rectBX){\n        finalWidth = rectBW;\n    } else {\n        if(rectAW<rectBW){\n        finalWidth = rectAW;\n        }else{\n        finalWidth = rectBW;\n    }   \n    }\n   \n    finalWidth = diffX + finalWidth; \n\n    //Y\n    int rectAH = rectA.getHeight();\n    int rectBH = rectB.getHeight();\n    \n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int finalY =0;\n    int diffY=0;\n    int finalHeight=0;\n    \n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    \n    if(rectAH<rectBH){\n        finalHeight = rectAH;\n    }else{\n        finalHeight = rectBH;\n    }   \n  \n    finalHeight = diffY + finalHeight; \n    //r\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
            "status" : "PASS", 
            "activeTime" : 48.4
        }
    ]
}
{ 
    "_id" : "LHWspLq6BZoDsMw9L", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "ovCgAccuGWHny3ZXc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:08:57.044+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:05:55.207+0000"), 
    "code" : "public static void printCheckerBoard (String pattern, int rows, int col){    \n        \n        String sep = \"\";\n        \n        if(pattern != null){\n            int patternLength = pattern.length();\n            for(int i = 0; i <patternLength; i++){\n                sep += \"*\";\n            }// set length of \"*\" seperator \n            \n            for(int i = 0; i< rows; i++){\n                for(int x = 0; x< col/2; x++){ //for every col, print an iteration\n                    if(i%2 == 0){//print this if row is even \n                        System.out.print(sep);\n                        System.out.print(pattern);\n                    }else{//print this if row is odd\n                        System.out.print(pattern);\n                        System.out.print(sep);\n                    }\n                }\n                //print last column if col is an odd number \n                if(col%2 == 1){\n                    if(i%2 == 0){\n                        System.out.print(sep);\n                    }else{\n                        System.out.print(pattern);\n                    }\n                }\n                System.out.println(); // kicks this to the next row\n            }\n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 18.9, 
    "totalActiveTime" : 18.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:05:55.206+0000"), 
            "code" : "public static void printCheckerBoard (String pattern, int rows, int col){    \n        \n        String sep = \"\";\n        \n        if(pattern != null){\n            int patternLength = pattern.length();\n            for(int i = 0; i <patternLength; i++){\n                sep += \"*\";\n            }// set length of \"*\" seperator \n            \n            for(int i = 0; i< rows; i++){\n                for(int x = 0; x< col/2; x++){ //for every col, print an iteration\n                    if(i%2 == 0){//print this if row is even \n                        System.out.print(sep);\n                        System.out.print(pattern);\n                    }else{//print this if row is odd\n                        System.out.print(pattern);\n                        System.out.print(sep);\n                    }\n                }\n                //print last column if col is an odd number \n                if(col%2 == 1){\n                    if(i%2 == 0){\n                        System.out.print(sep);\n                    }else{\n                        System.out.print(pattern);\n                    }\n                }\n                System.out.println(); // kicks this to the next row\n            }\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 18.9
        }
    ]
}
{ 
    "_id" : "dPCJfot5tkjffRN2x", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "ccZ7suBHz7fcjm6sk", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:08:59.817+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:06:21.107+0000"), 
    "code" : "public static String translateMessage (MessageTranslator translator, String pattern ) {\n        String rtn  = \"Null Value Entered\";\n        int lastEnd = 0;\n        boolean wasSeperator = false;\n        \n        if(translator == null){\n            translator = new MessageTranslator();\n        }\n\n        if (pattern != null) { // Handles null pointer exception\n            rtn = \"\";\n            for (int i = 0; i < pattern.length(); i++) {\n                if (i != pattern.length()-1) { // checks if this is the last iteration\n                    char currentChar = pattern.charAt(i);\n                    String thisPattern = \"\";\n                    // STEP ONE : If this is the start of a next letter, substring from the last end till this one\n                    if(currentChar == '|'){\n                        thisPattern = pattern.substring( lastEnd , i ); //this will not count the latest char, which is a '|'\n                        char thisLetter = translator.decode( thisPattern );\n                        if (thisLetter != '#') {\n                            rtn += thisLetter; // if this is not junk code; add to string\n                        }\n                        lastEnd = i+1; //this will start the next substring of the next morse pattern, after this '|' char. \n                    }\n                    // STEP TWO : Concats a space where there are two '|'\n                    if ( (currentChar == '|') && (wasSeperator == true) ) {\n                        rtn += ' ';\n                    }\n                    // STEP THREE : This section will remind the next iteration if the last char was a '|'\n                    if (currentChar == '|') {\n                        wasSeperator = true;\n                    }else{\n                        wasSeperator = false;\n                    }\n                    // STEP FOUR : Else condition handles the last morse code sequence \n                }else{\n                    String thisPattern = pattern.substring( lastEnd , i+1 );  // +1 to take the last char of the String pattern into consideration.\n                    char thisLetter = translator.decode( thisPattern ); \n                    if (thisLetter != '#') {\n                        rtn += thisLetter; //will not concat if this is totally junk code\n                    }\n                }\n            }// END LOOP\n        }// END if-not-null Condition\n\n\n        return rtn;  // RETURN STATEMENT \n    }", 
    "status" : "PASS", 
    "activeTime" : 25.6, 
    "totalActiveTime" : 25.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:06:21.106+0000"), 
            "code" : "public static String translateMessage (MessageTranslator translator, String pattern ) {\n        String rtn  = \"Null Value Entered\";\n        int lastEnd = 0;\n        boolean wasSeperator = false;\n        \n        if(translator == null){\n            translator = new MessageTranslator();\n        }\n\n        if (pattern != null) { // Handles null pointer exception\n            rtn = \"\";\n            for (int i = 0; i < pattern.length(); i++) {\n                if (i != pattern.length()-1) { // checks if this is the last iteration\n                    char currentChar = pattern.charAt(i);\n                    String thisPattern = \"\";\n                    // STEP ONE : If this is the start of a next letter, substring from the last end till this one\n                    if(currentChar == '|'){\n                        thisPattern = pattern.substring( lastEnd , i ); //this will not count the latest char, which is a '|'\n                        char thisLetter = translator.decode( thisPattern );\n                        if (thisLetter != '#') {\n                            rtn += thisLetter; // if this is not junk code; add to string\n                        }\n                        lastEnd = i+1; //this will start the next substring of the next morse pattern, after this '|' char. \n                    }\n                    // STEP TWO : Concats a space where there are two '|'\n                    if ( (currentChar == '|') && (wasSeperator == true) ) {\n                        rtn += ' ';\n                    }\n                    // STEP THREE : This section will remind the next iteration if the last char was a '|'\n                    if (currentChar == '|') {\n                        wasSeperator = true;\n                    }else{\n                        wasSeperator = false;\n                    }\n                    // STEP FOUR : Else condition handles the last morse code sequence \n                }else{\n                    String thisPattern = pattern.substring( lastEnd , i+1 );  // +1 to take the last char of the String pattern into consideration.\n                    char thisLetter = translator.decode( thisPattern ); \n                    if (thisLetter != '#') {\n                        rtn += thisLetter; //will not concat if this is totally junk code\n                    }\n                }\n            }// END LOOP\n        }// END if-not-null Condition\n\n\n        return rtn;  // RETURN STATEMENT \n    }", 
            "status" : "PASS", 
            "activeTime" : 25.6
        }
    ]
}
{ 
    "_id" : "7TyFQTddvRZoPfGNZ", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T06:09:54.011+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:21:24.553+0000"), 
    "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            System.out.println(\"Enter number>\");\n            cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
    "status" : "FAIL", 
    "activeTime" : 19.5, 
    "totalActiveTime" : 901.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:14:53.201+0000"), 
            "code" : "public static void adder(){\n    int sum = 0;\n    do{\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter number>\");\n        int cont = sc.nextInt();\n        if(cont>0){\n            sum+= cont;\n        }\n    }while(cont>0);\n    System.out.println(\"The sum is \" + sum + \".\" )\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 512.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:14:56.662+0000"), 
            "code" : "public static void adder(){\n    int sum = 0;\n    do{\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter number>\");\n        int cont = sc.nextInt();\n        if(cont>0){\n            sum+= cont;\n        }\n    }while(cont>0);\n    System.out.println(\"The sum is \" + sum + \".\" );\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:16:12.915+0000"), 
            "code" : "public class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            System.out.println(\"Enter number>\");\n            int cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 76.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:16:28.104+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            System.out.println(\"Enter number>\");\n            int cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:17:04.212+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0\n        do{\n            Scanner sc = new Scanner(System.in);\n            System.out.println(\"Enter number>\");\n            cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:17:10.173+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0\n        do{\n            Scanner sc = new Scanner(System.in);\n            System.out.println(\"Enter number>\");\n            cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(6)
        }, 
        {
            "date" : ISODate("2016-04-24T10:17:17.970+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            System.out.println(\"Enter number>\");\n            cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 7.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:18:16.526+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 58.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:19:07.578+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = Integer(sc.nextLine());\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.3
        }, 
        {
            "date" : ISODate("2016-04-24T10:19:16.045+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = int(sc.nextLine());\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:19:23.859+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 7.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:19:44.509+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = sc.next();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.8
        }, 
        {
            "date" : ISODate("2016-04-24T10:20:18.213+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        String cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = sc.nextLine();\n            if(cont>0){\n                sum+= cont.charAt(0)-'0';\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:20:28.107+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        String cont =\"\";\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = sc.nextLine();\n            if(cont>0){\n                sum+= cont.charAt(0)-'0';\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.8
        }, 
        {
            "date" : ISODate("2016-04-24T10:20:42.767+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        String cont =\"\";\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = sc.nextLine();\n            if(cont>0){\n                sum+= cont.charAt(0)-'0';\n            }\n        }while(cont.charAt(0)-'0'>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:21:04.950+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        String cont =\"\";\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = sc.nextLine();\n            if(cont.charAt(0)-'0'>0){\n                sum+= cont.charAt(0)-'0';\n            }\n        }while(cont.charAt(0)-'0' > 0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(20)
        }, 
        {
            "date" : ISODate("2016-04-24T10:21:24.552+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            System.out.println(\"Enter number>\");\n            cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 19.5
        }
    ]
}
{ 
    "_id" : "FsdDcmLACJ58NaTDf", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:04:30.917+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:24:23.676+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 28.9, 
    "totalActiveTime" : 601.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:18:32.640+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 251.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:20:49.508+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return \"Rectangle [x= \" + x + \",y= \" + y + \",width= \" + width + \",height=\" + height + \"]\"\"\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(137)
        }, 
        {
            "date" : ISODate("2016-04-24T10:21:07.998+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return \"Rectangle [x= \" + x + \",y= \" + y + \",width= \" + width + \",height=\" + height + \"]\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:21:35.544+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return \"Rectangle [x= \" + x + \",y= \" + y + \",width= \" + width + \",height=\" + height + \"]\"\"\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:21:43.716+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return \"Rectangle [x= \" + x + \",y= \" + y + \",width= \" + width + \",height=\" + height + \"]\"\"\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(8)
        }, 
        {
            "date" : ISODate("2016-04-24T10:22:02.331+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return \"Rectangle [x= \" + x + \",y= \" + y + \",width= \" + width + \",height=\" + height + \"]\"\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:22:56.337+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return (\"Rectangle [x= \" + x + \",y= \" + y + \",width= \" + width + \",height=\" + height + \"]\"\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 54.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:23:54.771+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return \"Rectangle [x= \" + x + \",y= \" + y + \",width= \" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(58)
        }, 
        {
            "date" : ISODate("2016-04-24T10:24:23.675+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 28.9
        }
    ]
}
{ 
    "_id" : "p2zuLAhNG73ygBM3n", 
    "userId" : "kL5wJ3qdYDvbWke7w", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T08:20:27.047+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:23:26.696+0000"), 
    "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList<Intger> temp = new ArrayList<>(); \n\n    int count_a1 = 0; \n    int count_a2 = 0; \n    \n    boolean check = true; \n    boolean block_check = true; \n    \n    //-------------------------- adding value to a1 ----------------------------\\\\ \n    for (int i = 0; i < a2.size() + a1.size(); i++) { \n    \n        if (count_a1 < a1.size() && check) { \n        temp.add(a1.get(count_a1)); \n        if (block_check) { \n        check = false; \n        } \n        count_a1++; \n    \n    \n    } else if (count_a2 < a2.size()) { \n        temp.add(a2.get(count_a2)); \n        \n        check = true; \n        count_a2++; \n        if (count_a2 == a2.size()) { \n        block_check = false; \n        }   \n    }\n    \n    a1 = temp; \n    } \n    return a1; \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 24.6, 
    "totalActiveTime" : 2245.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T08:25:38.793+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    if (a1.length() != a2.length()) {\n        \n        for (int i = 0; i < a1.length(); i++) {\n            for (int j = 0; j < a2.length(); j++) {\n                \n                \n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 317.8
        }, 
        {
            "date" : ISODate("2016-04-24T08:38:07.854+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList <Integer> listToReturn = new ArrayList <Integer>();\n    \n    if (a1.length() != a2.length()) {\n        \n        for (int i = 0; i < a1.length(); i++) {\n            for (int j = 0; j < a2.length(); j++) {\n                listToReturn.add();\n                \n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 165.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:42:11.013+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList<Integer> r = new ArrayList<>(a1.size() + a2.size());\n\n    for (int i = 0, i < a1.size(); i++, j++) {\n        for (int j = 0; j < a2.size(); j++) {\n            if(i < a1.size()) {\n                r.add(a1.get(i));\n            }\n            \n            if(j < a2.size()) {\n                r.add(a2.get(j));\n            }\n                \n        }\n    }\n    a1.clear();\n    a1.addAll(r);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1156.2
        }, 
        {
            "date" : ISODate("2016-04-24T09:42:24.182+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList<Integer> r = new ArrayList<>(a1.size() + a2.size());\n\n    for (int i = 0; i < a1.size(); i++, j++) {\n        for (int j = 0; j < a2.size(); j++) {\n            if(i < a1.size()) {\n                r.add(a1.get(i));\n            }\n            \n            if(j < a2.size()) {\n                r.add(a2.get(j));\n            }\n                \n        }\n    }\n    a1.clear();\n    a1.addAll(r);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-04-24T09:42:33.404+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList<Integer> r = new ArrayList<>(a1.size() + a2.size());\n\n    for (int i = 0; i < a1.size(); i++) {\n        for (int j = 0; j < a2.size(); j++) {\n            if(i < a1.size()) {\n                r.add(a1.get(i));\n            }\n            \n            if(j < a2.size()) {\n                r.add(a2.get(j));\n            }\n                \n        }\n    }\n    a1.clear();\n    a1.addAll(r);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.1
        }, 
        {
            "date" : ISODate("2016-04-24T09:42:49.720+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList<Integer> r = new ArrayList<>(a1.size() + a2.size());\n\n    for (int i = 0; i < a1.size(); i++) {\n        for (int j = 0; j < a2.size(); j++) {\n            if(i < a1.size()) {\n                r.add(a1.get(i));\n            }\n            \n            if(j < a2.size()) {\n                r.add(a2.get(j));\n            }\n                \n        }\n    }\n    a1.clear();\n    a1.addAll(r);\n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:45:26.406+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    if (a1.length() == a2.length()) {\n         ArrayList<Integer> r = new ArrayList<>(a1.size() + a2.size());\n\n        for (int i = 0; i < a1.size(); i++) {\n            for (int j = 0; j < a2.size(); j++) {\n                if(i < a1.size()) {\n                    r.add(a1.get(i));\n                }\n            \n                if(j < a2.size()) {\n                  r.add(a2.get(j));\n                 }\n                \n            }\n        }\n    }\n    a1.clear();\n    a1.addAll(r);\n    return a1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 156.3
        }, 
        {
            "date" : ISODate("2016-04-24T09:46:14.915+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    if (a1.size() == a2.size()) {\n        ArrayList<Integer> r = new ArrayList<>(a1.size() + a2.size());\n\n        for (int i = 0; i < a1.size(); i++) {\n            for (int j = 0; j < a2.size(); j++) {\n                if(i < a1.size()) {\n                    r.add(a1.get(i));\n                }\n            \n                if(j < a2.size()) {\n                  r.add(a2.get(j));\n                 }\n                \n            }\n        }\n    }\n    a1.clear();\n    a1.addAll(r);\n    return a1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.1
        }, 
        {
            "date" : ISODate("2016-04-24T09:48:57.550+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList <Integer> r = null;\n    if (a1.size() == a2.size()) {\n        r = new ArrayList<>(a1.size() + a2.size());\n\n        for (int i = 0; i < a1.size(); i++) {\n            for (int j = 0; j < a2.size(); j++) {\n                if(i < a1.size()) {\n                    r.add(a1.get(i));\n                }\n            \n                if(j < a2.size()) {\n                  r.add(a2.get(j));\n                 }\n                \n            }\n        }\n    }\n    a1.clear();\n    a1.addAll(r);\n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 162.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:13:42.621+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList <Integer> r = null;\n    if (a1.size() == a2.size()) {\n        r = new ArrayList<>(a1.size() + a2.size());\n\n        for (int i = 0; i < a1.size(); i++) {\n            for (int j = 0; j < a2.size(); j++) {\n                if(i < a1.size()) {\n                    r.add(a1.get(i));\n                }\n            \n                if(j < a2.size()) {\n                  r.add(a2.get(j));\n                 }\n                \n            }\n        }\n    }\n    a1.clear();\n    a1.addAll(r);\n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:21:40.764+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    List temp = new ArrayList(); \n\n    int count_a1 = 0; \n    int count_a2 = 0; \n    \n    boolean check = true; \n    boolean block_check = true; \n    \n    //-------------------------- adding value to a1 ----------------------------\\\\ \n    for (int i = 0; i < a2.size() + a1.size(); i++) { \n    \n        if (count_a1 < a1.size() && check) { \n        temp.add(a1.get(count_a1)); \n        if (block_check) { \n        check = false; \n        } \n        count_a1++; \n    \n    \n    } else if (count_a2 < a2.size()) { \n        temp.add(a2.get(count_a2)); \n        \n        check = true; \n        count_a2++; \n        if (count_a2 == a2.size()) { \n        block_check = false; \n        }   \n    } \n    \n    } \n    \n    a1 = temp; \n    \n    return a1; \n    \n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 92.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:22:24.603+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    List temp = new ArrayList(); \n\n    int count_a1 = 0; \n    int count_a2 = 0; \n    \n    boolean check = true; \n    boolean block_check = true; \n    \n    //-------------------------- adding value to a1 ----------------------------\\\\ \n    for (int i = 0; i < a2.size() + a1.size(); i++) { \n    \n        if (count_a1 < a1.size() && check) { \n        temp.add(a1.get(count_a1)); \n        if (block_check) { \n        check = false; \n        } \n        count_a1++; \n    \n    \n    } else if (count_a2 < a2.size()) { \n        temp.add(a2.get(count_a2)); \n        \n        check = true; \n        count_a2++; \n        if (count_a2 == a2.size()) { \n        block_check = false; \n        }   \n    }\n    \n    a1 = temp; \n    \n    return a1; \n    \n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.8
        }, 
        {
            "date" : ISODate("2016-04-24T10:22:47.793+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList temp = new ArrayList(); \n\n    int count_a1 = 0; \n    int count_a2 = 0; \n    \n    boolean check = true; \n    boolean block_check = true; \n    \n    //-------------------------- adding value to a1 ----------------------------\\\\ \n    for (int i = 0; i < a2.size() + a1.size(); i++) { \n    \n        if (count_a1 < a1.size() && check) { \n        temp.add(a1.get(count_a1)); \n        if (block_check) { \n        check = false; \n        } \n        count_a1++; \n    \n    \n    } else if (count_a2 < a2.size()) { \n        temp.add(a2.get(count_a2)); \n        \n        check = true; \n        count_a2++; \n        if (count_a2 == a2.size()) { \n        block_check = false; \n        }   \n    }\n    \n    a1 = temp; \n    \n    return a1; \n    \n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:23:05.158+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList temp = new ArrayList(); \n\n    int count_a1 = 0; \n    int count_a2 = 0; \n    \n    boolean check = true; \n    boolean block_check = true; \n    \n    //-------------------------- adding value to a1 ----------------------------\\\\ \n    for (int i = 0; i < a2.size() + a1.size(); i++) { \n    \n        if (count_a1 < a1.size() && check) { \n        temp.add(a1.get(count_a1)); \n        if (block_check) { \n        check = false; \n        } \n        count_a1++; \n    \n    \n    } else if (count_a2 < a2.size()) { \n        temp.add(a2.get(count_a2)); \n        \n        check = true; \n        count_a2++; \n        if (count_a2 == a2.size()) { \n        block_check = false; \n        }   \n    }\n    \n    a1 = temp; \n    } \n    return a1; \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:23:26.695+0000"), 
            "code" : "public static ArrayList <Integer> interleave(ArrayList <Integer> a1, ArrayList <Integer> a2) {\n    ArrayList<Intger> temp = new ArrayList<>(); \n\n    int count_a1 = 0; \n    int count_a2 = 0; \n    \n    boolean check = true; \n    boolean block_check = true; \n    \n    //-------------------------- adding value to a1 ----------------------------\\\\ \n    for (int i = 0; i < a2.size() + a1.size(); i++) { \n    \n        if (count_a1 < a1.size() && check) { \n        temp.add(a1.get(count_a1)); \n        if (block_check) { \n        check = false; \n        } \n        count_a1++; \n    \n    \n    } else if (count_a2 < a2.size()) { \n        temp.add(a2.get(count_a2)); \n        \n        check = true; \n        count_a2++; \n        if (count_a2 == a2.size()) { \n        block_check = false; \n        }   \n    }\n    \n    a1 = temp; \n    } \n    return a1; \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.6
        }
    ]
}
{ 
    "_id" : "fJaz77Gr3xzF8oLBd", 
    "userId" : "qRRx6bzkx25XcK7w8", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:28:35.589+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:31:41.362+0000"), 
    "code" : "public static String parseEmail(String email){\n    int atSign = email.indexOf(\"@\");\n    String toReturn = email.substring(0, atSign);\n    return toReturn;\n}", 
    "status" : "PASS", 
    "activeTime" : 21.2, 
    "totalActiveTime" : 150.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:31:06.776+0000"), 
            "code" : "public static String parseEmail(String email){\n    int atSign = email.indexOf(\"@\");\n    String toReturn = email.substring(0, atSign);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 115.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:31:20.153+0000"), 
            "code" : "public static String parseEmail(String email){\n    int atSign = email.indexOf(\"@\");\n    return String toReturn = email.substring(0, atSign);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.3
        }, 
        {
            "date" : ISODate("2016-04-24T10:31:41.362+0000"), 
            "code" : "public static String parseEmail(String email){\n    int atSign = email.indexOf(\"@\");\n    String toReturn = email.substring(0, atSign);\n    return toReturn;\n}", 
            "status" : "PASS", 
            "activeTime" : 21.2
        }
    ]
}
{ 
    "_id" : "XZ8AK5HFhK3FnM2cq", 
    "userId" : "y69LScAMNyacdTiSs", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:31:54.568+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:34:53.533+0000"), 
    "code" : "public static String parseEmail(String email){\n    int at = 0; \n    for(int i = 0; i < email.length(); i++){\n        if(email.charAt(i) == '@'){\n            at = i;\n        }\n    }\n    return email.substring(0,at);\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(10), 
    "totalActiveTime" : 176.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:34:25.073+0000"), 
            "code" : "public static String parseEmail(String email){\n    int at = 0; \n    for(int i = 0; i < email.length(); i++){\n        if(chatAt(i) == '@'){\n            at = i;\n        }\n    }\n    return email.substring(0,i);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 148.3
        }, 
        {
            "date" : ISODate("2016-04-24T10:34:43.456+0000"), 
            "code" : "public static String parseEmail(String email){\n    int at = 0; \n    for(int i = 0; i < email.length(); i++){\n        if(email.charAt(i) == '@'){\n            at = i;\n        }\n    }\n    return email.substring(0,i);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:34:53.533+0000"), 
            "code" : "public static String parseEmail(String email){\n    int at = 0; \n    for(int i = 0; i < email.length(); i++){\n        if(email.charAt(i) == '@'){\n            at = i;\n        }\n    }\n    return email.substring(0,at);\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(10)
        }
    ]
}
{ 
    "_id" : "Lt2hE3rEThj7DqnZr", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:36:31.186+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:38:52.073+0000"), 
    "code" : "public class Rectangle { //thanks for the pointers!\n\t//instances     // good to comment your code\n    private int x; // you don't have to assign values here, since your constructor will be doing so (fixed on the 2nd attempt)\n    private int y; \n    private int width;\n    private int height;\n\n    \n    //constructors    \n    // default constructor was not requested, so it's best not to include it (fixed on 2nd attempt)\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n \n \n    //methods\n    public int getX(){\n        return x;\n    }\n     public int getY(){\n        return y;\n    }   \n    public int getWidth(){\n        return width;\n    }\n    public int getHeight(){\n        return height;\n    }\n    \n    public String toString(){\n        return (\"Rectangle[x=\" + x + \",y=\" + y +\",width=\" +width+\",height=\"+height+\"]\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 409.1, 
    "totalActiveTime" : 409.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:38:52.073+0000"), 
            "code" : "public class Rectangle { //thanks for the pointers!\n\t//instances     // good to comment your code\n    private int x; // you don't have to assign values here, since your constructor will be doing so (fixed on the 2nd attempt)\n    private int y; \n    private int width;\n    private int height;\n\n    \n    //constructors    \n    // default constructor was not requested, so it's best not to include it (fixed on 2nd attempt)\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n \n \n    //methods\n    public int getX(){\n        return x;\n    }\n     public int getY(){\n        return y;\n    }   \n    public int getWidth(){\n        return width;\n    }\n    public int getHeight(){\n        return height;\n    }\n    \n    public String toString(){\n        return (\"Rectangle[x=\" + x + \",y=\" + y +\",width=\" +width+\",height=\"+height+\"]\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 409.1
        }
    ]
}
{ 
    "_id" : "ZiCKigtqx8qZqYmJM", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:39:33.185+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:40:28.202+0000"), 
    "code" : "public static String parseEmail(String email){ //(re-attempt)\n    int atSignIndex = email.indexOf('@'); //please don't use foo, bar etc. \n    //imagine your prof have to mark you script and has to figure out\n    //what your foo bar stands for... atSignIndex is much better! (point noted! thanks!)\n    return email.substring(0,atSignIndex);\n}", 
    "status" : "PASS", 
    "activeTime" : 9.4, 
    "totalActiveTime" : 75.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:40:18.662+0000"), 
            "code" : "public static String parseEmail(String email){ //(re-attempt)\n    int atSignIndex = email.indexOf('@'); //please don't use foo, bar etc. \n    //imagine your prof have to mark you script and has to figure out\n    //what your foo bar stands for... atSignIndex is much better! (point noted! thanks!)\n    return email.substring(0,foo);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 65.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:40:28.201+0000"), 
            "code" : "public static String parseEmail(String email){ //(re-attempt)\n    int atSignIndex = email.indexOf('@'); //please don't use foo, bar etc. \n    //imagine your prof have to mark you script and has to figure out\n    //what your foo bar stands for... atSignIndex is much better! (point noted! thanks!)\n    return email.substring(0,atSignIndex);\n}", 
            "status" : "PASS", 
            "activeTime" : 9.4
        }
    ]
}
{ 
    "_id" : "aWyqCSxtJuMF53cDk", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:34:13.501+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:42:50.517+0000"), 
    "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n        int sum = 0;\n        while(num > 0){\n            sum += num;\n            num = sc.nextInt();\n        }\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 23.4, 
    "totalActiveTime" : 2041.2000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:37:51.506+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        Scanner sc = new Scaner(System.in);\n        System.out.print(\"Enter number>\");\n        int sum = sc.nextInt();\n        while(sum != 15){\n            System.out.print(\"Enter number>\");\n            sum += sc.nextInt();\n        }\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1742.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:37:59.262+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter number>\");\n        int sum = sc.nextInt();\n        while(sum != 15){\n            System.out.print(\"Enter number>\");\n            sum += sc.nextInt();\n        }\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 7.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:39:33.275+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter number>\");\n        int sum = sc.nextInt();\n        while(sum != 15){\n            System.out.print(\"Enter number>\");\n            sum = sum + sc.nextInt();\n        }\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(94)
        }, 
        {
            "date" : ISODate("2016-04-24T10:41:29.126+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter number>\");\n        int num = sc.nextInt();\n        while(num > 0){\n            System.out.print(\"Enter number>\");\n            num += sc.nextInt();\n        }\n        System.out.println(\"The sum is \" + num + \".\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 115.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:42:27.176+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter number>\");\n        int num = sc.nextInt();\n        int sum = 0;\n        while(num > 0){\n            sum += num;\n            System.out.print(\"Enter number>\");\n            num = sc.nextInt();\n        }\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 57.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:42:50.516+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n        int sum = 0;\n        while(num > 0){\n            sum += num;\n            num = sc.nextInt();\n        }\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 23.4
        }
    ]
}
{ 
    "_id" : "aFbCJFxhqjnZCDP8A", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:41:04.644+0000"), 
    "updatedAt" : ISODate("2016-04-24T11:27:05.324+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){ //(re-attempt)\n    int shortestListSize = a1.size(); // we usually use \"list\" to denote a collection such as ArrayList, not for int values (fixed!)\n    if(shortestListSize > a2.size()){\n        shortestListSize = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestListSize > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestListSize--; \n    }\n    merged.addAll(a1);\n    merged.addAll(a2); \n    a1.clear();\n    a1.addAll(merged);\n}\n// your method works, but it's pretty unconventional", 
    "status" : "PASS", 
    "activeTime" : NumberInt(50), 
    "totalActiveTime" : 136.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:41:57.892+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int shortestListSize = a1.size(); // we usually use \"list\" to denote a collection such as ArrayList, not for int values (fixed!)\n    if(shortestListSize > a2.size()){\n        shortestListSize = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestListSize > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestListSize--; \n    }\n    merged.addAll(a1);\n    merged.addAll(a2); \n    a1.clear();\n    a1.addAll(merged);\n}\n// your method works, but it's pretty unconventional", 
            "status" : "PASS", 
            "activeTime" : 69.3
        }, 
        {
            "date" : ISODate("2016-04-24T10:42:14.879+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){ //(re-attempt)\n    int shortestListSize = a1.size(); // we usually use \"list\" to denote a collection such as ArrayList, not for int values (fixed!)\n    if(shortestListSize > a2.size()){\n        shortestListSize = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestListSize > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestListSize--; \n    }\n    merged.addAll(a1);\n    merged.addAll(a2); \n    a1.clear();\n    a1.addAll(merged);\n}\n// your method works, but it's pretty unconventional", 
            "status" : "PASS", 
            "activeTime" : 16.9
        }, 
        {
            "date" : ISODate("2016-04-24T11:27:05.323+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){ //(re-attempt)\n    int shortestListSize = a1.size(); // we usually use \"list\" to denote a collection such as ArrayList, not for int values (fixed!)\n    if(shortestListSize > a2.size()){\n        shortestListSize = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestListSize > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestListSize--; \n    }\n    merged.addAll(a1);\n    merged.addAll(a2); \n    a1.clear();\n    a1.addAll(merged);\n}\n// your method works, but it's pretty unconventional", 
            "status" : "PASS", 
            "activeTime" : NumberInt(50)
        }
    ]
}
{ 
    "_id" : "hHzHKpPtAGNG6kcwa", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T06:08:23.170+0000"), 
    "updatedAt" : ISODate("2016-04-25T10:08:52.810+0000"), 
    "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n   // insert your code here.\n   boolean rtn = true;\n   Counter inputCounter = supermarket.getCounter(counterNumber);\n   if(inputCounter != null){\n       if(cashier != null){\n           rtn = inputCounter.setCashier(cashier);\n           System.out.println(\"test\"); //odd, not null but boolean still returns false (no idea why)\n       }\n   }\n   return rtn;\n}", 
    "status" : "FAIL", 
    "activeTime" : 692.3, 
    "totalActiveTime" : 1082.1999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:56:51.424+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n   // insert your code here.\n   boolean rtn = true;\n   Counter inputCounter = supermarket.getCounter(counterNumber);\n   if(inputCounter != null){\n       if(cashier != null){\n           rtn = inputCounter.setCashier(cashier);\n          // System.out.println(\"test\"); odd, not null but boolean still returns false (no idea why)\n       }\n   }\n   return rtn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 315.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:42:56.976+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n   // insert your code here.\n   boolean rtn = true;\n   Counter inputCounter = supermarket.getCounter(counterNumber);\n   if(inputCounter != null){\n       if(cashier != null){\n           rtn = inputCounter.setCashier(cashier);\n          // System.out.println(\"test\"); odd, not null but boolean still returns false (no idea why)\n       }\n   }\n   return rtn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 31.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:43:31.733+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n   // insert your code here.\n   boolean rtn = true;\n   Counter inputCounter = supermarket.getCounter(counterNumber);\n   if(inputCounter != null){\n       if(cashier != null){\n           rtn = inputCounter.setCashier(cashier);\n           System.out.println(\"test\"); odd, not null but boolean still returns false (no idea why)\n       }\n   }\n   return rtn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:43:39.679+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n   // insert your code here.\n   boolean rtn = true;\n   Counter inputCounter = supermarket.getCounter(counterNumber);\n   if(inputCounter != null){\n       if(cashier != null){\n           rtn = inputCounter.setCashier(cashier);\n           System.out.println(\"test\"); //odd, not null but boolean still returns false (no idea why)\n       }\n   }\n   return rtn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.7
        }, 
        {
            "date" : ISODate("2016-04-25T10:08:52.809+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n   // insert your code here.\n   boolean rtn = true;\n   Counter inputCounter = supermarket.getCounter(counterNumber);\n   if(inputCounter != null){\n       if(cashier != null){\n           rtn = inputCounter.setCashier(cashier);\n           System.out.println(\"test\"); //odd, not null but boolean still returns false (no idea why)\n       }\n   }\n   return rtn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 692.3
        }
    ]
}
{ 
    "_id" : "ouKBNuAdioatP2g9N", 
    "userId" : "qRRx6bzkx25XcK7w8", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:31:55.699+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:44:19.123+0000"), 
    "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n    \n        if (reverse.toUpperCase().equals(text.toUpperCase())){\n            System.out.println(text + \" is a palindrome!\");\n        } else {\n            System.out.println(text + \" is not a palindrome.\");\n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 11.9, 
    "totalActiveTime" : 757.3000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:40:56.651+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \");\n    string text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n        if (reverse.equals(text)){\n            System.out.println(text + \"is a palindrome!\");\n        } else {\n            System.out.println(text + \"is not a palindrome.\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 555.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:41:08.432+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n        if (reverse.equals(text)){\n            System.out.println(text + \"is a palindrome!\");\n        } else {\n            System.out.println(text + \"is not a palindrome.\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:41:34.755+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n        if (reverse.equals(text)){\n            System.out.println(text + \"is a palindrome!\");\n        } else {\n            System.out.println(text + \"is not a palindrome.\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:41:50.549+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n        if (reverse.equals(text)){\n            System.out.println(text + \"is a palindrome!\");\n        } else {\n            System.out.println(text + \"is not a palindrome.\");\n        }\n    }", 
            "status" : "FAIL", 
            "activeTime" : 15.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:42:26.968+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n        if (reverse.equals(text)){\n            System.out.println(text + \" is a palindrome!\");\n        } else {\n            System.out.println(text + \" is not a palindrome.\");\n        }\n    }", 
            "status" : "FAIL", 
            "activeTime" : 36.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:43:56.658+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n    \n        if (reverse.toUppercase().equals(text.toUpperCase()){\n            System.out.println(text + \" is a palindrome!\");\n        } else {\n            System.out.println(text + \" is not a palindrome.\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 90.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:44:06.821+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n    \n        if (reverse.toUpperCase().equals(text.toUpperCase()){\n            System.out.println(text + \" is a palindrome!\");\n        } else {\n            System.out.println(text + \" is not a palindrome.\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:44:19.123+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n    \n        if (reverse.toUpperCase().equals(text.toUpperCase())){\n            System.out.println(text + \" is a palindrome!\");\n        } else {\n            System.out.println(text + \" is not a palindrome.\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 11.9
        }
    ]
}
{ 
    "_id" : "8SWNAxSixypJASmqt", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:04:43.279+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:45:25.734+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int widthA = rectA.getWidth();\n    int heightA = rectA.getHeight();\n    int xA = rectA.getX();\n    int yA = rectA.getY();\n    int totalWidthA = widthA + xA; \n    int totalHeightA = heightA + yA; \n    \n    int widthB = rectB.getWidth();\n    int heightB = rectB.getHeight();\n    int xB = rectB.getX();\n    int yB = rectB.getY(); \n    int totalWidthB = widthB + xB; \n    int totalHeightB = heightB + yB; \n    \n    int smallx = 0; \n    int smally = 0; \n    \n    if(xA >= xB){\n        smallx = xB; \n    } else { \n        smallx = xA;\n    }\n    \n    if(yA >= yB){\n        smally = yB; \n    } else { \n        smally = yA;\n    }\n    \n    int widthnew = 0; \n    int heightnew = 0;\n    if(totalWidthA >= totalWidthB){\n        widthnew = totalWidthA - smallx; \n    } else { \n        widthnew = totalWidthB - smallx; \n    }    \n    \n    if(totalHeightA >= totalHeightB){\n        heightnew = totalHeightA - smally; \n    } else { \n        heightnew = totalHeightB - smally; \n    }    \n    \n    Rectangle brandNew = new Rectangle(smallx, smally, widthnew, heightnew);\n    return brandNew;\n}", 
    "status" : "PASS", 
    "activeTime" : 46.5, 
    "totalActiveTime" : 1155.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:29:52.732+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int widthA = rectA.getWidth();\n    int heightA = rectA.getHeight();\n    int areaA = widthA * heightA; \n    int xA = rectA.getX();\n    int yA = rectA.getY(); \n    \n    int widthB = rectB.getWidth();\n    int heightB = rectB.getHeight();\n    int areaB = widthB * heightB; \n    int xB = rectB.getX();\n    int yB = rectB.getY(); \n    \n    \n    int sum = areaA + areaB \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(329)
        }, 
        {
            "date" : ISODate("2016-04-24T10:30:03.202+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int widthA = rectA.getWidth();\n    int heightA = rectA.getHeight();\n    int areaA = widthA * heightA; \n    int xA = rectA.getX();\n    int yA = rectA.getY(); \n    \n    int widthB = rectB.getWidth();\n    int heightB = rectB.getHeight();\n    int areaB = widthB * heightB; \n    int xB = rectB.getX();\n    int yB = rectB.getY(); \n    \n    \n    int sum = areaA + areaB; \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.3
        }, 
        {
            "date" : ISODate("2016-04-24T10:44:02.840+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int widthA = rectA.getWidth();\n    int heightA = rectA.getHeight();\n    int xA = rectA.getX();\n    int yA = rectA.getY();\n    int totalWidthA = widthA + xA; \n    int totalHeightA = heightA + yA; \n    \n    int widthB = rectB.getWidth();\n    int heightB = rectB.getHeight();\n    int xB = rectB.getX();\n    int yB = rectB.getY(); \n    int totalWidthB = widthB + xB; \n    int totalHeightB = heightB + yB; \n    \n    int smallx = 0; \n    int smally = 0; \n    \n    if(xA >= xB){\n        smallx = xA; \n    } else { \n        smallx = xB;\n    }\n    \n    if(yA >= yB){\n        smally = yA; \n    } else { \n        smally = yB;\n    }\n    \n    int widthnew = 0; \n    int heightnew = 0;\n    if(totalWidthA >= totalWidthB){\n        widthnew = totalWidthA - smallx; \n    } else { \n        widthnew = totalWidhtB - smallx; \n    }    \n    \n    if(totalHeightA >= totalHeightB){\n        heightnew = totalHeightA - smally; \n    } else { \n        heightnew = totalHeightB - smally; \n    }    \n    \n    Rectangle brandNew = new Rectangle(smallx, smally, widthnew, heightnew);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 733.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:44:18.887+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int widthA = rectA.getWidth();\n    int heightA = rectA.getHeight();\n    int xA = rectA.getX();\n    int yA = rectA.getY();\n    int totalWidthA = widthA + xA; \n    int totalHeightA = heightA + yA; \n    \n    int widthB = rectB.getWidth();\n    int heightB = rectB.getHeight();\n    int xB = rectB.getX();\n    int yB = rectB.getY(); \n    int totalWidthB = widthB + xB; \n    int totalHeightB = heightB + yB; \n    \n    int smallx = 0; \n    int smally = 0; \n    \n    if(xA >= xB){\n        smallx = xA; \n    } else { \n        smallx = xB;\n    }\n    \n    if(yA >= yB){\n        smally = yA; \n    } else { \n        smally = yB;\n    }\n    \n    int widthnew = 0; \n    int heightnew = 0;\n    if(totalWidthA >= totalWidthB){\n        widthnew = totalWidthA - smallx; \n    } else { \n        widthnew = totalWidthB - smallx; \n    }    \n    \n    if(totalHeightA >= totalHeightB){\n        heightnew = totalHeightA - smally; \n    } else { \n        heightnew = totalHeightB - smally; \n    }    \n    \n    Rectangle brandNew = new Rectangle(smallx, smally, widthnew, heightnew);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.8
        }, 
        {
            "date" : ISODate("2016-04-24T10:44:39.346+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int widthA = rectA.getWidth();\n    int heightA = rectA.getHeight();\n    int xA = rectA.getX();\n    int yA = rectA.getY();\n    int totalWidthA = widthA + xA; \n    int totalHeightA = heightA + yA; \n    \n    int widthB = rectB.getWidth();\n    int heightB = rectB.getHeight();\n    int xB = rectB.getX();\n    int yB = rectB.getY(); \n    int totalWidthB = widthB + xB; \n    int totalHeightB = heightB + yB; \n    \n    int smallx = 0; \n    int smally = 0; \n    \n    if(xA >= xB){\n        smallx = xA; \n    } else { \n        smallx = xB;\n    }\n    \n    if(yA >= yB){\n        smally = yA; \n    } else { \n        smally = yB;\n    }\n    \n    int widthnew = 0; \n    int heightnew = 0;\n    if(totalWidthA >= totalWidthB){\n        widthnew = totalWidthA - smallx; \n    } else { \n        widthnew = totalWidthB - smallx; \n    }    \n    \n    if(totalHeightA >= totalHeightB){\n        heightnew = totalHeightA - smally; \n    } else { \n        heightnew = totalHeightB - smally; \n    }    \n    \n    Rectangle brandNew = new Rectangle(smallx, smally, widthnew, heightnew);\n    return brandNew;\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:45:25.733+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int widthA = rectA.getWidth();\n    int heightA = rectA.getHeight();\n    int xA = rectA.getX();\n    int yA = rectA.getY();\n    int totalWidthA = widthA + xA; \n    int totalHeightA = heightA + yA; \n    \n    int widthB = rectB.getWidth();\n    int heightB = rectB.getHeight();\n    int xB = rectB.getX();\n    int yB = rectB.getY(); \n    int totalWidthB = widthB + xB; \n    int totalHeightB = heightB + yB; \n    \n    int smallx = 0; \n    int smally = 0; \n    \n    if(xA >= xB){\n        smallx = xB; \n    } else { \n        smallx = xA;\n    }\n    \n    if(yA >= yB){\n        smally = yB; \n    } else { \n        smally = yA;\n    }\n    \n    int widthnew = 0; \n    int heightnew = 0;\n    if(totalWidthA >= totalWidthB){\n        widthnew = totalWidthA - smallx; \n    } else { \n        widthnew = totalWidthB - smallx; \n    }    \n    \n    if(totalHeightA >= totalHeightB){\n        heightnew = totalHeightA - smally; \n    } else { \n        heightnew = totalHeightB - smally; \n    }    \n    \n    Rectangle brandNew = new Rectangle(smallx, smally, widthnew, heightnew);\n    return brandNew;\n}", 
            "status" : "PASS", 
            "activeTime" : 46.5
        }
    ]
}
{ 
    "_id" : "C4MDsGe5X3rweGgpu", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T13:30:11.006+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:46:48.128+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){    \n    if(rectA == null || rectB == null){\n        return null;\n    }\n    int bottomLeftAX = rectA.getX();\n    int bottomLeftAY = rectA.getY();\n    \n    int bottomRightAX = bottomLeftAX + rectA.getWidth();\n    int bottomRightAY = bottomLeftAY;\n    \n    int topLeftAX = bottomLeftAX;\n    int topLeftAY = bottomLeftAY + rectA.getHeight();\n    \n    int topRightAX = bottomLeftAX + rectA.getWidth();\n    int topRightAY = bottomLeftAX + rectA.getHeight();\n    \n    \n    int bottomLeftBX = rectB.getX();\n    int bottomLeftBY = rectB.getY();\n    \n    int bottomRightBX = bottomLeftBX + rectB.getWidth();\n    int bottomRightBY = bottomLeftBY;\n    \n    int topLeftBX = bottomLeftBX;\n    int topLeftBY = bottomLeftBY + rectB.getHeight();\n    \n    int topRightBX = bottomLeftBX + rectB.getWidth();\n    int topRightBY = bottomLeftBY + rectB.getHeight();\n    \n    //init all corners\n    \n    int yUnionTopLeft = 0;\n    int yUnionTopRight = 0;\n    int yUnionBottomLeft = 0;\n    int yUnionBottomRight = 0;\n    \n    int xUnionTopLeft = 0;\n    int xUnionTopRight = 0;\n    int xUnionBottomLeft = 0;\n    int xUnionBottomRight = 0;\n    \n    // Bottom Left takes the lesser of the X coordinates, Top right; vice versa\n    if(topLeftBX > topLeftAX ){\n        xUnionTopLeft = topLeftBX;\n    }else{\n        xUnionTopLeft = topLeftAX;\n    }\n\n    if(topRightBX > topRightAX ){\n        xUnionTopRight = topRightBX;\n    }else{\n        xUnionTopRight = topRightAX;\n    }\n    \n    if(bottomLeftBX < bottomLeftAX ){\n        xUnionBottomLeft = bottomLeftBX;\n    }else{\n        xUnionBottomLeft = bottomLeftAX;\n    }\n    \n    if(bottomRightBX > bottomRightAX ){\n        xUnionBottomRight = bottomRightBX;\n    }else{\n        xUnionBottomRight = bottomRightAX;\n    }\n    \n    \n    // Bottom Left takes the lesser of the Y coordinates, Top right; vice versa\n    if(topLeftBY > topLeftAY ){\n        yUnionTopLeft = topLeftBY;\n    }else{\n        yUnionTopLeft = topLeftAY;\n    }\n\n    if(topRightBY > topRightAY ){\n        yUnionTopRight = topRightBY;\n    }else{\n        yUnionTopRight = topRightAY;\n    }\n    \n    if(bottomLeftBY < bottomLeftAY ){\n        yUnionBottomLeft = bottomLeftBY;\n    }else{\n        yUnionBottomLeft = bottomLeftAY;\n    }\n    \n    if(bottomRightBY > bottomRightAY ){\n        yUnionBottomRight = bottomRightBY;\n    }else{\n        yUnionBottomRight = bottomRightAY;\n    }        \n    \n    int UnionWidth = xUnionBottomRight - xUnionBottomLeft;\n    int UnionHeight = yUnionTopLeft - yUnionBottomLeft;\n    int UnionX = xUnionBottomLeft;\n    int UnionY = yUnionBottomLeft;\n    \n    //yeah, totally inefficient code, but i did all this work thinking that i had to \n    //...look for the intercept between the two rectangles. \n\n    return new Rectangle(UnionX, UnionY, UnionWidth, UnionHeight);\n}", 
    "status" : "PASS", 
    "activeTime" : 170.3, 
    "totalActiveTime" : 1830.3999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:51:29.300+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){    \n    if(rectA == null || rectB == null){\n        return null;\n    }\n    int bottomLeftAX = rectA.getX();\n    int bottomLeftAY = rectA.getY();\n    \n    int bottomRightAX = bottomLeftAX + rectA.getWidth();\n    int bottomRightAY = bottomLeftAY;\n    \n    int topLeftAX = bottomLeftAX;\n    int topLeftAY = bottomLeftAY + rectA.getHeight();\n    \n    int topRightAX = bottomLeftAX + rectA.getWidth();\n    int topRightAY = bottomLeftAX + rectA.getHeight();\n    \n    \n    int bottomLeftBX = rectB.getX();\n    int bottomLeftBY = rectB.getY();\n    \n    int bottomRightBX = bottomLeftBX + rectB.getWidth();\n    int bottomRightBY = bottomLeftBY;\n    \n    int topLeftBX = bottomLeftBX;\n    int topLeftBY = bottomLeftBY + rectB.getHeight();\n    \n    int topRightBX = bottomLeftBX + rectB.getWidth();\n    int topRightBY = bottomLeftBY + rectB.getHeight();\n    \n    //initiate all corners\n    \n    int yUnionTopLeft = 0;\n    int yUnionTopRight = 0;\n    int yUnionBottomLeft = 0;\n    int yUnionBottomRight = 0;\n    \n    int xUnionTopLeft = 0;\n    int xUnionTopRight = 0;\n    int xUnionBottomLeft = 0;\n    int xUnionBottomRight = 0;\n    \n    // Bottom Left takes the lesser of the coordinates, top right vice versa\n    if(topLeftBX > topLeftAX ){\n        xUnionTopLeft = topLeftBX;\n    }else{\n        xUnionTopLeft = topLeftAX;\n    }\n\n    if(topRightBX > topRightAX ){\n        xUnionTopRight = topRightBX;\n    }else{\n        xUnionTopRight = topRightAX;\n    }\n    \n    if(bottomLeftBX < bottomLeftAX ){\n        xUnionBottomLeft = bottomLeftBX;\n    }else{\n        xUnionBottomLeft = bottomLeftAX;\n    }\n    \n    if(bottomRightBX > bottomRightAX ){\n        xUnionBottomRight = bottomRightBX;\n    }else{\n        xUnionBottomRight = bottomRightAX;\n    }\n    \n    \n// Unionions take lesser of the two X coordinates at each corner        \n    if(topLeftBY > topLeftAY ){\n        yUnionTopLeft = topLeftBY;\n    }else{\n        yUnionTopLeft = topLeftAY;\n    }\n\n    if(topRightBY > topRightAY ){\n        yUnionTopRight = topRightBY;\n    }else{\n        yUnionTopRight = topRightAY;\n    }\n    \n    if(bottomLeftBY < bottomLeftAY ){\n        yUnionBottomLeft = bottomLeftBY;\n    }else{\n        yUnionBottomLeft = bottomLeftAY;\n    }\n    \n    if(bottomRightBY > bottomRightAY ){\n        yUnionBottomRight = bottomRightBY;\n    }else{\n        yUnionBottomRight = bottomRightAY;\n    }        \n    \n    int UnionWidth = xUnionBottomRight - xUnionBottomLeft;\n    int UnionHeight = yUnionTopLeft - yUnionBottomLeft;\n    int UnionX = xUnionBottomLeft;\n    int UnionY = yUnionBottomLeft;\n\n    return new Rectangle(UnionX, UnionY, UnionWidth, UnionHeight);\n}", 
            "status" : "PASS", 
            "activeTime" : 1660.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:46:48.127+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){    \n    if(rectA == null || rectB == null){\n        return null;\n    }\n    int bottomLeftAX = rectA.getX();\n    int bottomLeftAY = rectA.getY();\n    \n    int bottomRightAX = bottomLeftAX + rectA.getWidth();\n    int bottomRightAY = bottomLeftAY;\n    \n    int topLeftAX = bottomLeftAX;\n    int topLeftAY = bottomLeftAY + rectA.getHeight();\n    \n    int topRightAX = bottomLeftAX + rectA.getWidth();\n    int topRightAY = bottomLeftAX + rectA.getHeight();\n    \n    \n    int bottomLeftBX = rectB.getX();\n    int bottomLeftBY = rectB.getY();\n    \n    int bottomRightBX = bottomLeftBX + rectB.getWidth();\n    int bottomRightBY = bottomLeftBY;\n    \n    int topLeftBX = bottomLeftBX;\n    int topLeftBY = bottomLeftBY + rectB.getHeight();\n    \n    int topRightBX = bottomLeftBX + rectB.getWidth();\n    int topRightBY = bottomLeftBY + rectB.getHeight();\n    \n    //init all corners\n    \n    int yUnionTopLeft = 0;\n    int yUnionTopRight = 0;\n    int yUnionBottomLeft = 0;\n    int yUnionBottomRight = 0;\n    \n    int xUnionTopLeft = 0;\n    int xUnionTopRight = 0;\n    int xUnionBottomLeft = 0;\n    int xUnionBottomRight = 0;\n    \n    // Bottom Left takes the lesser of the X coordinates, Top right; vice versa\n    if(topLeftBX > topLeftAX ){\n        xUnionTopLeft = topLeftBX;\n    }else{\n        xUnionTopLeft = topLeftAX;\n    }\n\n    if(topRightBX > topRightAX ){\n        xUnionTopRight = topRightBX;\n    }else{\n        xUnionTopRight = topRightAX;\n    }\n    \n    if(bottomLeftBX < bottomLeftAX ){\n        xUnionBottomLeft = bottomLeftBX;\n    }else{\n        xUnionBottomLeft = bottomLeftAX;\n    }\n    \n    if(bottomRightBX > bottomRightAX ){\n        xUnionBottomRight = bottomRightBX;\n    }else{\n        xUnionBottomRight = bottomRightAX;\n    }\n    \n    \n    // Bottom Left takes the lesser of the Y coordinates, Top right; vice versa\n    if(topLeftBY > topLeftAY ){\n        yUnionTopLeft = topLeftBY;\n    }else{\n        yUnionTopLeft = topLeftAY;\n    }\n\n    if(topRightBY > topRightAY ){\n        yUnionTopRight = topRightBY;\n    }else{\n        yUnionTopRight = topRightAY;\n    }\n    \n    if(bottomLeftBY < bottomLeftAY ){\n        yUnionBottomLeft = bottomLeftBY;\n    }else{\n        yUnionBottomLeft = bottomLeftAY;\n    }\n    \n    if(bottomRightBY > bottomRightAY ){\n        yUnionBottomRight = bottomRightBY;\n    }else{\n        yUnionBottomRight = bottomRightAY;\n    }        \n    \n    int UnionWidth = xUnionBottomRight - xUnionBottomLeft;\n    int UnionHeight = yUnionTopLeft - yUnionBottomLeft;\n    int UnionX = xUnionBottomLeft;\n    int UnionY = yUnionBottomLeft;\n    \n    //yeah, totally inefficient code, but i did all this work thinking that i had to \n    //...look for the intercept between the two rectangles. \n\n    return new Rectangle(UnionX, UnionY, UnionWidth, UnionHeight);\n}", 
            "status" : "PASS", 
            "activeTime" : 170.3
        }
    ]
}
{ 
    "_id" : "dJCmsfQY7tatNM9EB", 
    "userId" : "zna4wuKiLGvFRJriv", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:31:22.144+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:51:25.400+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n\npublic Rectangle(int x, int y, int width, int height){\n    this.x = x;\n    this.y = y;\n    this.width= width;\n    this.height = height;\n}\npublic int getHeight(){\n    return height;\n}\npublic int getWidth(){\n    return width;\n}\npublic int getX(){\n    return x;\n}\npublic int getY(){\n    return y;\n}\npublic String toString(){\n    String result=\"Rectangle[x=\"+getX()+\",y=\"+getY()+\",width=\"+getWidth()+\",height=\"+getHeight()+\"]\";\n    return result;\n}\n}", 
    "status" : "PASS", 
    "activeTime" : 92.4, 
    "totalActiveTime" : 2449.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:49:23.965+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n}\npublic Pectangle(int x, int y, int width, int height){\n    this.x = x;\n    this.y = y;\n    this.width= width;\n    this.height = height;\n}\npublic int getHeight(){\n    return height;\n}\npublic int getWidth(){\n    return width;\n}\npublic int getX(){\n    return x;\n}\npublic int getY(){\n    return y;\n}\npublic String toString(){\n    String result=\"Rectangle[x=\"+getX()+\",y=\"+getY()+\",width=\"+getWidth()+\",height=\"+getHeight()+\"]\";\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2328.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:49:52.643+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n}\npublic Rectangle(int x, int y, int width, int height){\n    this.x = x;\n    this.y = y;\n    this.width= width;\n    this.height = height;\n}\npublic int getHeight(){\n    return height;\n}\npublic int getWidth(){\n    return width;\n}\npublic int getX(){\n    return x;\n}\npublic int getY(){\n    return y;\n}\npublic String toString(){\n    String result=\"Rectangle[x=\"+getX()+\",y=\"+getY()+\",width=\"+getWidth()+\",height=\"+getHeight()+\"]\";\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:51:25.400+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n\npublic Rectangle(int x, int y, int width, int height){\n    this.x = x;\n    this.y = y;\n    this.width= width;\n    this.height = height;\n}\npublic int getHeight(){\n    return height;\n}\npublic int getWidth(){\n    return width;\n}\npublic int getX(){\n    return x;\n}\npublic int getY(){\n    return y;\n}\npublic String toString(){\n    String result=\"Rectangle[x=\"+getX()+\",y=\"+getY()+\",width=\"+getWidth()+\",height=\"+getHeight()+\"]\";\n    return result;\n}\n}", 
            "status" : "PASS", 
            "activeTime" : 92.4
        }
    ]
}
{ 
    "_id" : "gToNavd4YGuqQzPYG", 
    "userId" : "y69LScAMNyacdTiSs", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:35:02.948+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:51:49.581+0000"), 
    "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n    \n        if (reverse.toUpperCase().equals(text.toUpperCase())){\n            System.out.println(text + \" is a palindrome!\");\n        } else {\n            System.out.println(text + \" is not a palindrome.\");\n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : NumberInt(76), 
    "totalActiveTime" : 1015.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:49:48.644+0000"), 
            "code" : "public void printPalindrome(Scanner sc){\n    System.out.print(\"Type one or more words: \");\n    String x = sc.nextLine();\n    int crap = 0;\n    boolean palindrome = true;\n    if (x.length() % 2 == 0){\n        crap = x.length() / 2;\n        for(int i = 1; i <= x.length()/2; i++){\n            if(x.charAt(crap) != x.charAt(crap+i)){\n                palindrome = false;    \n            }\n        }\n    }\n    else{\n        for(int i = 1; i <= x.length()/2; i++){\n            crap = x.length() / 2 + 1;\n            if(x.charAt(crap + i) != x.charAt(crap -1)){\n                palindrome  = false;\n            }\n    }\n    if (palindrome == true){\n        System.out.println(x + \" is a palindrome!\");\n    }\n    else {\n        System.out.println(x + \" is not a palindrome.\")\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 894.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:50:01.263+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print(\"Type one or more words: \");\n    String x = sc.nextLine();\n    int crap = 0;\n    boolean palindrome = true;\n    if (x.length() % 2 == 0){\n        crap = x.length() / 2;\n        for(int i = 1; i <= x.length()/2; i++){\n            if(x.charAt(crap) != x.charAt(crap+i)){\n                palindrome = false;    \n            }\n        }\n    }\n    else{\n        for(int i = 1; i <= x.length()/2; i++){\n            crap = x.length() / 2 + 1;\n            if(x.charAt(crap + i) != x.charAt(crap -1)){\n                palindrome  = false;\n            }\n    }\n    if (palindrome == true){\n        System.out.println(x + \" is a palindrome!\");\n    }\n    else {\n        System.out.println(x + \" is not a palindrome.\")\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:50:25.149+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print(\"Type one or more words: \");\n    String x = sc.nextLine();\n    int crap = 0;\n    boolean palindrome = true;\n    if (x.length() % 2 == 0){\n        crap = x.length() / 2;\n        for(int i = 1; i <= x.length()/2; i++){\n            if(x.charAt(crap) != x.charAt(crap+i)){\n                palindrome = false;    \n            }\n        }\n    }\n    else{\n        for(int i = 1; i <= x.length()/2; i++){\n            crap = x.length() / 2 + 1;\n            if(x.charAt(crap + i) != x.charAt(crap -1)){\n                palindrome  = false;\n            }\n    }\n    }\n    if (palindrome == true){\n        System.out.println(x + \" is a palindrome!\");\n    }\n    else {\n        System.out.println(x + \" is not a palindrome.\")\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(24)
        }, 
        {
            "date" : ISODate("2016-04-24T10:50:33.704+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print(\"Type one or more words: \");\n    String x = sc.nextLine();\n    int crap = 0;\n    boolean palindrome = true;\n    if (x.length() % 2 == 0){\n        crap = x.length() / 2;\n        for(int i = 1; i <= x.length()/2; i++){\n            if(x.charAt(crap) != x.charAt(crap+i)){\n                palindrome = false;    \n            }\n        }\n    }\n    else{\n        for(int i = 1; i <= x.length()/2; i++){\n            crap = x.length() / 2 + 1;\n            if(x.charAt(crap + i) != x.charAt(crap -1)){\n                palindrome  = false;\n            }\n    }\n    }\n    if (palindrome == true){\n        System.out.println(x + \" is a palindrome!\");\n    }\n    else {\n        System.out.println(x + \" is not a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:51:49.581+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n    \n        if (reverse.toUpperCase().equals(text.toUpperCase())){\n            System.out.println(text + \" is a palindrome!\");\n        } else {\n            System.out.println(text + \" is not a palindrome.\");\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : NumberInt(76)
        }
    ]
}
{ 
    "_id" : "9QDnbKziJcrEEMeiy", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T07:23:23.974+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:50:42.808+0000"), 
    "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    int count =0;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        //System.out.println(first);\n        \n        char last = word.charAt(wordLength-1-i); \n        //System.out.println(last);\n        \n        if(last != first){\n            count++;\n        }\n        \n    }\n    if (count >0){\n        System.out.println(\"Type one or more words: \" + word1 + \" is not a palindrome.\");\n    }\n    if(count ==0){\n        System.out.println(\"Type one or more words: \" + word1 + \" is a palindrome!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 34.6, 
    "totalActiveTime" : 3442.7999999999993, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T07:26:13.481+0000"), 
            "code" : "public void printPalindrome(Scanner console){\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 197.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:26:22.756+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-04-24T07:27:20.133+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word = console.next();\n}", 
            "status" : "FAIL", 
            "activeTime" : 57.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:27:52.698+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word = console.next();\n    System.Out.Println(word);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.8
        }, 
        {
            "date" : ISODate("2016-04-24T07:27:57.270+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word = console.next();\n    System.Out.Println(word); // \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:28:12.372+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word = console.next();\n    System.out.println(word); // lower case 'o' and 'p'\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.8
        }, 
        {
            "date" : ISODate("2016-04-24T07:36:16.313+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word = console.next();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        \n        for(int j= wordLength-1; j>wordLength/2 ; j--){\n            char last = word.charAt(wordLength); \n            \n            if(last != first){\n                System.out.println(word + \"is not a palindrome.\");\n                check = false;\n            }\n            \n            \n        }\n    }\n    \n    if(check = true){\n        System.out.println(word + \"is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(484)
        }, 
        {
            "date" : ISODate("2016-04-24T07:36:41.802+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word = console.next();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        \n        for(int j= wordLength-1; j>wordLength/2 ; j--){\n            char last = word.charAt(j); \n            \n            if(last != first){\n                System.out.println(word + \"is not a palindrome.\");\n                check = false;\n            }\n            \n            \n        }\n    }\n    \n    if(check = true){\n        System.out.println(word + \"is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.6
        }, 
        {
            "date" : ISODate("2016-04-24T07:39:02.495+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word = console.next();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        \n        for(int j= wordLength-1; j>wordLength/2 ; j--){\n            char last = word.charAt(j); \n            \n            if(last != first){\n                check = false;\n            }\n            \n            \n        }\n    }\n    if (check == false){\n        System.out.println(word + \"is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word + \"is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 140.6
        }, 
        {
            "date" : ISODate("2016-04-24T07:40:20.460+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word = console.next();\n    int wordLength = word.length();\n    word = word.toLowerCase();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        \n        for(int j= wordLength-1; j>wordLength/2 ; j--){\n            char last = word.charAt(j); \n            \n            if(last != first){\n                check = false;\n            }\n            \n            \n        }\n    }\n    if (check == false){\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(56)
        }, 
        {
            "date" : ISODate("2016-04-24T07:40:53.513+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    int wordLength = word.length();\n    word = word1.toLowerCase();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        \n        for(int j= wordLength-1; j>wordLength/2 ; j--){\n            char last = word.charAt(j); \n            \n            if(last != first){\n                check = false;\n            }\n            \n            \n        }\n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.2
        }, 
        {
            "date" : ISODate("2016-04-24T07:41:15.123+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    int wordLength = word.length();\n    String word = word1.toLowerCase();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        \n        for(int j= wordLength-1; j>wordLength/2 ; j--){\n            char last = word.charAt(j); \n            \n            if(last != first){\n                check = false;\n            }\n            \n            \n        }\n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.5
        }, 
        {
            "date" : ISODate("2016-04-24T07:41:39.679+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n   \n    \n    String word = word1.toLowerCase();\n     int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        \n        for(int j= wordLength-1; j>wordLength/2 ; j--){\n            char last = word.charAt(j); \n            \n            if(last != first){\n                check = false;\n            }\n            \n            \n        }\n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.3
        }, 
        {
            "date" : ISODate("2016-04-24T07:43:40.998+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        \n        for(int j= wordLength-1; j>=wordLength/2 ; j--){\n            char last = word.charAt(j); \n            \n            if(last != first){\n                check = false;\n            }\n            \n            \n        }\n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 121.4
        }, 
        {
            "date" : ISODate("2016-04-24T07:45:21.667+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i<=wordLength/2; i++){\n        char first = word.charAt(i);\n        \n        for(int j=wordLength-1; j>=wordLength/2 ; j--){\n            char last = word.charAt(j); \n            \n            if(last != first){\n                check = false;\n            }\n            \n            \n        }\n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 100.6
        }, 
        {
            "date" : ISODate("2016-04-24T07:46:49.569+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i<=wordLength/2; i++){\n        char first = word.charAt(i);\n        System.out.println(first);\n        for(int j=wordLength-1; j>=wordLength/2 ; j--){\n            char last = word.charAt(j); \n            System.out.println(last);\n            if(last != first){\n                check = false;\n            }\n            \n            \n        }\n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(88)
        }, 
        {
            "date" : ISODate("2016-04-24T07:51:41.929+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i< wordLength/2; i++){\n        char first = word.charAt(i);\n        System.out.println(first);\n        \n        for(int j=wordLength-1; j>=wordLength/2 ; j--){\n            char last = word.charAt(j); \n            System.out.println(last);\n            \n            if(last != first){\n                check = false;\n            }\n        }\n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 291.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:16:15.960+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i< wordLength/2; i++){\n        char first = word.charAt(i);\n        System.out.println(first);\n        \n        for(int j=wordLength-1; j>=wordLength/2 ; j--){\n            char last = word.charAt(j); \n            System.out.println(last);\n            \n            if(last != first){\n                check = false;\n            }\n        }\n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 572.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:33:06.198+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i< wordLength/2; i++){\n        char first = word.charAt(i);\n        System.out.println(first);\n        \n        for(int j=wordLength-1; j>=wordLength/2 ; j--){\n            char last = word.charAt(j); \n            System.out.println(last);\n            \n            if(last != first){\n                check = false;\n            }\n        }\n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 115.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:46:35.684+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        System.out.println(first);\n        \n        char last = word.charAt(wordLength-i); \n        System.out.println(last);\n        \n        if(last != first){\n            check = false;\n        }\n        \n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 805.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:47:19.576+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        System.out.println(first);\n        \n        char last = word.charAt(wordLength-1-i); \n        System.out.println(last);\n        \n        if(last != first){\n            check = false;\n        }\n        \n    }\n    if (check == false){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(check == true){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 43.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:48:33.590+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    int count =0;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        System.out.println(first);\n        \n        char last = word.charAt(wordLength-1-i); \n        System.out.println(last);\n        \n        if(last != first){\n            count++;\n        }\n        \n    }\n    if (count >0){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(count ==0){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 73.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:48:57.463+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    int count =0;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        //System.out.println(first);\n        \n        char last = word.charAt(wordLength-1-i); \n        //System.out.println(last);\n        \n        if(last != first){\n            count++;\n        }\n        \n    }\n    if (count >0){\n        System.out.println(word1 + \" is not a palindrome.\");\n    }\n    if(count ==0){\n        System.out.println(word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:50:08.231+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    int count =0;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        //System.out.println(first);\n        \n        char last = word.charAt(wordLength-1-i); \n        //System.out.println(last);\n        \n        if(last != first){\n            count++;\n        }\n        \n    }\n    if (count >0){\n        System.out.println(\"Type one or more words:\" + word1 + \" is not a palindrome.\");\n    }\n    if(count ==0){\n        System.out.println(\"Type one or more words:\" + word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 70.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:50:42.807+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next();\n    \n    String word = word1.toLowerCase();\n    int wordLength = word.length();\n    boolean check = true;\n    int count =0;\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        //System.out.println(first);\n        \n        char last = word.charAt(wordLength-1-i); \n        //System.out.println(last);\n        \n        if(last != first){\n            count++;\n        }\n        \n    }\n    if (count >0){\n        System.out.println(\"Type one or more words: \" + word1 + \" is not a palindrome.\");\n    }\n    if(count ==0){\n        System.out.println(\"Type one or more words: \" + word1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 34.6
        }
    ]
}
{ 
    "_id" : "a8LeehWTBvSELHfwn", 
    "userId" : "fzFhAfCHiwc4842pK", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T09:58:34.053+0000"), 
    "updatedAt" : ISODate("2016-04-24T10:50:54.952+0000"), 
    "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String words = console.nextLine();\n    boolean bool = true;\n    if(words.length()%2==0){\n        int num = words.length()/2;\n        \n        for(int i=0;i<num;i++){\n            char a = Character.toLowerCase(words.charAt(i));\n            char b = Character.toLowerCase(words.charAt(words.length()-i-1));\n            if(a != b ){\n                bool = false;\n            }\n        }\n    }\n    \n    if(words.length()%2 !=0){\n        int num = (words.length()-1)/2;\n        for(int i=0;i<num;i++){\n            char a = Character.toLowerCase(words.charAt(i));\n            char b = Character.toLowerCase(words.charAt(words.length()-i-1));\n            if(a!=b){\n                bool = false;\n            }\n        }\n    }\n    \n    \n    \n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(bool == true){ // do remember to check case-insensitively!\n        System.out.print(words+\" is a palindrome!\");\n    } else {\n         System.out.print(words+\" is not a palindrome.\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 249.6, 
    "totalActiveTime" : 820.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:04:00.166+0000"), 
            "code" : "public void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words: \");\n    String words = console.nextLine();\n    int length = words.length();\n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(words.charAt(0) == words.charAt(length-1)){ // do remember to check case-insensitively!\n        System.out.println(words+\" is a palindrome\");\n    } else {\n         System.out.println(words+\" is not a palindrome\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.2
        }, 
        {
            "date" : ISODate("2016-04-24T09:57:14.019+0000"), 
            "code" : "public void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words: \");\n    String words = console.nextLine();\n    int length = words.length();\n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(words.charAt(0) == words.charAt(length-1)){ // do remember to check case-insensitively!\n        System.out.println(words+\" is a palindrome\");\n    } else {\n         System.out.println(words+\" is not a palindrome\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-04-24T09:57:22.533+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words: \");\n    String words = console.nextLine();\n    int length = words.length();\n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(words.charAt(0) == words.charAt(length-1)){ // do remember to check case-insensitively!\n        System.out.println(words+\" is a palindrome\");\n    } else {\n         System.out.println(words+\" is not a palindrome\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 8.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:28:08.766+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words: \");\n    String words = console.nextLine();\n    boolean b = true;\n    if(words.length()%2==0){\n        int num = words.length()/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    if(words.length()%2 !=0){\n        int num = (words.length()-1)/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    \n    \n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(b == true){ // do remember to check case-insensitively!\n        System.out.println(words+\" is a palindrome\");\n    } else {\n         System.out.println(words+\" is not a palindrome\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(430)
        }, 
        {
            "date" : ISODate("2016-04-24T10:28:16.486+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words: \");\n    String words = console.nextLine();\n    boolean b = true;\n    if(words.length()%2==0){\n        int num = words.length()/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    if(words.length()%2 !=0){\n        int num = (words.length()-1)/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    \n    \n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(b == true){ // do remember to check case-insensitively!\n        System.out.println(words+\" is a palindrome\");\n    } else {\n         System.out.println(words+\" is not a palindrome\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 7.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:28:56.229+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words: \");\n    String words = console.nextLine();\n    boolean b = true;\n    if(words.length()%2==0){\n        int num = words.length()/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    if(words.length()%2 !=0){\n        int num = (words.length()-1)/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    \n    \n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(b == true){ // do remember to check case-insensitively!\n        System.out.print(words+\" is a palindrome\");\n    } else {\n         System.out.print(words+\" is not a palindrome\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 39.8
        }, 
        {
            "date" : ISODate("2016-04-24T10:29:13.353+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String words = console.nextLine();\n    boolean b = true;\n    if(words.length()%2==0){\n        int num = words.length()/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    if(words.length()%2 !=0){\n        int num = (words.length()-1)/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    \n    \n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(b == true){ // do remember to check case-insensitively!\n        System.out.print(words+\" is a palindrome\");\n    } else {\n         System.out.print(words+\" is not a palindrome\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:29:35.971+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String words = console.nextLine();\n    boolean b = true;\n    if(words.length()%2==0){\n        int num = words.length()/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    if(words.length()%2 !=0){\n        int num = (words.length()-1)/2;\n        for(int i=0;i<num;i++){\n            if(words.charAt(i)!= words.charAt(words.length()-i-1)){\n                b = false;\n            }\n        }\n    }\n    \n    \n    \n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(b == true){ // do remember to check case-insensitively!\n        System.out.print(words+\" is a palindrome!\");\n    } else {\n         System.out.print(words+\" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 22.8
        }, 
        {
            "date" : ISODate("2016-04-24T10:50:54.951+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String words = console.nextLine();\n    boolean bool = true;\n    if(words.length()%2==0){\n        int num = words.length()/2;\n        \n        for(int i=0;i<num;i++){\n            char a = Character.toLowerCase(words.charAt(i));\n            char b = Character.toLowerCase(words.charAt(words.length()-i-1));\n            if(a != b ){\n                bool = false;\n            }\n        }\n    }\n    \n    if(words.length()%2 !=0){\n        int num = (words.length()-1)/2;\n        for(int i=0;i<num;i++){\n            char a = Character.toLowerCase(words.charAt(i));\n            char b = Character.toLowerCase(words.charAt(words.length()-i-1));\n            if(a!=b){\n                bool = false;\n            }\n        }\n    }\n    \n    \n    \n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(bool == true){ // do remember to check case-insensitively!\n        System.out.print(words+\" is a palindrome!\");\n    } else {\n         System.out.print(words+\" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 249.6
        }
    ]
}
{ 
    "_id" : "zpn96XM4iwEevKogh", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "L46REaDboHACstAXr", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:45:07.325+0000"), 
    "updatedAt" : ISODate("2016-04-24T11:44:33.468+0000"), 
    "code" : "public static void quotify(String sentence){\n    System.out.print(\"\\\"\" + sentence + \"\\\"\");\n}", 
    "status" : "PASS", 
    "activeTime" : 43.7, 
    "totalActiveTime" : 724.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:47:00.548+0000"), 
            "code" : "public static String quotify(String sentence){\n    return \"+sentence+\";\n}", 
            "status" : "FAIL", 
            "activeTime" : 123.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:48:23.833+0000"), 
            "code" : "public static String quotify(String sentence){\n    return \" \" \"+sentence+\" \" \" ;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.6
        }, 
        {
            "date" : ISODate("2016-04-24T10:49:18.022+0000"), 
            "code" : "public static String quotify(String sentence){\n    return \" \" sentence \" \" ;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:49:42.271+0000"), 
            "code" : "public static String quotify(String sentence){\n    return \"\"sentence\"\";\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:51:13.078+0000"), 
            "code" : "public static String quotify(String sentence){\n    return \"\\\"\"+sentence+\"\\\"\";\n}", 
            "status" : "FAIL", 
            "activeTime" : 39.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:51:40.619+0000"), 
            "code" : "public static String quotify(String sentence){\n    return \"\\\"+sentence+\"\\\";\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:53:04.587+0000"), 
            "code" : "public static String quotify(String sentence){\n    return  \"\\\"\" + sentence + \"\\\"\";\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-04-24T11:43:49.864+0000"), 
            "code" : "public static String quotify(String sentence){\n    return  \"\\\"\" + sentence + \"\\\"\";\n}", 
            "status" : "FAIL", 
            "activeTime" : 348.4
        }, 
        {
            "date" : ISODate("2016-04-24T11:44:33.467+0000"), 
            "code" : "public static void quotify(String sentence){\n    System.out.print(\"\\\"\" + sentence + \"\\\"\");\n}", 
            "status" : "PASS", 
            "activeTime" : 43.7
        }
    ]
}
{ 
    "_id" : "EPHtRc9jpf8GYSFJt", 
    "userId" : "mzEYkra6nhsvCgSH7", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:52:57.865+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:48:22.322+0000"), 
    "code" : "public static String parseEmail(String email){\n    int index = email.indexOf(\"@\");\n    String s= email.substring(0,index);\n    return s;\n}", 
    "status" : "PASS", 
    "activeTime" : 57.8, 
    "totalActiveTime" : 4351.900000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:54:15.532+0000"), 
            "code" : "public String parseEmail()", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(72)
        }, 
        {
            "date" : ISODate("2016-04-24T10:56:24.214+0000"), 
            "code" : "public String parseEmail(String email){\n    int index = email.indexOf(\"@\");\n    return email.subString(index);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(92)
        }, 
        {
            "date" : ISODate("2016-04-24T10:57:12.839+0000"), 
            "code" : "public static String parseEmail(String email){\n    int index = email.indexOf(\"@\");\n    return email.subString(index);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.7
        }, 
        {
            "date" : ISODate("2016-04-24T10:58:51.782+0000"), 
            "code" : "public static String parseEmail(String email){\n    int index = email.indexOf(\"@\");\n    return email.subString(0,index);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:59:13.634+0000"), 
            "code" : "public static String parseEmail(String email){\n    int index = email.indexOf(\"@\");\n    String s= email.subString(0,index);\n    return s;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:59:25.355+0000"), 
            "code" : "public static String parseEmail(String email){\n    int index = email.indexOf(\"@\");\n    String s= email.subString(0,index);\n    return s;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-04-24T13:47:18.338+0000"), 
            "code" : "public static String parseEmail(String email){\n    int index = email.indexOf(\"@\");\n    String s= email.subString(0,index);\n    return s;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4001.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:48:22.322+0000"), 
            "code" : "public static String parseEmail(String email){\n    int index = email.indexOf(\"@\");\n    String s= email.substring(0,index);\n    return s;\n}", 
            "status" : "PASS", 
            "activeTime" : 57.8
        }
    ]
}
{ 
    "_id" : "yLraxaErG4PDhQd7J", 
    "userId" : "sJHc88TqFpuuuT54p", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:05:48.757+0000"), 
    "updatedAt" : ISODate("2016-04-24T11:09:10.679+0000"), 
    "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print(\"Type one or more words: \");\n    String word = sc.nextLine();\n    String lowerCase = word.toLowerCase();\n    String newString = \"\";\n    for(int i =lowerCase.length()-1; i>=0; i--){\n        newString += lowerCase.charAt(i);\n    }\n    if(newString.equals(lowerCase)){\n        System.out.println(word + \" is a palindrome!\");\n        \n    }\n    else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 13.2, 
    "totalActiveTime" : 789.3000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:07:07.286+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.println(\"Type one or more words: \");\n    String word = sc.nextLine()\n    String lowerCase = word.toLowerCase();\n    String newString = \"\";\n    for(int i =lowerCase.length()-1; i>=0; i--){\n        newString += lowerCase.charAt(i);\n    }\n    if(newString.equals(lowerCase)){\n        System.out.println(lowerCase + \" is a palindrome!\");\n        \n    }\n    else {\n        System.out.println(lowerCase + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(666)
        }, 
        {
            "date" : ISODate("2016-04-24T11:07:15.583+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.println(\"Type one or more words: \");\n    String word = sc.nextLine();\n    String lowerCase = word.toLowerCase();\n    String newString = \"\";\n    for(int i =lowerCase.length()-1; i>=0; i--){\n        newString += lowerCase.charAt(i);\n    }\n    if(newString.equals(lowerCase)){\n        System.out.println(lowerCase + \" is a palindrome!\");\n        \n    }\n    else {\n        System.out.println(lowerCase + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.1
        }, 
        {
            "date" : ISODate("2016-04-24T11:08:57.636+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.println(\"Type one or more words: \");\n    String word = sc.nextLine();\n    String lowerCase = word.toLowerCase();\n    String newString = \"\";\n    for(int i =lowerCase.length()-1; i>=0; i--){\n        newString += lowerCase.charAt(i);\n    }\n    if(newString.equals(lowerCase)){\n        System.out.println(word + \" is a palindrome!\");\n        \n    }\n    else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(102)
        }, 
        {
            "date" : ISODate("2016-04-24T11:09:10.678+0000"), 
            "code" : "public static void printPalindrome(Scanner sc){\n    System.out.print(\"Type one or more words: \");\n    String word = sc.nextLine();\n    String lowerCase = word.toLowerCase();\n    String newString = \"\";\n    for(int i =lowerCase.length()-1; i>=0; i--){\n        newString += lowerCase.charAt(i);\n    }\n    if(newString.equals(lowerCase)){\n        System.out.println(word + \" is a palindrome!\");\n        \n    }\n    else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 13.2
        }
    ]
}
{ 
    "_id" : "ADYMXsEY7KvoGkPqE", 
    "userId" : "qRRx6bzkx25XcK7w8", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:44:23.608+0000"), 
    "updatedAt" : ISODate("2016-04-24T11:15:39.511+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 14.9, 
    "totalActiveTime" : 1879.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:01:27.978+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int count = 0;\n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList += a1.get(i);\n        for(int j = 0; j < shorter; j++){\n            newList += a2.get(i);\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count = 1) {\n            newList += a1.get(i);\n        } else if (count = 2) {\n            newList += a2.get(i);\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1028.5
        }, 
        {
            "date" : ISODate("2016-04-24T11:01:41.805+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList += a1.get(i);\n        for(int j = 0; j < shorter; j++){\n            newList += a2.get(i);\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count = 1) {\n            newList += a1.get(i);\n        } else if (count = 2) {\n            newList += a2.get(i);\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.7
        }, 
        {
            "date" : ISODate("2016-04-24T11:02:23.926+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(i));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count = 1) {\n            newList.add(a1.get(i));\n        } else if (count = 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 42.1
        }, 
        {
            "date" : ISODate("2016-04-24T11:02:49.592+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(i));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1 = newList;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.8
        }, 
        {
            "date" : ISODate("2016-04-24T11:03:02.918+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(i));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1 = newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 12.9
        }, 
        {
            "date" : ISODate("2016-04-24T11:03:26.547+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(i));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    //a1 = newList;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 23.8
        }, 
        {
            "date" : ISODate("2016-04-24T11:04:35.588+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(i));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    a1.add(newList);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 69.3
        }, 
        {
            "date" : ISODate("2016-04-24T11:04:55.815+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(i));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 20.2
        }, 
        {
            "date" : ISODate("2016-04-24T11:05:36.731+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(i));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 40.9
        }, 
        {
            "date" : ISODate("2016-04-24T11:08:25.959+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        for(int j = 0; j < shorter; j++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 169.1
        }, 
        {
            "date" : ISODate("2016-04-24T11:09:39.706+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(j));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 73.8
        }, 
        {
            "date" : ISODate("2016-04-24T11:09:56.274+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < i; j++){\n            newList.add(a2.get(j));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.5
        }, 
        {
            "date" : ISODate("2016-04-24T11:10:05.155+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    //newList += a1.get(0);\n    //newList += a2.get(0);\n    //newList += a1.get(1);\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(j));\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-04-24T11:14:54.406+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = 0; j < shorter; j++){\n            newList.add(a2.get(j));\n            return;\n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 289.2
        }, 
        {
            "date" : ISODate("2016-04-24T11:15:24.503+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 30.2
        }, 
        {
            "date" : ISODate("2016-04-24T11:15:39.511+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 14.9
        }
    ]
}
{ 
    "_id" : "J4TbfCah2WJjp5sqM", 
    "userId" : "fzFhAfCHiwc4842pK", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T10:10:28.893+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:25:04.861+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    Iterator<Integer> iter2 = a2.iterator();\n    int count = 1;\n    \n    if(a1.size()>= a2.size()){\n        while (iter2.hasNext()){\n            a1.add(count,iter2.next());\n            count +=2;\n        }\n    } else if(a1.size()<a2.size()){\n        while(iter2.hasNext()){\n            if(count<=a1.size()){\n                a1.add(count,iter2.next());\n                count +=2;\n            } else {\n                a1.add(iter2.next());\n            }\n        }\n    }\n\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(10), 
    "totalActiveTime" : 1730.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:55:56.387+0000"), 
            "code" : "public ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n    }\n    \n    return combine;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 791.4
        }, 
        {
            "date" : ISODate("2016-04-24T09:56:09.178+0000"), 
            "code" : "public ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n    }\n    \n    return combine;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:51:33.559+0000"), 
            "code" : "public ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n    }\n    \n    return combine;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:51:44.040+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n    }\n    \n    return combine;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:51:58.518+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n    }\n    \n    return combine;\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-04-24T10:53:35.575+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n    \n    return combine;\n}", 
            "status" : "FAIL", 
            "activeTime" : 97.3
        }, 
        {
            "date" : ISODate("2016-04-24T10:54:12.693+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n    \n    return combine;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(37)
        }, 
        {
            "date" : ISODate("2016-04-24T10:54:20.162+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n    \n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:55:09.046+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 48.8
        }, 
        {
            "date" : ISODate("2016-04-24T10:56:23.845+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            System.out.println(\"error\");\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 40.5
        }, 
        {
            "date" : ISODate("2016-04-24T11:13:33.555+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            System.out.println(\"error\");\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 150.3
        }, 
        {
            "date" : ISODate("2016-04-24T11:13:47.717+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            System.out.println(\"error\");\n            int temp2 = a2.get(i);\n            System.out.println(\"error\");\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.2
        }, 
        {
            "date" : ISODate("2016-04-24T11:14:15.531+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            System.out.println(\"error\");\n            int temp2 = a2.get(i);\n            System.out.println(\"error\");\n            combine.add(temp1);\n            System.out.println(\"error\");\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(28)
        }, 
        {
            "date" : ISODate("2016-04-24T11:14:29.974+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            System.out.println(\"error\");\n            int temp2 = a2.get(i);\n            System.out.println(\"error\");\n            combine.add(temp1);\n            System.out.println(\"error\");\n            combine.add(temp2);\n            System.out.println(\"error\");\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.3
        }, 
        {
            "date" : ISODate("2016-04-24T11:15:06.836+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        System.out.println(combine);\n        a1 = combine;\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 36.9
        }, 
        {
            "date" : ISODate("2016-04-24T11:15:47.565+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        System.out.println(combine);\n        a1 = combine;\n        System.out.println(a1);\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 40.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:19:06.472+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        System.out.println(combine);\n        a1 = combine;\n        System.out.println(a1);\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 93.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:19:13.431+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        System.out.println(combine);\n        a1 = combine;\n        System.out.println(a1);\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:19:26.347+0000"), 
            "code" : "public void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> combine = new ArrayList<Integer>();\n    \n    if(a1.size()>=a2.size()){\n        int shortest = a2.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.get(i);\n            int temp2 = a2.get(i);\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j =shortest;j<a1.size();j++){\n            combine.add(a1.get(j));\n        }\n        System.out.println(combine);\n        a1 = combine;\n        System.out.println(a1);\n    }\n    \n    if(a1.size()<a2.size()){\n        int shortest = a1.size();\n        for(int i =0;i<shortest;i++){\n            int temp1 = a1.size();\n            int temp2 = a2.size();\n            combine.add(temp1);\n            combine.add(temp2);\n        }\n        for(int j=shortest;j<a2.size();j++){\n            combine.add(a2.get(j));\n        }\n        a1 = combine;\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:24:43.030+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    Iterator<Integer> iter2 = a2.iterator();\n    int count = 1;\n    \n    if(a1.size()>= a2.size()){\n        while (iter2.hasNext()){\n            a1.add(count,iter.next())\n            count +=2;\n        }\n    } else if(a1.size()<a2.size()){\n        while(iter2.hasNext()){\n            if(count<=a1.size()){\n                a1.add(count,iter2.next());\n                count +=2;\n            } else {\n                a1.add(iter2.next());\n            }\n        }\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 213.1
        }, 
        {
            "date" : ISODate("2016-04-24T13:24:54.596+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    Iterator<Integer> iter2 = a2.iterator();\n    int count = 1;\n    \n    if(a1.size()>= a2.size()){\n        while (iter2.hasNext()){\n            a1.add(count,iter.next());\n            count +=2;\n        }\n    } else if(a1.size()<a2.size()){\n        while(iter2.hasNext()){\n            if(count<=a1.size()){\n                a1.add(count,iter2.next());\n                count +=2;\n            } else {\n                a1.add(iter2.next());\n            }\n        }\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:25:04.861+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    Iterator<Integer> iter2 = a2.iterator();\n    int count = 1;\n    \n    if(a1.size()>= a2.size()){\n        while (iter2.hasNext()){\n            a1.add(count,iter2.next());\n            count +=2;\n        }\n    } else if(a1.size()<a2.size()){\n        while(iter2.hasNext()){\n            if(count<=a1.size()){\n                a1.add(count,iter2.next());\n                count +=2;\n            } else {\n                a1.add(iter2.next());\n            }\n        }\n    }\n\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(10)
        }
    ]
}
{ 
    "_id" : "s86mdgrkY8rrqDs79", 
    "userId" : "qRRx6bzkx25XcK7w8", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T11:16:01.899+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:41:19.860+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height +\"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 3.2, 
    "totalActiveTime" : 254.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:19:36.180+0000"), 
            "code" : "public class Rectangle() {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height +\"]\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(237)
        }, 
        {
            "date" : ISODate("2016-04-24T11:19:50.394+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height +\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:19.860+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height +\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 3.2
        }
    ]
}
{ 
    "_id" : "umDSJQK3ZFv5RnRH8", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T03:03:10.967+0000"), 
    "updatedAt" : ISODate("2016-04-24T11:26:25.858+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        ArrayList<Integer> temp = new ArrayList<>(); \n        \n        if(a1 != null && a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a1.size(); i++){\n                    temp.add(a1.get(i));\n                    int value2 = a2.get(position2);\n                    temp.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }   \n                for(int j = position2 ; j < a2.size() ; j++){\n                    temp.add(a2.get(j));\n                }\n            }  \n            \n            if(length1 > length2){\n                int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                \n            }\n        }\n      \n      \n      \n}", 
    "status" : "FAIL", 
    "activeTime" : 16.9, 
    "totalActiveTime" : 2058.8999999999996, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:05:33.475+0000"), 
            "code" : "public static void interleave(ArrayList<int> a1, ArrayList<int> a2){\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:05:57.869+0000"), 
            "code" : "import java.util.*;  \npublic static void interleave(ArrayList<int> a1, ArrayList<int> a2){\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:14:05.966+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        \n        int value2 = a2.get(position2);\n        a1.add(position1, value2);\n        position1 +=2; \n        position2 ++;\n        \n        \n}", 
            "status" : "FAIL", 
            "activeTime" : 401.7
        }, 
        {
            "date" : ISODate("2016-04-24T11:04:32.026+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        /*int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        \n            int value2 = a2.get(position2);\n            a1.add(position1, value2);\n            position1 +=2; \n            position2 ++;\n      */\n      \n       int i = a1.size();\n    int j = a2.size();\n\n    if (i < j) { // a1 is shorter than a2\n        for (int k = 0; k < a1.size(); k++) { // before k passes a1 size\n            a1.add(k+1, a2.get(k));\n        }\n\n        for (int l = a1.size(); l < a2.size(); l++) {\n            a1.add(a1.size(), a2.get(l));\n        }\n\n    } else if (i > j) { // a1 is longer than a2\n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n    } else { // they are equal length\n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n    }\n        \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(479)
        }, 
        {
            "date" : ISODate("2016-04-24T11:10:19.663+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        \n        if(length2 > length1){\n            for(int i = 0; i < a1.size(); i++){\n                int value2 = a2.get(position2);\n                a1.add(position1, value2);\n                position1 +=2; \n                position2 ++;\n            }    \n        }    \n      \n      \n      \n}", 
            "status" : "FAIL", 
            "activeTime" : 183.7
        }, 
        {
            "date" : ISODate("2016-04-24T11:12:42.343+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        \n        if(a1 != null || a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a1.size(); i++){\n                    int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }    \n            }  \n        }\n      \n      \n      \n}", 
            "status" : "FAIL", 
            "activeTime" : 139.7
        }, 
        {
            "date" : ISODate("2016-04-24T11:13:09.430+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        \n        if(a1 != null && a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a1.size(); i++){\n                    int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }    \n            }  \n        }\n      \n      \n      \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(27)
        }, 
        {
            "date" : ISODate("2016-04-24T11:20:22.960+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        \n        if(a1 != null && a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a1.size(); i++){\n                    int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }    \n            }  \n            \n            if(length1 > length2){\n                for(int i = 0; i<a1.size(); i++){\n                    int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }\n            }\n        }\n      \n      \n      \n}", 
            "status" : "FAIL", 
            "activeTime" : 433.6
        }, 
        {
            "date" : ISODate("2016-04-24T11:21:14.251+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        \n        if(a1 != null && a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a2.size(); i++){\n                    int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }    \n            }  \n            \n            if(length1 > length2){\n                \n                }\n            }\n        }\n      \n      \n      \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.6
        }, 
        {
            "date" : ISODate("2016-04-24T11:21:30.617+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        \n        if(a1 != null && a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a2.size(); i++){\n                    int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }    \n            }  \n            \n            if(length1 > length2){\n                \n                \n            }\n        }\n      \n      \n      \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.1
        }, 
        {
            "date" : ISODate("2016-04-24T11:21:58.209+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        \n        if(a1 != null && a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a2.size(); i++){\n                    int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }    \n            }  \n            \n            if(length1 > length2){\n                int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                \n            }\n        }\n      \n      \n      \n}", 
            "status" : "FAIL", 
            "activeTime" : 27.6
        }, 
        {
            "date" : ISODate("2016-04-24T11:26:08.673+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        ArrayList<Integer> temp = new ArrayList<>(); \n        \n        if(a1 != null && a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a1.size(); i++){\n                    temp.add(a1.get(i));\n                    int value2 = a2.get(position2);\n                    temp.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }   \n                for(int j = position2 ; j < a2.size() ; j++){\n                    temp.add(a2.get(j);\n                }\n            }  \n            \n            if(length1 > length2){\n                int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                \n            }\n        }\n      \n      \n      \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 250.7
        }, 
        {
            "date" : ISODate("2016-04-24T11:26:25.857+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1;\n        int position2 = 0; \n        ArrayList<Integer> temp = new ArrayList<>(); \n        \n        if(a1 != null && a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a1.size(); i++){\n                    temp.add(a1.get(i));\n                    int value2 = a2.get(position2);\n                    temp.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }   \n                for(int j = position2 ; j < a2.size() ; j++){\n                    temp.add(a2.get(j));\n                }\n            }  \n            \n            if(length1 > length2){\n                int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                \n            }\n        }\n      \n      \n      \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.9
        }
    ]
}
{ 
    "_id" : "DPXHeAPf4gMDLsmfr", 
    "userId" : "F5XnEFAmSrqP7Hbf4", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:30:51.417+0000"), 
    "updatedAt" : ISODate("2016-04-24T11:49:08.082+0000"), 
    "code" : "public static void main(String[] args) { \n    \n    String s = parseEmail(\"jianhua.tan.2015@smu.edu.sg\");\n    System.out.println(s);\n    \n}\n    public static String parseEmail(String email) {\n        \n        int positionAt = email.indexOf(\"@\");\n        String emailChecker = email.substring(0, positionAt); \n    return emailChecker;\n    \n    }", 
    "status" : "PASS", 
    "activeTime" : 17.1, 
    "totalActiveTime" : 564.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:39:19.625+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class emailString {\npublic static void main(String[] args) { \n    \n    parseEmail(\"jianhua.tan.2015@smu.edu.sg\");\n    \n    \n}\n    public static String parseEmail(String email) {\n        \n        int positionAt = email.indexOf(\"@\");\n    return email.subString(0, positionAt);     \n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 263.1
        }, 
        {
            "date" : ISODate("2016-04-24T11:46:09.863+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class Test3 {\npublic static void main(String[] ARGS) { \n    \n    String s = parseEmail(\"jianhua.tan.2015@smu.edu.sg\");\n    System.out.println(s);\n    \n}\n    public static String parseEmail(String email) {\n        \n        int positionAt = email.indexOf(\"@\");\n        String emailChecker = email.substring(0, positionAt); \n    return emailChecker;\n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 122.8
        }, 
        {
            "date" : ISODate("2016-04-24T11:46:17.653+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class Test3 {\npublic static void main(String[] ARGS) { \n    \n    String s = parseEmail(\"jianhua.tan.2015@smu.edu.sg\");\n    System.out.println(s);\n    \n}\n    public static String parseEmail(String email) {\n        \n        int positionAt = email.indexOf(\"@\");\n        String emailChecker = email.substring(0, positionAt); \n    return emailChecker;\n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(8)
        }, 
        {
            "date" : ISODate("2016-04-24T11:46:58.878+0000"), 
            "code" : "import java.util.Scanner;\n\npublic class Test3 {\npublic static void main(String[] args) { \n    \n    String s = parseEmail(\"jianhua.tan.2015@smu.edu.sg\");\n    System.out.println(s);\n    \n}\n    public static String parseEmail(String email) {\n        \n        int positionAt = email.indexOf(\"@\");\n        String emailChecker = email.substring(0, positionAt); \n    return emailChecker;\n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.2
        }, 
        {
            "date" : ISODate("2016-04-24T11:48:01.831+0000"), 
            "code" : "public class Test3 {\npublic static void main(String[] args) { \n    \n    String s = parseEmail(\"jianhua.tan.2015@smu.edu.sg\");\n    System.out.println(s);\n    \n}\n    public static String parseEmail(String email) {\n        \n        int positionAt = email.indexOf(\"@\");\n        String emailChecker = email.substring(0, positionAt); \n    return emailChecker;\n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.1
        }, 
        {
            "date" : ISODate("2016-04-24T11:48:50.999+0000"), 
            "code" : "public static void main(String[] args) { \n    \n    String s = parseEmail(\"jianhua.tan.2015@smu.edu.sg\");\n    System.out.println(s);\n    \n}\n    public static String parseEmail(String email) {\n        \n        int positionAt = email.indexOf(\"@\");\n        String emailChecker = email.substring(0, positionAt); \n    return emailChecker;\n    \n    }", 
            "status" : "PASS", 
            "activeTime" : 48.8
        }, 
        {
            "date" : ISODate("2016-04-24T11:49:08.082+0000"), 
            "code" : "public static void main(String[] args) { \n    \n    String s = parseEmail(\"jianhua.tan.2015@smu.edu.sg\");\n    System.out.println(s);\n    \n}\n    public static String parseEmail(String email) {\n        \n        int positionAt = email.indexOf(\"@\");\n        String emailChecker = email.substring(0, positionAt); \n    return emailChecker;\n    \n    }", 
            "status" : "PASS", 
            "activeTime" : 17.1
        }
    ]
}
{ 
    "_id" : "TsSMucfgz3QYmxEKj", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "4gGxjgkpZNbmLKFfL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T11:44:39.931+0000"), 
    "updatedAt" : ISODate("2016-04-24T11:52:33.908+0000"), 
    "code" : "public static void flippedTriangle(int height){\n\tfor(int i = 1;i <= height; i++){\n\t\tfor(int j = height-i;j > 0;j--){\n\t\t\tSystem.out.print(\" \");\n\t\t}\n\t\tfor(int k = 0;k < i; k++){\n\t\t\tSystem.out.print(\"*\");\n\t\t}\n\t\tSystem.out.println();\n\t}\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(150), 
    "totalActiveTime" : 476.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:49:18.904+0000"), 
            "code" : "public static void  flippedTriangle(int height){\n    for(int i = 1;i <= height; i++){\n        for(int j = height-1;j > 0;j--){\n            System.out.print(\" \");\n        }\n        for(int k = 0;k < i; k++){\n            System.out.print(\"*\")；\n        }\n        System.out.println();\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 281.8
        }, 
        {
            "date" : ISODate("2016-04-24T11:49:36.356+0000"), 
            "code" : "public static void  flippedTriangle(int height){\n    for(int i = 1;i <= height; i++){\n        for(int j = height-1;j > 0;j--){\n            System.out.print(\" \");\n        }\n        for(int k = 0;k < i; k++){\n            System.out.print(\"*\");\n        }\n        System.out.println();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.2
        }, 
        {
            "date" : ISODate("2016-04-24T11:50:03.997+0000"), 
            "code" : "public static void  flippedTriangle(int height){\n    for(int i = 1;i <= height; i++){\n        for(int j = height-1;j > 0;j--){\n            System.out.print(\" \");\n        }\n        for(int k = 0;k < i; k++){\n            System.out.print(\"*\");\n        }\n        System.out.println();\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 27.6
        }, 
        {
            "date" : ISODate("2016-04-24T11:52:33.908+0000"), 
            "code" : "public static void flippedTriangle(int height){\n\tfor(int i = 1;i <= height; i++){\n\t\tfor(int j = height-i;j > 0;j--){\n\t\t\tSystem.out.print(\" \");\n\t\t}\n\t\tfor(int k = 0;k < i; k++){\n\t\t\tSystem.out.print(\"*\");\n\t\t}\n\t\tSystem.out.println();\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(150)
        }
    ]
}
{ 
    "_id" : "AYhZH9AcvE3ttCy7T", 
    "userId" : "qRRx6bzkx25XcK7w8", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T11:20:14.374+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:11:38.047+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
    "status" : "PASS", 
    "activeTime" : 947.7, 
    "totalActiveTime" : 2798.2000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:22:43.742+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle newRect = new Rectangle();\n    \n    \n    \n    return newRect;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 173.3
        }, 
        {
            "date" : ISODate("2016-04-24T11:45:53.396+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    int smallerX = 0;\n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n    } else {\n        smallerX = rectAX;\n    }\n    \n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    int smallerY = 0;\n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n    } else {\n        smallerY = rectAY;\n    }\n    \n    \n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, 0,0);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "FAIL", 
            "activeTime" : 768.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:15.168+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 878.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:15.206+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 2.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:20.501+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:24.807+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 12.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:24.877+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 1.5
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:27.939+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 1.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:29.184+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 1.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:11:38.047+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 947.7
        }
    ]
}
{ 
    "_id" : "3KpyQFX8iBRErfbG9", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:00:01.926+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:46:31.053+0000"), 
    "code" : "public static String parseEmail(String email){\n        \n    String result = email.split(\"@\")[0];\n        \n    return result;\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 45.5, 
    "totalActiveTime" : 1749.8000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:41:17.395+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String result = email.split(\"@\").[0];\n    \n    return result;\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 131.8
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:22.808+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String result = email.split(\"@\").[0];\n    \n    return result;\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:25.853+0000"), 
            "code" : "public class EmailID{\n    public static String parseEmail(String email){\n        \n        String result = email.split(\"@\").[0];\n        \n        return result;\n    \n    \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:45.435+0000"), 
            "code" : "public static String parseEmail(String email){\n        \n    String result = email.split(\"@\").[0];\n        \n    return result;\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1512.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:45:45.301+0000"), 
            "code" : "public static String parseEmail(String email){\n        \n    String result = email.split(\"@\").[0];\n        \n    return result;\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(6)
        }, 
        {
            "date" : ISODate("2016-04-24T12:46:31.052+0000"), 
            "code" : "public static String parseEmail(String email){\n        \n    String result = email.split(\"@\")[0];\n        \n    return result;\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 45.5
        }
    ]
}
{ 
    "_id" : "96C3CNPYHgr2B3abf", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:45:41.394+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:48:43.946+0000"), 
    "status" : "PASS", 
    "activeTime" : 77.6, 
    "totalActiveTime" : 1562.1999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T10:07:29.300+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String type1 = \"abba\";\n    String type2 = \"racecar\";\n    System.out.print(\"Type one or more words: \");\n    String sentence = console.nextLine();\n    String newString = sentence.toLowerCase();\n    if(newString.indexOf(type1) == -1 || newString.indexOf(type2)==-1){\n        System.out.println(sentence + \" is not a palindrome.\");\n    }else{\n        System.out.println(sentence + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 1042.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:22.052+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String original, reverse = \"\";\n    \n    System.out.print(\"Type one or more words: \");\n    original = console.nextLine();\n    String newString = original.toLowerCase();\n    \n    int length = newString.length();\n    \n    for ( int i = length - 1; i >= 0; i-- )\n        reverse = reverse + newString.charAt(i);\n    \n    if (newString.equals(reverse))\n        System.out.println(original+\" is a palindrome!\");\n    else\n        System.out.println(original+\" is not a palindrome.\");\n \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 269.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:26.798+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String original, reverse = \"\";\n    \n    System.out.print(\"Type one or more words: \");\n    original = console.nextLine();\n    String newString = original.toLowerCase();\n    \n    int length = newString.length();\n    \n    for ( int i = length - 1; i >= 0; i-- ){\n        reverse = reverse + newString.charAt(i);\n    }\n    \n    if (newString.equals(reverse))\n        System.out.println(original+\" is a palindrome!\");\n    else\n        System.out.println(original+\" is not a palindrome.\");\n \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:33.160+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String original, reverse = \"\";\n    \n    System.out.print(\"Type one or more words: \");\n    original = console.nextLine();\n    String newString = original.toLowerCase();\n    \n    int length = newString.length();\n    \n    for ( int i = length - 1; i >= 0; i-- ){\n        reverse = reverse + newString.charAt(i);\n    }\n    \n    if (newString.equals(reverse))\n        System.out.println(original+\" is a palindrome!\");\n    else\n        System.out.println(original+\" is not a palindrome.\");\n \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:35.025+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String original, reverse = \"\";\n    \n    System.out.print(\"Type one or more words: \");\n    original = console.nextLine();\n    String newString = original.toLowerCase();\n    \n    int length = newString.length();\n    \n\n    \n    if (newString.equals(reverse))\n        System.out.println(original+\" is a palindrome!\");\n    else\n        System.out.println(original+\" is not a palindrome.\");\n \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(19)
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:36.164+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    String original, reverse = \"\";\n    \n    System.out.print(\"Type one or more words: \");\n    original = console.nextLine();\n    \n    int length = original.length();\n    \n    for(int i = length - 1;i>=0;i--){\n        reverse += original.charAt(i);\n    }\n    \n    if (original.equals(reverse)){\n        System.out.println(original+\" is a palindrome!\");\n    }else {\n        System.out.println(original+\" is not a palindrome.\");\n \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 122.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:37.180+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:37.861+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.1
        }, 
        {
            "date" : ISODate("2016-04-24T12:48:43.945+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n\tString original, reverse = \"\";\n\n\tSystem.out.print(\"Type one or more words: \");\n\toriginal = console.nextLine();\n\tString newString = original.toLowerCase();\n\n\tint length = newString.length();\n\n\tfor ( int i = length - 1; i >= 0; i-- ){\n\t\treverse = reverse + newString.charAt(i);\n\t}\n\t\n\tif (newString.equals(reverse)){\n\t\tSystem.out.println(original+\" is a palindrome!\");\n\t}else{\n\t\tSystem.out.println(original+\" is not a palindrome.\");\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 77.6
        }
    ], 
    "code" : "public static void printPalindrome(Scanner console){\n\tString original, reverse = \"\";\n\n\tSystem.out.print(\"Type one or more words: \");\n\toriginal = console.nextLine();\n\tString newString = original.toLowerCase();\n\n\tint length = newString.length();\n\n\tfor ( int i = length - 1; i >= 0; i-- ){\n\t\treverse = reverse + newString.charAt(i);\n\t}\n\t\n\tif (newString.equals(reverse)){\n\t\tSystem.out.println(original+\" is a palindrome!\");\n\t}else{\n\t\tSystem.out.println(original+\" is not a palindrome.\");\n\t}\n}"
}
{ 
    "_id" : "SQwtK4vH3zazJKzPm", 
    "userId" : "y69LScAMNyacdTiSs", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:28:55.947+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:53:14.933+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height +\"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 10.1, 
    "totalActiveTime" : 4071.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:41:41.381+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:52:53.317+0000"), 
            "code" : "Gabriel, [24.04.16 19:19]\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height +\"]\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4055.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:53:14.932+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height +\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 10.1
        }
    ]
}
{ 
    "_id" : "25mTbQcgQToosefHW", 
    "userId" : "y69LScAMNyacdTiSs", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:52:32.489+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:41:43.731+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 4.2, 
    "totalActiveTime" : 5704.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:41:39.414+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 5685.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:39.486+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 2.5
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:40.236+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.6
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:41.638+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n\n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 7.1
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:43.731+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 4.2
        }
    ]
}
{ 
    "_id" : "iNGYaGogoaYDkjicg", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T12:31:56.458+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:41:46.201+0000"), 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 25.1, 
    "totalActiveTime" : 70.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:41:45.379+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:46.201+0000"), 
            "code" : "public static void parseEmail(String email) {\n    return email.substring(0, email.indexOf('@');\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.1
        }
    ], 
    "code" : "public static void parseEmail(String email) {\n    return email.substring(0, email.indexOf('@');\n}"
}
{ 
    "_id" : "qHPAJKj6AYo57DxeG", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : false, 
    "updatedAt" : ISODate("2016-04-24T12:46:06.028+0000"), 
    "code" : "asd", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 43.2, 
    "totalActiveTime" : 305.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:41:44.197+0000"), 
            "code" : "asd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 194.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:47.198+0000"), 
            "code" : "asd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:47.251+0000"), 
            "code" : "asd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 0.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:47.986+0000"), 
            "code" : "asd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 0.8
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:48.756+0000"), 
            "code" : "asd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 0.8
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:48.926+0000"), 
            "code" : "asd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 0.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:45:33.935+0000"), 
            "code" : "asd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(63)
        }, 
        {
            "date" : ISODate("2016-04-24T12:46:06.027+0000"), 
            "code" : "asd", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.2
        }
    ]
}
{ 
    "_id" : "wXTrq3ZWc7jYCuLk5", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:06:27.355+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:45:39.438+0000"), 
    "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");\n    \n    String input = console.nextLine();\n    String changeCase = input.toLowerCase(); //converts to lowercase\n    \n    String copy=\"\"; //keeps a duplicate if word is palindrome\n    \n    int length = changeCase.length();\n    \n    for ( int i = length-1; i >= 0; i-- ){\n         copy+= changeCase.charAt(i);\n    }\n    \n    if(changeCase.equals(copy)){\n        System.out.println(input+ \" is a palindrome!\");\n        \n    }else{\n        System.out.println(input+ \" is not a palindrome.\");\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 2.8, 
    "totalActiveTime" : 504.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:43:08.924+0000"), 
            "code" : "public void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");\n    \n    String input = console.nextLine();\n    String changeCase = input.toLowerCase(); //converts to lowercase\n    \n    String copy=\"\"; //keeps a duplicate if word is palindrome\n    \n    int length = changeCase.length();\n    \n    for ( int i = length-1; i >= 0; i-- ){\n         copy+= changeCase.charAt(i);\n    }\n    \n    if(copy.equals(changeCase)){\n        System.out.println(input+ \" is a palindrome!\");\n        \n    }else{\n        System.out.println(input+ \" is not a palindrome\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 416.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:43:22.610+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");\n    \n    String input = console.nextLine();\n    String changeCase = input.toLowerCase(); //converts to lowercase\n    \n    String copy=\"\"; //keeps a duplicate if word is palindrome\n    \n    int length = changeCase.length();\n    \n    for ( int i = length-1; i >= 0; i-- ){\n         copy+= changeCase.charAt(i);\n    }\n    \n    if(copy.equals(changeCase)){\n        System.out.println(input+ \" is a palindrome!\");\n        \n    }else{\n        System.out.println(input+ \" is not a palindrome\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-04-24T12:45:33.983+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");\n    \n    String input = console.nextLine();\n    String changeCase = input.toLowerCase(); //converts to lowercase\n    \n    String copy=\"\"; //keeps a duplicate if word is palindrome\n    \n    int length = changeCase.length();\n    \n    for ( int i = length-1; i >= 0; i-- ){\n         copy+= changeCase.charAt(i);\n    }\n    \n    if(changeCase.equals(copy)){\n        System.out.println(input+ \" is a palindrome!\");\n        \n    }else{\n        System.out.println(input+ \" is not a palindrome\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 71.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:45:39.437+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");\n    \n    String input = console.nextLine();\n    String changeCase = input.toLowerCase(); //converts to lowercase\n    \n    String copy=\"\"; //keeps a duplicate if word is palindrome\n    \n    int length = changeCase.length();\n    \n    for ( int i = length-1; i >= 0; i-- ){\n         copy+= changeCase.charAt(i);\n    }\n    \n    if(changeCase.equals(copy)){\n        System.out.println(input+ \" is a palindrome!\");\n        \n    }else{\n        System.out.println(input+ \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.8
        }
    ]
}
{ 
    "_id" : "kFG8AMyeaNGbkoCLT", 
    "userId" : "y69LScAMNyacdTiSs", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:43:24.220+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:45:36.588+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
    "status" : "PASS", 
    "activeTime" : 2.1, 
    "totalActiveTime" : 26.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:43:30.758+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:45:36.588+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null;\n    Rectangle rectWithHeightToAdd = null;\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
            "status" : "PASS", 
            "activeTime" : 2.1
        }
    ]
}
{ 
    "_id" : "DHg8NtSfWvWr47ZCp", 
    "userId" : "F5XnEFAmSrqP7Hbf4", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T11:49:26.121+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:43:32.500+0000"), 
    "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n    \n    String word1 = word.toLowerCase();\n    String opposite1 = opposite.toLowerCase();\n\n    if(word1.equals(opposite1)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 17.5, 
    "totalActiveTime" : 779.0999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:58:10.664+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    opposite += word.charAt(i);    \n        \n    }\n    \n    if(word.equals(opposite)) {\n        System.out.println(word + \"is a palindrome!\") \n        \n    } else {\n        System.out.println(word + \"is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 464.9
        }, 
        {
            "date" : ISODate("2016-04-24T11:58:18.542+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words:\");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    opposite += word.charAt(i);    \n        \n    }\n    \n    if(word.equals(opposite)) {\n        System.out.println(word + \"is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \"is not a palindrome.\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.6
        }, 
        {
            "date" : ISODate("2016-04-24T11:58:56.152+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    opposite += word.charAt(i);    \n        \n    }\n    \n    if(word.equals(opposite)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 37.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:15.182+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n    word.toLowerCase();\n    opposite.toLowerCase();\n    \n    if(word.equals(opposite)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 101.6
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:17.425+0000"), 
            "code" : "import java.util.*;\n\npublic static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n    word.toLowerCase();\n    opposite.toLowerCase();\n    \n    if(word.equals(opposite)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:20.033+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n\n    if(word.equals(opposite)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:22.829+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n\n    if(word.equals(opposite)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:30.153+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n\n    if(word.equals(opposite)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:34.078+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n\n    if(word.equals(opposite)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(2)
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:42.304+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n    \n    word = word.toLowerCase();\n    opposite = opposite.toLowerCase();\n\n    if(word.equals(opposite)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 74.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:42:45.641+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n    \n    word = word.toLowerCase();\n    opposite = opposite.toLowerCase();\n\n    if(word.equals(opposite)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.5
        }, 
        {
            "date" : ISODate("2016-04-24T12:43:14.306+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n    \n    word1 = word.toLowerCase();\n    opposite1 = opposite.toLowerCase();\n\n    if(word1.equals(opposite1)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:43:32.499+0000"), 
            "code" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    \n        \n    }\n    \n    String word1 = word.toLowerCase();\n    String opposite1 = opposite.toLowerCase();\n\n    if(word1.equals(opposite1)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 17.5
        }
    ]
}
{ 
    "_id" : "v4NWqaJtusKTQZTpK", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "4gGxjgkpZNbmLKFfL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T06:17:21.415+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:59:50.718+0000"), 
    "code" : "public static void flippedTriangle (int height){\n\n\tfor(int i = 1; i <=height; i++){\n\t\t\tfor(int space = height; space >i; space--){\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t\tint star = i;\n\t\t\twhile(star>0){\n\t\t\t\tSystem.out.print(\"*\");\n\t\t\t\tstar--;\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\n\t\t}\t\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 491.2, 
    "totalActiveTime" : 1891.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T06:26:13.840+0000"), 
            "code" : "public static void flippedTriangle (int height){\n    for(int i = 1; i <=height; i++){\n        while(i>0){\n            System.out.print(\"*\")\n            i--;\n        }\n        System.out.println();\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(516)
        }, 
        {
            "date" : ISODate("2016-04-24T11:54:05.955+0000"), 
            "code" : "public static void flippedTriangle (int height){\n    for(int i = 1; i <=height; i++){\n        for(int space = height, space >=i, space--){\n            System.out.print(\" \");\n        }\n        while(i>0){\n            System.out.print(\"*\")\n            i--;\n        }\n        System.out.println();\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 831.7
        }, 
        {
            "date" : ISODate("2016-04-24T11:54:17.039+0000"), 
            "code" : "public static void flippedTriangle (int height){\n    for(int i = 1; i <=height; i++){\n        for(int space = height; space >=i; space--){\n            System.out.print(\" \");\n        }\n        while(i>0){\n            System.out.print(\"*\")\n            i--;\n        }\n        System.out.println();\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:51:42.039+0000"), 
            "code" : "public static void flippedTriangle (int height){\n    for(int i = 1; i <=height; i++){\n        for(int space = height; space >i; space--){\n            System.out.print(\" \");\n        }\n        while(i>0){\n            System.out.print(\"*\");\n            i--;\n        }\n        System.out.println();\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.1
        }, 
        {
            "date" : ISODate("2016-04-24T12:59:50.717+0000"), 
            "code" : "public static void flippedTriangle (int height){\n\n\tfor(int i = 1; i <=height; i++){\n\t\t\tfor(int space = height; space >i; space--){\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t\tint star = i;\n\t\t\twhile(star>0){\n\t\t\t\tSystem.out.print(\"*\");\n\t\t\t\tstar--;\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\n\t\t}\t\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 491.2
        }
    ]
}
{ 
    "_id" : "JdKN2XcX4aLkRW2nE", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:48:47.111+0000"), 
    "updatedAt" : ISODate("2016-04-24T12:56:22.427+0000"), 
    "code" : "import java.util.*;\npublic class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    } \n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 458.2, 
    "totalActiveTime" : 458.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:56:22.426+0000"), 
            "code" : "import java.util.*;\npublic class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    } \n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 458.2
        }
    ]
}
{ 
    "_id" : "mGdETrYyCsmEaa44P", 
    "userId" : "F5XnEFAmSrqP7Hbf4", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:10:48.510+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:00:04.045+0000"), 
    "code" : "public class Rectangle {\n\nprivate int x;\nprivate int y;\nprivate int width;\nprivate int height;\n\n\n\n\npublic Rectangle(int x, int y, int width, int height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    \n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\",width=\" + width + \",height=\" + height + \"]\";\n    \n}    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 10.8, 
    "totalActiveTime" : 658.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:41:31.981+0000"), 
            "code" : "public class Rectangle() {\nprivate int height;\nprivate int width;\nprivate int x;\nprivate int y;\n\npublic int Rectangle(int x, int y, int width, int height) {\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\"=2,width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 338.8
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:35.103+0000"), 
            "code" : "public class Rectangle() {\nprivate int height;\nprivate int width;\nprivate int x;\nprivate int y;\n\npublic int Rectangle(int x, int y, int width, int height) {\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\"=2,width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:37.226+0000"), 
            "code" : "public class Rectangle() {\nprivate int height;\nprivate int width;\nprivate int x;\nprivate int y;\n\npublic int Rectangle(int x, int y, int width, int height) {\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\"=2,width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.8
        }, 
        {
            "date" : ISODate("2016-04-24T12:42:28.385+0000"), 
            "code" : "public class Rectangle() {\nprivate int height;\nprivate int width;\nprivate int x;\nprivate int y;\n\npublic int Rectangle(int x, int y, int width, int height) {\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\"=2,width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.1
        }, 
        {
            "date" : ISODate("2016-04-24T12:46:01.970+0000"), 
            "code" : "public class Rectangle() {\nprivate int height;\nprivate int width;\nprivate int x;\nprivate int y;\n\npublic int Rectangle(int x, int y, int width, int height) {\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\"=2,width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 68.5
        }, 
        {
            "date" : ISODate("2016-04-24T12:47:02.720+0000"), 
            "code" : "public class Rectangle() {\n    \nprivate int height;\nprivate int width;\nprivate int x;\nprivate int y;\n\npublic int Rectangle(int x, int y, int width, int height) {\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\"=2,width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(36)
        }, 
        {
            "date" : ISODate("2016-04-24T12:57:36.518+0000"), 
            "code" : "public class Rectangle {\n    \nprivate int height;\nprivate int width;\nprivate int x;\nprivate int y;\n\npublic int Rectangle(int x, int y, int width, int height) {\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\"=2,width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 42.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:58:38.062+0000"), 
            "code" : "public class Rectangle {\n\nprivate int x;\nprivate int y;\nprivate int width;\nprivate int height;\n\n\n\n\npublic int Rectangle(int x, int y, int width, int height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    \n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\"=2,width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 61.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:59:15.478+0000"), 
            "code" : "public class Rectangle {\n\nprivate int x;\nprivate int y;\nprivate int width;\nprivate int height;\n\n\n\n\npublic Rectangle(int x, int y, int width, int height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    \n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\"=2,width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 35.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:59:39.757+0000"), 
            "code" : "public class Rectangle {\n\nprivate int x;\nprivate int y;\nprivate int width;\nprivate int height;\n\n\n\n\npublic Rectangle(int x, int y, int width, int height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    \n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\",width=\" + width + \"=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 24.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:59:53.101+0000"), 
            "code" : "public class Rectangle {\n\nprivate int x;\nprivate int y;\nprivate int width;\nprivate int height;\n\n\n\n\npublic Rectangle(int x, int y, int width, int height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    \n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\",width=\" + width + \",height=\" + height;\n    \n}    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:00:04.044+0000"), 
            "code" : "public class Rectangle {\n\nprivate int x;\nprivate int y;\nprivate int width;\nprivate int height;\n\n\n\n\npublic Rectangle(int x, int y, int width, int height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    \n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\",width=\" + width + \",height=\" + height + \"]\";\n    \n}    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 10.8
        }
    ]
}
{ 
    "_id" : "rT93hY7z5Xtocwss3", 
    "userId" : "zna4wuKiLGvFRJriv", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T08:22:15.431+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:00:13.064+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int list1 = a1.size();\n    int list2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(list1==list2){\n        for(int i = 0; i<list1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else if(list1==0){\n        result = a2;\n    }else if(list2==0){\n        result = a1;\n    }\n    else{\n        if(list1>list2){\n          for(int m = 0; m<list2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = list2; n<list1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<list1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = list2; k<list2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
    "status" : "FAIL", 
    "activeTime" : 263.3, 
    "totalActiveTime" : 3685.4000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:08:09.593+0000"), 
            "code" : "public interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        \n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1003.9
        }, 
        {
            "date" : ISODate("2016-04-24T11:10:04.159+0000"), 
            "code" : "public static ArrayList<int> interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        \n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 114.5
        }, 
        {
            "date" : ISODate("2016-04-24T11:10:41.115+0000"), 
            "code" : "import.java.util.*;\npublic static ArrayList<int> interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        \n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(37)
        }, 
        {
            "date" : ISODate("2016-04-24T11:11:01.899+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<int> interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        \n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.8
        }, 
        {
            "date" : ISODate("2016-04-24T11:12:35.351+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<int> interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 93.4
        }, 
        {
            "date" : ISODate("2016-04-24T11:13:35.104+0000"), 
            "code" : "import java.util.*;\npublic ArrayList<int> interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 59.7
        }, 
        {
            "date" : ISODate("2016-04-24T11:13:47.925+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<int> interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-04-24T11:15:35.221+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<integer> interleave(ArrayList<integer> a1, ArrayList<integer> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<integer> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 73.3
        }, 
        {
            "date" : ISODate("2016-04-24T11:16:27.094+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<int> interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:49:10.795+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<int> interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 363.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:51:43.420+0000"), 
            "code" : "public void interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 136.5
        }, 
        {
            "date" : ISODate("2016-04-24T12:51:59.825+0000"), 
            "code" : "public static void interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:52:34.611+0000"), 
            "code" : "public static void interleave(ArrayList<int> a1, ArrayList<int> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<int> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.8
        }, 
        {
            "date" : ISODate("2016-04-24T12:54:32.706+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 117.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:56:59.777+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else if(i1==0){\n        result = a2;\n    }else if(i2=0){\n        result = a1;\n    }\n    else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 147.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:57:15.721+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int i1 = a1.size();\n    int i2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(i1==i2){\n        for(int i = 0; i<i1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else if(i1==0){\n        result = a2;\n    }else if(i2==0){\n        result = a1;\n    }\n    else{\n        if(i1>i2){\n          for(int m = 0; m<i2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = i2; n<i1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<i1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = i2; k<i2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.7
        }, 
        {
            "date" : ISODate("2016-04-24T13:00:38.095+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int i\n    int list1 = a1.size();\n    int list2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(list1==list2){\n        for(int i = 0; i<list1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else if(list1==0){\n        result = a2;\n    }else if(list2==0){\n        result = a1;\n    }\n    else{\n        if(list1>list2){\n          for(int m = 0; m<list2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = list2; n<list1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<list1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = list2; k<list2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 202.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:01:00.902+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int list1 = a1.size();\n    int list2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(list1==list2){\n        for(int i = 0; i<list1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else if(list1==0){\n        result = a2;\n    }else if(list2==0){\n        result = a1;\n    }\n    else{\n        if(list1>list2){\n          for(int m = 0; m<list2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = list2; n<list1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<list1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = list2; k<list2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:51:02.513+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int list1 = a1.size();\n    int list2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(list1==list2){\n        for(int i = 0; i<list1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else if(list1==0){\n        result = a2;\n    }else if(list2==0){\n        result = a1;\n    }\n    else{\n        if(list1>list2){\n          for(int m = 0; m<list2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = list2; n<list1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<list1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = list2; k<list2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 376.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:59:43.682+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int list1 = a1.size();\n    int list2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(list1==list2){\n        for(int i = 0; i<list1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else if(list1==0){\n        result = a2;\n    }else if(list2==0){\n        result = a1;\n    }\n    else{\n        if(list1>list2){\n          for(int m = 0; m<list2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = list2; n<list1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<list1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = list2; k<list2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 521.2
        }, 
        {
            "date" : ISODate("2016-04-24T15:00:13.063+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int list1 = a1.size();\n    int list2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(list1==list2){\n        for(int i = 0; i<list1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else if(list1==0){\n        result = a2;\n    }else if(list2==0){\n        result = a1;\n    }\n    else{\n        if(list1>list2){\n          for(int m = 0; m<list2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = list2; n<list1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<list1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = list2; k<list2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 263.3
        }
    ]
}
{ 
    "_id" : "zYWsgTw625zhstf9P", 
    "userId" : "68LkTBk27sS7rTZ2u", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:53:41.747+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:02:45.742+0000"), 
    "code" : "public class Rectangle{\n    private int y;\n    private int x;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y +\",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 1170.1, 
    "totalActiveTime" : 1170.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T13:02:45.741+0000"), 
            "code" : "public class Rectangle{\n    private int y;\n    private int x;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y +\",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1170.1
        }
    ]
}
{ 
    "_id" : "ReC3RYn3EzMby6XRG", 
    "userId" : "F5XnEFAmSrqP7Hbf4", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:23:42.838+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:14:30.118+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int smallestX = 0;\n    int smallestY = 0;\n    int width = 0;\n    int height = 0;\n    \n    if(rectA.getX() < rectB.getX()) {\n        smallestX = rectA.getX();\n        width = rectB.getX() - rectA.getX() + rectB.getWidth();\n          } else {\n        smallestX = rectB.getX();    \n        width = rectA.getX() - rectB.getX() + rectA.getWidth();\n          }\n    \n    \n    if(rectA.getY() > rectB.getY()) {\n        smallestY = rectB.getY();\n        height = rectA.getY() -  rectB.getY() + rectA.getHeight();\n          } else {\n        smallestY = rectA.getY();   \n        height = rectB.getY() - rectA.getY() + rectB.getHeight();\n          }\n    \n    \n    Rectangle rectC = new Rectangle(smallestX, smallestY, width, height);\n    return rectC;\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 228.4, 
    "totalActiveTime" : 1906.0000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T13:04:07.119+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int smallestX = 0;\n    int smallestY = 0;\n    int width = 0;\n    int height = 0;\n    \n    if(rectA.getX() < rectB.getX()) {\n        smallestX = rectA.getX();\n        width = rectB.getX() - rectA.getX() + rectB.getWidth();\n          } else {\n        smallestX = rectB.getX();    \n        width = rectA.getX() - rectB.getX() + rectA.getWidth();\n          }\n    }\n    \n    if(rectA.getY() < rectB.getY()) {\n        smallestY = rectA.getY();\n        height = rectB.getY() + rectA.getY() - (rectA.getHeight() - (rectB.getY() - rectA.getY()))\n          } else {\n        smallestY = rectB.getY();   \n        height = rectA.getY() + rectB.getY() - (rectB.getHeight() - (rectA.getY() - rectB.getY()))\n          }\n    }\n    \n    Rectangle rectC = new Rectangle(smallestX, smallestY, width, height);\n    return rectC;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1312.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:06:14.325+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int smallestX = 0;\n    int smallestY = 0;\n    int width = 0;\n    int height = 0;\n    \n    if(rectA.getX() < rectB.getX()) {\n        smallestX = rectA.getX();\n        width = rectB.getX() - rectA.getX() + rectB.getWidth();\n          } else {\n        smallestX = rectB.getX();    \n        width = rectA.getX() - rectB.getX() + rectA.getWidth();\n          }\n    \n    \n    if(rectA.getY() < rectB.getY()) {\n        smallestY = rectA.getY();\n        height = rectB.getY() + rectA.getY() - (rectA.getHeight() - (rectB.getY() - rectA.getY()))\n          } else {\n        smallestY = rectB.getY();   \n        height = rectA.getY() + rectB.getY() - (rectB.getHeight() - (rectA.getY() - rectB.getY()))\n          }\n    \n    \n    Rectangle rectC = new Rectangle(smallestX, smallestY, width, height);\n    return rectC;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(100)
        }, 
        {
            "date" : ISODate("2016-04-24T13:06:31.639+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int smallestX = 0;\n    int smallestY = 0;\n    int width = 0;\n    int height = 0;\n    \n    if(rectA.getX() < rectB.getX()) {\n        smallestX = rectA.getX();\n        width = rectB.getX() - rectA.getX() + rectB.getWidth();\n          } else {\n        smallestX = rectB.getX();    \n        width = rectA.getX() - rectB.getX() + rectA.getWidth();\n          }\n    \n    \n    if(rectA.getY() < rectB.getY()) {\n        smallestY = rectA.getY();\n        height = rectB.getY() + rectA.getY() - (rectA.getHeight() - (rectB.getY() - rectA.getY()));\n          } else {\n        smallestY = rectB.getY();   \n        height = rectA.getY() + rectB.getY() - (rectB.getHeight() - (rectA.getY() - rectB.getY()));\n          }\n    \n    \n    Rectangle rectC = new Rectangle(smallestX, smallestY, width, height);\n    return rectC;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 17.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:08:13.714+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int smallestX = 0;\n    int smallestY = 0;\n    int width = 0;\n    int height = 0;\n    \n    if(rectA.getX() < rectB.getX()) {\n        smallestX = rectA.getX();\n        width = rectB.getX() - rectA.getX() + rectB.getWidth();\n          } else {\n        smallestX = rectB.getX();    \n        width = rectA.getX() - rectB.getX() + rectA.getWidth();\n          }\n    \n    \n    if(rectA.getY() > rectB.getY()) {\n        smallestY = rectA.getY();\n        height = rectB.getY() + rectA.getY() - (rectA.getHeight() - (rectB.getY() - rectA.getY()));\n          } else {\n        smallestY = rectB.getY();   \n        height = rectA.getY() + rectB.getY() - (rectB.getHeight() - (rectA.getY() - rectB.getY()));\n          }\n    \n    \n    Rectangle rectC = new Rectangle(smallestX, smallestY, width, height);\n    return rectC;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(102)
        }, 
        {
            "date" : ISODate("2016-04-24T13:10:41.698+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int smallestX = 0;\n    int smallestY = 0;\n    int width = 0;\n    int height = 0;\n    \n    if(rectA.getX() < rectB.getX()) {\n        smallestX = rectA.getX();\n        width = rectB.getX() - rectA.getX() + rectB.getWidth();\n          } else {\n        smallestX = rectB.getX();    \n        width = rectA.getX() - rectB.getX() + rectA.getWidth();\n          }\n    \n    \n    if(rectA.getY() > rectB.getY()) {\n        smallestY = rectB.getY();\n        height = rectB.getY() + rectA.getY() - (rectA.getHeight() - (rectB.getY() - rectA.getY()));\n          } else {\n        smallestY = rectA.getY();   \n        height = rectA.getY() + rectB.getY() - (rectB.getHeight() - (rectA.getY() - rectB.getY()));\n          }\n    \n    \n    Rectangle rectC = new Rectangle(smallestX, smallestY, width, height);\n    return rectC;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 145.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:14:30.117+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int smallestX = 0;\n    int smallestY = 0;\n    int width = 0;\n    int height = 0;\n    \n    if(rectA.getX() < rectB.getX()) {\n        smallestX = rectA.getX();\n        width = rectB.getX() - rectA.getX() + rectB.getWidth();\n          } else {\n        smallestX = rectB.getX();    \n        width = rectA.getX() - rectB.getX() + rectA.getWidth();\n          }\n    \n    \n    if(rectA.getY() > rectB.getY()) {\n        smallestY = rectB.getY();\n        height = rectA.getY() -  rectB.getY() + rectA.getHeight();\n          } else {\n        smallestY = rectA.getY();   \n        height = rectB.getY() - rectA.getY() + rectB.getHeight();\n          }\n    \n    \n    Rectangle rectC = new Rectangle(smallestX, smallestY, width, height);\n    return rectC;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 228.4
        }
    ]
}
{ 
    "_id" : "wreKmJR2Ev2A7myx5", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T13:13:54.103+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:21:02.698+0000"), 
    "code" : "/*public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}*/\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    \n    //a1 = newList;\n    System.out.println(newList);\n    //System.out.println(a1);\n    \n    a1 = newList;\n}", 
    "status" : "FAIL", 
    "activeTime" : 134.8, 
    "totalActiveTime" : 1425.6999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T13:13:59.633+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    a1=newList;\n    //System.out.print(newList.get(0));\n    //for(int i =1; i<newList.size();i++){\n        //System.out.print( \",\" + newList.get(i));\n    //}\n    \n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 1021.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:14:28.356+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    a1=newList;\n    System.out.println(newList);\n    System.out.println(a1);\n    //System.out.print(newList.get(0));\n    //for(int i =1; i<newList.size();i++){\n        //System.out.print( \",\" + newList.get(i));\n    //}\n    \n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 28.7
        }, 
        {
            "date" : ISODate("2016-04-24T13:15:18.628+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}\n\n/*public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    a1=newList;\n    System.out.println(newList);\n    System.out.println(a1);\n    //System.out.print(newList.get(0));\n    //for(int i =1; i<newList.size();i++){\n        //System.out.print( \",\" + newList.get(i));\n    //}\n    \n    //System.out.print(\"]\");\n}*/", 
            "status" : "PASS", 
            "activeTime" : 31.1
        }, 
        {
            "date" : ISODate("2016-04-24T13:16:33.531+0000"), 
            "code" : "/*public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}*/\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    a1=newList;\n    //System.out.println(newList);\n    //System.out.println(a1);\n}", 
            "status" : "FAIL", 
            "activeTime" : 74.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:17:34.525+0000"), 
            "code" : "/*public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}*/\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    //a1.clear();\n    a1=newList;\n    //System.out.println(newList);\n    System.out.println(a1);\n}", 
            "status" : "FAIL", 
            "activeTime" : 61.1
        }, 
        {
            "date" : ISODate("2016-04-24T13:18:00.262+0000"), 
            "code" : "/*public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}*/\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    //a1.clear();\n    a1 = newList;\n    //System.out.println(newList);\n    System.out.println(a1);\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:18:47.944+0000"), 
            "code" : "/*public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}*/\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    for (int i : newList) {\n        a1.add(i);\n    }\n    //a1 = newList;\n    //System.out.println(newList);\n    //System.out.println(a1);\n}", 
            "status" : "PASS", 
            "activeTime" : 47.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:21:02.697+0000"), 
            "code" : "/*public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}*/\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    \n    //a1 = newList;\n    System.out.println(newList);\n    //System.out.println(a1);\n    \n    a1 = newList;\n}", 
            "status" : "FAIL", 
            "activeTime" : 134.8
        }
    ]
}
{ 
    "_id" : "eZH2EEL9niEXbgf2Q", 
    "userId" : "sJHc88TqFpuuuT54p", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:08:04.546+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:22:15.321+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    //a1.clear();\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    for(Integer in: newList){\n        a1.add(in);\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 13.1, 
    "totalActiveTime" : 5392.599999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:24:26.806+0000"), 
            "code" : "public static ArrayList<Integer> interleave(a1, a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    return newList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1078.7
        }, 
        {
            "date" : ISODate("2016-04-24T09:25:22.706+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<Integer> interleave(a1, a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    return newList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 55.8
        }, 
        {
            "date" : ISODate("2016-04-24T09:25:42.013+0000"), 
            "code" : "public static ArrayList<Integer> interleave(a1, a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    return newList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-04-24T09:26:10.182+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    return newList;\n}", 
            "status" : "FAIL", 
            "activeTime" : 27.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:56:01.619+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            //System.out.println(newList);\n            \n            newList.add(a2.get(i));\n            //System.out.println(newList);\n            \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n            //System.out.println(newList);\n            \n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    return newList;\n}", 
            "status" : "FAIL", 
            "activeTime" : 2269.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:50:20.630+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    System.out.print(\"[\" + newList.get(0));\n    for(int i =1; i<newList.size();i++){\n        System.out.print( \",\" + newList.get(i));\n    }\n    System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 281.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:57:45.349+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    System.out.print(\"[\" + newList.get(0));\n    for(int i =1; i<newList.size();i++){\n        System.out.print( \",\" + newList.get(i));\n    }\n    System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 444.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:01:37.646+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    //System.out.print(\"[\" + newList.get(0));\n    for(int i =1; i<newList.size();i++){\n        System.out.print( \",\" + newList.get(i));\n    }\n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 232.3
        }, 
        {
            "date" : ISODate("2016-04-24T13:02:01.178+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    System.out.print(newList.get(0));\n    for(int i =1; i<newList.size();i++){\n        System.out.print( \",\" + newList.get(i));\n    }\n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 23.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:03:04.863+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    System.out.print(newList.get(0));\n    for(int i =1; i<newList.size();i++){\n        System.out.print( \",\" + newList.get(i));\n    }\n    a1=newList;\n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 63.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:03:26.291+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1=newList;\n    System.out.print(newList.get(0));\n    for(int i =1; i<newList.size();i++){\n        System.out.print( \",\" + newList.get(i));\n    }\n    \n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.3
        }, 
        {
            "date" : ISODate("2016-04-24T13:05:36.032+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1=newList;\n    //System.out.print(newList.get(0));\n    //for(int i =1; i<newList.size();i++){\n        //System.out.print( \",\" + newList.get(i));\n    //}\n    \n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 129.7
        }, 
        {
            "date" : ISODate("2016-04-24T13:09:20.348+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1=newList;\n    //System.out.print(newList.get(0));\n    //for(int i =1; i<newList.size();i++){\n        //System.out.print( \",\" + newList.get(i));\n    //}\n    \n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 224.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:12:28.350+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    a1=newList;\n    //System.out.print(newList.get(0));\n    //for(int i =1; i<newList.size();i++){\n        //System.out.print( \",\" + newList.get(i));\n    //}\n    \n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(188)
        }, 
        {
            "date" : ISODate("2016-04-24T13:12:59.398+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    a1=newList;\n    //System.out.print(newList.get(0));\n    //for(int i =1; i<newList.size();i++){\n        //System.out.print( \",\" + newList.get(i));\n    //}\n    \n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 31.1
        }, 
        {
            "date" : ISODate("2016-04-24T13:13:52.049+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    a1.clear();\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    \n    a1=newList;\n    //System.out.print(newList.get(0));\n    //for(int i =1; i<newList.size();i++){\n        //System.out.print( \",\" + newList.get(i));\n    //}\n    \n    //System.out.print(\"]\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 52.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:20:40.577+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    a1.clear();\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    for(Integer in: newList){\n        a1.add(in);\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 153.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:21:12.967+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    \n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    for(Integer in: newList){\n        a1.add(in);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 32.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:21:30.472+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    a1.clear();\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    //a1.clear();\n    for(Integer in: newList){\n        a1.add(in);\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:21:39.668+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    //a1.clear();\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    for(Integer in: newList){\n        a1.add(in);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:22:02.338+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    a1.clear();\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    for(Integer in: newList){\n        a1.add(in);\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:22:15.321+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    //a1.clear();\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    for(Integer in: newList){\n        a1.add(in);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 13.1
        }
    ]
}
{ 
    "_id" : "ukPpu5BqHe3pq9kJN", 
    "userId" : "F5XnEFAmSrqP7Hbf4", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:04:52.451+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:52:06.980+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, elem);\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 49.5, 
    "totalActiveTime" : 2102.3000000000006, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T13:19:55.406+0000"), 
            "code" : "public static void main(String[] args) {\n    \n    interleave(a1, a2);    \n\n}\n\npublic static void interleave(ArrayList<int> a1, ArrayList<int> a2) {\n\nArrayList<int> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size() {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 355.1
        }, 
        {
            "date" : ISODate("2016-04-24T13:21:00.968+0000"), 
            "code" : "public static void main(String[] args) {\n    \n    interleave(a1, a2);    \n\n}\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<int> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 46.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:21:33.215+0000"), 
            "code" : "public static void main(String[] args) {\n    \n    interleave(a1, a2);    \n\n}\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<integer> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.1
        }, 
        {
            "date" : ISODate("2016-04-24T13:22:23.338+0000"), 
            "code" : "public static void main(String[] args) {\n    \n    interleave(a1, a2);    \n\n}\n\npublic static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<integer> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 50.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:22:29.537+0000"), 
            "code" : "public static void main(String[] args) {\n    \n    interleave(a1, a2);    \n\n}\n\npublic static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<integer> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:22:37.362+0000"), 
            "code" : "public static void main(String[] args) {\n    \n    interleave(a1, a2);    \n\n}\n\npublic static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:23:26.793+0000"), 
            "code" : "public static void main(String[] args) {\n    \n   ArrayList<Integer> a3 = interleave(a1, a2);    \n\n}\n\npublic static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 49.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:24:39.196+0000"), 
            "code" : "public static void main(String[] args) {\n    \n   ArrayList<Integer> a3 = interLeave(a1, a2);    \n\n}\n\npublic static ArrayList<Integer> interLeave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 72.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:25:20.374+0000"), 
            "code" : "public static void main(String[] args) {\n    \n   ArrayList<Integer> a3 = interleave(a1, a2);    \n\n}\n\npublic static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:26:08.725+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(48)
        }, 
        {
            "date" : ISODate("2016-04-24T13:26:47.050+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size() - 1; i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 38.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:27:23.473+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1 != null && a2 != null) {\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size() - 1; i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:27:35.313+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1 != null && a2 != null) {\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size() - 1; i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\n\n}\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:28:15.937+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1 != null && a2 != null && a1.size() != 0 && a2.size() != 0) {\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size() - 1; i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\n\n}\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 40.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:28:22.313+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\nif(a1 != null && a2 != null && a1.size() != 0 && a2.size() != 0) {\nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size() - 1; i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\n\n}\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:29:23.307+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size() - 1; i++) {\n    if(a1.get(i) != null) {\n    a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        a3.add(a2.get(i));\n    }\n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size() - 1; i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size() - 1; i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(61)
        }, 
        {
            "date" : ISODate("2016-04-24T13:29:42.805+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    if(a1.get(i) != null) {\n    a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        a3.add(a2.get(i));\n    }\n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i) != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i) != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:32:29.466+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    if(a1.get(i).toString() != null) {\n    a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i).toString() != null) {\n        a3.add(a2.get(i));\n    }\n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i).toString() != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i).toString() != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 166.7
        }, 
        {
            "date" : ISODate("2016-04-24T13:32:33.158+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n    if(a1.get(i).toString() != null) {\n    a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i).toString() != null) {\n        a3.add(a2.get(i));\n    }\n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n    \n    if(a1.get(i).toString() != null) {\n        \n        a3.add(a1.get(i));\n    }    \n    \n    if(a2.get(i).toString() != null) {\n        \n        a3.add(a2.get(i));\n    }\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 3.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:34:10.532+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    \n    for(int i = 0; i < a2.size(); i++) {\n\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n\n    }\n    \n}    \n    \n if(a2.size() > a1.size()) {\n    \n    for(int i = 0; i < a1.size(); i++) {\n\n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n        \n    }\n    \n}      \n\nif(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n    \n \n        \n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n\n        \n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 97.3
        }, 
        {
            "date" : ISODate("2016-04-24T13:36:39.531+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n    }\n    \n} else if(a2.size() > a1.size()) {\n    for(int i = 0; i < a1.size(); i++) {\n         a3.add(a1.get(i));\n        a3.add(a2.get(i));\n        \n    }\n    \n} else if(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    \n}\n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 148.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:40:17.721+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n    }\n    \n} \n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 218.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:40:27.543+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n    }\n    \n} \n\nreturn a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:41:53.796+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n    }\n    \n} else if(a2.size() > a1.size()) {\n    for(int i = 0; i < a1.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n        \n    }\n    \n} else if(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    \n}\n\na1 = a3;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 86.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:42:05.893+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n    }\n    \n} else if(a2.size() > a1.size()) {\n    for(int i = 0; i < a1.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n        \n    }\n    \n} else if(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    \n}\n\na1 = a3;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:44:09.402+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n    }\n    \n} else if(a2.size() > a1.size()) {\n    for(int i = 0; i < a1.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n        \n    }\n    \n} else if(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    \n}\n\na1 = a3;\nreturn a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 94.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:44:16.852+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n    }\n    \n} else if(a2.size() > a1.size()) {\n    for(int i = 0; i < a1.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n        \n    }\n    \n} else if(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    \n}\n\na1 = a3;\nreturn a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:45:35.309+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n    }\n    \n} else if(a2.size() > a1.size()) {\n    for(int i = 0; i < a1.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n        \n    }\n    \n} else if(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    \n}\n\na1 = (ArrayList<Integer>)a3.clone();\nreturn a1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(26)
        }, 
        {
            "date" : ISODate("2016-04-24T13:46:13.160+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\nArrayList<Integer> a3 = new ArrayList<>();\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a3.add(a1.get(i));\n    a3.add(a2.get(i));\n    }\n    \n} else if(a2.size() > a1.size()) {\n    for(int i = 0; i < a1.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n        \n    }\n    \n} else if(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    \n}\n\na1 = new ArrayList<Integer>(a3);\nreturn a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(28)
        }, 
        {
            "date" : ISODate("2016-04-24T13:47:22.105+0000"), 
            "code" : "private static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, elem);\n    }\n}\n\npublic static void main(String[] args) throws Exception {\n\n    ArrayList<Integer> a1 = new ArrayList<>(Arrays.asList(10, 20, 30));\n    ArrayList<Integer> a2 = new ArrayList<>(Arrays.asList(4, 5, 6, 7, 8));\n\n    interleave(a1, a2);\n    System.out.println(a1);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:47:48.965+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, elem);\n    }\n}\n\npublic static void main(String[] args) throws Exception {\n\n    ArrayList<Integer> a1 = new ArrayList<>(Arrays.asList(10, 20, 30));\n    ArrayList<Integer> a2 = new ArrayList<>(Arrays.asList(4, 5, 6, 7, 8));\n\n    interleave(a1, a2);\n    System.out.println(a1);\n}", 
            "status" : "PASS", 
            "activeTime" : 9.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:48:39.137+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, elem);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 40.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:48:43.651+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, elem);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 4.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:49:02.995+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, elem);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 19.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:49:26.815+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, elem);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 15.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:51:17.201+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n\n\n\n \nif(a1.size() > a2.size()) {\n    for(int i = 0; i < a2.size(); i++) {\n    a1.add(a1.get(i));\n    a1.add(a2.get(i));\n    }\n    \n} else if(a2.size() > a1.size()) {\n    for(int i = 0; i < a1.size(); i++) {\n        a1.add(a1.get(i));\n        a1.add(a2.get(i));\n        \n    }\n    \n} else if(a2.size() == a1.size()) {\n     for(int i = 0; i < a2.size(); i++) {\n        a1.add(a1.get(i));\n        a1.add(a2.get(i));\n    }\n    \n}\n\n\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 103.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:52:06.979+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, elem);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 49.5
        }
    ]
}
{ 
    "_id" : "XMax4F5qnZCsXPThh", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:27:55.457+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:33:22.447+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1,ArrayList<Integer> a2) {\n\n    int i = -1;\n    for(Integer num: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, num);\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 59.2, 
    "totalActiveTime" : 1709.3999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:45:34.217+0000"), 
            "code" : "import java.util.*;\nprivate static void interleave(ArrayList<Integer> a1,\n        ArrayList<Integer> a2) {\n\n    int i = a1.size();\n    int j = a2.size();\n\n    if (i < j) {\n        for (int k = 0; k < a1.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n        for (int l = a1.size(); l < a2.size(); l++) {\n            a1.add(a1.size(), a2.get(l));\n        }\n\n    } else if (i > j) { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n    } else { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 857.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:46:46.858+0000"), 
            "code" : "import java.util.*;\npublic static void interleave(ArrayList<Integer> a1,\n        ArrayList<Integer> a2) {\n\n    int i = a1.size();\n    int j = a2.size();\n\n    if (i < j) {\n        for (int k = 0; k < a1.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n        for (int l = a1.size(); l < a2.size(); l++) {\n            a1.add(a1.size(), a2.get(l));\n        }\n\n    } else if (i > j) { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n    } else { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(54)
        }, 
        {
            "date" : ISODate("2016-04-24T12:47:20.457+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1,\n        ArrayList<Integer> a2) {\n\n    int i = a1.size();\n    int j = a2.size();\n\n    if (i < j) {\n        for (int k = 0; k < a1.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n        for (int l = a1.size(); l < a2.size(); l++) {\n            a1.add(a1.size(), a2.get(l));\n        }\n\n    } else if (i > j) { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n    } else { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 30.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:29:26.222+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1,\n        ArrayList<Integer> a2) {\n\n    int i = a1.size();\n    int j = a2.size();\n\n    if (i < j) {\n        for (int k = 0; k < a1.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n        for (int l = a1.size(); l < a2.size(); l++) {\n            a1.add(a1.size(), a2.get(l));\n        }\n\n    } else if (i > j) { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n    } else { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 595.3
        }, 
        {
            "date" : ISODate("2016-04-24T13:30:37.005+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1,\n        ArrayList<Integer> a2) {\n\n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 70.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:30:55.374+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1,\n        ArrayList<Integer> a2) {\n\n    int i = a1.size();\n    int j = a2.size();\n\n\n\n    if (i > j) { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n    } else { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 18.3
        }, 
        {
            "date" : ISODate("2016-04-24T13:31:12.806+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1,\n        ArrayList<Integer> a2) {\n\n    int i = a1.size();\n    int j = a2.size();\n\n    if (i < j) {\n        for (int k = 0; k < a1.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n        for (int l = a1.size(); l < a2.size(); l++) {\n            a1.add(a1.size(), a2.get(l));\n        }\n\n    if (i > j) { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n    } else { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:31:19.294+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1,\n        ArrayList<Integer> a2) {\n\n    int i = a1.size();\n    int j = a2.size();\n\n    if (i < j) {\n        for (int k = 0; k < a1.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n        for (int l = a1.size(); l < a2.size(); l++) {\n            a1.add(a1.size(), a2.get(l));\n        }\n\n    } else if (i > j) { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n\n    } else { \n        for (int k = 1; k < a2.size(); k++) {\n            a1.add(k+1, a2.get(k));\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.3
        }, 
        {
            "date" : ISODate("2016-04-24T13:33:22.446+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1,ArrayList<Integer> a2) {\n\n    int i = -1;\n    for(Integer num: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, num);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 59.2
        }
    ]
}
{ 
    "_id" : "zQyEm5nNXH7Xx8ejK", 
    "userId" : "fzFhAfCHiwc4842pK", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:55:59.933+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:34:32.370+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x,int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(397), 
    "totalActiveTime" : NumberInt(397), 
    "history" : [
        {
            "date" : ISODate("2016-04-24T13:34:32.369+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x,int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(397)
        }
    ]
}
{ 
    "_id" : "29Wu2cjfLFKkzAuuW", 
    "userId" : "68LkTBk27sS7rTZ2u", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T13:02:58.216+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:40:28.166+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    int xOfa = rectA.getX();\n    int xOfb = rectB.getX();\n    \n    int x;\n    if (xOfa <= xOfb){\n        x = xOfa;\n    }else{\n        x = xOfb;\n    }\n    \n    int yOfa = rectA.getY();\n    int yOfb = rectB.getY();\n    \n    int y;\n    if (yOfa <= yOfb){\n        y = yOfa;\n    }else{\n        y = yOfb;\n    }\n    \n    int highestPointOfY;\n    \n    int highestPointOfYinA = yOfa + rectA.getHeight();\n    int highestPointOfYinB = yOfb + rectB.getHeight();\n    \n    if (highestPointOfYinA >= highestPointOfYinB){\n        highestPointOfY = highestPointOfYinA;\n    }else{\n        highestPointOfY = highestPointOfYinB;\n    }\n    \n    int maxOfX;\n    \n    int maxOfXinA = xOfa + rectA.getWidth();\n    int maxOfXinB = xOfb + rectB.getWidth();\n    \n    if (maxOfXinA >= maxOfXinB){\n        maxOfX = maxOfXinA;\n    }else{\n        maxOfX = maxOfXinB;\n    }\n    \n    Rectangle toReturn = new Rectangle (x, y, maxOfX-x, highestPointOfY-y);\n    \n    return toReturn;\n}", 
    "status" : "PASS", 
    "activeTime" : 2211.6, 
    "totalActiveTime" : 2211.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T13:40:28.165+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    int xOfa = rectA.getX();\n    int xOfb = rectB.getX();\n    \n    int x;\n    if (xOfa <= xOfb){\n        x = xOfa;\n    }else{\n        x = xOfb;\n    }\n    \n    int yOfa = rectA.getY();\n    int yOfb = rectB.getY();\n    \n    int y;\n    if (yOfa <= yOfb){\n        y = yOfa;\n    }else{\n        y = yOfb;\n    }\n    \n    int highestPointOfY;\n    \n    int highestPointOfYinA = yOfa + rectA.getHeight();\n    int highestPointOfYinB = yOfb + rectB.getHeight();\n    \n    if (highestPointOfYinA >= highestPointOfYinB){\n        highestPointOfY = highestPointOfYinA;\n    }else{\n        highestPointOfY = highestPointOfYinB;\n    }\n    \n    int maxOfX;\n    \n    int maxOfXinA = xOfa + rectA.getWidth();\n    int maxOfXinB = xOfb + rectB.getWidth();\n    \n    if (maxOfXinA >= maxOfXinB){\n        maxOfX = maxOfXinA;\n    }else{\n        maxOfX = maxOfXinB;\n    }\n    \n    Rectangle toReturn = new Rectangle (x, y, maxOfX-x, highestPointOfY-y);\n    \n    return toReturn;\n}", 
            "status" : "PASS", 
            "activeTime" : 2211.6
        }
    ]
}
{ 
    "_id" : "exMuifwBkmNM8yE9J", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T13:30:23.329+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:27:36.038+0000"), 
    "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    if(supermarket.getCounter(counterNumber).getCashier()!= null){\n        supermarket.getCounter(counterNumber).setCashier(cashier);\n    }\n    return(supermarket.getCounter(counterNumber).getCashier()== null);\n}", 
    "status" : "FAIL", 
    "activeTime" : NumberInt(149), 
    "totalActiveTime" : 468.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T13:41:47.685+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    return(supermarket.getCounter(counterNumber).getCashier()== null);\n}", 
            "status" : "FAIL", 
            "activeTime" : 205.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:43:54.658+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    if(supermarket.getCounter(counterNumber).getCashier()!= null){\n        supermarket.getCounter(counterNumber).setCashier(cashier);\n    }\n    return(supermarket.getCounter(counterNumber).getCashier()== null);\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(114)
        }, 
        {
            "date" : ISODate("2016-04-24T14:27:36.037+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    if(supermarket.getCounter(counterNumber).getCashier()!= null){\n        supermarket.getCounter(counterNumber).setCashier(cashier);\n    }\n    return(supermarket.getCounter(counterNumber).getCashier()== null);\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(149)
        }
    ]
}
{ 
    "_id" : "65DWu4XpBCxdDkjpa", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:56:29.143+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:53:56.459+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = (rectB.getX()+rectB.getWidth()) - rectA.getX();\n    int height = (rectB.getY()+rectB.getHeight()) - rectA.getY();\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if((rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth())){\n        width = (rectA.getX()+rectA.getWidth()) - rectB.getX();\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = (rectA.getY()+rectA.getHeight()) - rectB.getY();\n    }\n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
    "status" : "PASS", 
    "activeTime" : 2621.5, 
    "totalActiveTime" : 9409.900000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T13:17:39.228+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = rectA.getHeight();\n    int height = (rectA.getY()+rectB.getY())/2;\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if(rectA.getHeight() > rectB.getHeight()){\n        width = rectB.getHeight();\n    }\n    \n    return Rectangle newRectangle = new Rectangle(x,y,width,height);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(1262)
        }, 
        {
            "date" : ISODate("2016-04-24T13:18:11.875+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = rectA.getHeight();\n    int height = (rectA.getY()+rectB.getY())/2;\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if(rectA.getHeight() > rectB.getHeight()){\n        width = rectB.getHeight();\n    }\n    \n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
            "status" : "FAIL", 
            "activeTime" : 32.3
        }, 
        {
            "date" : ISODate("2016-04-24T13:41:12.561+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = (rectA.getY()+rectA.getHeight()) - (rectB.getY()+rectB.getHeight());\n    int height = (rectA.getY()+rectB.getY())/2;\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if(width<0){\n        width *= -1;\n    }\n    \n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
            "status" : "FAIL", 
            "activeTime" : 470.3
        }, 
        {
            "date" : ISODate("2016-04-24T13:52:06.605+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = (rectB.getX()+rectB.getWidth()) - rectA.getX();\n    int height = (rectB.getY()+rectB.getHeight()) - rectA.getY();\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if((rectA.getY()+rectA.getWeight())>(rectB.getY()+rectB.getWeight())){\n        width = (rectA.getX()+rectA.getWidth()) - rectB.getX();\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = (rectA.getY()+rectA.getWidth()) - rectB.getY();\n    }\n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 653.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:52:39.088+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = (rectB.getX()+rectB.getWidth()) - rectA.getX();\n    int height = (rectB.getY()+rectB.getHeight()) - rectA.getY();\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if((rectA.getY()+rectA.getWidth())>(rectB.getY()+rectB.getWidth())){\n        width = (rectA.getX()+rectA.getWidth()) - rectB.getX();\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = (rectA.getY()+rectA.getWidth()) - rectB.getY();\n    }\n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
            "status" : "FAIL", 
            "activeTime" : 32.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:30:17.958+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = (rectB.getX()+rectB.getWidth()) - rectA.getX();\n    int height = (rectB.getY()+rectB.getHeight()) - rectA.getY();\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if((rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth())){\n        width = (rectA.getX()+rectA.getWidth()) - rectB.getX();\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = (rectA.getY()+rectA.getWidth()) - rectB.getY();\n    }\n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
            "status" : "FAIL", 
            "activeTime" : 2259.4
        }, 
        {
            "date" : ISODate("2016-04-24T14:31:59.268+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = (rectB.getX()+rectB.getWidth()) - rectA.getX();\n    int height = (rectB.getY()+rectB.getHeight()) - rectA.getY();\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if((rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth())){\n        width = (rectA.getX()+rectA.getWidth()) - rectB.getX();\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = (rectA.getY()+rectA.getWidth()) - rectB.getY();\n    }\n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
            "status" : "FAIL", 
            "activeTime" : 101.1
        }, 
        {
            "date" : ISODate("2016-04-24T15:10:11.494+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = (rectB.getX()+rectB.getWidth()) - rectA.getX();\n    int height = (rectB.getY()+rectB.getHeight()) - rectA.getY();\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if((rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth())){\n        width = (rectA.getX()+rectA.getWidth()) - rectB.getX();\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = (rectA.getY()+rectA.getWidth()) - rectB.getY();\n    }\n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
            "status" : "FAIL", 
            "activeTime" : 1976.8
        }, 
        {
            "date" : ISODate("2016-04-24T15:53:56.459+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = (rectB.getX()+rectB.getWidth()) - rectA.getX();\n    int height = (rectB.getY()+rectB.getHeight()) - rectA.getY();\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    }\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if((rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth())){\n        width = (rectA.getX()+rectA.getWidth()) - rectB.getX();\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = (rectA.getY()+rectA.getHeight()) - rectB.getY();\n    }\n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
            "status" : "PASS", 
            "activeTime" : 2621.5
        }
    ]
}
{ 
    "_id" : "N5pp7w6ke6nGMjjPa", 
    "userId" : "mzEYkra6nhsvCgSH7", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T10:59:49.379+0000"), 
    "updatedAt" : ISODate("2016-04-24T13:59:24.111+0000"), 
    "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String console1 = console.nextLine();\n    if(console1 == null){\n        return ;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=console1.charAt(length-1-i)){\n            System.out.println(console1+\" is not a palindrome!\");\n            return ;\n        }\n    }\n    System.out.println(console1+\" is a palindrome\");\n    \n}", 
    "status" : "FAIL", 
    "activeTime" : 25.2, 
    "totalActiveTime" : 1578.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:14:02.730+0000"), 
            "code" : "public void printPalindrome(String console){\n    if(console = null){\n        return null;\n    }\n    int length = console.length();\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 876.9
        }, 
        {
            "date" : ISODate("2016-04-24T11:14:42.983+0000"), 
            "code" : "public void printPalindrome(String console){\n    if(console = null){\n        return ;\n    }\n    int length = console.length();\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:53:55.706+0000"), 
            "code" : "public void printPalindrome(console){\n    System.out.println(\"Type one or more words:\");\n    String console = console.nextline();\n    if(console = null){\n        return ;\n    }\n    int length = console.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console.charAt(i)!=concole.charAt(length-1-i)){\n            System.out.println(console+\"is not a palindrome!\");\n        }\n    }\n    System.out.println(console+\"is a palindrome\");\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 333.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:54:07.338+0000"), 
            "code" : "public static void printPalindrome(console){\n    System.out.println(\"Type one or more words:\");\n    String console = console.nextline();\n    if(console = null){\n        return ;\n    }\n    int length = console.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console.charAt(i)!=concole.charAt(length-1-i)){\n            System.out.println(console+\"is not a palindrome!\");\n        }\n    }\n    System.out.println(console+\"is a palindrome\");\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:54:44.280+0000"), 
            "code" : "import java.util.*; \npublic static void printPalindrome(console){\n    System.out.println(\"Type one or more words:\");\n    String console = console.nextline();\n    if(console = null){\n        return ;\n    }\n    int length = console.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console.charAt(i)!=concole.charAt(length-1-i)){\n            System.out.println(console+\"is not a palindrome!\");\n        }\n    }\n    System.out.println(console+\"is a palindrome\");\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:55:19.606+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words:\");\n    String console = console.nextline();\n    if(console = null){\n        return ;\n    }\n    int length = console.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console.charAt(i)!=concole.charAt(length-1-i)){\n            System.out.println(console+\"is not a palindrome!\");\n        }\n    }\n    System.out.println(console+\"is a palindrome\");\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:56:03.446+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words:\");\n    String console1 = console.nextline();\n    if(console1 = null){\n        return ;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=concole1.charAt(length-1-i)){\n            System.out.println(console1+\"is not a palindrome!\");\n        }\n    }\n    System.out.println(console1+\"is a palindrome\");\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.8
        }, 
        {
            "date" : ISODate("2016-04-24T13:56:21.039+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words:\");\n    String console1 = console.nextLine();\n    if(console1 = null){\n        return ;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=concole1.charAt(length-1-i)){\n            System.out.println(console1+\"is not a palindrome!\");\n        }\n    }\n    System.out.println(console1+\"is a palindrome\");\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:56:32.491+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words:\");\n    String console1 = console.nextLine();\n    if(console1 == null){\n        return ;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=concole1.charAt(length-1-i)){\n            System.out.println(console1+\"is not a palindrome!\");\n        }\n    }\n    System.out.println(console1+\"is a palindrome\");\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:56:50.065+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words:\");\n    String console1 = console.nextLine();\n    if(console1 == null){\n        return ;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=console1.charAt(length-1-i)){\n            System.out.println(console1+\"is not a palindrome!\");\n        }\n    }\n    System.out.println(console1+\"is a palindrome\");\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 17.4
        }, 
        {
            "date" : ISODate("2016-04-24T13:57:49.734+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words:\");\n    String console1 = console.nextLine();\n    if(console1 == null){\n        return null;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=console1.charAt(length-1-i)){\n            System.out.println(console1+\"is not a palindrome!\");\n        }\n    }\n    System.out.println(console1+\"is a palindrome\");\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(60)
        }, 
        {
            "date" : ISODate("2016-04-24T13:58:03.930+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words:\");\n    String console1 = console.nextLine();\n    if(console1 == null){\n        return null;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=console1.charAt(length-1-i)){\n            System.out.println(console1+\"is not a palindrome!\");\n            return null;\n        }\n    }\n    System.out.println(console1+\"is a palindrome\");\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-04-24T13:58:19.877+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.println(\"Type one or more words:\");\n    String console1 = console.nextLine();\n    if(console1 == null){\n        return ;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=console1.charAt(length-1-i)){\n            System.out.println(console1+\"is not a palindrome!\");\n            return ;\n        }\n    }\n    System.out.println(console1+\"is a palindrome\");\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 15.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:58:59.078+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words:\");\n    String console1 = console.nextLine();\n    if(console1 == null){\n        return ;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=console1.charAt(length-1-i)){\n            System.out.println(console1+\" is not a palindrome!\");\n            return ;\n        }\n    }\n    System.out.println(console1+\" is a palindrome\");\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 39.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:59:24.111+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String console1 = console.nextLine();\n    if(console1 == null){\n        return ;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=console1.charAt(length-1-i)){\n            System.out.println(console1+\" is not a palindrome!\");\n            return ;\n        }\n    }\n    System.out.println(console1+\" is a palindrome\");\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 25.2
        }
    ]
}
{ 
    "_id" : "cs5avZEehtu7x8JML", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:30:11.458+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:00:56.962+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA , Rectangle rectB){\n    int minX = Math.min(rectA.getX(),rectB.getX());\n    int minY = Math.min(rectA.getY(),rectB.getY());\n    \n    int maxWidth = Math.max(rectA.getWidth() + rectA.getX(), rectB.getWidth() + rectB.getX());\n    int maxHeight = Math.max(rectA.getHeight() + rectA.getY(), rectB.getHeight() + rectB.getY());\n    \n    Rectangle a = new Rectangle(minX, minY, maxWidth-minX , maxHeight-minY);\n\n    return a;\n}", 
    "status" : "PASS", 
    "activeTime" : 44.6, 
    "totalActiveTime" : 3973.5999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T12:41:26.855+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA , Rectangle rectB){\n    int minX = Math.min(rectA.getX(),rectB.getX());\n    int minY = Math.min(rectA.getY(),rectB.getY());\n    \n    int maxWidth = Math.max(rectA.getWidth(), rectB.getWidth());\n    int maxHeight = Math.max(rectA.getHeight(), rectB.getHeight());\n    \n    Rectangle = new Rectangle(minX, minY, maxWidth-minX , maxHeight-minY);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3712.7
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:29.146+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA , Rectangle rectB){\n    int minX = Math.min(rectA.getX(),rectB.getX());\n    int minY = Math.min(rectA.getY(),rectB.getY());\n    \n    int maxWidth = Math.max(rectA.getWidth(), rectB.getWidth());\n    int maxHeight = Math.max(rectA.getHeight(), rectB.getHeight());\n    \n    Rectangle a = new Rectangle(minX, minY, maxWidth-minX , maxHeight-minY);\n\n    return a;\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.1
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:33.108+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA , Rectangle rectB){\n    int minX = Math.min(rectA.getX(),rectB.getX());\n    int minY = Math.min(rectA.getY(),rectB.getY());\n    \n    int maxWidth = Math.max(rectA.getWidth(), rectB.getWidth());\n    int maxHeight = Math.max(rectA.getHeight(), rectB.getHeight());\n    \n    Rectangle a = new Rectangle(minX, minY, maxWidth-minX , maxHeight-minY);\n\n    return a;\n}", 
            "status" : "FAIL", 
            "activeTime" : 113.4
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:43.772+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA , Rectangle rectB){\n    int minX = Math.min(rectA.getX(),rectB.getX());\n    int minY = Math.min(rectA.getY(),rectB.getY());\n    \n    int maxWidth = Math.max(rectA.getWidth(), rectB.getWidth());\n    int maxHeight = Math.max(rectA.getHeight(), rectB.getHeight());\n    \n    Rectangle a = new Rectangle(minX, minY, maxWidth-minX , maxHeight-minY);\n\n    return a;\n}", 
            "status" : "FAIL", 
            "activeTime" : 2.6
        }, 
        {
            "date" : ISODate("2016-04-24T13:58:38.421+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA , Rectangle rectB){\n    int minX = Math.min(rectA.getX(),rectB.getX());\n    int minY = Math.min(rectA.getY(),rectB.getY());\n    \n    int maxWidth = Math.max(rectA.getWidth(), rectB.getWidth());\n    int maxHeight = Math.max(rectA.getHeight(), rectB.getHeight());\n    \n    Rectangle a = new Rectangle(minX, minY, maxWidth-minX , maxHeight-minY);\n\n    return a;\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:00:07.776+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA , Rectangle rectB){\n    int minX = Math.min(rectA.getX(),rectB.getX());\n    int minY = Math.min(rectA.getY(),rectB.getY());\n    \n    int maxWidth = Math.max(rectA.getWidth() + rectA.getX(), rectB.getWidth() + rectB.getX());\n    int maxHeight = Math.max(rectA.getHeight() + rectB.getY(), rectB.getHeight() + rectB.getY());\n    \n    Rectangle a = new Rectangle(minX, minY, maxWidth-minX , maxHeight-minY);\n\n    return a;\n}", 
            "status" : "FAIL", 
            "activeTime" : 69.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:00:56.962+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA , Rectangle rectB){\n    int minX = Math.min(rectA.getX(),rectB.getX());\n    int minY = Math.min(rectA.getY(),rectB.getY());\n    \n    int maxWidth = Math.max(rectA.getWidth() + rectA.getX(), rectB.getWidth() + rectB.getX());\n    int maxHeight = Math.max(rectA.getHeight() + rectA.getY(), rectB.getHeight() + rectB.getY());\n    \n    Rectangle a = new Rectangle(minX, minY, maxWidth-minX , maxHeight-minY);\n\n    return a;\n}", 
            "status" : "PASS", 
            "activeTime" : 44.6
        }
    ]
}
{ 
    "_id" : "8AP3QfTq9hikM6eWz", 
    "userId" : "sJHc88TqFpuuuT54p", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T10:13:58.569+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:02:26.530+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    int rectAX = rectA.getX();\n    int rectAY= rectA.getY();\n    int rectBX= rectB.getX();\n    int rectBY = rectB.getY();\n    int bottomRight=0;\n    if(rectAX<=rectBX){\n        x=rectAX;\n        if(rectAX+rectA.getWidth()>=rectBX+rectB.getWidth()){\n            width=rectAX+rectA.getWidth()-x;\n        }\n        else{\n            width=rectBX+rectB.getWidth()-x;\n        }\n    }\n    if(rectBX<=rectAX){\n        x=rectBX;\n        if(rectAX+rectA.getWidth()>=rectBX+rectB.getWidth()){\n            width=rectAX+rectA.getWidth()-x;\n        }\n        else{\n            width=rectBX+rectB.getWidth()-x;\n        }\n    }\n    if(rectAY<= rectBY){\n        y=rectAY;\n        if(rectAY+rectA.getHeight()>=rectBY+rectB.getHeight()){\n            height=rectAY+rectA.getHeight()-y;\n        }\n        else{\n            height=rectBY+rectB.getHeight()-y;\n        }\n    }\n    if(rectBY<= rectAY){\n        y=rectBY;\n        if(rectAY+rectA.getHeight()>=rectBY+rectB.getHeight()){\n            height=rectAY+rectA.getHeight()-y;\n        }\n        else{\n            height=rectBY+rectB.getHeight()-y;\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
    "status" : "PASS", 
    "activeTime" : 14.3, 
    "totalActiveTime" : 6191.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T11:27:38.546+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    \n    if(rectA.getX()<=rectB.getX()){\n        x=rectA.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    else{\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    else{\n        y=rectB.getHeight();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
            "status" : "FAIL", 
            "activeTime" : 1008.3
        }, 
        {
            "date" : ISODate("2016-04-24T11:28:59.905+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    \n    if(rectA.getX()<=rectB.getX()){\n        x=rectA.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getX()>=rectB.getX()){\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectB.getHeight();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
            "status" : "FAIL", 
            "activeTime" : 81.4
        }, 
        {
            "date" : ISODate("2016-04-24T11:58:02.127+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    \n    if(rectA.getX()<=rectB.getX()){\n        x=rectA.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getX()>=rectB.getX()){\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getHeight();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
            "status" : "FAIL", 
            "activeTime" : 1742.9
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:17.780+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    \n    if(rectA.getX()<=rectB.getX()){\n        x=rectA.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getX()>=rectB.getX()){\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
            "status" : "FAIL", 
            "activeTime" : 250.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:41:24.147+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    \n    if(rectA.getX()<=rectB.getX()){\n        x=rectA.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getX()>=rectB.getX()){\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.2
        }, 
        {
            "date" : ISODate("2016-04-24T12:43:37.153+0000"), 
            "code" : "public static void union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    \n    if(rectA.getX()<=rectB.getX()){\n        x=rectA.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getX()>=rectB.getX()){\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    System.out.println(newR.toString());\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 359.3
        }, 
        {
            "date" : ISODate("2016-04-24T12:45:36.429+0000"), 
            "code" : "public static void union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    \n    if(rectA.getX()<=rectB.getX()){\n        x=rectA.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getX()>=rectB.getX()){\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    System.out.print(newR.toString());\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 76.7
        }, 
        {
            "date" : ISODate("2016-04-24T13:17:29.340+0000"), 
            "code" : "public static void union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    \n    if(rectA.getX()<=rectB.getX()){\n        x=rectA.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getX()>=rectB.getX()){\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    System.out.print(newR.toString());\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 217.9
        }, 
        {
            "date" : ISODate("2016-04-24T13:18:06.439+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    \n    if(rectA.getX()<=rectB.getX()){\n        x=rectA.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getX()>=rectB.getX()){\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
            "status" : "FAIL", 
            "activeTime" : 36.7
        }, 
        {
            "date" : ISODate("2016-04-24T13:41:10.381+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    int rectAX = rectA.getX();\n    int rectAY= rectA.getY();\n    int rectBX= rectB.getX();\n    int rectBY = rectB.getY();\n    \n    if(rectAX<=rectBX){\n        x=rectAX;\n        if(rectAX+rectA.getWidth()>=rectAX+rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getX()>=rectB.getX()){\n        x=rectB.getX();\n        if(rectA.getWidth()>=rectB.getWidth()){\n            width=(x+rectA.getWidth());\n        }\n        else{\n            width=(x+rectB.getWidth());\n        }\n    }\n    if(rectA.getY()<= rectB.getY()){\n        y=rectA.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    if(rectB.getY()<= rectA.getY()){\n        y=rectB.getY();\n        if(rectA.getHeight()>=rectB.getHeight()){\n            height=(y+rectA.getHeight());\n        }\n        else{\n            height=(y+rectB.getHeight());\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
            "status" : "FAIL", 
            "activeTime" : 1134.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:02:12.112+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    int rectAX = rectA.getX();\n    int rectAY= rectA.getY();\n    int rectBX= rectB.getX();\n    int rectBY = rectB.getY();\n    int bottomRight=0;\n    if(rectAX<=rectBX){\n        x=rectAX;\n        if(rectAX+rectA.getWidth()>=rectBX+rectB.getWidth()){\n            width=rectAX+rectA.getWidth()-x;\n        }\n        else{\n            width=rectBX+rectB.getWidth()-x;\n        }\n    }\n    if(rectBX<=rectAX){\n        x=rectBX;\n        if(rectAX+rectA.getWidth()>=rectBX+rectB.getWidth()){\n            width=rectAX+rectA.getWidth()-x;\n        }\n        else{\n            width=rectBX+rectB.getWidth()-x;\n        }\n    }\n    if(rectAY<= rectBY{\n        y=rectAY;\n        if(rectAY+rectA.getHeight()>=rectBY+rectB.getHeight()){\n            height=rectAY+rectA.getHeight()-y;\n        }\n        else{\n            height=rectBY+rectB.getHeight()-y;\n        }\n    }\n    if(rectBY<= rectAY{\n        y=rectBY;\n        if(rectAY+rectA.getHeight()>=rectBY+rectB.getHeight()){\n            height=rectAY+rectA.getHeight()-y;\n        }\n        else{\n            height=rectBY+rectB.getHeight()-y;\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1261.8
        }, 
        {
            "date" : ISODate("2016-04-24T14:02:26.529+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    int rectAX = rectA.getX();\n    int rectAY= rectA.getY();\n    int rectBX= rectB.getX();\n    int rectBY = rectB.getY();\n    int bottomRight=0;\n    if(rectAX<=rectBX){\n        x=rectAX;\n        if(rectAX+rectA.getWidth()>=rectBX+rectB.getWidth()){\n            width=rectAX+rectA.getWidth()-x;\n        }\n        else{\n            width=rectBX+rectB.getWidth()-x;\n        }\n    }\n    if(rectBX<=rectAX){\n        x=rectBX;\n        if(rectAX+rectA.getWidth()>=rectBX+rectB.getWidth()){\n            width=rectAX+rectA.getWidth()-x;\n        }\n        else{\n            width=rectBX+rectB.getWidth()-x;\n        }\n    }\n    if(rectAY<= rectBY){\n        y=rectAY;\n        if(rectAY+rectA.getHeight()>=rectBY+rectB.getHeight()){\n            height=rectAY+rectA.getHeight()-y;\n        }\n        else{\n            height=rectBY+rectB.getHeight()-y;\n        }\n    }\n    if(rectBY<= rectAY){\n        y=rectBY;\n        if(rectAY+rectA.getHeight()>=rectBY+rectB.getHeight()){\n            height=rectAY+rectA.getHeight()-y;\n        }\n        else{\n            height=rectBY+rectB.getHeight()-y;\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}", 
            "status" : "PASS", 
            "activeTime" : 14.3
        }
    ]
}
{ 
    "_id" : "ETWuL9f9dPGpRxavZ", 
    "userId" : "57sNXhBgcWRbAj43Q", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T13:58:25.563+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:03:15.790+0000"), 
    "code" : "public static String parseEmail(String email) {\n    int symbol = email.indexOf(\"@\");\n    String id = email.substring(0, symbol);\n    return id;\n}", 
    "status" : "PASS", 
    "activeTime" : 21.9, 
    "totalActiveTime" : 237.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:02:24.711+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int symbol = email.indexOf(\"@\");\n    String id = email.substring(0, symbol+1);\n    return \"<\" + id + \">\";\n}", 
            "status" : "FAIL", 
            "activeTime" : 192.8
        }, 
        {
            "date" : ISODate("2016-04-24T14:02:47.949+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int symbol = email.indexOf(\"@\");\n    String id = email.substring(0, symbol);\n    return \"<\" + id + \">\";\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.7
        }, 
        {
            "date" : ISODate("2016-04-24T14:03:15.790+0000"), 
            "code" : "public static String parseEmail(String email) {\n    int symbol = email.indexOf(\"@\");\n    String id = email.substring(0, symbol);\n    return id;\n}", 
            "status" : "PASS", 
            "activeTime" : 21.9
        }
    ]
}
{ 
    "_id" : "Cto57r645r2DkpuRs", 
    "userId" : "fzFhAfCHiwc4842pK", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T13:34:39.093+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:04:13.226+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    int xa = rectA.getX();\n    int xb = rectB.getX();\n    int ya = rectA.getY();\n    int yb = rectB.getY();\n    int widtha = rectA.getWidth();\n    int widthb = rectB.getWidth();\n    int heighta = rectA.getHeight();\n    int heightb = rectB.getHeight();\n    \n    int xu = Math.min(xa,xb);\n    int yu = Math.min(ya,yb);\n    int widthu = Math.abs((xa+widtha)-(xb+widthb))+Math.min((xa+widtha),(xb+widthb))-Math.min(xa,xb);\n    int heightu = Math.abs((ya+heighta)-(yb+heightb))+Math.min((ya+heighta),(yb+heightb))-Math.min(ya,yb);\n    \n    Rectangle unionR = new Rectangle(xu,yu,widthu,heightu);\n    return unionR;\n}", 
    "status" : "PASS", 
    "activeTime" : 11.6, 
    "totalActiveTime" : 1694.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:03:31.423+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    Rectangle unionR = new Rectangle();\n    int xa = rectA.getX();\n    int xb = rectB.getX();\n    int ya = rectA.getY();\n    int yb = rectB.getY();\n    int widtha = rectA.getWidth();\n    int widthb = rectB.getWidth();\n    int heighta = rectA.getHeight();\n    int heightb = rectB.getHeight();\n    \n    int xu = Math.min(xa,xb);\n    int yu = Math.min(ya,yb);\n    int width = Math.abs((xa+widtha)-(xb+widthb))+Math.min((xa+widtha),(xb+widthb))-Math.min(xa,xb);\n    int height = Math.abs((ya+heighta)-(yb+heightb))+Math.min((ya+heighta),(yb+heightb))-Math.min(ya,yb);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1652.5
        }, 
        {
            "date" : ISODate("2016-04-24T14:04:01.254+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    int xa = rectA.getX();\n    int xb = rectB.getX();\n    int ya = rectA.getY();\n    int yb = rectB.getY();\n    int widtha = rectA.getWidth();\n    int widthb = rectB.getWidth();\n    int heighta = rectA.getHeight();\n    int heightb = rectB.getHeight();\n    \n    int xu = Math.min(xa,xb);\n    int yu = Math.min(ya,yb);\n    int widthu = Math.abs((xa+widtha)-(xb+widthb))+Math.min((xa+widtha),(xb+widthb))-Math.min(xa,xb);\n    int heightu = Math.abs((ya+heighta)-(yb+heightb))+Math.min((ya+heighta),(yb+heightb))-Math.min(ya,yb);\n    \n    Rectangle unionR = new Rectangle(xu,yu,widthu,heightu);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:04:13.225+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    int xa = rectA.getX();\n    int xb = rectB.getX();\n    int ya = rectA.getY();\n    int yb = rectB.getY();\n    int widtha = rectA.getWidth();\n    int widthb = rectB.getWidth();\n    int heighta = rectA.getHeight();\n    int heightb = rectB.getHeight();\n    \n    int xu = Math.min(xa,xb);\n    int yu = Math.min(ya,yb);\n    int widthu = Math.abs((xa+widtha)-(xb+widthb))+Math.min((xa+widtha),(xb+widthb))-Math.min(xa,xb);\n    int heightu = Math.abs((ya+heighta)-(yb+heightb))+Math.min((ya+heighta),(yb+heightb))-Math.min(ya,yb);\n    \n    Rectangle unionR = new Rectangle(xu,yu,widthu,heightu);\n    return unionR;\n}", 
            "status" : "PASS", 
            "activeTime" : 11.6
        }
    ]
}
{ 
    "_id" : "6KXm6dirwLJetc9Zy", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:49:32.290+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:04:27.685+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight(){\n        return height;\n        \n    }\n    \n    public int getWidth(){\n        return width;\n        \n    }\n    \n    public int getX(){\n        \n        return x;\n    }\n    \n    public int getY(){\n        \n        return y;\n    }\n    \n    public String toString(){\n        \n        return \"Rectangle[x=\"+ x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 18.6, 
    "totalActiveTime" : 972.0000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T13:59:50.983+0000"), 
            "code" : "public Rectangle(int x, int y, int width, int height){\n    this.x=x;\n    this.y=y;\n    this.width=width;\n    this.height = height;\n    \n}\n\npublic int getHeight(){\n    return height;\n    \n}\n\npublic int getWidth(){\n    return width;\n    \n}\n\npublic int getX(){\n    \n    return x;\n}\n\npublic int getY(){\n    \n    return y;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 695.7
        }, 
        {
            "date" : ISODate("2016-04-24T14:01:16.797+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight(){\n        return height;\n        \n    }\n    \n    public int getWidth(){\n        return width;\n        \n    }\n    \n    public int getX(){\n        \n        return x;\n    }\n    \n    public int getY(){\n        \n        return y;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 85.5
        }, 
        {
            "date" : ISODate("2016-04-24T14:03:34.565+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight(){\n        return height;\n        \n    }\n    \n    public int getWidth(){\n        return width;\n        \n    }\n    \n    public int getX(){\n        \n        return x;\n    }\n    \n    public int getY(){\n        \n        return y;\n    }\n    \n    public String toString(){\n        \n        return \"Rectangle[x=\"+x=\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\"\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(138)
        }, 
        {
            "date" : ISODate("2016-04-24T14:03:44.136+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight(){\n        return height;\n        \n    }\n    \n    public int getWidth(){\n        return width;\n        \n    }\n    \n    public int getX(){\n        \n        return x;\n    }\n    \n    public int getY(){\n        \n        return y;\n    }\n    \n    public String toString(){\n        \n        return \"Rectangle[x=\"+x=\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:04:08.690+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight(){\n        return height;\n        \n    }\n    \n    public int getWidth(){\n        return width;\n        \n    }\n    \n    public int getX(){\n        \n        return x;\n    }\n    \n    public int getY(){\n        \n        return y;\n    }\n    \n    public String toString(){\n        \n        return \"Rectangle[x=\"+ x\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:04:27.684+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight(){\n        return height;\n        \n    }\n    \n    public int getWidth(){\n        return width;\n        \n    }\n    \n    public int getX(){\n        \n        return x;\n    }\n    \n    public int getY(){\n        \n        return y;\n    }\n    \n    public String toString(){\n        \n        return \"Rectangle[x=\"+ x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 18.6
        }
    ]
}
{ 
    "_id" : "WZKvPjAYujtteJcA8", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T07:52:31.026+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:29:37.544+0000"), 
    "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a1.size() + a2.size();\n    int a1Count =0;\n    int a2Count =0;\n    \n    for(int i=0; i<num; i++){\n        if(a1Count >= a1.size()){\n            finalList.add(a2.get(a2Count));\n            a2Count++;\n        }else if(a2Count >= a2.size()){\n            finalList.add(a1.get(a1Count));\n            a1Count++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a1.get(a1Count));\n                a1Count++;\n            }else{\n                finalList.add(a2.get(a2Count));\n                a2Count++;\n            }\n        }\n        \n    }\n    \n    a1.clear();\n    for(int k = 0; k<finalList.size(); k++){\n        a1.add(finalList.get(k));\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 15.3, 
    "totalActiveTime" : 8085.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T08:31:53.620+0000"), 
            "code" : "public static void interleave(ArrayList <int> a1, ArrayList <int> a2){\n    \n    ArrayList <int> combined = new ArrayList <int> ();\n    ArrayList <int> temp = new ArratList <int> ();\n    int a1Length = a1.length();\n    int a2Length = a2.length();\n    int diff = a1Length - a2Length;\n    \n    if(diff <0){ //a2 longer\n        diff = -1 * diff;\n        for(int i= a2Length; i>=diff; i--){\n            int a = a2.get(i);\n            temp.add(a);\n        }\n    }\n    \n    if(diff >0){//a1 longer\n        for(int j= a1Length; j>=diff; j--){\n            int a = a1.get(j);\n            temp.add(a);\n        }        \n    }\n    \n    for(int k=0;k<combined.length();k++){\n        if(k%2 == 0){\n            combined.add(a1.get(k/2));\n        } else {\n            combined.add(a2.get(k/2));\n        }\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1911.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:32:44.635+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    \n    ArrayList <Integer> combined = new ArrayList <Integer> ();\n    ArrayList <Integer> temp = new ArratList <Integer> ();\n    int a1Length = a1.length();\n    int a2Length = a2.length();\n    int diff = a1Length - a2Length;\n    \n    if(diff <0){ //a2 longer\n        diff = -1 * diff;\n        for(int i= a2Length; i>=diff; i--){\n            int a = a2.get(i);\n            temp.add(a);\n        }\n    }\n    \n    if(diff >0){//a1 longer\n        for(int j= a1Length; j>=diff; j--){\n            int a = a1.get(j);\n            temp.add(a);\n        }        \n    }\n    \n    for(int k=0;k<combined.length();k++){\n        if(k%2 == 0){\n            combined.add(a1.get(k/2));\n        } else {\n            combined.add(a2.get(k/2));\n        }\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 50.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:33:12.564+0000"), 
            "code" : "import java.util.*;\n\npublic static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    \n    ArrayList <Integer> combined = new ArrayList <Integer> ();\n    ArrayList <Integer> temp = new ArratList <Integer> ();\n    int a1Length = a1.length();\n    int a2Length = a2.length();\n    int diff = a1Length - a2Length;\n    \n    if(diff <0){ //a2 longer\n        diff = -1 * diff;\n        for(int i= a2Length; i>=diff; i--){\n            int a = a2.get(i);\n            temp.add(a);\n        }\n    }\n    \n    if(diff >0){//a1 longer\n        for(int j= a1Length; j>=diff; j--){\n            int a = a1.get(j);\n            temp.add(a);\n        }        \n    }\n    \n    for(int k=0;k<combined.length();k++){\n        if(k%2 == 0){\n            combined.add(a1.get(k/2));\n        } else {\n            combined.add(a2.get(k/2));\n        }\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.9
        }, 
        {
            "date" : ISODate("2016-04-24T08:34:17.613+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    \n    ArrayList <Integer> combined = new ArrayList <Integer> ();\n    ArrayList <Integer> temp = new ArratList <Integer> ();\n    int a1Length = a1.getLength();\n    int a2Length = a2.getLength();\n    int diff = a1Length - a2Length;\n    \n    if(diff <0){ //a2 longer\n        diff = -1 * diff;\n        for(int i= a2Length; i>=diff; i--){\n            int a = a2.get(i);\n            temp.add(a);\n        }\n    }\n    \n    if(diff >0){//a1 longer\n        for(int j= a1Length; j>=diff; j--){\n            int a = a1.get(j);\n            temp.add(a);\n        }        \n    }\n    \n    for(int k=0;k<combined.getLength();k++){\n        if(k%2 == 0){\n            combined.add(a1.get(k/2));\n        } else {\n            combined.add(a2.get(k/2));\n        }\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 65.2
        }, 
        {
            "date" : ISODate("2016-04-24T08:34:38.460+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    \n    ArrayList <Integer> combined = new ArrayList <Integer> ();\n    ArrayList <Integer> temp = new ArrayList <Integer> ();\n    int a1Length = a1.getLength();\n    int a2Length = a2.getLength();\n    int diff = a1Length - a2Length;\n    \n    if(diff <0){ //a2 longer\n        diff = -1 * diff;\n        for(int i= a2Length; i>=diff; i--){\n            int a = a2.get(i);\n            temp.add(a);\n        }\n    }\n    \n    if(diff >0){//a1 longer\n        for(int j= a1Length; j>=diff; j--){\n            int a = a1.get(j);\n            temp.add(a);\n        }        \n    }\n    \n    for(int k=0;k<combined.getLength();k++){\n        if(k%2 == 0){\n            combined.add(a1.get(k/2));\n        } else {\n            combined.add(a2.get(k/2));\n        }\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-04-24T08:36:14.325+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    \n    ArrayList <Integer> combined = new ArrayList <Integer> ();\n    ArrayList <Integer> temp = new ArrayList <Integer> ();\n    int a1Length = a1.size();\n    int a2Length = a2.size();\n    int diff = a1Length - a2Length;\n    \n    if(diff <0){ //a2 longer\n        diff = -1 * diff;\n        for(int i= a2Length; i>=diff; i--){\n            int a = a2.get(i);\n            temp.add(a);\n        }\n    }\n    \n    if(diff >0){//a1 longer\n        for(int j= a1Length; j>=diff; j--){\n            int a = a1.get(j);\n            temp.add(a);\n        }        \n    }\n    \n    for(int k=0;k<combined.size();k++){\n        if(k%2 == 0){\n            combined.add(a1.get(k/2));\n        } else {\n            combined.add(a2.get(k/2));\n        }\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 51.5
        }, 
        {
            "date" : ISODate("2016-04-24T11:22:57.878+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    \n    ArrayList <Integer> combined = new ArrayList <Integer> ();\n    ArrayList <Integer> temp = new ArrayList <Integer> ();\n    int a1Length = a1.size();\n    int a2Length = a2.size();\n    int diff = a1Length - a2Length;\n    \n    if(diff <0){ //a2 longer\n        diff = -1 * diff;\n        for(int i= a2Length; i>=diff; i--){\n            int a = a2.get(i);\n            temp.add(a);\n        }\n    }\n    \n    if(diff >0){//a1 longer\n        for(int j= a1Length; j>=diff; j--){\n            int a = a1.get(j);\n            temp.add(a);\n        }        \n    }\n    \n    for(int k=0;k<combined.size();k++){\n        if(k%2 == 0){\n            combined.add(a1.get(k/2));\n        } else {\n            combined.add(a2.get(k/2));\n        }\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 1931.9
        }, 
        {
            "date" : ISODate("2016-04-24T11:25:19.779+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    \n    ArrayList <Integer> combined = new ArrayList <Integer> ();\n    ArrayList <Integer> temp = new ArrayList <Integer> ();\n    int a1Length = a1.size();\n    int a2Length = a2.size();\n    int diff = a1Length - a2Length;\n    \n    if(diff <0){ //a2 longer\n        diff = -1 * diff;\n        for(int i= a2Length; i>=diff; i--){\n            int a = a2.get(i);\n            temp.add(a);\n        }\n    }\n    \n    if(diff >0){//a1 longer\n        for(int j= a1Length; j>=diff; j--){\n            int a = a1.get(j);\n            temp.add(a);\n        }        \n    }\n    \n    for(int k=0;k<(a1.size() + a2.size());k++){\n        if(k%2 == 0){\n            combined.add(a1.get(k/2));\n        } else {\n            combined.add(a2.get(k/2));\n        }\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 141.9
        }, 
        {
            "date" : ISODate("2016-04-24T11:26:17.195+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    \n    ArrayList <Integer> combined = new ArrayList <Integer> ();\n    ArrayList <Integer> temp = new ArrayList <Integer> ();\n    int a1Length = a1.size();\n    int a2Length = a2.size();\n    int diff = a1Length - a2Length;\n    int total = a1Length + a2Length;\n    \n    if(diff <0){ //a2 longer\n        diff = -1 * diff;\n        for(int i= a2Length; i>=diff; i--){\n            int a = a2.get(i);\n            temp.add(a);\n        }\n    }\n    \n    if(diff >0){//a1 longer\n        for(int j= a1Length; j>=diff; j--){\n            int a = a1.get(j);\n            temp.add(a);\n        }        \n    }\n    \n    for(int k=0;k< total;k++){\n        if(k%2 == 0){\n            combined.add(a1.get(k/2));\n        } else {\n            combined.add(a2.get(k/2));\n        }\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 57.5
        }, 
        {
            "date" : ISODate("2016-04-24T13:51:35.545+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a, ArrayList <Integer> b){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a.size() + b.size();\n    int aCount =0;\n    int bCount =0;\n    \n    for(int i=0; i<num; i++){\n        if(aCount >= a.size){\n            finalList.add(b.get(bCount));\n            bCount++;\n        }else if(bCount >= b.size()){\n            finalList.add(a.get(aCount));\n            aCount++;           \n        }else{\n            if(i%2 ==0){\n                finalList.add(a.get(aCount));\n                aCount++;\n            }else{\n                finalList.add(b.get(bCount));\n                bCount++;\n            }\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1592.2
        }, 
        {
            "date" : ISODate("2016-04-24T13:51:54.891+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a, ArrayList <Integer> b){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a.size() + b.size();\n    int aCount =0;\n    int bCount =0;\n    \n    for(int i=0; i<num; i++){\n        if(aCount >= a.size()){\n            finalList.add(b.get(bCount));\n            bCount++;\n        }else if(bCount >= b.size()){\n            finalList.add(a.get(aCount));\n            aCount++;           \n        }else{\n            if(i%2 ==0){\n                finalList.add(a.get(aCount));\n                aCount++;\n            }else{\n                finalList.add(b.get(bCount));\n                bCount++;\n            }\n        }\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.1
        }, 
        {
            "date" : ISODate("2016-04-24T13:53:12.454+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a, ArrayList <Integer> b){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a.size() + b.size();\n    int aCount =0;\n    int bCount =0;\n    \n    for(int i=0; i<num; i++){\n        if(aCount >= a.size()){\n            finalList.add(b.get(bCount));\n            bCount++;\n        }else if(bCount >= b.size()){\n            finalList.add(a.get(aCount));\n            aCount++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a.get(aCount));\n                aCount++;\n            }else{\n                finalList.add(b.get(bCount));\n                bCount++;\n            }\n        }\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 77.5
        }, 
        {
            "date" : ISODate("2016-04-24T14:10:59.459+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a, ArrayList <Integer> b){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a.size() + b.size();\n    int aCount =0;\n    int bCount =0;\n    \n    for(int i=0; i<num; i++){\n        if(aCount >= a.size()){\n            finalList.add(b.get(bCount));\n            bCount++;\n        }else if(bCount >= b.size()){\n            finalList.add(a.get(aCount));\n            aCount++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a.get(aCount));\n                aCount++;\n            }else{\n                finalList.add(b.get(bCount));\n                bCount++;\n            }\n        }\n        \n    }\n    a = finalList;\n}", 
            "status" : "FAIL", 
            "activeTime" : 1045.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:11:33.312+0000"), 
            "code" : "public static ArrayList interleave(ArrayList <Integer> a, ArrayList <Integer> b){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a.size() + b.size();\n    int aCount =0;\n    int bCount =0;\n    \n    for(int i=0; i<num; i++){\n        if(aCount >= a.size()){\n            finalList.add(b.get(bCount));\n            bCount++;\n        }else if(bCount >= b.size()){\n            finalList.add(a.get(aCount));\n            aCount++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a.get(aCount));\n                aCount++;\n            }else{\n                finalList.add(b.get(bCount));\n                bCount++;\n            }\n        }\n        \n    }\n    return finalList;\n    //a = finalList;\n}", 
            "status" : "FAIL", 
            "activeTime" : 33.7
        }, 
        {
            "date" : ISODate("2016-04-24T14:11:49.767+0000"), 
            "code" : "public static ArrayList interleave(ArrayList <Integer> a, ArrayList <Integer> b){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a.size() + b.size();\n    int aCount =0;\n    int bCount =0;\n    \n    for(int i=0; i<num; i++){\n        if(aCount >= a.size()){\n            finalList.add(b.get(bCount));\n            bCount++;\n        }else if(bCount >= b.size()){\n            finalList.add(a.get(aCount));\n            aCount++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a.get(aCount));\n                aCount++;\n            }else{\n                finalList.add(b.get(bCount));\n                bCount++;\n            }\n        }\n        \n    }\n    return finalList;\n    //a = finalList;\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.3
        }, 
        {
            "date" : ISODate("2016-04-24T14:12:21.863+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a, ArrayList <Integer> b){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a.size() + b.size();\n    int aCount =0;\n    int bCount =0;\n    \n    for(int i=0; i<num; i++){\n        if(aCount >= a.size()){\n            finalList.add(b.get(bCount));\n            bCount++;\n        }else if(bCount >= b.size()){\n            finalList.add(a.get(aCount));\n            aCount++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a.get(aCount));\n                aCount++;\n            }else{\n                finalList.add(b.get(bCount));\n                bCount++;\n            }\n        }\n        \n    }\n    a = finalList;\n}", 
            "status" : "FAIL", 
            "activeTime" : 31.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:13:59.406+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a1.size() + a2.size();\n    int a1Count =0;\n    int a2Count =0;\n    \n    for(int i=0; i<num; i++){\n        if(a1Count >= a1.size()){\n            finalList.add(a2.get(bCount));\n            a2Count++;\n        }else if(a2Count >= a2.size()){\n            finalList.add(a1.get(a1Count));\n            a1Count++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a1.get(a1Count));\n                a1Count++;\n            }else{\n                finalList.add(a2.get(a2Count));\n                a2Count++;\n            }\n        }\n        \n    }\n    a1 = finalList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 97.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:14:11.383+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a1.size() + a2.size();\n    int a1Count =0;\n    int a2Count =0;\n    \n    for(int i=0; i<num; i++){\n        if(a1Count >= a1.size()){\n            finalList.add(a2.get(a2Count));\n            a2Count++;\n        }else if(a2Count >= a2.size()){\n            finalList.add(a1.get(a1Count));\n            a1Count++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a1.get(a1Count));\n                a1Count++;\n            }else{\n                finalList.add(a2.get(a2Count));\n                a2Count++;\n            }\n        }\n        \n    }\n    a1 = finalList;\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:18:20.438+0000"), 
            "code" : "public static arrayList interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a1.size() + a2.size();\n    int a1Count =0;\n    int a2Count =0;\n    \n    for(int i=0; i<num; i++){\n        if(a1Count >= a1.size()){\n            finalList.add(a2.get(a2Count));\n            a2Count++;\n        }else if(a2Count >= a2.size()){\n            finalList.add(a1.get(a1Count));\n            a1Count++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a1.get(a1Count));\n                a1Count++;\n            }else{\n                finalList.add(a2.get(a2Count));\n                a2Count++;\n            }\n        }\n        \n    }\n    return finalList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 249.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:18:31.814+0000"), 
            "code" : "public static ArrayList interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a1.size() + a2.size();\n    int a1Count =0;\n    int a2Count =0;\n    \n    for(int i=0; i<num; i++){\n        if(a1Count >= a1.size()){\n            finalList.add(a2.get(a2Count));\n            a2Count++;\n        }else if(a2Count >= a2.size()){\n            finalList.add(a1.get(a1Count));\n            a1Count++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a1.get(a1Count));\n                a1Count++;\n            }else{\n                finalList.add(a2.get(a2Count));\n                a2Count++;\n            }\n        }\n        \n    }\n    return finalList;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(11)
        }, 
        {
            "date" : ISODate("2016-04-24T14:28:09.434+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a1.size() + a2.size();\n    int a1Count =0;\n    int a2Count =0;\n    \n    for(int i=0; i<num; i++){\n        if(a1Count >= a1.size()){\n            finalList.add(a2.get(a2Count));\n            a2Count++;\n        }else if(a2Count >= a2.size()){\n            finalList.add(a1.get(a1Count));\n            a1Count++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a1.get(a1Count));\n                a1Count++;\n            }else{\n                finalList.add(a2.get(a2Count));\n                a2Count++;\n            }\n        }\n        \n    }\n    \n    a1.removeAll();\n    for(int k = 0; k<finalList.size(); k++){\n        a1.add(finalList.get(i));\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 577.8
        }, 
        {
            "date" : ISODate("2016-04-24T14:29:22.089+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a1.size() + a2.size();\n    int a1Count =0;\n    int a2Count =0;\n    \n    for(int i=0; i<num; i++){\n        if(a1Count >= a1.size()){\n            finalList.add(a2.get(a2Count));\n            a2Count++;\n        }else if(a2Count >= a2.size()){\n            finalList.add(a1.get(a1Count));\n            a1Count++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a1.get(a1Count));\n                a1Count++;\n            }else{\n                finalList.add(a2.get(a2Count));\n                a2Count++;\n            }\n        }\n        \n    }\n    \n    a1.clear();\n    for(int k = 0; k<finalList.size(); k++){\n        a1.add(finalList.get(i));\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-24T14:29:37.543+0000"), 
            "code" : "public static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a1.size() + a2.size();\n    int a1Count =0;\n    int a2Count =0;\n    \n    for(int i=0; i<num; i++){\n        if(a1Count >= a1.size()){\n            finalList.add(a2.get(a2Count));\n            a2Count++;\n        }else if(a2Count >= a2.size()){\n            finalList.add(a1.get(a1Count));\n            a1Count++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a1.get(a1Count));\n                a1Count++;\n            }else{\n                finalList.add(a2.get(a2Count));\n                a2Count++;\n            }\n        }\n        \n    }\n    \n    a1.clear();\n    for(int k = 0; k<finalList.size(); k++){\n        a1.add(finalList.get(k));\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 15.3
        }
    ]
}
{ 
    "_id" : "EHDLDNwS4Jz5A2awd", 
    "userId" : "mzEYkra6nhsvCgSH7", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T12:14:41.067+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:19:38.644+0000"), 
    "code" : "public static ArrayList interleave(ArrayList a1, ArrayList a2){\n    int size1 = a1.size();\n    int size2 = a2.size();\n    ArrayList result = new ArrayList();\n    int round;\n    if(size1>size2){\n        round = size2;\n    }else{\n        round=size1;\n    }\n    for(int i=0;i<round;i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    if(size1>size2){\n        for(int j =round;j<size1;j++){\n            result.add(a1.get(j));\n        }\n    }else{\n          for(int j =round;j<size2;j++){\n            result.add(a1.get(j));\n        }\n    }\n    return result;\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : NumberInt(16), 
    "totalActiveTime" : 1086.1000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:05:47.309+0000"), 
            "code" : "public static ArrayList<int> interleave(ArrayList<int>a1, ArrayList<int>a2){\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 255.1
        }, 
        {
            "date" : ISODate("2016-04-24T14:08:20.278+0000"), 
            "code" : "public static ArrayList() interleave(ArrayList()a1, ArrayList()a2){\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 152.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:17:03.505+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1, ArrayList a2){\n    int size1 = a1.size();\n    int size2 = a2.size();\n    ArrayList<int> result = new ArrayList<int>();\n    int round1;\n    if(size1>size2){\n        round1 = size2;\n    }else{\n        round1=size1;\n    }\n    for(int i=0;i<round;i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    if(size1>size2){\n        for(int j =round;j<size1;j++){\n            result.add(a1.get(j));\n        }\n    }else{\n          for(int j =round;j<size2;j++){\n            result.add(a1.get(j));\n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 523.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:17:36.148+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1, ArrayList a2){\n    int size1 = a1.size();\n    int size2 = a2.size();\n    ArrayList<int> result = new ArrayList<int>();\n    int round;\n    if(size1>size2){\n        round1 = size2;\n    }else{\n        round1=size1;\n    }\n    for(int i=0;i<round;i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    if(size1>size2){\n        for(int j =round;j<size1;j++){\n            result.add(a1.get(j));\n        }\n    }else{\n          for(int j =round;j<size2;j++){\n            result.add(a1.get(j));\n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.7
        }, 
        {
            "date" : ISODate("2016-04-24T14:17:50.012+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1, ArrayList a2){\n    int size1 = a1.size();\n    int size2 = a2.size();\n    ArrayList<int> result = new ArrayList<int>();\n    int round;\n    if(size1>size2){\n        round = size2;\n    }else{\n        round1=size1;\n    }\n    for(int i=0;i<round;i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    if(size1>size2){\n        for(int j =round;j<size1;j++){\n            result.add(a1.get(j));\n        }\n    }else{\n          for(int j =round;j<size2;j++){\n            result.add(a1.get(j));\n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:18:00.959+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1, ArrayList a2){\n    int size1 = a1.size();\n    int size2 = a2.size();\n    ArrayList<int> result = new ArrayList<int>();\n    int round;\n    if(size1>size2){\n        round = size2;\n    }else{\n        round=size1;\n    }\n    for(int i=0;i<round;i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    if(size1>size2){\n        for(int j =round;j<size1;j++){\n            result.add(a1.get(j));\n        }\n    }else{\n          for(int j =round;j<size2;j++){\n            result.add(a1.get(j));\n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:19:19.146+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1, ArrayList a2){\n    int size1 = a1.size();\n    int size2 = a2.size();\n    ArrayList result = new ArrayList();\n    int round;\n    if(size1>size2){\n        round = size2;\n    }else{\n        round=size1;\n    }\n    for(int i=0;i<round;i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    if(size1>size2){\n        for(int j =round;j<size1;j++){\n            result.add(a1.get(j));\n        }\n    }else{\n          for(int j =round;j<size2;j++){\n            result.add(a1.get(j));\n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 77.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:19:22.468+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1, ArrayList a2){\n    int size1 = a1.size();\n    int size2 = a2.size();\n    ArrayList result = new ArrayList();\n    int round;\n    if(size1>size2){\n        round = size2;\n    }else{\n        round=size1;\n    }\n    for(int i=0;i<round;i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    if(size1>size2){\n        for(int j =round;j<size1;j++){\n            result.add(a1.get(j));\n        }\n    }else{\n          for(int j =round;j<size2;j++){\n            result.add(a1.get(j));\n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.5
        }, 
        {
            "date" : ISODate("2016-04-24T14:19:38.644+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1, ArrayList a2){\n    int size1 = a1.size();\n    int size2 = a2.size();\n    ArrayList result = new ArrayList();\n    int round;\n    if(size1>size2){\n        round = size2;\n    }else{\n        round=size1;\n    }\n    for(int i=0;i<round;i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    if(size1>size2){\n        for(int j =round;j<size1;j++){\n            result.add(a1.get(j));\n        }\n    }else{\n          for(int j =round;j<size2;j++){\n            result.add(a1.get(j));\n        }\n    }\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(16)
        }
    ]
}
{ 
    "_id" : "yhhXhwT3mpN9PwdQX", 
    "userId" : "ukRzCFySZXsgLobtY", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:15:18.977+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:00:18.006+0000"), 
    "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }else{\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }\n    \n    a1.clear();\n    for(int k = 0; k<temp.size(); k++){\n        a1.add(temp.get(k));\n    }\n    return a1;\n}", 
    "status" : "PASS", 
    "activeTime" : 59.4, 
    "totalActiveTime" : 6241.399999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T09:30:09.236+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    int count = 0;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        max = a2.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        max = a1.size();\n        a1IsLarger = true;\n    }\n    \n    while(count<=limit) {\n        for(int i = 0; i<limit; i++) {\n            Integer int1 = a1.get(i);\n            Integer int2 = a2.get(i);\n            temp.add(int1);\n            temp.add(int2);\n        }\n        if(a1IsLarger) {\n            for(int j = limit; j<a1.size(); j++) {\n                Integer integer = a1.get(j);\n                temp.add(integer);\n            }\n        }else{\n            for(int j = limit; j<a2.size();j++) {\n                Integer integer = a2.get(j);\n                temp.add(integer);\n            }\n        }\n        a1 = temp;\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 897.1
        }, 
        {
            "date" : ISODate("2016-04-24T09:30:28.603+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    int count = 0;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    while(count<=limit) {\n        for(int i = 0; i<limit; i++) {\n            Integer int1 = a1.get(i);\n            Integer int2 = a2.get(i);\n            temp.add(int1);\n            temp.add(int2);\n        }\n        if(a1IsLarger) {\n            for(int j = limit; j<a1.size(); j++) {\n                Integer integer = a1.get(j);\n                temp.add(integer);\n            }\n        }else{\n            for(int j = limit; j<a2.size();j++) {\n                Integer integer = a2.get(j);\n                temp.add(integer);\n            }\n        }\n        a1 = temp;\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:40:22.818+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    int count = 0;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    while(count<=limit) {\n        for(int i = 0; i<limit; i++) {\n            Integer int1 = a1.get(i);\n            Integer int2 = a2.get(i);\n            temp.add(int1);\n            temp.add(int2);\n        }\n        if(a1IsLarger) {\n            for(int j = limit; j<a1.size(); j++) {\n                Integer integer = a1.get(j);\n                temp.add(integer);\n            }\n        }else{\n            for(int j = limit; j<a2.size();j++) {\n                Integer integer = a2.get(j);\n                temp.add(integer);\n            }\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.5
        }, 
        {
            "date" : ISODate("2016-04-24T09:57:13.507+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    int count = 0;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    for(int i = 0; i<limit; i++) {\n        Integer int1 = a1.get(i);\n        Integer int2 = a2.get(i);\n        temp.add(int1);\n        temp.add(int2);\n    }\n    \n    if(a1IsLarger) {\n        for(int j = limit; j<a1.size(); j++) {\n        Integer integer = a1.get(j);\n        temp.add(integer);\n        }\n    }else{\n        for(int j = limit; j<a2.size();j++) {\n        Integer integer = a2.get(j);\n        temp.add(integer);\n    }\n    a1 = temp;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1027.2
        }, 
        {
            "date" : ISODate("2016-04-24T09:58:03.782+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    int count = 0;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    for(int i = 0; i<limit; i++) {\n        Integer int1 = a1.get(i);\n        Integer int2 = a2.get(i);\n        temp.add(int1);\n        temp.add(int2);\n    }\n    \n    if(a1IsLarger) {\n        for(int j = limit; j<a1.size(); j++) {\n        Integer integer = a1.get(j);\n        temp.add(integer);\n        }\n    }else{\n        for(int j = limit; j<a2.size();j++) {\n        Integer integer = a2.get(j);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(50)
        }, 
        {
            "date" : ISODate("2016-04-24T10:00:27.588+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    for(int i = 0; i<limit; i++) {\n        for(int j = 0; j<limit; j++) {\n           Integer int1 = a1.get(i);\n            Integer int2 = a2.get(j);\n            temp.add(int1);\n            temp.add(int2); \n        }\n    }\n    \n    if(a1IsLarger) {\n        for(int k = limit; k<a1.size(); k++) {\n        Integer integer = a1.get(k);\n        temp.add(integer);\n        }\n    }else{\n        for(int k = limit; k<a2.size();k++) {\n        Integer integer = a2.get(k);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 136.8
        }, 
        {
            "date" : ISODate("2016-04-24T10:01:40.504+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    for(int i = 0; i<=limit; i++) {\n        for(int j = 0; j<=limit; j++) {\n            Integer int1 = a1.get(i);\n            temp.add(int1);\n            Integer int2 = a2.get(j);\n            temp.add(int2); \n        }\n    }\n    \n    if(a1IsLarger) {\n        for(int k = limit; k<a1.size(); k++) {\n        Integer integer = a1.get(k);\n        temp.add(integer);\n        }\n    }else{\n        for(int k = limit; k<a2.size();k++) {\n        Integer integer = a2.get(k);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 64.3
        }, 
        {
            "date" : ISODate("2016-04-24T10:03:08.976+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    for(int i = 0; i<limit; i++) {\n        for(int j = 0; j<limit; j++) {\n            Integer int1 = a1.get(i);\n            temp.add(int1);\n            Integer int2 = a2.get(j);\n            temp.add(int2); \n        }\n    }\n    \n    if(a1IsLarger) {\n        for(int k = limit; k<a1.size(); k++) {\n        Integer integer = a1.get(k);\n        temp.add(integer);\n        }\n    }else{\n        for(int k = limit; k<a2.size();k++) {\n        Integer integer = a2.get(k);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(88)
        }, 
        {
            "date" : ISODate("2016-04-24T10:03:46.328+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    for(int i = 0; i<=limit; i++) {\n        for(int j = 0; j<limit; j++) {\n            Integer int1 = a1.get(i);\n            temp.add(int1);\n            Integer int2 = a2.get(j);\n            temp.add(int2); \n        }\n    }\n    \n    if(a1IsLarger) {\n        for(int k = limit; k<a1.size(); k++) {\n        Integer integer = a1.get(k);\n        temp.add(integer);\n        }\n    }else{\n        for(int k = limit; k<a2.size();k++) {\n        Integer integer = a2.get(k);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 37.4
        }, 
        {
            "date" : ISODate("2016-04-24T10:11:09.617+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n     for(int i = 0; i<limit; i++) {\n        \n        Integer int1 = a1.get(i);\n        Integer int2 = a2.get(i);\n        temp.add(int1);\n        temp.add(int2); \n    }\n    \n    if(a1IsLarger) {\n        for(int k = limit; k<a1.size(); k++) {\n        Integer integer = a1.get(k);\n        temp.add(integer);\n        }\n    }else{\n        for(int k = limit; k<a2.size();k++) {\n        Integer integer = a2.get(k);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 442.9
        }, 
        {
            "date" : ISODate("2016-04-24T10:14:03.722+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    int count = 0;\n    while(count<=limit) {\n        Integer int1 = a1.get(count);\n        Integer int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2); \n        count+=1;\n    }\n    \n    if(a1IsLarger) {\n        for(int k = limit; k<a1.size(); k++) {\n        Integer integer = a1.get(k);\n        temp.add(integer);\n        }\n    }else{\n        for(int k = limit; k<a2.size();k++) {\n        Integer integer = a2.get(k);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 174.2
        }, 
        {
            "date" : ISODate("2016-04-24T10:14:20.259+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    int count = 0;\n    while(count<limit) {\n        Integer int1 = a1.get(count);\n        Integer int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2); \n        count+=1;\n    }\n    \n    if(a1IsLarger) {\n        for(int k = limit; k<a1.size(); k++) {\n        Integer integer = a1.get(k);\n        temp.add(integer);\n        }\n    }else{\n        for(int k = limit; k<a2.size();k++) {\n        Integer integer = a2.get(k);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.5
        }, 
        {
            "date" : ISODate("2016-04-24T10:15:52.663+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a2.size();\n        a1IsLarger = false;\n    }else{\n        limit = a1.size();\n        a1IsLarger = true;\n    }\n    \n    int count = 0;\n    while(count<limit) {\n        Integer int1 = a1.get(count);\n        Integer int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2); \n        count+=1;\n    }\n    \n    if(a1IsLarger) {\n        for(int k = limit; k<a1.size(); k++) {\n        Integer integer = a1.get(k);\n        temp.add(integer);\n        }\n    }else{\n        for(int k = limit; k<a2.size();k++) {\n        Integer integer = a2.get(k);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 92.3
        }, 
        {
            "date" : ISODate("2016-04-24T10:16:08.724+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    boolean a1IsLarger;\n    \n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n        a1IsLarger = false;\n    }else{\n        limit = a2.size();\n        a1IsLarger = true;\n    }\n    \n    int count = 0;\n    while(count<limit) {\n        Integer int1 = a1.get(count);\n        Integer int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2); \n        count+=1;\n    }\n    \n    if(a1IsLarger) {\n        for(int k = limit; k<a1.size(); k++) {\n        Integer integer = a1.get(k);\n        temp.add(integer);\n        }\n    }else{\n        for(int k = limit; k<a2.size();k++) {\n        Integer integer = a2.get(k);\n        temp.add(integer);\n        }\n    }\n    a1 = temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(16)
        }, 
        {
            "date" : ISODate("2016-04-24T14:20:36.665+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //if a1 is smaller sized\n    if(a1.size()<=a2.size()) {\n        limit = a2.size();\n    }else{\n        limit = a1.size();\n    }\n    \n    int count = 0;\n    while(count!=limit) {\n        int int1 = a1.get(count);\n        int int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2);\n        count++;\n        System.out.print(count);\n    }\n    a1=temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 949.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:21:05.510+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //if a1 is smaller sized\n    if(a1.size()<=a2.size()) {\n        limit = a2.size();\n    }else{\n        limit = a1.size();\n    }\n    \n    int count = 0;\n    while(count!=limit) {\n        int int1 = a1.get(count);\n        int int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2);\n        count++;\n    }\n    a1=temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 28.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:21:13.607+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //if a1 is smaller sized\n    if(a1.size()<=a2.size()) {\n        limit = a2.size();\n    }else{\n        limit = a1.size();\n    }\n    \n    int count = 0;\n    while(count<limit) {\n        int int1 = a1.get(count);\n        int int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2);\n        count++;\n    }\n    a1=temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:21:42.599+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit = 0;\n    \n    //if a1 is smaller sized\n    if(a1.size()<=a2.size()) {\n        limit = a2.size();\n    }else{\n        limit = a1.size();\n    }\n    \n    int count = 0;\n    while(count<limit) {\n        int int1 = a1.get(count);\n        int int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2);\n        count++;\n    }\n    a1=temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 28.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:22:05.669+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //if a1 is smaller sized\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    int count = 0;\n    while(count!=limit) {\n        int int1 = a1.get(count);\n        int int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2);\n        count++;\n    }\n    a1=temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 23.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:29:10.007+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //if either arraylist is empty\n    if(a1.size()==0) {\n        return a2;\n    }else if(a2.size()==0) {\n        return a1;\n    }\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    int count = 0;\n    while(count!=limit) {\n        int int1 = a1.get(count);\n        int int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2);\n        count++;\n    }\n    a1=temp;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 424.3
        }, 
        {
            "date" : ISODate("2016-04-24T14:29:36.839+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //if either arraylist is empty\n    if(a1.size()==0) {\n        return a2;\n    }else if(a2.size()==0) {\n        return a1;\n    }\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    int count = 0;\n    while(count!=limit) {\n        int int1 = a1.get(count);\n        int int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2);\n        count++;\n    }\n    a1=temp;\n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 26.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:30:25.478+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //if either arraylist is empty\n    if(a1.size()==0 || a1.size()==null) {\n        return a2;\n    }else if(a2.size()==0 || a2.size()==null) {\n        return a1;\n    }\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    int count = 0;\n    while(count!=limit) {\n        int int1 = a1.get(count);\n        int int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2);\n        count++;\n    }\n    a1=temp;\n    return a1;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(49)
        }, 
        {
            "date" : ISODate("2016-04-24T14:30:43.156+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //if either arraylist is empty\n    if(a1.size()==0 || a1==null) {\n        return a2;\n    }else if(a2.size()==0 || a2==null) {\n        return a1;\n    }\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    int count = 0;\n    while(count!=limit) {\n        int int1 = a1.get(count);\n        int int2 = a2.get(count);\n        temp.add(int1);\n        temp.add(int2);\n        count++;\n    }\n    a1=temp;\n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:44:12.804+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a2.size();\n    }else{\n        limit = a1.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }else{\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }\n    \n    a1.clear;\n    return a1=temp;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 669.7
        }, 
        {
            "date" : ISODate("2016-04-24T14:44:24.669+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a2.size();\n    }else{\n        limit = a1.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }else{\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }\n    \n    a1.clear();\n    return a1=temp;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-04-24T14:46:19.218+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a2.size();\n    }else{\n        limit = a1.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }else{\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }\n    \n    a1.clear();\n    return temp;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 114.4
        }, 
        {
            "date" : ISODate("2016-04-24T14:47:14.181+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }else{\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }\n    \n    a1.clear();\n    return temp;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(55)
        }, 
        {
            "date" : ISODate("2016-04-24T14:47:33.686+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }else{\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }\n    \n    return temp;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-04-24T14:49:26.049+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }else{\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }\n    \n    a1.clear();\n    a1.addAll(temp);\n    return a1;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 112.5
        }, 
        {
            "date" : ISODate("2016-04-24T14:54:45.802+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }else{\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }\n    \n    return temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 319.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:55:28.708+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }else{\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }\n    \n    return temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 42.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:57:08.573+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }else{\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }\n    \n    return temp;\n}", 
            "status" : "FAIL", 
            "activeTime" : 99.8
        }, 
        {
            "date" : ISODate("2016-04-24T14:59:03.479+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }else{\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }\n    \n    a1.clear();\n    a1 = temp;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 97.4
        }, 
        {
            "date" : ISODate("2016-04-24T14:59:18.648+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }else{\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }\n    \n    a1.clear();\n    a1 = temp;\n    return a1;\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.9
        }, 
        {
            "date" : ISODate("2016-04-24T15:00:18.005+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }else{\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }\n    \n    a1.clear();\n    for(int k = 0; k<temp.size(); k++){\n        a1.add(temp.get(k));\n    }\n    return a1;\n}", 
            "status" : "PASS", 
            "activeTime" : 59.4
        }
    ]
}
{ 
    "_id" : "n25yWjZGRrZxwvnZo", 
    "userId" : "57sNXhBgcWRbAj43Q", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T14:03:34.906+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:34:28.499+0000"), 
    "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input1 = console.nextLine();\n    String input = input1.toUpperCase();\n    char first;\n    char last;\n    boolean check = true;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        last = input.charAt(length-1);\n        if(first != last) {\n            System.out.println(input1 + \" is not a palindrome.\");\n            check = false;\n            break;\n        }\n        length--;\n    }\n    if(check != false) {\n        System.out.println(input1 + \" is a palindrome!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(22), 
    "totalActiveTime" : 1871.6999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:17:15.450+0000"), 
            "code" : "public static String printPalindrome(console) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    char first = '';\n    char last = '';\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        second = input.charAt(length);\n        if(first != second) {\n            return input + \"is not a palindrome.\";\n        }\n        length--;\n    }\n    return input + \"is a palindome!\";\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 838.9
        }, 
        {
            "date" : ISODate("2016-04-24T14:18:05.958+0000"), 
            "code" : "import java.util.*;\n\npublic static String printPalindrome(console) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    char first = null;\n    char last = null;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        second = input.charAt(length);\n        if(first != second) {\n            return input + \"is not a palindrome.\";\n        }\n        length--;\n    }\n    return input + \"is a palindome!\";\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 50.5
        }, 
        {
            "date" : ISODate("2016-04-24T14:19:04.273+0000"), 
            "code" : "import java.util.*;\n\npublic static String printPalindrome(console) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    char first = null;\n    char last = null;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        second = input.charAt(length);\n        if(first != second) {\n            return input + \"is not a palindrome.\";\n        }\n        length--;\n    }\n    return input + \"is a palindome!\";\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 58.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:19:48.323+0000"), 
            "code" : "public static String printPalindrome(console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    char first;\n    char last;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        second = input.charAt(length);\n        if(first != second) {\n            return input + \"is not a palindrome.\";\n        }\n        length--;\n    }\n    return input + \"is a palindome!\";\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.1
        }, 
        {
            "date" : ISODate("2016-04-24T14:20:08.013+0000"), 
            "code" : "public static String printPalindrome() {\n   \n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    char first;\n    char last;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        second = input.charAt(length);\n        if(first != second) {\n            return input + \"is not a palindrome.\";\n        }\n        length--;\n    }\n    return input + \"is a palindome!\";\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:20:28.104+0000"), 
            "code" : "public static String printPalindrome(console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    char first;\n    char last;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        second = input.charAt(length);\n        if(first != second) {\n            return input + \"is not a palindrome.\";\n        }\n        length--;\n    }\n    return input + \"is a palindome!\";\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:21:24.454+0000"), 
            "code" : "public static void printPalindrome(console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    char first;\n    char last;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        second = input.charAt(length);\n        if(first != second) {\n            System.out.println(input + \"is not a palindrome.\");\n        }\n        length--;\n    }\n    System.out.println(input + \"is a palindome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 56.3
        }, 
        {
            "date" : ISODate("2016-04-24T14:21:46.100+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    char first;\n    char last;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        second = input.charAt(length);\n        if(first != second) {\n            System.out.println(input + \"is not a palindrome.\");\n        }\n        length--;\n    }\n    System.out.println(input + \"is a palindome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.7
        }, 
        {
            "date" : ISODate("2016-04-24T14:22:26.999+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    char first;\n    char last;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        second = input.charAt(length);\n        if(first != second) {\n            System.out.println(input + \"is not a palindrome.\");\n        }\n        length--;\n    }\n    System.out.println(input + \"is a palindome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.8
        }, 
        {
            "date" : ISODate("2016-04-24T14:22:53.497+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    char first;\n    char last;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        last = input.charAt(length);\n        if(first != last) {\n            System.out.println(input + \"is not a palindrome.\");\n        }\n        length--;\n    }\n    System.out.println(input + \"is a palindome!\");\n}", 
            "status" : "FAIL", 
            "activeTime" : 26.3
        }, 
        {
            "date" : ISODate("2016-04-24T14:31:19.014+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    char first;\n    char last;\n    boolean check = true;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        last = input.charAt(length-1);\n        if(first != last) {\n            System.out.println(input + \" is not a palindrome.\");\n            check = false;\n            break;\n        }\n        length--;\n    }\n    if(check != false) {\n        System.out.println(input + \" is a palindome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 505.5
        }, 
        {
            "date" : ISODate("2016-04-24T14:32:02.621+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    char first;\n    char last;\n    boolean check = true;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        last = input.charAt(length-1);\n        if(first != last) {\n            System.out.println(input + \" is not a palindrome.\");\n            check = false;\n            break;\n        }\n        length--;\n    }\n    if(check != false) {\n        System.out.println(input + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 43.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:33:01.492+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input1 = console.nextLine();\n    String input = input1.toUppercase();\n    char first;\n    char last;\n    boolean check = true;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        last = input.charAt(length-1);\n        if(first != last) {\n            System.out.println(input + \" is not a palindrome.\");\n            check = false;\n            break;\n        }\n        length--;\n    }\n    if(check != false) {\n        System.out.println(input1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 59.1
        }, 
        {
            "date" : ISODate("2016-04-24T14:33:17.487+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input1 = console.nextLine();\n    String input = input1.toUpperCase();\n    char first;\n    char last;\n    boolean check = true;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        last = input.charAt(length-1);\n        if(first != last) {\n            System.out.println(input + \" is not a palindrome.\");\n            check = false;\n            break;\n        }\n        length--;\n    }\n    if(check != false) {\n        System.out.println(input1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.7
        }, 
        {
            "date" : ISODate("2016-04-24T14:34:06.568+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input1 = console.nextLine();\n    String input = input1.toUpperCase();\n    char first;\n    char last;\n    boolean check = true;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        last = input.charAt(length-1);\n        if(first != last) {\n            System.out.println(input + \" is not a palindrome.\");\n            check = false;\n            break;\n        }\n        length--;\n    }\n    if(check != false) {\n        System.out.println(input1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 49.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:34:28.497+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input1 = console.nextLine();\n    String input = input1.toUpperCase();\n    char first;\n    char last;\n    boolean check = true;\n    int length = input.length();\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        last = input.charAt(length-1);\n        if(first != last) {\n            System.out.println(input1 + \" is not a palindrome.\");\n            check = false;\n            break;\n        }\n        length--;\n    }\n    if(check != false) {\n        System.out.println(input1 + \" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(22)
        }
    ]
}
{ 
    "_id" : "XHHuzKZd9iBNhQ2tc", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:50:00.226+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:34:21.649+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    \n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    \n    int x2 = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    \n    int y1 = Math.min(rectA.getY(), rectB.getY());\n    \n    int y2 = Math.max(rectA.getY() + rectA.getHeight(), rectB.getY() + rectB.getHeight());\n    \n    \n    \n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 63.1, 
    "totalActiveTime" : 1233.6999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:33:18.351+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    \n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    \n    int x2 = Math.max(rectA.getX(); + rectA.getWidth(), rectB.getX(); + rectB.getWidth());\n    \n    int y1 = Math.min(rectA.getY(), rectB.getY());\n    \n    int y2 = Math.max(rectA.getY(); + rectA.getHeight(), rectB.getY(); + rectB.getHeight());\n    \n    \n    \n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1170.6
        }, 
        {
            "date" : ISODate("2016-04-24T14:34:21.648+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    \n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    \n    int x2 = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    \n    int y1 = Math.min(rectA.getY(), rectB.getY());\n    \n    int y2 = Math.max(rectA.getY() + rectA.getHeight(), rectB.getY() + rectB.getHeight());\n    \n    \n    \n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 63.1
        }
    ]
}
{ 
    "_id" : "ApzS6SrrgHZHqnfEE", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T14:29:31.129+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:41:09.989+0000"), 
    "code" : "public static Integer getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int noOfCounters = supermarket.getNumCounters();\n    int count=0;\n    \n    for(int i=0; i<noOfCounters; i++){\n        if(supermarket.getCounter(i).getNumCustomersInQueue()==0)\n            count++;\n    }\n    return count;\n    \n}", 
    "status" : "FAIL", 
    "activeTime" : NumberInt(9), 
    "totalActiveTime" : 756.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:41:00.801+0000"), 
            "code" : "public static Integer getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int noOfCounters = supermarket.getNumCounters();\n    int count;\n    \n    for(int i=0; i<noOfCounters; i++){\n        if(supermarket.getCounter(i).getNumCustomersInQueue()==0)\n            count++;\n    }\n    return count;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 747.3
        }, 
        {
            "date" : ISODate("2016-04-24T14:41:09.989+0000"), 
            "code" : "public static Integer getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int noOfCounters = supermarket.getNumCounters();\n    int count=0;\n    \n    for(int i=0; i<noOfCounters; i++){\n        if(supermarket.getCounter(i).getNumCustomersInQueue()==0)\n            count++;\n    }\n    return count;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(9)
        }
    ]
}
{ 
    "_id" : "oJKyMfWjJ3jQT46Rp", 
    "userId" : "57sNXhBgcWRbAj43Q", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T14:45:07.268+0000"), 
    "updatedAt" : ISODate("2016-04-24T14:56:47.451+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x= x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 1337.1, 
    "totalActiveTime" : 1337.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:56:47.451+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x= x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 1337.1
        }
    ]
}
{ 
    "_id" : "EK86h5tFSRDByWpuf", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T12:21:50.960+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:03:34.839+0000"), 
    "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();\n    int a2Size = a2.size();\n    \n    //ArrayList<Integer> result = new ArrayList<Integer>();\n\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        \n        a1.add(i, elem);\n    }\n    \n    return a1;\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 92.6, 
    "totalActiveTime" : 1250.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:47:28.334+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();\n    int a2Size = a2.size();\n    \n     List<Integer> result = new ArrayList<Integer>();\n\n    Iterator<Integer> iter1 = a1.iterator();\n    Iterator<Integer> iter2 = a2.iterator();\n    while (iter1.hasNext() || iter2.hasNext()) {\n        if (iter1.hasNext()) {\n            result.add(iter1.next());\n        }\n        if (iter2.hasNext()) {\n            result.add(iter2.next());\n        }\n    }\n    return result;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 404.4
        }, 
        {
            "date" : ISODate("2016-04-24T14:47:45.316+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();\n    int a2Size = a2.size();\n    \n    ArrayList<Integer> result = new ArrayList<Integer>();\n\n    Iterator<Integer> iter1 = a1.iterator();\n    Iterator<Integer> iter2 = a2.iterator();\n    while (iter1.hasNext() || iter2.hasNext()) {\n        if (iter1.hasNext()) {\n            result.add(iter1.next());\n        }\n        if (iter2.hasNext()) {\n            result.add(iter2.next());\n        }\n    }\n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.8
        }, 
        {
            "date" : ISODate("2016-04-24T14:56:56.697+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();\n    int a2Size = a2.size();\n    \n    ArrayList<Integer> result = new ArrayList<Integer>();\n\n    if(a1Size<a2Szie){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a1Size-1;j<a2.size();j++){\n            result.add(a2.get(j));\n        }\n        \n        \n    }\n    \n    if(a1Size>a2Szie){\n        for(int i=0;i<a2.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a2Size-1;j<a1.size();j++){\n            result.add(a1.get(j));\n        }\n        \n        \n    }\n    \n    if(a1Size==a2Szie){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 520.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:57:36.617+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();\n    int a2Size = a2.size();\n    \n    ArrayList<Integer> result = new ArrayList<Integer>();\n\n    if(a1Size<a2Size){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a1Size-1;j<a2.size();j++){\n            result.add(a2.get(j));\n        }\n        \n        \n    }\n    \n    if(a1Size>a2Size){\n        for(int i=0;i<a2.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a2Size-1;j<a1.size();j++){\n            result.add(a1.get(j));\n        }\n        \n        \n    }\n    \n    if(a1Size==a2Size){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(40)
        }, 
        {
            "date" : ISODate("2016-04-24T14:59:13.035+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();\n    int a2Size = a2.size();\n    \n    ArrayList<Integer> result = new ArrayList<Integer>();\n\n    if(a1Size<a2Size){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a1Size;j<a2.size();j++){\n            result.add(a2.get(j));\n        }\n        \n        \n    }\n    \n    if(a1Size>a2Size){\n        for(int i=0;i<a2.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a2Size;j<a1.size();j++){\n            result.add(a1.get(j));\n        }\n        \n        \n    }\n    \n    if(a1Size==a2Size){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 96.3
        }, 
        {
            "date" : ISODate("2016-04-24T15:00:11.247+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();\n    int a2Size = a2.size();\n    \n    ArrayList<Integer> result = new ArrayList<Integer>();\n\n    if(a1Size<a2Size){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a1Size;j<a2.size();j++){\n            result.add(a2.get(j));\n        }\n        \n        \n    }else if(a1Size>a2Size){\n        for(int i=0;i<a2.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a2Size;j<a1.size();j++){\n            result.add(a1.get(j));\n        }\n        \n        \n    }else if(a1Size==a2Size){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 58.2
        }, 
        {
            "date" : ISODate("2016-04-24T15:00:33.312+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();\n    int a2Size = a2.size();\n    \n    ArrayList<Integer> result = new ArrayList<Integer>();\n\n    if(a1Size<a2Size){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a1Size;j<a2.size();j++){\n            result.add(a2.get(j));\n        }\n        \n        \n    }else if(a1Size>a2Size){\n        for(int i=0;i<a2.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n        \n        for(int j=a2Size;j<a1.size();j++){\n            result.add(a1.get(j));\n        }\n        \n        \n    }else if(a1Size==a2Size){\n        for(int i=0;i<a1.size();i++){\n           result.add(a1.get(i));\n           result.add(a2.get(i));\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 21.9
        }, 
        {
            "date" : ISODate("2016-04-24T15:03:34.838+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();\n    int a2Size = a2.size();\n    \n    //ArrayList<Integer> result = new ArrayList<Integer>();\n\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        \n        a1.add(i, elem);\n    }\n    \n    return a1;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 92.6
        }
    ]
}
{ 
    "_id" : "r9e67pY49w4Bdcgqy", 
    "userId" : "BnQfkFwW6XZvrKmrn", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T14:33:11.566+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:40:55.806+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String toString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 25.5, 
    "totalActiveTime" : 4281.300000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:39:20.114+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\"Rectangle[x=1,y=2,width=3,height=4]\"\n    public String getString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1688.8
        }, 
        {
            "date" : ISODate("2016-04-24T14:39:39.499+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String getString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height);\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.2
        }, 
        {
            "date" : ISODate("2016-04-24T14:41:26.005+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String getString(){\n        return(\"Rectangle[x=\"+Rectangle.getX()+\",y=\"+Rectangle.getY()+\",width=\"+Rectangle.getWidth()+\",height=\"+Rectangle.getHeight());\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 106.7
        }, 
        {
            "date" : ISODate("2016-04-24T15:06:53.362+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String getString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height);\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 1524.9
        }, 
        {
            "date" : ISODate("2016-04-24T15:07:38.564+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String getString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 45.3
        }, 
        {
            "date" : ISODate("2016-04-24T15:07:48.102+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String getString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.4
        }, 
        {
            "date" : ISODate("2016-04-24T15:19:16.690+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String getString(){\n        return(\"Rectangle[x=\"+this.x+\",y=\"+this.y+\",width=\"+this.width+\",height=\"+this.height+\"]\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 688.7
        }, 
        {
            "date" : ISODate("2016-04-24T15:40:30.410+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String getString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 172.8
        }, 
        {
            "date" : ISODate("2016-04-24T15:40:55.806+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String toString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 25.5
        }
    ]
}
{ 
    "_id" : "FR6AmzkiKWao96LW8", 
    "userId" : "zna4wuKiLGvFRJriv", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T10:51:32.792+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:22:55.205+0000"), 
    "code" : "public static Rectangle union（Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y= rectA.getY();\n    int width;\n    int height;\n    \n    if(rectA.getX()>rectB.getX()){\n        x= rectB.getX();\n    }\n    if(rectA.getY()>rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if( (rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth()) ){\n       width = rectA.getX()+ rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+ rectB.getWidth-x;\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = rectA.getX()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getX()+rectB.getHeight()-y;\n    }\n    \n    Rectangle result = new Rectangle(x, y, width, height)\n    return result;\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 105.1, 
    "totalActiveTime" : 3255.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T14:37:34.389+0000"), 
            "code" : "public static Rectangle union（Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y= rectA.getY();\n    int width;\n    int height;\n    if(rectA.getX()>rectB.getX()){\n        x= rectB.getX();\n    }\n    if(rectB.getY()>rectB.getY()){\n        y = rectB.getY();\n    }\n    if((rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth())){\n       width = rectA.getX()+ rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+ rectB.getWidth-x;\n    }\n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight()){\n        height = rectA.getX()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getX()+rectB.getHeight()-y;\n    }\n    Rectangle result = new Rectangle(x, y, width, height)\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(1488)
        }, 
        {
            "date" : ISODate("2016-04-24T14:43:16.835+0000"), 
            "code" : "public static Rectangle union（Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y= rectA.getY();\n    int width;\n    int height;\n    if(rectA.getX()>rectB.getX()){\n        x= rectB.getX();\n    }\n    if(rectB.getY()>rectB.getY()){\n        y = rectB.getY();\n    }\n    if( (rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth()) ){\n       width = rectA.getX()+ rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+ rectB.getWidth-x;\n    }\n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = rectA.getX()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getX()+rectB.getHeight()-y;\n    }\n    Rectangle result = new Rectangle(x, y, width, height)\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 342.4
        }, 
        {
            "date" : ISODate("2016-04-24T14:48:47.260+0000"), 
            "code" : "public static Rectangle union（Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y= rectA.getY();\n    int width;\n    int height;\n    if(rectA.getX()>rectB.getX()){\n        x= rectB.getX();\n    }\n    if(rectB.getY()>rectB.getY()){\n        y = rectB.getY();\n    }\n    if( (rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth()) ){\n       width = rectA.getX()+ rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+ rectB.getWidth-x;\n    }\n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = rectA.getX()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getX()+rectB.getHeight()-y;\n    }\n    Rectangle result = new Rectangle(x, y, width, height)\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 183.8
        }, 
        {
            "date" : ISODate("2016-04-24T15:08:35.622+0000"), 
            "code" : "public static Rectangle union（Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y= rectA.getY();\n    int width;\n    int height;\n    if(rectA.getX()>rectB.getX()){\n        x= rectB.getX();\n    }\n    if(rectB.getY()>rectB.getY()){\n        y = rectB.getY();\n    }\n    if( (rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth()) ){\n       width = rectA.getX()+ rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+ rectB.getWidth-x;\n    }\n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = rectA.getX()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getX()+rectB.getHeight()-y;\n    }\n    Rectangle result = new Rectangle(x, y, width, height)\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 418.2
        }, 
        {
            "date" : ISODate("2016-04-24T15:15:04.567+0000"), 
            "code" : "public static Rectangle union（Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y= rectA.getY();\n    int width;\n    int height;\n    if(rectA.getX()>rectB.getX()){\n        x= rectB.getX();\n    }\n    if(rectA.getY()>rectB.getY()){\n        y = rectB.getY();\n    }\n    if( (rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth()) ){\n       width = rectA.getX()+ rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+ rectB.getWidth-x;\n    }\n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = rectA.getX()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getX()+rectB.getHeight()-y;\n    }\n    Rectangle result = new Rectangle(x, y, width, height)\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 388.7
        }, 
        {
            "date" : ISODate("2016-04-24T15:20:33.489+0000"), 
            "code" : "public static Rectangle union（Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y= rectA.getY();\n    int width;\n    int height;\n    if(rectA.getX()>rectB.getX()){\n        x= rectB.getX();\n    }\n    if(rectA.getY()>rectB.getY()){\n        y = rectB.getY();\n    }\n    if( (rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth()) ){\n       width = rectA.getX()+ rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+ rectB.getWidth-x;\n    }\n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = rectA.getX()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getX()+rectB.getHeight()-y;\n    }\n    Rectangle result = new Rectangle(x, y, width, height)\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(329)
        }, 
        {
            "date" : ISODate("2016-04-24T15:22:55.205+0000"), 
            "code" : "public static Rectangle union（Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y= rectA.getY();\n    int width;\n    int height;\n    \n    if(rectA.getX()>rectB.getX()){\n        x= rectB.getX();\n    }\n    if(rectA.getY()>rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if( (rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth()) ){\n       width = rectA.getX()+ rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+ rectB.getWidth-x;\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = rectA.getX()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getX()+rectB.getHeight()-y;\n    }\n    \n    Rectangle result = new Rectangle(x, y, width, height)\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 105.1
        }
    ]
}
{ 
    "_id" : "T4hiW2WuSdkWeeTeY", 
    "userId" : "gdDMJZWTCmRwtc6m5", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T15:14:21.690+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:17:24.098+0000"), 
    "code" : "public static String parseEmail (String email) {\n    \n    int position = email.indexOf('@');\n    String result = email.substring(0, position);\n    \n    return result;\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 140.9, 
    "totalActiveTime" : 140.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T15:17:24.097+0000"), 
            "code" : "public static String parseEmail (String email) {\n    \n    int position = email.indexOf('@');\n    String result = email.substring(0, position);\n    \n    return result;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 140.9
        }
    ]
}
{ 
    "_id" : "4tCHspXcLurDLNpAA", 
    "userId" : "ukRzCFySZXsgLobtY", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:41:24.481+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:20:34.954+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //find min x-coordinate\n    int x = Math.min(rectA.getX(), rectB.getX());\n    //find min y-coordinate\n    int y = Math.min(rectA.getY(), rectB.getY());\n    //get largest width + x-coord\n    int width = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    //get largest height + y-coord\n    int height = Math.max(rectA.getY() + rectA.getHeight(), rectB.getY() + rectB.getHeight());\n    \n    //create new rectangle\n    return new Rectangle(x,y,width-x,height-y);\n}", 
    "status" : "PASS", 
    "activeTime" : 1063.5, 
    "totalActiveTime" : 1063.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T15:20:34.953+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //find min x-coordinate\n    int x = Math.min(rectA.getX(), rectB.getX());\n    //find min y-coordinate\n    int y = Math.min(rectA.getY(), rectB.getY());\n    //get largest width + x-coord\n    int width = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    //get largest height + y-coord\n    int height = Math.max(rectA.getY() + rectA.getHeight(), rectB.getY() + rectB.getHeight());\n    \n    //create new rectangle\n    return new Rectangle(x,y,width-x,height-y);\n}", 
            "status" : "PASS", 
            "activeTime" : 1063.5
        }
    ]
}
{ 
    "_id" : "r5KcedxzPy4aHpt2H", 
    "userId" : "BnQfkFwW6XZvrKmrn", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T14:32:58.123+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:29:35.023+0000"), 
    "code" : "public static ArrayList interleave(ArrayList a1,ArrayList a2){\n    ArrayList<String> aList=new ArrayList<String>();\n    for(int i=0;i<a1.size();i++){\n        aList.add(a1.get(i)+\"\");\n        for(int q=i;q<a2.size();q++){\n            aList.add(a2.get(q)+\"\");\n            q=a2.size();\n        }\n    }\n    return aList;\n}", 
    "status" : "FAIL", 
    "activeTime" : 35.7, 
    "totalActiveTime" : 617.9000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T15:27:25.227+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1,ArrayList a2){\n    ArrayList<int> aList=new ArrayList<int>();\n    for(int i=0;i<a1.length();i++){\n        aList.add(a1.get(i));\n        for(int q=i;q<a2.length();q++){\n            aList.add(a2.get(q));\n            q=a2.length();\n        }\n    }\n    return aList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 488.4
        }, 
        {
            "date" : ISODate("2016-04-24T15:27:48.977+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1,ArrayList a2){\n    ArrayList<Int> aList=new ArrayList<Int>();\n    for(int i=0;i<a1.length();i++){\n        aList.add(a1.get(i));\n        for(int q=i;q<a2.length();q++){\n            aList.add(a2.get(q));\n            q=a2.length();\n        }\n    }\n    return aList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.7
        }, 
        {
            "date" : ISODate("2016-04-24T15:28:01.996+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1,ArrayList a2){\n    ArrayList aList=new ArrayList();\n    for(int i=0;i<a1.length();i++){\n        aList.add(a1.get(i));\n        for(int q=i;q<a2.length();q++){\n            aList.add(a2.get(q));\n            q=a2.length();\n        }\n    }\n    return aList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.8
        }, 
        {
            "date" : ISODate("2016-04-24T15:28:16.878+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1,ArrayList a2){\n    ArrayList aList=new ArrayList();\n    for(int i=0;i<a1.length();i++){\n        aList.add(a1.get(i));\n        for(int q=i;q<a2.length();q++){\n            aList.add(a2.get(q));\n            q=a2.length();\n        }\n    }\n    return aList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-04-24T15:28:37.672+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1,ArrayList a2){\n    ArrayList aList=new ArrayList();\n    for(int i=0;i<a1.size();i++){\n        aList.add(a1.get(i));\n        for(int q=i;q<a2.size();q++){\n            aList.add(a2.get(q));\n            q=a2.size();\n        }\n    }\n    return aList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.6
        }, 
        {
            "date" : ISODate("2016-04-24T15:28:45.473+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1,ArrayList a2){\n    ArrayList aList=new ArrayList();\n    for(int i=0;i<a1.size();i++){\n        aList.add(a1.get(i));\n        for(int q=i;q<a2.size();q++){\n            aList.add(a2.get(q));\n            q=a2.size();\n        }\n    }\n    return aList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.6
        }, 
        {
            "date" : ISODate("2016-04-24T15:28:59.109+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1,ArrayList a2){\n    ArrayList<String> aList=new ArrayList<String>();\n    for(int i=0;i<a1.size();i++){\n        aList.add(a1.get(i));\n        for(int q=i;q<a2.size();q++){\n            aList.add(a2.get(q));\n            q=a2.size();\n        }\n    }\n    return aList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-24T15:29:35.023+0000"), 
            "code" : "public static ArrayList interleave(ArrayList a1,ArrayList a2){\n    ArrayList<String> aList=new ArrayList<String>();\n    for(int i=0;i<a1.size();i++){\n        aList.add(a1.get(i)+\"\");\n        for(int q=i;q<a2.size();q++){\n            aList.add(a2.get(q)+\"\");\n            q=a2.size();\n        }\n    }\n    return aList;\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.7
        }
    ]
}
{ 
    "_id" : "3RDcjJwsNun5eLivu", 
    "userId" : "gdDMJZWTCmRwtc6m5", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T15:17:39.651+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:35:07.546+0000"), 
    "status" : "PASS", 
    "activeTime" : NumberInt(30), 
    "totalActiveTime" : 995.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T15:29:35.587+0000"), 
            "code" : "import java.util.*;\n\npublic static void printPalindrome (Scanner sc) {\n    \n    System.out.print(\"Type one or more words: \");\n    String word = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    int length = word.length();\n    int midway = (length/2) + 1;\n    \n    for (int i = 0 ; i < midway ; i++) {\n        \n        isPalindrome = (word.charAt(i) == word.charAt(length - 1 - i));\n        if (!isPalindrome) {\n            break;\n        }\n        \n    }\n    \n    if (isPalindrome) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 678.5
        }, 
        {
            "date" : ISODate("2016-04-24T15:30:00.542+0000"), 
            "code" : "public static void printPalindrome (Scanner sc) {\n    \n    System.out.print(\"Type one or more words: \");\n    String word = sc.nextLine();\n    boolean isPalindrome = true;\n    \n    int length = word.length();\n    int midway = (length/2) + 1;\n    \n    for (int i = 0 ; i < midway ; i++) {\n        \n        isPalindrome = (word.charAt(i) == word.charAt(length - 1 - i));\n        if (!isPalindrome) {\n            break;\n        }\n        \n    }\n    \n    if (isPalindrome) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 24.6
        }, 
        {
            "date" : ISODate("2016-04-24T15:30:45.948+0000"), 
            "code" : "public static void printPalindrome (Scanner sc) {\n    \n    System.out.print(\"Type one or more words: \");\n    String word = sc.nextLine();\n    word = word.toLowerCase();\n    boolean isPalindrome = true;\n    \n    int length = word.length();\n    int midway = (length/2) + 1;\n    \n    for (int i = 0 ; i < midway ; i++) {\n        \n        isPalindrome = (word.charAt(i) == word.charAt(length - 1 - i));\n        if (!isPalindrome) {\n            break;\n        }\n        \n    }\n    \n    if (isPalindrome) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 45.6
        }, 
        {
            "date" : ISODate("2016-04-24T15:32:48.523+0000"), 
            "code" : "public static void printPalindrome (Scanner sc) {\n    \n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    word = words.toLowerCase();\n    boolean isPalindrome = true;\n    \n    int length = word.length();\n    int midway = (length/2) + 1;\n    \n    for (int i = 0 ; i < midway ; i++) {\n        \n        isPalindrome = (word.charAt(i) == word.charAt(length - 1 - i));\n        if (!isPalindrome) {\n            break;\n        }\n        \n    }\n    \n    if (isPalindrome) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 111.5
        }, 
        {
            "date" : ISODate("2016-04-24T15:32:59.152+0000"), 
            "code" : "public static void printPalindrome (Scanner sc) {\n    \n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    String word = words.toLowerCase();\n    boolean isPalindrome = true;\n    \n    int length = word.length();\n    int midway = (length/2) + 1;\n    \n    for (int i = 0 ; i < midway ; i++) {\n        \n        isPalindrome = (word.charAt(i) == word.charAt(length - 1 - i));\n        if (!isPalindrome) {\n            break;\n        }\n        \n    }\n    \n    if (isPalindrome) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 10.5
        }, 
        {
            "date" : ISODate("2016-04-24T15:34:22.553+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 79.8
        }, 
        {
            "date" : ISODate("2016-04-24T15:34:37.567+0000"), 
            "code" : "public static void printPalindrome (Scanner sc) {\n    \n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    String word = words.toLowerCase();\n    boolean isPalindrome = true;\n    \n    int length = word.length();\n    int midway = (length/2) + 1;\n    \n    for (int i = 0 ; i < midway ; i++) {\n        \n        isPalindrome = (word.charAt(i) == word.charAt(length - 1 - i));\n        if (!isPalindrome) {\n            break;\n        }\n        \n    }\n    \n    if (isPalindrome) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-04-24T15:35:07.545+0000"), 
            "code" : "public static void printPalindrome (Scanner sc) {\n    \n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    String word = words.toLowerCase();\n    boolean isPalindrome = true;\n    \n    int length = word.length();\n    int midway = (length/2) + 1;\n    \n    for (int i = 0 ; i < midway ; i++) {\n        \n        isPalindrome = (word.charAt(i) == word.charAt(length - 1 - i));\n        if (!isPalindrome) {\n            break;\n        }\n        \n    }\n    \n    if (isPalindrome) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(30)
        }
    ], 
    "code" : "public static void printPalindrome (Scanner sc) {\n    \n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    String word = words.toLowerCase();\n    boolean isPalindrome = true;\n    \n    int length = word.length();\n    int midway = (length/2) + 1;\n    \n    for (int i = 0 ; i < midway ; i++) {\n        \n        isPalindrome = (word.charAt(i) == word.charAt(length - 1 - i));\n        if (!isPalindrome) {\n            break;\n        }\n        \n    }\n    \n    if (isPalindrome) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n    \n    \n}"
}
{ 
    "_id" : "YTZLXMTi6o2xzxrAA", 
    "userId" : "BnQfkFwW6XZvrKmrn", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T14:11:18.347+0000"), 
    "updatedAt" : ISODate("2016-04-24T15:37:37.179+0000"), 
    "code" : "import java.util.*;\n    public static void main(String[])args){\n    Scanner sc=new Scanner(System.in);\n    System.out.print(\"enter word\");\n    String console=sc.nextLine();\n    printPalindrome(console);\n    }\npublic static String printPalindrome(Scanner console){\n    \n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){\n            counter++;\n        }\n    }\n    if(counter==(console.length()/2){\n        return \"is a palindrome!\";\n    }\n    else{\n        return \"is not a palindrome\";\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 21.6, 
    "totalActiveTime" : 469.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T15:32:13.190+0000"), 
            "code" : "public static String printPalindrome(console){\n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){\n            counter++;\n        }\n    }\n    if(counter==(console.length()\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 158.3
        }, 
        {
            "date" : ISODate("2016-04-24T15:34:58.946+0000"), 
            "code" : "import java.util.*;\npublic static String printPalindrome(){\n    Scanner sc=new Scanner(System.in);\n    System.out.print(\"enter word\");\n    String console=sc.nextLine();\n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){\n            counter++;\n        }\n    }\n    if(counter==(console.length()/2){\n        return \"is a palindrome!\";\n    }\n    else{\n        \"is not a palindrome\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 153.2
        }, 
        {
            "date" : ISODate("2016-04-24T15:35:13.314+0000"), 
            "code" : "import java.util.*;\npublic static String printPalindrome(){\n    Scanner sc=new Scanner(System.in);\n    System.out.print(\"enter word\");\n    String console=sc.nextLine();\n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){\n            counter++;\n        }\n    }\n    if(counter==(console.length()/2){\n        return \"is a palindrome!\";\n    }\n    else{\n        return \"is not a palindrome\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-04-24T15:35:17.005+0000"), 
            "code" : "import java.util.*;\npublic static String printPalindrome(){\n    Scanner sc=new Scanner(System.in);\n    System.out.print(\"enter word\");\n    String console=sc.nextLine();\n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){\n            counter++;\n        }\n    }\n    if(counter==(console.length()/2){\n        return \"is a palindrome!\";\n    }\n    else{\n        return \"is not a palindrome\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.6
        }, 
        {
            "date" : ISODate("2016-04-24T15:36:04.887+0000"), 
            "code" : "import java.util.*;\n    Scanner sc=new Scanner(System.in);\n    System.out.print(\"enter word\");\n    String console=sc.nextLine();\npublic static String printPalindrome(console){\n    \n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){\n            counter++;\n        }\n    }\n    if(counter==(console.length()/2){\n        return \"is a palindrome!\";\n    }\n    else{\n        return \"is not a palindrome\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.9
        }, 
        {
            "date" : ISODate("2016-04-24T15:36:57.988+0000"), 
            "code" : "import java.util.*;\n    public static void main(String[])args){\n    Scanner sc=new Scanner(System.in);\n    System.out.print(\"enter word\");\n    String console=sc.nextLine();\n    }\npublic static String printPalindrome(console){\n    \n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){\n            counter++;\n        }\n    }\n    if(counter==(console.length()/2){\n        return \"is a palindrome!\";\n    }\n    else{\n        return \"is not a palindrome\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 53.2
        }, 
        {
            "date" : ISODate("2016-04-24T15:37:15.704+0000"), 
            "code" : "import java.util.*;\n    public static void main(String[])args){\n    Scanner sc=new Scanner(System.in);\n    System.out.print(\"enter word\");\n    String console=sc.nextLine();\n    printPalindrome(console);\n    }\npublic static String printPalindrome(String console){\n    \n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){\n            counter++;\n        }\n    }\n    if(counter==(console.length()/2){\n        return \"is a palindrome!\";\n    }\n    else{\n        return \"is not a palindrome\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-04-24T15:37:37.178+0000"), 
            "code" : "import java.util.*;\n    public static void main(String[])args){\n    Scanner sc=new Scanner(System.in);\n    System.out.print(\"enter word\");\n    String console=sc.nextLine();\n    printPalindrome(console);\n    }\npublic static String printPalindrome(Scanner console){\n    \n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){\n            counter++;\n        }\n    }\n    if(counter==(console.length()/2){\n        return \"is a palindrome!\";\n    }\n    else{\n        return \"is not a palindrome\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.6
        }
    ]
}
{ 
    "_id" : "FuFpkuLqPr28dxqHw", 
    "userId" : "gdDMJZWTCmRwtc6m5", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T15:35:11.242+0000"), 
    "updatedAt" : ISODate("2016-04-24T17:01:05.118+0000"), 
    "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        \n    ArrayList<Integer> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n    \n            int store = a1.get(i);\n            int number = a2.get(i);\n            result.add(store);\n            result.add(number);\n                \n        }\n            \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n            \n    }\n        \n    if (a2.size() > a1.size()) {\n            \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            int number = a2.get(i);\n            result.add(store);\n            result.add(number);\n                \n        }\n            \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n                \n            int num = a2.get(j);\n            result.add(num);\n                \n        }\n    }\n        \n    return result;\n        \n}", 
    "status" : "FAIL", 
    "activeTime" : 298.7, 
    "totalActiveTime" : 1394.6999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T15:43:45.458+0000"), 
            "code" : "public static ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2) {\n    \n    ArrayList<int> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            store = a2.get(i);\n            result.add(store);\n            \n        }\n        \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n        \n    } else {\n        \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            store = a2.get(i);\n            result.add(store);\n            \n        }\n        \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n            \n            int num = a2.get(j);\n            result.add(num);\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 517.5
        }, 
        {
            "date" : ISODate("2016-04-24T15:44:10.053+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<int> interleave (ArrayList<int> a1, ArrayList<int> a2) {\n    \n    ArrayList<int> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            store = a2.get(i);\n            result.add(store);\n            \n        }\n        \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n        \n    } else {\n        \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            store = a2.get(i);\n            result.add(store);\n            \n        }\n        \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n            \n            int num = a2.get(j);\n            result.add(num);\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.6
        }, 
        {
            "date" : ISODate("2016-04-24T15:45:01.983+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            store = a2.get(i);\n            result.add(store);\n            \n        }\n        \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n        \n    } else {\n        \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            store = a2.get(i);\n            result.add(store);\n            \n        }\n        \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n            \n            int num = a2.get(j);\n            result.add(num);\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.8
        }, 
        {
            "date" : ISODate("2016-04-24T15:50:28.240+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            store = a2.get(i);\n            result.add(store);\n            \n        }\n        \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n        \n    } else {\n        \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            store = a2.get(i);\n            result.add(store);\n            \n        }\n        \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n            \n            int num = a2.get(j);\n            result.add(num);\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 324.2
        }, 
        {
            "date" : ISODate("2016-04-24T15:51:29.645+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            int number = a2.get(i);\n            result.add(number);\n            \n        }\n        \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n        \n    } else {\n        \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            int number = a2.get(i);\n            result.add(number);\n            \n        }\n        \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n            \n            int num = a2.get(j);\n            result.add(num);\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 61.5
        }, 
        {
            "date" : ISODate("2016-04-24T15:53:21.615+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            int number = a2.get(i);\n            result.add(number);\n            \n        }\n        \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n        \n    }\n    \n    if (a2.size() > a1.size) {\n        \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            int number = a2.get(i);\n            result.add(number);\n            \n        }\n        \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n            \n            int num = a2.get(j);\n            result.add(num);\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 112.1
        }, 
        {
            "date" : ISODate("2016-04-24T15:53:34.915+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            int number = a2.get(i);\n            result.add(number);\n            \n        }\n        \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n        \n    }\n    \n    if (a2.size() > a1.size()) {\n        \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            int number = a2.get(i);\n            result.add(number);\n            \n        }\n        \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n            \n            int num = a2.get(j);\n            result.add(num);\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(13)
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:35.478+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            int number = a2.get(i);\n            result.add(number);\n            \n        }\n        \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n        \n    }\n    \n    if (a2.size() > a1.size()) {\n        \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            result.add(store);\n            int number = a2.get(i);\n            result.add(number);\n            \n        }\n        \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n            \n            int num = a2.get(j);\n            result.add(num);\n            \n        }\n    }\n    \n    return result;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.3
        }, 
        {
            "date" : ISODate("2016-04-24T17:01:05.118+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        \n    ArrayList<Integer> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n    \n            int store = a1.get(i);\n            int number = a2.get(i);\n            result.add(store);\n            result.add(number);\n                \n        }\n            \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n            \n    }\n        \n    if (a2.size() > a1.size()) {\n            \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            int number = a2.get(i);\n            result.add(store);\n            result.add(number);\n                \n        }\n            \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n                \n            int num = a2.get(j);\n            result.add(num);\n                \n        }\n    }\n        \n    return result;\n        \n}", 
            "status" : "FAIL", 
            "activeTime" : 298.7
        }
    ]
}
{ 
    "_id" : "97B7tCyZcuoAfWbrG", 
    "userId" : "gdDMJZWTCmRwtc6m5", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T16:01:04.057+0000"), 
    "updatedAt" : ISODate("2016-04-24T16:07:46.271+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (int x, int y, int width, int height) {\n        \n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 21.8, 
    "totalActiveTime" : 552.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T16:07:20.361+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (x, y, width, height) {\n        \n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(531)
        }, 
        {
            "date" : ISODate("2016-04-24T16:07:46.271+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (int x, int y, int width, int height) {\n        \n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 21.8
        }
    ]
}
{ 
    "_id" : "kJNG8TCS65iccu5tz", 
    "userId" : "tBRTnCWLCp63vtcx8", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T05:06:49.048+0000"), 
    "updatedAt" : ISODate("2016-04-24T16:51:38.058+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    //Alternative method using add(int index, Element E):\n    /*\n    int a1Size = a1.size();\n    int min = Math.min(a1.size(), a2.size());\n    int j = 0;\n    for (int i = 1; i < min * 2; i += 2) {\n        Integer num = null;\n        num = a2.get(j);\n        a1.add(i, num);\n        j++;\n    }\n    if (a1Size < a2.size()) {\n        for (int i = j; i < a2.size(); i++) {\n            a1.add(a2.get(i));\n        }\n    }\n    */\n    //Method creating a new arraylist\n    ArrayList<Integer> temp = new ArrayList<>();\n    for (int i = 0; i < Math.min(a1.size(), a2.size()); i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    if (a1.size() > a2.size()) {\n        for (int i = a2.size(); i < a1.size(); i++) {\n            temp.add(a1.get(i));\n        }\n    } else if (a1.size() < a2.size()) {\n        for (int i = a1.size(); i < a2.size(); i++) {\n            temp.add(a2.get(i));\n        }\n    }\n    a1.clear();\n    for (Integer num: temp) {\n        a1.add(num);\n    }\n}\n// Good job!", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 326.8, 
    "totalActiveTime" : 1819.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:25:41.365+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<>();\n    for (int i = 0; i < Math.min(a1.size(), a2.size()); i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    if (a1.size() > a2.size()) {\n        for (int i = a2.size(); i < a1.size(); i++) {\n            temp.add(a1.get(i));\n        }\n    } else if (a1.size() < a2.size()) {\n        for (int i = a1.size(); i < a2.size(); i++) {\n            temp.add(a2.get(i));\n        }\n    }\n    a1.clear();\n    for (Integer num: temp) {\n        a1.add(num);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 650.1
        }, 
        {
            "date" : ISODate("2016-04-24T16:07:44.164+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int a1Size = a1.size();\n    for (int i = 1; i < Math.min(a1.size(), a2.size()) * 2; i += 2) {\n        Integer num = null;\n        for (int j = 0; j < Math.min(a1.size(), a2.size()); i++) {\n            num = a2.get(j);\n            a1.add(i, num);\n        }\n    }\n    if (a1Size < a2.size()) {\n        for (int i = a1Size; i < a2.size(); i++) {\n            a1.add(a2.get(i));\n        }\n    }\n    /*\n    ArrayList<Integer> temp = new ArrayList<>(); \n    for (int i = 0; i < Math.min(a1.size(), a2.size()); i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    if (a1.size() > a2.size()) {\n        for (int i = a2.size(); i < a1.size(); i++) {\n            temp.add(a1.get(i));\n        }\n    } else if (a1.size() < a2.size()) {\n        for (int i = a1.size(); i < a2.size(); i++) {\n            temp.add(a2.get(i));\n        }\n    }\n    a1.clear();\n    for (Integer num: temp) {\n        a1.add(num);\n    }\n    */\n}\n// Good job!", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 378.1
        }, 
        {
            "date" : ISODate("2016-04-24T16:09:39.495+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int a1Size = a1.size();\n    for (int i = 1; i < Math.min(a1.size(), a2.size()) * 2; i += 2) {\n        Integer num = null;\n        for (int j = 0; j < Math.min(a1.size(), a2.size()); i++) {\n            num = a2.get(j);\n            a1.add(i, num);\n        }\n    }\n    if (a1Size < a2.size()) {\n        for (int i = a1Size; i < a2.size(); i++) {\n            a1.add(a2.get(i));\n        }\n    }\n    /*\n    ArrayList<Integer> temp = new ArrayList<>(); \n    for (int i = 0; i < Math.min(a1.size(), a2.size()); i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    if (a1.size() > a2.size()) {\n        for (int i = a2.size(); i < a1.size(); i++) {\n            temp.add(a1.get(i));\n        }\n    } else if (a1.size() < a2.size()) {\n        for (int i = a1.size(); i < a2.size(); i++) {\n            temp.add(a2.get(i));\n        }\n    }\n    a1.clear();\n    for (Integer num: temp) {\n        a1.add(num);\n    }\n    */\n}\n// Good job!", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 112.1
        }, 
        {
            "date" : ISODate("2016-04-24T16:10:05.022+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int a1Size = a1.size();\n    for (int i = 1; i < Math.min(a1.size(), a2.size()) * 2; i += 2) {\n        Integer num = null;\n        for (int j = 0; j < Math.min(a1.size(), a2.size()); i++) {\n            num = a2.get(j);\n            a1.add(i, num);\n        }\n    }\n    if (a1Size < a2.size()) {\n        for (int i = a1Size; i < a2.size(); i++) {\n            a1.add(a2.get(i));\n        }\n    }\n}\n    /*\n    ArrayList<Integer> temp = new ArrayList<>(); \n    for (int i = 0; i < Math.min(a1.size(), a2.size()); i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    if (a1.size() > a2.size()) {\n        for (int i = a2.size(); i < a1.size(); i++) {\n            temp.add(a1.get(i));\n        }\n    } else if (a1.size() < a2.size()) {\n        for (int i = a1.size(); i < a2.size(); i++) {\n            temp.add(a2.get(i));\n        }\n    }\n    a1.clear();\n    for (Integer num: temp) {\n        a1.add(num);\n    }\n    */\n// Good job!", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.4
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:37.667+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    //Alternative method using add(int index, Element E):\n    /*\n    int a1Size = a1.size();\n    int min = Math.min(a1.size(), a2.size());\n    int j = 0;\n    for (int i = 1; i < min * 2; i += 2) {\n        Integer num = null;\n        num = a2.get(j);\n        a1.add(i, num);\n        j++;\n    }\n    if (a1Size < a2.size()) {\n        for (int i = j; i < a2.size(); i++) {\n            a1.add(a2.get(i));\n        }\n    }\n    */\n    //Method creating a new arraylist\n    ArrayList<Integer> temp = new ArrayList<>();\n    for (int i = 0; i < Math.min(a1.size(), a2.size()); i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    if (a1.size() > a2.size()) {\n        for (int i = a2.size(); i < a1.size(); i++) {\n            temp.add(a1.get(i));\n        }\n    } else if (a1.size() < a2.size()) {\n        for (int i = a1.size(); i < a2.size(); i++) {\n            temp.add(a2.get(i));\n        }\n    }\n    a1.clear();\n    for (Integer num: temp) {\n        a1.add(num);\n    }\n}\n// Good job!", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 326.8
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:38.058+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    //Alternative method using add(int index, Element E):\n    /*\n    int a1Size = a1.size();\n    int min = Math.min(a1.size(), a2.size());\n    int j = 0;\n    for (int i = 1; i < min * 2; i += 2) {\n        Integer num = null;\n        num = a2.get(j);\n        a1.add(i, num);\n        j++;\n    }\n    if (a1Size < a2.size()) {\n        for (int i = j; i < a2.size(); i++) {\n            a1.add(a2.get(i));\n        }\n    }\n    */\n    //Method creating a new arraylist\n    ArrayList<Integer> temp = new ArrayList<>();\n    for (int i = 0; i < Math.min(a1.size(), a2.size()); i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    if (a1.size() > a2.size()) {\n        for (int i = a2.size(); i < a1.size(); i++) {\n            temp.add(a1.get(i));\n        }\n    } else if (a1.size() < a2.size()) {\n        for (int i = a1.size(); i < a2.size(); i++) {\n            temp.add(a2.get(i));\n        }\n    }\n    a1.clear();\n    for (Integer num: temp) {\n        a1.add(num);\n    }\n}\n// Good job!", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 326.8
        }
    ]
}
{ 
    "_id" : "Qm2Li2AexXAsXK3ct", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T16:48:41.909+0000"), 
    "updatedAt" : ISODate("2016-04-25T01:54:33.943+0000"), 
    "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = false; \n     \n    do {\n        if(input.charAt(start) == input.charAt(length)){ // what happens when start > input.length()-1 or when length < 0? \n            start++; \n            length--;\n            condition = true; \n             \n        } else { \n            condition = false; // assignment uses single \"=\"\n            System.out.println(input + \" is not a palindrome.\");\n        }    \n    }while(condition); \n            \n       System.out.println(input + \" is a palindrome.\");\n   \n}", 
    "status" : "FAIL", 
    "activeTime" : 517.2, 
    "totalActiveTime" : 1432.7000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T16:51:40.356+0000"), 
            "code" : "public void printPalindrome(Scanner c){\n    c = new Scanner(); \n    system.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 256.6
        }, 
        {
            "date" : ISODate("2016-04-23T16:51:49.142+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    c = new Scanner(); \n    system.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.8
        }, 
        {
            "date" : ISODate("2016-04-24T09:55:28.100+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    system.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n     \n    while(length > start){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n        }    \n        system.out.println(input + \" is not a palindrome. \")\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 306.1
        }, 
        {
            "date" : ISODate("2016-04-24T16:03:25.078+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n        }    \n        condition = false; \n    }\n    if(condition == true){\n        System.out.println(input + \" is a palindrome. \");\n    } else { \n        System.out.println(input + \" is not a palindrome. \");\n    }    \n}", 
            "status" : "FAIL", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-04-24T16:03:57.404+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n        }    \n        condition = false; \n    }\n    if(condition == true){\n        System.out.println(input + \" is a palindrome.\");\n    } else { \n        System.out.println(input + \" is not a palindrome.\");\n    }    \n}", 
            "status" : "FAIL", 
            "activeTime" : 32.2
        }, 
        {
            "date" : ISODate("2016-04-24T16:04:46.189+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n        } else {\n            condition = false;\n        }    \n    }\n    if(condition == true){\n        System.out.println(input + \" is a palindrome.\");\n    } else { \n        System.out.println(input + \" is not a palindrome.\");\n    }    \n}", 
            "status" : "FAIL", 
            "activeTime" : 46.7
        }, 
        {
            "date" : ISODate("2016-04-24T16:05:07.590+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n        } \n            condition = false;\n         \n    }\n    if(condition == true){\n        System.out.println(input + \" is a palindrome.\");\n    } else { \n        System.out.println(input + \" is not a palindrome.\");\n    }    \n}", 
            "status" : "FAIL", 
            "activeTime" : 21.4
        }, 
        {
            "date" : ISODate("2016-04-24T16:06:35.015+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n        } \n            condition = false;\n            System.out.println(input + \" is not a palindrome.\");\n         \n    }\n   \n        System.out.println(input + \" is a palindrome.\");\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 60.7
        }, 
        {
            "date" : ISODate("2016-04-24T16:10:11.581+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n    boolean update = true; \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n            update = true; \n        } \n            condition = false;\n            System.out.println(input + \" is not a palindrome.\");\n    }\n   \n    if(update){    \n        System.out.println(input + \" is a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 125.3
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:28.329+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n    boolean update = true; \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n            update = true; \n        } \n            condition = false;\n            System.out.println(input + \" is not a palindrome.\");\n    }\n   \n    if(update){    \n        System.out.println(input + \" is a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.2
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:28.344+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n     \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n             \n        } \n            condition = false;\n            System.out.println(input + \" is not a palindrome.\");\n    }\n   \n   \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:28.360+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n    boolean update = true; \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n            update = true; \n        } \n            condition = false;\n            System.out.println(input + \" is not a palindrome.\");\n    }\n   \n    if(update == true){    \n        System.out.println(input + \" is a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 3.8
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:30.503+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = false; \n     \n    do {\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n             \n        } while(condition); \n            System.out.println(input + \" is not a palindrome.\");\n    }\n       System.out.println(input + \" is a palindrome.\");\n   \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.1
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:30.877+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = true; \n     \n    while(condition){\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n             \n        } \n            condition = false;\n            System.out.println(input + \" is not a palindrome.\");\n    }\n   \n   \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(2)
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:32.220+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = false; \n     \n    do {\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n             \n        } else { \n            condition == false; \n            System.out.println(input + \" is not a palindrome.\");\n    }while(condition); \n            \n       System.out.println(input + \" is a palindrome.\");\n   \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.7
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:33.004+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = false; \n     \n    do {\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n             \n        } else { \n            condition == false; \n            System.out.println(input + \" is not a palindrome.\");\n        }    \n    }while(condition); \n            \n       System.out.println(input + \" is a palindrome.\");\n   \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.5
        }, 
        {
            "date" : ISODate("2016-04-24T18:20:08.813+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = false; \n     \n    do {\n        if(input.charAt(start) == input.charAt(length)){\n            start++;\n            length--;\n            condition = true; \n             \n        } else { \n            condition == false; \n            System.out.println(input + \" is not a palindrome.\");\n        }    \n    }while(condition); \n            \n       System.out.println(input + \" is a palindrome.\");\n   \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.5
        }, 
        {
            "date" : ISODate("2016-04-25T01:54:33.942+0000"), 
            "code" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = false; \n     \n    do {\n        if(input.charAt(start) == input.charAt(length)){ // what happens when start > input.length()-1 or when length < 0? \n            start++; \n            length--;\n            condition = true; \n             \n        } else { \n            condition = false; // assignment uses single \"=\"\n            System.out.println(input + \" is not a palindrome.\");\n        }    \n    }while(condition); \n            \n       System.out.println(input + \" is a palindrome.\");\n   \n}", 
            "status" : "FAIL", 
            "activeTime" : 517.2
        }
    ]
}
{ 
    "_id" : "EDuTyrRJDHtEdcpDE", 
    "userId" : "gdDMJZWTCmRwtc6m5", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T16:07:51.114+0000"), 
    "updatedAt" : ISODate("2016-04-24T16:51:34.243+0000"), 
    "code" : "public static Rectangle union(Rectangle r1, Rectangle r2) {\n    \n    int x1 = r1.getX();\n    int y1 = r1.getY();\n    int width1 = r1.getWidth();\n    int height1 = r1.getHeight();\n    \n    int x2 = r2.getX();\n    int y2 = r2.getY();\n    int width2 = r2.getWidth();\n    int height2 = r2.getHeight();\n    \n    int finalX;\n    int finalY;\n    int finalWidth;\n    int finalHeight;\n    \n    if (x1 <= x2) {\n        finalX = x1;\n    } else {\n        finalX = x2;\n    }\n    \n    if (y1 <= y2) {\n        finalY = y1;\n    } else {\n        finalY = y2;\n    }\n    \n    if (width1 >= width2) {\n        finalWidth = width1 + 1;\n    } else {\n        finalWidth = width2 + 1;\n    }\n    \n    if (height1 >= height2) {\n        finalHeight = height1 + 1;\n    } else {\n        finalHeight = height2 + 1;\n    }\n    \n    Rectangle result = new Rectangle (finalX, finalY, finalWidth, finalHeight);\n    return result;\n    \n}", 
    "status" : "FAIL", 
    "activeTime" : 6.1, 
    "totalActiveTime" : 582.3000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T16:51:30.805+0000"), 
            "code" : "public static Rectangle union(Rectangle r1, Rectangle r2) {\n    \n    int x1 = r1.getX();\n    int y1 = r1.getY();\n    int width1 = r1.getWidth();\n    int height1 = r1.getHeight();\n    \n    int x2 = r2.getX();\n    int y2 = r2.getY();\n    int width2 = r2.getWidth();\n    int height2 = r2.getHeight();\n    \n    int finalX;\n    int finalY;\n    int finalWidth;\n    int finalHeight;\n    \n    if (x1 <= x2) {\n        finalX = x1;\n    } else {\n        finalX = x2;\n    }\n    \n    if (y1 <= y2) {\n        finalY = y1;\n    } else {\n        finalY = y2;\n    }\n    \n    if (width1 >= width2) {\n        finalWidth = width1 + 1;\n    } else {\n        finalWidth = width2 + 1;\n    }\n    \n    if (height1 >= height2) {\n        finalHeight = height1 + 1;\n    } else {\n        finalHeight = height2 + 1;\n    }\n    \n    Rectangle result = new Rectangle (finalX, finalY, finalWidth, finalHeight);\n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 562.5
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:33.253+0000"), 
            "code" : "public static Rectangle union(Rectangle r1, Rectangle r2) {\n    \n    int x1 = r1.getX();\n    int y1 = r1.getY();\n    int width1 = r1.getWidth();\n    int height1 = r1.getHeight();\n    \n    int x2 = r2.getX();\n    int y2 = r2.getY();\n    int width2 = r2.getWidth();\n    int height2 = r2.getHeight();\n    \n    int finalX;\n    int finalY;\n    int finalWidth;\n    int finalHeight;\n    \n    if (x1 <= x2) {\n        finalX = x1;\n    } else {\n        finalX = x2;\n    }\n    \n    if (y1 <= y2) {\n        finalY = y1;\n    } else {\n        finalY = y2;\n    }\n    \n    if (width1 >= width2) {\n        finalWidth = width1 + 1;\n    } else {\n        finalWidth = width2 + 1;\n    }\n    \n    if (height1 >= height2) {\n        finalHeight = height1 + 1;\n    } else {\n        finalHeight = height2 + 1;\n    }\n    \n    Rectangle result = new Rectangle (finalX, finalY, finalWidth, finalHeight);\n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.7
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:34.243+0000"), 
            "code" : "public static Rectangle union(Rectangle r1, Rectangle r2) {\n    \n    int x1 = r1.getX();\n    int y1 = r1.getY();\n    int width1 = r1.getWidth();\n    int height1 = r1.getHeight();\n    \n    int x2 = r2.getX();\n    int y2 = r2.getY();\n    int width2 = r2.getWidth();\n    int height2 = r2.getHeight();\n    \n    int finalX;\n    int finalY;\n    int finalWidth;\n    int finalHeight;\n    \n    if (x1 <= x2) {\n        finalX = x1;\n    } else {\n        finalX = x2;\n    }\n    \n    if (y1 <= y2) {\n        finalY = y1;\n    } else {\n        finalY = y2;\n    }\n    \n    if (width1 >= width2) {\n        finalWidth = width1 + 1;\n    } else {\n        finalWidth = width2 + 1;\n    }\n    \n    if (height1 >= height2) {\n        finalHeight = height1 + 1;\n    } else {\n        finalHeight = height2 + 1;\n    }\n    \n    Rectangle result = new Rectangle (finalX, finalY, finalWidth, finalHeight);\n    return result;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 6.1
        }
    ]
}
{ 
    "_id" : "qkKpyYbrev4joY8ja", 
    "userId" : "npjNBBuP23XiG7zn3", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T17:49:12.423+0000"), 
    "updatedAt" : ISODate("2016-04-24T17:55:28.427+0000"), 
    "code" : "public static String parseEmail(String email){ //returns everything before @ in String email\n    int x = email.indexOf('@');\n    return email.substring(0,x);\n}", 
    "status" : "PASS", 
    "activeTime" : 17.4, 
    "totalActiveTime" : 181.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T17:55:10.650+0000"), 
            "code" : "public static string parseEmail(String email){ //returns everything before @ in String email\n    int x = email.indexOf('@');\n    return email.substring(0,x);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 164.1
        }, 
        {
            "date" : ISODate("2016-04-24T17:55:28.427+0000"), 
            "code" : "public static String parseEmail(String email){ //returns everything before @ in String email\n    int x = email.indexOf('@');\n    return email.substring(0,x);\n}", 
            "status" : "PASS", 
            "activeTime" : 17.4
        }
    ]
}
{ 
    "_id" : "XNTvFWwRQEHKQpwQh", 
    "userId" : "npjNBBuP23XiG7zn3", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T17:55:46.828+0000"), 
    "updatedAt" : ISODate("2016-04-24T18:08:23.366+0000"), 
    "code" : "public static String printPalindrome(Scanner word) {\n    word.toLowerCase();\n    int x = word.length();\n    for(int i = 0; i <= x/2; i++){\n        if(word.charAt(i)!=word.charAt(x-1-i)){\n            return(word+\" is not a panlindrome.\");\n        }\n    }\n    return(word+\" is a palindrome!\");\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 57.6, 
    "totalActiveTime" : 717.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T18:07:24.815+0000"), 
            "code" : "public static String printPalindrome(String word) {\n    word.toLowerCase();\n    int x = word.length();\n    for(int i = 0; i <= x/2; i++){\n        if(word.charAt(i)!=word.charAt(x-1-i)){\n            return(word+\" is not a panlindrome.\");\n        }\n    }\n    return(word+\" is a palindrome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(660)
        }, 
        {
            "date" : ISODate("2016-04-24T18:08:23.365+0000"), 
            "code" : "public static String printPalindrome(Scanner word) {\n    word.toLowerCase();\n    int x = word.length();\n    for(int i = 0; i <= x/2; i++){\n        if(word.charAt(i)!=word.charAt(x-1-i)){\n            return(word+\" is not a panlindrome.\");\n        }\n    }\n    return(word+\" is a palindrome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 57.6
        }
    ]
}
{ 
    "_id" : "an6Af97HwoQdmAvkK", 
    "userId" : "npjNBBuP23XiG7zn3", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T18:09:49.088+0000"), 
    "updatedAt" : ISODate("2016-04-24T18:18:58.889+0000"), 
    "code" : "public static void interleave(ArrayList a1, ArrayList a2){\n    int x = a1.size();\n    int y = a2.size();\n    int z = 2;\n    if(x==y){\n        for(int i = 0; i < y; i++){\n            int element = a2.get(i);\n            a1.add(z,element);\n            z++;\n            z++;\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 7.3, 
    "totalActiveTime" : 435.40000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T18:18:51.426+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList a2){\n    int x = a1.size();\n    int y = a2.size();\n    int z = 2;\n    if(x==y){\n        for(int i = 0; i < y; i++){\n            int element = a2.get(i);\n            a1.add(z,element);\n            z++;\n            z++\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 428.1
        }, 
        {
            "date" : ISODate("2016-04-24T18:18:58.888+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList a2){\n    int x = a1.size();\n    int y = a2.size();\n    int z = 2;\n    if(x==y){\n        for(int i = 0; i < y; i++){\n            int element = a2.get(i);\n            a1.add(z,element);\n            z++;\n            z++;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.3
        }
    ]
}
{ 
    "_id" : "ThzqkpBxKytuYfEgA", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T19:28:29.651+0000"), 
    "updatedAt" : ISODate("2016-04-24T19:40:03.114+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y=y;\n        this.width= width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+ x +\",\"+\"y=\"+y+\",width=\"+width+\",height=\"+height+\"]\"; \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 25.1, 
    "totalActiveTime" : 597.4000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T19:36:45.774+0000"), 
            "code" : "public Rectangle(int x, int y, int width, int height){\n    this.x = x;\n    this.y=y;\n    this.width= width;\n    this.height = height;\n}\n\npublic int getHeight(){\n    return height;\n}\n\npublic int getWidth(){\n    return width;\n}\n\npublic int getX(){\n    return x;\n}\n\npublic int getY(){\n    return y;\n}\n\npublic String toString(){\n    return \"Rectangle [ x=\"+ x +\",\"+\"width =\"+y+\"height=\"+height+\"]\"; \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 400.5
        }, 
        {
            "date" : ISODate("2016-04-24T19:37:13.987+0000"), 
            "code" : "public class Rectangle{\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y=y;\n        this.width= width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle [ x=\"+ x +\",\"+\"width =\"+y+\"height=\"+height+\"]\"; \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(28)
        }, 
        {
            "date" : ISODate("2016-04-24T19:38:37.337+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y=y;\n        this.width= width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle [ x=\"+ x +\",\"+\"width =\"+y+\"height=\"+height+\"]\"; \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 83.2
        }, 
        {
            "date" : ISODate("2016-04-24T19:38:57.873+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y=y;\n        this.width= width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+ x +\",\"+\"width =\"+y+\"height=\"+height+\"]\"; \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-04-24T19:39:38.034+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y=y;\n        this.width= width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+ x +\",\"+\"y=\"+y+\"width=\"+width+\",height=\"+height+\"]\"; \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 40.1
        }, 
        {
            "date" : ISODate("2016-04-24T19:40:03.114+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y=y;\n        this.width= width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+ x +\",\"+\"y=\"+y+\",width=\"+width+\",height=\"+height+\"]\"; \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 25.1
        }
    ]
}
{ 
    "_id" : "DdfnYkynxRBmiQ9ga", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T19:22:09.734+0000"), 
    "updatedAt" : ISODate("2016-04-26T05:19:05.535+0000"), 
    "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar+5);\n    return emailAb;\n}", 
    "status" : "FAIL", 
    "activeTime" : 1.6, 
    "totalActiveTime" : 1101.6999999999996, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T19:24:55.578+0000"), 
            "code" : "public static parseEmail(String email){\n    String abstract = email.substring(@);\n    return abstract;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(71)
        }, 
        {
            "date" : ISODate("2016-04-24T19:25:31.578+0000"), 
            "code" : "public static String parseEmail(String email){\n    String abstract = email.substring(@);\n    return abstract;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.1
        }, 
        {
            "date" : ISODate("2016-04-24T19:25:57.200+0000"), 
            "code" : "public static String parseEmail(String email){\n    String abstract=\"\";\n    abstract = email.substring(@);\n    return abstract;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.6
        }, 
        {
            "date" : ISODate("2016-04-24T19:26:25.153+0000"), 
            "code" : "public static String parseEmail(String email){\n    String abstract=\"\";\n    abstract = email.substring(\"@\"\");\n    return abstract;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.9
        }, 
        {
            "date" : ISODate("2016-04-24T19:26:45.354+0000"), 
            "code" : "public static String parseEmail(String email){\n    String abstract=\"\";\n    abstract = email.substring(\"@\");\n    return abstract;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.2
        }, 
        {
            "date" : ISODate("2016-04-24T19:41:00.904+0000"), 
            "code" : "public static parseEmail(String email){\n    String abstract=\"\";\n    abstract = email.substring(0,\"@\"+1);\n    return abstract;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 58.1
        }, 
        {
            "date" : ISODate("2016-04-24T19:41:23.609+0000"), 
            "code" : "public static String parseEmail(String email){\n    String abstract=\"\";\n    abstract = email.substring(0,\"@\"+1);\n    return abstract;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.7
        }, 
        {
            "date" : ISODate("2016-04-24T19:44:07.774+0000"), 
            "code" : "public static parseEmail(String email){\n    String abstract=\"\";\n    abstract = email.substring(0,\"@\"+1);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 163.4
        }, 
        {
            "date" : ISODate("2016-04-24T19:44:30.499+0000"), 
            "code" : "public static String parseEmail(String email){\n    String abstract=\"\";\n    abstract = email.substring(0,\"@\"+1);\n    return abstract;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.8
        }, 
        {
            "date" : ISODate("2016-04-24T19:45:13.478+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    emailAb = email.substring(0,\"@\"+1);\n    return abstract;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 42.9
        }, 
        {
            "date" : ISODate("2016-04-24T19:45:28.779+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    emailAb = email.substring(0,\"@\"+1);\n    return ab;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-04-24T19:45:40.451+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    emailAb = email.substring(0,\"@\"+1);\n    return emailAb;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-04-24T19:45:52.035+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    emailAb = email.substring(0,\"@\");\n    return emailAb;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.3
        }, 
        {
            "date" : ISODate("2016-04-24T19:46:49.557+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.substring(0);\n    int endEmailChar = email.substring(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar);\n    return emailAb;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 57.7
        }, 
        {
            "date" : ISODate("2016-04-24T19:47:17.270+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 27.3
        }, 
        {
            "date" : ISODate("2016-04-24T19:47:28.177+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\"+1);\n    emailAb = email.substring(firstEmailChar,endEmailChar);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.9
        }, 
        {
            "date" : ISODate("2016-04-24T19:47:42.099+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar+1);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-04-24T19:48:04.877+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar-1);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 22.7
        }, 
        {
            "date" : ISODate("2016-04-24T19:48:28.298+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar+1);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 23.3
        }, 
        {
            "date" : ISODate("2016-04-24T19:51:24.723+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar+1);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 176.4
        }, 
        {
            "date" : ISODate("2016-04-24T20:02:15.666+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar+1);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 193.6
        }, 
        {
            "date" : ISODate("2016-04-26T05:18:42.315+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 31.5
        }, 
        {
            "date" : ISODate("2016-04-26T05:18:48.438+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.3
        }, 
        {
            "date" : ISODate("2016-04-26T05:18:55.906+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar+5);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.5
        }, 
        {
            "date" : ISODate("2016-04-26T05:19:05.534+0000"), 
            "code" : "public static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar+5);\n    return emailAb;\n}", 
            "status" : "FAIL", 
            "activeTime" : 1.6
        }
    ]
}
{ 
    "_id" : "D2PZcakywytYnRvaB", 
    "userId" : "npjNBBuP23XiG7zn3", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T18:19:53.568+0000"), 
    "updatedAt" : ISODate("2016-04-24T23:17:08.199+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 17776.3, 
    "totalActiveTime" : 17776.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T23:17:08.198+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 17776.3
        }
    ]
}
{ 
    "_id" : "nRNpN94LLvmajqQcw", 
    "userId" : "rczYdr6YaF4Nv8DqY", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T23:40:01.607+0000"), 
    "updatedAt" : ISODate("2016-04-24T23:44:18.697+0000"), 
    "code" : "public static String parseEmail(String email) {\n    return email.substring(0, email.indexOf('@'));\n\n}", 
    "status" : "PASS", 
    "activeTime" : 13.8, 
    "totalActiveTime" : 175.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T23:44:04.526+0000"), 
            "code" : "public static String parseEmail(String email) {\n    return email.substring(0, email.indexOf('@');\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 161.7
        }, 
        {
            "date" : ISODate("2016-04-24T23:44:18.697+0000"), 
            "code" : "public static String parseEmail(String email) {\n    return email.substring(0, email.indexOf('@'));\n\n}", 
            "status" : "PASS", 
            "activeTime" : 13.8
        }
    ]
}
{ 
    "_id" : "hvj46tS2NtFYA4YmA", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "L46REaDboHACstAXr", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-25T00:13:24.405+0000"), 
    "updatedAt" : ISODate("2016-04-25T00:13:27.916+0000"), 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 22.2, 
    "totalActiveTime" : 22.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T00:13:27.916+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.2
        }
    ]
}
{ 
    "_id" : "WKwMDkdRrsxcGkG5Z", 
    "userId" : "kL5wJ3qdYDvbWke7w", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T05:21:47.572+0000"), 
    "updatedAt" : ISODate("2016-04-25T00:29:46.601+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }   \n    \n    public String toString() {\n       return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\"; \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 9.5, 
    "totalActiveTime" : 388.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T00:29:36.907+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY()\n        return y;\n    }   \n    \n    public String toString() {\n       return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\"; \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 379.1
        }, 
        {
            "date" : ISODate("2016-04-25T00:29:46.601+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }   \n    \n    public String toString() {\n       return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\"; \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 9.5
        }
    ]
}
{ 
    "_id" : "JTfJZDtn7pCjajLvf", 
    "userId" : "68LkTBk27sS7rTZ2u", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T14:05:29.535+0000"), 
    "updatedAt" : ISODate("2016-04-25T01:38:02.229+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        \n        int count = 0;\n        int originalL1Size = a1.size();\n        \n        for (int i = 0; i < a1.size(); i+=2){\n            if (count < a2.size()){\n                int currentInt = a2.get(count);\n                a1.add(i+1, currentInt);\n                \n                ++count;\n                \n            }\n        }  \n\n        if (a2.size() > originalL1Size){\n            \n            for (int j = count; j <a2.size(); j++){\n                a1.add(a2.get(j));\n                \n            }\n        }\n    }", 
    "status" : "PASS", 
    "activeTime" : 56.7, 
    "totalActiveTime" : 1562.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T15:02:02.231+0000"), 
            "code" : "public static ArrayList<Integer> createMagic(ArrayList<Integer> l1, ArrayList<Integer> l2){\n        \n        int count = 0;\n        int originalL1Size = l1.size();\n        \n        for (int i = 0; i < l1.size(); i+=2){\n            if (count < l2.size()){\n                int currentInt = l2.get(count);\n                l1.add(i+1, currentInt);\n                \n                ++count;\n                \n            }\n        }  \n\n        if (l2.size() > originalL1Size){\n            \n            for (int j = count; j <l2.size(); j++){\n                l1.add(l2.get(j));\n                \n            }\n        }\n        return l1;\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1385.6
        }, 
        {
            "date" : ISODate("2016-04-24T15:03:13.559+0000"), 
            "code" : "public static ArrayList<Integer> createMagic(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        \n        int count = 0;\n        int originalL1Size = a1.size();\n        \n        for (int i = 0; i < a1.size(); i+=2){\n            if (count < a2.size()){\n                int currentInt = a2.get(count);\n                a1.add(i+1, currentInt);\n                \n                ++count;\n                \n            }\n        }  \n\n        if (a2.size() > originalL1Size){\n            \n            for (int j = count; j <a2.size(); j++){\n                a1.add(a2.get(j));\n                \n            }\n        }\n        return a1;\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 71.5
        }, 
        {
            "date" : ISODate("2016-04-25T01:36:21.558+0000"), 
            "code" : "public static ArrayList<Integer> createMagic(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        \n        int count = 0;\n        int originalL1Size = a1.size();\n        \n        for (int i = 0; i < a1.size(); i+=2){\n            if (count < a2.size()){\n                int currentInt = a2.get(count);\n                a1.add(i+1, currentInt);\n                \n                ++count;\n                \n            }\n        }  \n\n        if (a2.size() > originalL1Size){\n            \n            for (int j = count; j <a2.size(); j++){\n                a1.add(a2.get(j));\n                \n            }\n        }\n        return a1;\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(5)
        }, 
        {
            "date" : ISODate("2016-04-25T01:37:05.190+0000"), 
            "code" : "public static void createMagic(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        \n        int count = 0;\n        int originalL1Size = a1.size();\n        \n        for (int i = 0; i < a1.size(); i+=2){\n            if (count < a2.size()){\n                int currentInt = a2.get(count);\n                a1.add(i+1, currentInt);\n                \n                ++count;\n                \n            }\n        }  \n\n        if (a2.size() > originalL1Size){\n            \n            for (int j = count; j <a2.size(); j++){\n                a1.add(a2.get(j));\n                \n            }\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.8
        }, 
        {
            "date" : ISODate("2016-04-25T01:38:02.227+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        \n        int count = 0;\n        int originalL1Size = a1.size();\n        \n        for (int i = 0; i < a1.size(); i+=2){\n            if (count < a2.size()){\n                int currentInt = a2.get(count);\n                a1.add(i+1, currentInt);\n                \n                ++count;\n                \n            }\n        }  \n\n        if (a2.size() > originalL1Size){\n            \n            for (int j = count; j <a2.size(); j++){\n                a1.add(a2.get(j));\n                \n            }\n        }\n    }", 
            "status" : "PASS", 
            "activeTime" : 56.7
        }
    ]
}
{ 
    "_id" : "3MgLxiZY2xNzsDGpS", 
    "userId" : "PBoTSDBSjJSR4Am9w", 
    "questionId" : "YACA87o6hJhW6AJsR", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-25T02:54:06.660+0000"), 
    "updatedAt" : ISODate("2016-04-25T02:56:25.695+0000"), 
    "code" : "public class Article {\n    //private Date year;\n    private int numWords;\n    \n    public Article(int numWords) {\n        this.numWords = numWords;\n    }\n    \n    public boolean isLongerThan(Article b) {\n        return this.numWords > b.numWords;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 15.8, 
    "totalActiveTime" : 99.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T02:55:06.044+0000"), 
            "code" : "public class Article {\n    //private Date year;\n    private int numWords;\n    \n    public Article(int numWords) {\n        this.numWords = numWords;\n    }\n    \n    public boolean isLongerThan(Article b) {\n        return this.numWords > b.numWords;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 57.4
        }, 
        {
            "date" : ISODate("2016-04-25T02:55:50.094+0000"), 
            "code" : "public class Article {\n    //private Date year;\n    private int numWords;\n    \n    public Article(int numWords) {\n        this.numWords = numWords;\n    }\n    \n    public boolean isLongerThan(Article b) {\n        return this.numWords > b.numWords;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.9
        }, 
        {
            "date" : ISODate("2016-04-25T02:56:25.694+0000"), 
            "code" : "public class Article {\n    //private Date year;\n    private int numWords;\n    \n    public Article(int numWords) {\n        this.numWords = numWords;\n    }\n    \n    public boolean isLongerThan(Article b) {\n        return this.numWords > b.numWords;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 15.8
        }
    ]
}
{ 
    "_id" : "rS4HLubAfdCPAyiS8", 
    "userId" : "6S4oHGNjdgG5fWts7", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-23T17:45:54.638+0000"), 
    "updatedAt" : ISODate("2016-04-25T03:29:50.739+0000"), 
    "code" : "public static void printPalindrome(Scanner console){    \n    System.out.print(\"Type one or more words: \");\n    String input= console.nextLine();\n    String checkInput= input.toUpperCase();\n    boolean palindrome=false; // we usually use the \"is\" or \"has\" prefix when naming boolean variables so it's clearer [ie. isPalindrome] :)\n    for(int i=0; i<checkInput.length()-1; i++){    \n        if(checkInput.charAt(i)==checkInput.charAt(checkInput.length()-i)){ \n           palindrome=true;   // what happens when the characters aren't equal?\n        }\n    }\n    if(palindrome){\n         System.out.print(input +\" is a palindrome!\");\n    }else{\n        System.out.print(input +\" is not a palindrome.\");\n    }\n    \n}\n/* Just to run thru some program logic for this context\n   If two characters don't match, the word is definitely not a palindrome\n   \n   Hence, it'll be better to let your first assignment of the boolean palindrome variable be true\n   and let the for loop check when two characters don't match\n   When they don't match, you'll change the value of palindrome to false\n   This value of false will not revert to true again for this context\n*/\n\n/* A palindrome is a word that is spelt the same from FRONT to BACK, and BACK to FRONT\n   So think about how you would check whether a word is a palindrome\n*/", 
    "status" : "FAIL", 
    "activeTime" : 40.6, 
    "totalActiveTime" : 654.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T05:10:35.906+0000"), 
            "code" : "Public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String input= console.nextLine().toUpperCase();\n    for(int i=0; i<input.length(); i++){\n        if(input.charAt(i)==input.charAt(input.length()-i)){\n            System.out.print(input +\" is a palindrome!\");\n        }\n    }\n    System.out.print(input +\" is not a palindrome.\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 362.4
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:19.294+0000"), 
            "code" : "public static void printPalindrome(Scanner console){    // public with small 'p'!\n    System.out.print(\"Type one or more words: \");\n    String input= console.nextLine().toUpperCase();\n    boolean palindrome=false;\n    for(int i=0; i<input.length(); i++){    \n        if(input.charAt(i)==input.charAt(input.length()-i)){ \n           palindrome=true;   // You're looping the print statement! There should only be one output\n        }\n    }\n    if(palindrome){\n         System.out.print(input +\" is a palindrome!\");\n    }else{\n        System.out.print(input +\" is not a palindrome.\");\n    }\n    \n}\n/* A palindrome is a word that is spelt the same from FRONT to BACK, and BACK to FRONT\n   So think about how you would check whether a word is a palindrome\n*/", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 96.2
        }, 
        {
            "date" : ISODate("2016-04-24T05:13:20.069+0000"), 
            "code" : "public static void printPalindrome(Scanner console){    // public with small 'p'!\n    System.out.print(\"Type one or more words: \");\n    String input= console.nextLine();\n    String checkInput= input.toUpperCase();\n    boolean palindrome=false; \n    for(int i=0; i<checkInput.length(); i++){    \n        if(checkInput.charAt(i)==checkInput.charAt(checkInput.length()-i)){ \n           palindrome=true;   // You're looping the print statement! There should only be one output\n        }\n    }\n    if(palindrome){\n         System.out.print(input +\" is a palindrome!\");\n    }else{\n        System.out.print(input +\" is not a palindrome.\");\n    }\n    \n}\n/* A palindrome is a word that is spelt the same from FRONT to BACK, and BACK to FRONT\n   So think about how you would check whether a word is a palindrome\n*/", 
            "status" : "FAIL", 
            "activeTime" : 4.1
        }, 
        {
            "date" : ISODate("2016-04-25T03:29:10.168+0000"), 
            "code" : "public static void printPalindrome(Scanner console){    \n    System.out.print(\"Type one or more words: \");\n    String input= console.nextLine();\n    String checkInput= input.toUpperCase();\n    boolean palindrome=false; // we usually use the \"is\" or \"has\" prefix when naming boolean variables so it's clearer [ie. isPalindrome] :)\n    for(int i=0; i<checkInput.length(); i++){    \n        if(checkInput.charAt(i)==checkInput.charAt(checkInput.length()-i)){ \n           palindrome=true;   // what happens when the characters aren't equal?\n        }\n    }\n    if(palindrome){\n         System.out.print(input +\" is a palindrome!\");\n    }else{\n        System.out.print(input +\" is not a palindrome.\");\n    }\n    \n}\n/* Just to run thru some program logic for this context\n   If two characters don't match, the word is definitely not a palindrome\n   \n   Hence, it'll be better to let your first assignment of the boolean palindrome variable be true\n   and let the for loop check when two characters don't match\n   When they don't match, you'll change the value of palindrome to false\n   This value of false will not revert to true again for this context\n*/\n\n/* A palindrome is a word that is spelt the same from FRONT to BACK, and BACK to FRONT\n   So think about how you would check whether a word is a palindrome\n*/", 
            "status" : "FAIL", 
            "activeTime" : 150.8
        }, 
        {
            "date" : ISODate("2016-04-25T03:29:50.738+0000"), 
            "code" : "public static void printPalindrome(Scanner console){    \n    System.out.print(\"Type one or more words: \");\n    String input= console.nextLine();\n    String checkInput= input.toUpperCase();\n    boolean palindrome=false; // we usually use the \"is\" or \"has\" prefix when naming boolean variables so it's clearer [ie. isPalindrome] :)\n    for(int i=0; i<checkInput.length()-1; i++){    \n        if(checkInput.charAt(i)==checkInput.charAt(checkInput.length()-i)){ \n           palindrome=true;   // what happens when the characters aren't equal?\n        }\n    }\n    if(palindrome){\n         System.out.print(input +\" is a palindrome!\");\n    }else{\n        System.out.print(input +\" is not a palindrome.\");\n    }\n    \n}\n/* Just to run thru some program logic for this context\n   If two characters don't match, the word is definitely not a palindrome\n   \n   Hence, it'll be better to let your first assignment of the boolean palindrome variable be true\n   and let the for loop check when two characters don't match\n   When they don't match, you'll change the value of palindrome to false\n   This value of false will not revert to true again for this context\n*/\n\n/* A palindrome is a word that is spelt the same from FRONT to BACK, and BACK to FRONT\n   So think about how you would check whether a word is a palindrome\n*/", 
            "status" : "FAIL", 
            "activeTime" : 40.6
        }
    ]
}
{ 
    "_id" : "7B52zFvcfwZP2FBLH", 
    "userId" : "57sNXhBgcWRbAj43Q", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T14:35:03.403+0000"), 
    "updatedAt" : ISODate("2016-04-25T06:50:17.621+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    //do you need an addtional result list?\n    //hint: use a1.add(int index, Integer element) and iterate through a2!\n    \n    //create a new arrayList to store in the final result\n    ArrayList<Integer> result = new ArrayList<>();\n    //if a1 is shorter than a2, then get the first num from a1, then add to new arraylist. get first num from a2\n    if(a1.size() <= a2.size()) {\n        int i;\n        for(i = 0; i < a1.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a2.size()) {\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n            i++;\n        }\n    } else {\n        int i;\n        for(i = 0; i < a2.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a1.size()) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            i++;\n        }\n    }\n    \n    \n    \n    //add to new arraylist,.....(repeat) until the last num in a1, add the remaining num in a2.\n    //if a2 is shorter than a1, then get the first num from a2, then add to new arraylist. get first num from a1\n    //add to new arraylist,.....(repeat) until the last num in a2, add the remaining num in a1.\n    //a1.clear()\n    a1.clear();\n    //a1 = result\n    for(int i = 0; i < result.size(); i++) {\n        int takeResult = result.get(i);\n        a1.add(takeResult);\n    }\n   \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 55.1, 
    "totalActiveTime" : 2804.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T06:41:20.407+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList a2) {\n    //do you need an addtional result list?\n    //hint: use a1.add(int index, Integer element) and iterate through a2!\n    \n    //create a new arrayList to store in the final result\n    ArrayList<Integer> result = new ArrayList<>();\n    //if a1 is shorter than a2, then get the first num from a1, then add to new arraylist. get first num from a2\n    if(a1.size() <= a2.size()) {\n        int i;\n        for(i = 0; i < a1.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a2.size()) {\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n            i++;\n        }\n    } else {\n        int i;\n        for(i = 0; i < a2.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a1.size()) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            i++;\n        }\n    }\n    \n    \n    \n    //add to new arraylist,.....(repeat) until the last num in a1, add the remaining num in a2.\n    //if a2 is shorter than a1, then get the first num from a2, then add to new arraylist. get first num from a1\n    //add to new arraylist,.....(repeat) until the last num in a2, add the remaining num in a1.\n    //a1.clear()\n    a1.clear();\n    //a1 = result\n    for(int i = 0; i < result.size(); i++) {\n        int takeResult = result.get(i);\n        a1.add(takeResult);\n    }\n   \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2267.6
        }, 
        {
            "date" : ISODate("2016-04-25T06:43:50.996+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    //do you need an addtional result list?\n    //hint: use a1.add(int index, Integer element) and iterate through a2!\n    \n    //create a new arrayList to store in the final result\n    ArrayList<Integer> result = new ArrayList<>();\n    //if a1 is shorter than a2, then get the first num from a1, then add to new arraylist. get first num from a2\n    if(a1.size() <= a2.size()) {\n        int i;\n        for(i = 0; i < a1.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a2.size()) {\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n            i++;\n        }\n    } else {\n        int i;\n        for(i = 0; i < a2.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a1.size()) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            i++;\n        }\n    }\n    \n    \n    \n    //add to new arraylist,.....(repeat) until the last num in a1, add the remaining num in a2.\n    //if a2 is shorter than a1, then get the first num from a2, then add to new arraylist. get first num from a1\n    //add to new arraylist,.....(repeat) until the last num in a2, add the remaining num in a1.\n    //a1.clear()\n    a1.clear();\n    //a1 = result\n    for(int i = 0; i < result.size(); i++) {\n        int takeResult = result.get(i);\n        a1.add(takeResult);\n    }\n   \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 150.4
        }, 
        {
            "date" : ISODate("2016-04-25T06:48:33.207+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList<Integer> a2) {\n    //do you need an addtional result list?\n    //hint: use a1.add(int index, Integer element) and iterate through a2!\n    Object o = a1.get(0);\n    //create a new arrayList to store in the final result\n    ArrayList<Integer> result = new ArrayList<>();\n    //if a1 is shorter than a2, then get the first num from a1, then add to new arraylist. get first num from a2\n    if(a1.size() <= a2.size()) {\n        int i;\n        for(i = 0; i < a1.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a2.size()) {\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n            i++;\n        }\n    } else {\n        int i;\n        for(i = 0; i < a2.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a1.size()) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            i++;\n        }\n    }\n    \n    \n    \n    //add to new arraylist,.....(repeat) until the last num in a1, add the remaining num in a2.\n    //if a2 is shorter than a1, then get the first num from a2, then add to new arraylist. get first num from a1\n    //add to new arraylist,.....(repeat) until the last num in a2, add the remaining num in a1.\n    //a1.clear()\n    a1.clear();\n    //a1 = result\n    for(int i = 0; i < result.size(); i++) {\n        int takeResult = result.get(i);\n        a1.add(takeResult);\n    }\n   \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 282.5
        }, 
        {
            "date" : ISODate("2016-04-25T06:49:22.523+0000"), 
            "code" : "public static void interleave(ArrayList a1, ArrayList<Integer> a2) {\n    //do you need an addtional result list?\n    //hint: use a1.add(int index, Integer element) and iterate through a2!\n    Object o = a1.get(0);\n    //create a new arrayList to store in the final result\n    ArrayList<Integer> result = new ArrayList<>();\n    //if a1 is shorter than a2, then get the first num from a1, then add to new arraylist. get first num from a2\n    if(a1.size() <= a2.size()) {\n        int i;\n        for(i = 0; i < a1.size(); i++) {\n            int takeA1 = (Integer) a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a2.size()) {\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n            i++;\n        }\n    } else {\n        int i;\n        for(i = 0; i < a2.size(); i++) {\n            int takeA1 = (Integer) a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a1.size()) {\n            int takeA1 = (Integer) a1.get(i);\n            result.add(takeA1);\n            i++;\n        }\n    }\n    \n    \n    \n    //add to new arraylist,.....(repeat) until the last num in a1, add the remaining num in a2.\n    //if a2 is shorter than a1, then get the first num from a2, then add to new arraylist. get first num from a1\n    //add to new arraylist,.....(repeat) until the last num in a2, add the remaining num in a1.\n    //a1.clear()\n    a1.clear();\n    //a1 = result\n    for(int i = 0; i < result.size(); i++) {\n        int takeResult = result.get(i);\n        a1.add(takeResult);\n    }\n   \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(49)
        }, 
        {
            "date" : ISODate("2016-04-25T06:50:17.617+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    //do you need an addtional result list?\n    //hint: use a1.add(int index, Integer element) and iterate through a2!\n    \n    //create a new arrayList to store in the final result\n    ArrayList<Integer> result = new ArrayList<>();\n    //if a1 is shorter than a2, then get the first num from a1, then add to new arraylist. get first num from a2\n    if(a1.size() <= a2.size()) {\n        int i;\n        for(i = 0; i < a1.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a2.size()) {\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n            i++;\n        }\n    } else {\n        int i;\n        for(i = 0; i < a2.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a1.size()) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            i++;\n        }\n    }\n    \n    \n    \n    //add to new arraylist,.....(repeat) until the last num in a1, add the remaining num in a2.\n    //if a2 is shorter than a1, then get the first num from a2, then add to new arraylist. get first num from a1\n    //add to new arraylist,.....(repeat) until the last num in a2, add the remaining num in a1.\n    //a1.clear()\n    a1.clear();\n    //a1 = result\n    for(int i = 0; i < result.size(); i++) {\n        int takeResult = result.get(i);\n        a1.add(takeResult);\n    }\n   \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 55.1
        }
    ]
}
{ 
    "_id" : "WEFRrMJJiWhwhTnaA", 
    "userId" : "skeAjiWQ9cA4BLDxs", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-25T07:07:02.018+0000"), 
    "updatedAt" : ISODate("2016-04-25T07:18:45.424+0000"), 
    "code" : "public static ArrayList<Integer> interleave \n    (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> largerList = a1;\n    ArrayList<Integer> smallerList = a2;\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    \n    if (a2.size() > a1.size()) {\n        largerList = a2;\n        smallerList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < smallerList.size(); i++) {\n        int a = smallerList.get(i);\n        int b = largerList.get(i);\n        result.add(a);\n        result.add(b);\n    }\n    \n    for (int j = i; j < largerList.size(); i++) {\n        int c = largestList.get(j);\n        result.add(c);\n    }\n    \n    return result;\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 13.7, 
    "totalActiveTime" : 700.8000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T07:17:19.237+0000"), 
            "code" : "public static ArrayList<int> interleave \n    (ArrayList<int> a1, ArrayList<int> a2) {\n    \n    ArrayList<int> largerList = a1;\n    ArrayList<int> smallerList = a2;\n    \n    ArrayList<int> result = new ArrayList<>();\n    \n    if (a2.size() > a1.size()) {\n        largerList = a2;\n        smallerList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < smallerList; i++) {\n        int a = smallerList.get(i);\n        int b = largerList.get(i);\n        result.add(a);\n        result.add(b);\n    }\n    \n    for (int j = i; j < largerList.size(); i++) {\n        int c = largestList.get(j);\n        result.add(c);\n    }\n    \n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 631.5
        }, 
        {
            "date" : ISODate("2016-04-25T07:17:50.452+0000"), 
            "code" : "public static ArrayList<String> interleave \n    (ArrayList<String> a1, ArrayList<String> a2) {\n    \n    ArrayList<String> largerList = a1;\n    ArrayList<String> smallerList = a2;\n    \n    ArrayList<String> result = new ArrayList<>();\n    \n    if (a2.size() > a1.size()) {\n        largerList = a2;\n        smallerList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < smallerList; i++) {\n        int a = smallerList.get(i);\n        int b = largerList.get(i);\n        result.add(a);\n        result.add(b);\n    }\n    \n    for (int j = i; j < largerList.size(); i++) {\n        int c = largestList.get(j);\n        result.add(c);\n    }\n    \n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.1
        }, 
        {
            "date" : ISODate("2016-04-25T07:18:31.685+0000"), 
            "code" : "public static ArrayList<Integer> interleave \n    (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> largerList = a1;\n    ArrayList<Integer> smallerList = a2;\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    \n    if (a2.size() > a1.size()) {\n        largerList = a2;\n        smallerList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < smallerList; i++) {\n        int a = smallerList.get(i);\n        int b = largerList.get(i);\n        result.add(a);\n        result.add(b);\n    }\n    \n    for (int j = i; j < largerList.size(); i++) {\n        int c = largestList.get(j);\n        result.add(c);\n    }\n    \n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.5
        }, 
        {
            "date" : ISODate("2016-04-25T07:18:45.424+0000"), 
            "code" : "public static ArrayList<Integer> interleave \n    (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> largerList = a1;\n    ArrayList<Integer> smallerList = a2;\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    \n    if (a2.size() > a1.size()) {\n        largerList = a2;\n        smallerList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < smallerList.size(); i++) {\n        int a = smallerList.get(i);\n        int b = largerList.get(i);\n        result.add(a);\n        result.add(b);\n    }\n    \n    for (int j = i; j < largerList.size(); i++) {\n        int c = largestList.get(j);\n        result.add(c);\n    }\n    \n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.7
        }
    ]
}
{ 
    "_id" : "JNyjQRyCuqsYjsf2P", 
    "userId" : "skeAjiWQ9cA4BLDxs", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-25T07:21:36.555+0000"), 
    "updatedAt" : ISODate("2016-04-25T07:29:11.034+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(454), 
    "totalActiveTime" : NumberInt(454), 
    "history" : [
        {
            "date" : ISODate("2016-04-25T07:29:11.034+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(454)
        }
    ]
}
{ 
    "_id" : "52mrptmtekrpQRPMt", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T13:06:46.173+0000"), 
    "updatedAt" : ISODate("2016-04-25T07:30:29.933+0000"), 
    "code" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    \n        /* (Taken note!!!)\n            ~ W\n            Why we use this.x here ~\n            As you can see, there is two different x's here\n            the one passed in through the parameters of the constructor\n            i.e. public Rectangle(int x ...)\n            and the other is the instance variable x in the field\n            i.e. private int x;\n            \n            how does java know which is it referring to?\n            \n            in general - it will take the x closest to it, or more what nerds say \"more local in scope\"\n            so in this case, when we say x without the this, we are referring to the parameters\n            defined in the constructor\n            \n            so how do you tell java that you want the instance variable instead?\n            that's where the keyword \"this\" comes into play\n            \"this\" simply tells java \"I want the current instance of Rectangle!\"\n            \"this\" is an object of type Rectangle\n            \n            this.x = x;\n            \n            will simply mean with my current object Rectangle, set the object's instance variable\n            of x to be the the value of x that is passed in the constructor\n            \n            however, let's say that there is no \"x\" being passed in, e.g. in your getX() method\n            then java will just take the next nearest \"x\" which is the instance variable itself\n            so you can simply\n            \n            public int getX(){\n                return x;\n            }\n            \n            hope this clarifies!\n        */\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        String dimensions = \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n        return dimensions;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 3037.1, 
    "totalActiveTime" : 4350.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T13:34:42.734+0000"), 
            "code" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return this.height;\n    }\n    public int getWidth(){\n        return this.width;\n    }\n    public int getX(){\n        return this.x;\n    }\n    public int getY(){\n        return this.y;\n    }\n    public String toString(){\n        String dimensions = \"Rectangle[x=\"+this.x+\",y=\"+this.y+\",width=\"+this.width+\",height=\"+this.height+\"]\"\n        return dimensions;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1249.3
        }, 
        {
            "date" : ISODate("2016-04-23T15:57:14.005+0000"), 
            "code" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return this.height;\n    }\n    public int getWidth(){\n        return this.width;\n    }\n    public int getX(){\n        return this.x;\n    }\n    public int getY(){\n        return this.y;\n    }\n    public String toString(){\n        String dimensions = \"Rectangle[x=\"+this.x+\",y=\"+this.y+\",width=\"+this.width+\",height=\"+this.height+\"]\"\n        return dimensions;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(36)
        }, 
        {
            "date" : ISODate("2016-04-23T15:57:42.849+0000"), 
            "code" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return this.height;\n    }\n    public int getWidth(){\n        return this.width;\n    }\n    public int getX(){\n        return this.x;\n    }\n    public int getY(){\n        return this.y;\n    }\n    public String toString(){\n        String dimensions = \"Rectangle[x=\"+this.x+\",y=\"+this.y+\",width=\"+this.width+\",height=\"+this.height+\"]\";\n        return dimensions;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 28.4
        }, 
        {
            "date" : ISODate("2016-04-25T07:30:29.933+0000"), 
            "code" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    \n        /* (Taken note!!!)\n            ~ W\n            Why we use this.x here ~\n            As you can see, there is two different x's here\n            the one passed in through the parameters of the constructor\n            i.e. public Rectangle(int x ...)\n            and the other is the instance variable x in the field\n            i.e. private int x;\n            \n            how does java know which is it referring to?\n            \n            in general - it will take the x closest to it, or more what nerds say \"more local in scope\"\n            so in this case, when we say x without the this, we are referring to the parameters\n            defined in the constructor\n            \n            so how do you tell java that you want the instance variable instead?\n            that's where the keyword \"this\" comes into play\n            \"this\" simply tells java \"I want the current instance of Rectangle!\"\n            \"this\" is an object of type Rectangle\n            \n            this.x = x;\n            \n            will simply mean with my current object Rectangle, set the object's instance variable\n            of x to be the the value of x that is passed in the constructor\n            \n            however, let's say that there is no \"x\" being passed in, e.g. in your getX() method\n            then java will just take the next nearest \"x\" which is the instance variable itself\n            so you can simply\n            \n            public int getX(){\n                return x;\n            }\n            \n            hope this clarifies!\n        */\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        String dimensions = \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n        return dimensions;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 3037.1
        }
    ]
}
{ 
    "_id" : "tmTXFaJQYMhaTz97b", 
    "userId" : "57sNXhBgcWRbAj43Q", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T14:56:51.898+0000"), 
    "updatedAt" : ISODate("2016-04-25T07:31:37.607+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    \n    \n    int x;\n    if(rectA.getX() <= rectB.getX()) {\n        x = rectA.getX();\n    } else {\n        x = rectB.getX();\n    } //use Math.min(int a, int b)\n    \n    int y;\n    if(rectA.getY() <= rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    \n    int xMaxOfA = rectA.getX() + rectA.getWidth();\n    int xMaxOfB = rectB.getX() + rectB.getWidth();\n    int maxOfRectWidth = Math.max(xMaxOfA, xMaxOfB);\n    int width = maxOfRectWidth - x;\n    \n    int yMaxOfA = rectA.getY() + rectA.getHeight();\n    int yMaxOfB = rectB.getY() + rectB.getHeight();\n    int maxOfRectHeight = Math.max(yMaxOfA, yMaxOfB);\n    int height = maxOfRectHeight - y;\n    \n    //int width = rectB.getWidth() + (rectB.getX() - x);\n    //int height = rectA.getHeight() + (rectA.getY() - y);\n    \n    Rectangle result = new Rectangle(x,y,width,height);\n    return result;\n}", 
    "status" : "PASS", 
    "activeTime" : 5.7, 
    "totalActiveTime" : 5562.099999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T15:44:22.055+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    int x;\n    if(rectA.getX() <= rectB.getX()) {\n        x = rectA.getX();\n    } else {\n        x = rectB.getX();\n    }\n    \n    int y;\n    if(rectB.getY() <= rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    int width = rectB.getWidth() + (rectB.getX() - x);\n    int height = rectA.getHeight() + (rectA.getY() - y);\n    \n    Rectangle result = new Rectangle(x,y,width,height);\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 2854.2
        }, 
        {
            "date" : ISODate("2016-04-24T15:48:14.855+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    int x;\n    if(rectA.getX() <= rectB.getX()) {\n        x = rectA.getX();\n    } else {\n        x = rectB.getX();\n    }\n    \n    int y;\n    if(rectA.getY() <= rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    int width = rectB.getWidth() + (rectB.getX() - x);\n    int height = rectA.getHeight() + (rectA.getY() - y);\n    \n    Rectangle result = new Rectangle(x,y,width,height);\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 228.2
        }, 
        {
            "date" : ISODate("2016-04-25T07:13:09.110+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    int x;\n    if(rectA.getX() <= rectB.getX()) {\n        x = rectA.getX();\n    } else {\n        x = rectB.getX();\n    } //use Math.min(int a, int b)\n    \n    int y;\n    if(rectA.getY() <= rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    int width = rectB.getWidth() + (rectB.getX() - x);\n    int height = rectA.getHeight() + (rectA.getY() - y);\n    \n    Rectangle result = new Rectangle(x,y,width,height);\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 1371.2
        }, 
        {
            "date" : ISODate("2016-04-25T07:30:50.494+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    \n    \n    int x;\n    if(rectA.getX() <= rectB.getX()) {\n        x = rectA.getX();\n    } else {\n        x = rectB.getX();\n    } //use Math.min(int a, int b)\n    \n    int y;\n    if(rectA.getY() <= rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    \n    int xMaxOfA = rectA.getX() + rectA.getWidth();\n    int xMaxOfB = rectB.getX() + rectB.getWidth();\n    int maxOfRect = Math.max(xMaxOfA, xMaxOfB);\n    int width = maxOfRect - x;\n    \n    int yMaxOfA = rectA.getY() + rectA.getHeight();\n    int yMaxOfB = rectB.getY() + rectB.getHeight();\n    int maxOfRect = Math.max(yMaxOfA, yMaxOfB);\n    int height = maxOfRect - y;\n    \n    //int width = rectB.getWidth() + (rectB.getX() - x);\n    //int height = rectA.getHeight() + (rectA.getY() - y);\n    \n    Rectangle result = new Rectangle(x,y,width,height);\n    return result;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1061.8
        }, 
        {
            "date" : ISODate("2016-04-25T07:31:31.805+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    \n    \n    int x;\n    if(rectA.getX() <= rectB.getX()) {\n        x = rectA.getX();\n    } else {\n        x = rectB.getX();\n    } //use Math.min(int a, int b)\n    \n    int y;\n    if(rectA.getY() <= rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    \n    int xMaxOfA = rectA.getX() + rectA.getWidth();\n    int xMaxOfB = rectB.getX() + rectB.getWidth();\n    int maxOfRectWidth = Math.max(xMaxOfA, xMaxOfB);\n    int width = maxOfRectWidth - x;\n    \n    int yMaxOfA = rectA.getY() + rectA.getHeight();\n    int yMaxOfB = rectB.getY() + rectB.getHeight();\n    int maxOfRectHeight = Math.max(yMaxOfA, yMaxOfB);\n    int height = maxOfRectHeight - y;\n    \n    //int width = rectB.getWidth() + (rectB.getX() - x);\n    //int height = rectA.getHeight() + (rectA.getY() - y);\n    \n    Rectangle result = new Rectangle(x,y,width,height);\n    return result;\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(41)
        }, 
        {
            "date" : ISODate("2016-04-25T07:31:37.606+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    \n    \n    int x;\n    if(rectA.getX() <= rectB.getX()) {\n        x = rectA.getX();\n    } else {\n        x = rectB.getX();\n    } //use Math.min(int a, int b)\n    \n    int y;\n    if(rectA.getY() <= rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    \n    int xMaxOfA = rectA.getX() + rectA.getWidth();\n    int xMaxOfB = rectB.getX() + rectB.getWidth();\n    int maxOfRectWidth = Math.max(xMaxOfA, xMaxOfB);\n    int width = maxOfRectWidth - x;\n    \n    int yMaxOfA = rectA.getY() + rectA.getHeight();\n    int yMaxOfB = rectB.getY() + rectB.getHeight();\n    int maxOfRectHeight = Math.max(yMaxOfA, yMaxOfB);\n    int height = maxOfRectHeight - y;\n    \n    //int width = rectB.getWidth() + (rectB.getX() - x);\n    //int height = rectA.getHeight() + (rectA.getY() - y);\n    \n    Rectangle result = new Rectangle(x,y,width,height);\n    return result;\n}", 
            "status" : "PASS", 
            "activeTime" : 5.7
        }
    ]
}
{ 
    "_id" : "fSud4YL4vCa6s76Kc", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-23T13:13:34.689+0000"), 
    "updatedAt" : ISODate("2016-04-25T08:28:38.147+0000"), 
    "code" : "//TAKEN NOTE:)\n\n//very methodical method! very clear what you are trying to do\n//however, you may want to explore Math.min(int a, int b) and Math.max(int a, int b)\n//it'll save you a lot fo time writing dem if elses!\n//also, it will be awesome if you could make it a point to add curly braces even if it's just one\n//line for the body of your if statement\n\n/*\n    i.e.\n    if(a > b){\n        a = b;\n    } else {\n        b = a;\n    }\n*/\n\n//the reasoning for this is simple: imagine if you have to add another 3 more lines\n//to each of the if else below, then the effort spent will be a lot and if you miss out\n//on a curly brace, you'll spend more time debugging\n//so curly braces are your best friend!\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n    x = Math.min(rectA.getX(), rectB.getX());\n \n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth()){\n        width = rectA.getX()+rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+rectB.getWidth()-x;\n    }\n    //y\n    int y;\n    y = Math.min(rectA.getY(), rectB.getY());\n\n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight()){\n        height = rectA.getY()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getY()+rectB.getHeight()-y;\n    }\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 48.4, 
    "totalActiveTime" : 3516.2000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-23T17:31:58.655+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n\n    if(rectA.getX()>rectB.getX())\n        x = rectB.getX();\n    else\n        x = rectA.getX();\n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth())\n        width = rectA.getX()+rectA.getWidth()-x;\n    else\n        width = rectB.getX()+rectB.getWidth()-x;\n    //y\n    int y;\n\n    if(rectA.getY()>rectB.getY())\n        y = rectB.getY();\n    else\n        y = rectA.getY();\n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight())\n        width = rectA.getY()+rectA.getHeight()-x;\n    else\n        width = rectB.getY()+rectB.getHeight()-x;\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1604.5
        }, 
        {
            "date" : ISODate("2016-04-23T17:32:48.687+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n\n    if(rectA.getX()>rectB.getX())\n        x = rectB.getX();\n    else\n        x = rectA.getX();\n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth())\n        width = rectA.getX()+rectA.getWidth()-x;\n    else\n        width = rectB.getX()+rectB.getWidth()-x;\n    //y\n    int y;\n\n    if(rectA.getY()>rectB.getY())\n        y = rectB.getY();\n    else\n        y = rectA.getY();\n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight())\n        height = rectA.getY()+rectA.getHeight()-x;\n    else\n        height = rectB.getY()+rectB.getHeight()-x;\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 49.6
        }, 
        {
            "date" : ISODate("2016-04-23T17:33:20.524+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n\n    if(rectA.getX()>rectB.getX())\n        x = rectB.getX();\n    else\n        x = rectA.getX();\n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth())\n        width = rectA.getX()+rectA.getWidth()-x;\n    else\n        width = rectB.getX()+rectB.getWidth()-x;\n    //y\n    int y;\n\n    if(rectA.getY()>rectB.getY())\n        y = rectB.getY();\n    else\n        y = rectA.getY();\n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight())\n        height = rectA.getY()+rectA.getHeight()-y;\n    else\n        height = rectB.getY()+rectB.getHeight()-y;\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 31.8
        }, 
        {
            "date" : ISODate("2016-04-25T08:26:23.754+0000"), 
            "code" : "//TAKEN NOTE:)\n\n//very methodical method! very clear what you are trying to do\n//however, you may want to explore Math.min(int a, int b) and Math.max(int a, int b)\n//it'll save you a lot fo time writing dem if elses!\n//also, it will be awesome if you could make it a point to add curly braces even if it's just one\n//line for the body of your if statement\n\n/*\n    i.e.\n    if(a > b){\n        a = b;\n    } else {\n        b = a;\n    }\n*/\n\n//the reasoning for this is simple: imagine if you have to add another 3 more lines\n//to each of the if else below, then the effort spent will be a lot and if you miss out\n//on a curly brace, you'll spend more time debugging\n//so curly braces are your best friend!\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n\n    \n        x = Math.min(rectA.getX(), rectB.getX());\n \n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth())\n        width = rectA.getX()+rectA.getWidth()-x;\n    else\n        width = rectB.getX()+rectB.getWidth()-x;\n    //y\n    int y;\n\n    if(rectA.getY()>rectB.getY())\n        y = rectB.getY();\n    else\n        y = rectA.getY();\n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight())\n        height = rectA.getY()+rectA.getHeight()-y;\n    else\n        height = rectB.getY()+rectB.getHeight()-y;\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 1696.1
        }, 
        {
            "date" : ISODate("2016-04-25T08:26:47.384+0000"), 
            "code" : "//TAKEN NOTE:)\n\n//very methodical method! very clear what you are trying to do\n//however, you may want to explore Math.min(int a, int b) and Math.max(int a, int b)\n//it'll save you a lot fo time writing dem if elses!\n//also, it will be awesome if you could make it a point to add curly braces even if it's just one\n//line for the body of your if statement\n\n/*\n    i.e.\n    if(a > b){\n        a = b;\n    } else {\n        b = a;\n    }\n*/\n\n//the reasoning for this is simple: imagine if you have to add another 3 more lines\n//to each of the if else below, then the effort spent will be a lot and if you miss out\n//on a curly brace, you'll spend more time debugging\n//so curly braces are your best friend!\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n\n    \n        x = Math.min(rectA.getX(), rectB.getX());\n        System.out.println(\"THis is x\"+x;)\n \n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth())\n        width = rectA.getX()+rectA.getWidth()-x;\n    else\n        width = rectB.getX()+rectB.getWidth()-x;\n    //y\n    int y;\n\n    if(rectA.getY()>rectB.getY())\n        y = rectB.getY();\n    else\n        y = rectA.getY();\n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight())\n        height = rectA.getY()+rectA.getHeight()-y;\n    else\n        height = rectB.getY()+rectB.getHeight()-y;\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.8
        }, 
        {
            "date" : ISODate("2016-04-25T08:26:54.188+0000"), 
            "code" : "//TAKEN NOTE:)\n\n//very methodical method! very clear what you are trying to do\n//however, you may want to explore Math.min(int a, int b) and Math.max(int a, int b)\n//it'll save you a lot fo time writing dem if elses!\n//also, it will be awesome if you could make it a point to add curly braces even if it's just one\n//line for the body of your if statement\n\n/*\n    i.e.\n    if(a > b){\n        a = b;\n    } else {\n        b = a;\n    }\n*/\n\n//the reasoning for this is simple: imagine if you have to add another 3 more lines\n//to each of the if else below, then the effort spent will be a lot and if you miss out\n//on a curly brace, you'll spend more time debugging\n//so curly braces are your best friend!\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n\n    \n        x = Math.min(rectA.getX(), rectB.getX());\n        System.out.println(\"THis is x\"+x);\n \n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth())\n        width = rectA.getX()+rectA.getWidth()-x;\n    else\n        width = rectB.getX()+rectB.getWidth()-x;\n    //y\n    int y;\n\n    if(rectA.getY()>rectB.getY())\n        y = rectB.getY();\n    else\n        y = rectA.getY();\n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight())\n        height = rectA.getY()+rectA.getHeight()-y;\n    else\n        height = rectB.getY()+rectB.getHeight()-y;\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 6.5
        }, 
        {
            "date" : ISODate("2016-04-25T08:27:49.494+0000"), 
            "code" : "//TAKEN NOTE:)\n\n//very methodical method! very clear what you are trying to do\n//however, you may want to explore Math.min(int a, int b) and Math.max(int a, int b)\n//it'll save you a lot fo time writing dem if elses!\n//also, it will be awesome if you could make it a point to add curly braces even if it's just one\n//line for the body of your if statement\n\n/*\n    i.e.\n    if(a > b){\n        a = b;\n    } else {\n        b = a;\n    }\n*/\n\n//the reasoning for this is simple: imagine if you have to add another 3 more lines\n//to each of the if else below, then the effort spent will be a lot and if you miss out\n//on a curly brace, you'll spend more time debugging\n//so curly braces are your best friend!\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n\n    \n        x = Math.min(rectA.getX(), rectB.getX());\n        System.out.println(\"THis is x\"+x);\n \n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth())\n        width = rectA.getX()+rectA.getWidth()-x;\n    else\n        width = rectB.getX()+rectB.getWidth()-x;\n    //y\n    int y;\n    y = Math.min(rectA.getY(), rectB.getY());\n\n \n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight())\n        height = rectA.getY()+rectA.getHeight()-y;\n    else\n        height = rectB.getY()+rectB.getHeight()-y;\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 55.5
        }, 
        {
            "date" : ISODate("2016-04-25T08:28:38.146+0000"), 
            "code" : "//TAKEN NOTE:)\n\n//very methodical method! very clear what you are trying to do\n//however, you may want to explore Math.min(int a, int b) and Math.max(int a, int b)\n//it'll save you a lot fo time writing dem if elses!\n//also, it will be awesome if you could make it a point to add curly braces even if it's just one\n//line for the body of your if statement\n\n/*\n    i.e.\n    if(a > b){\n        a = b;\n    } else {\n        b = a;\n    }\n*/\n\n//the reasoning for this is simple: imagine if you have to add another 3 more lines\n//to each of the if else below, then the effort spent will be a lot and if you miss out\n//on a curly brace, you'll spend more time debugging\n//so curly braces are your best friend!\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n    x = Math.min(rectA.getX(), rectB.getX());\n \n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth()){\n        width = rectA.getX()+rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+rectB.getWidth()-x;\n    }\n    //y\n    int y;\n    y = Math.min(rectA.getY(), rectB.getY());\n\n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight()){\n        height = rectA.getY()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getY()+rectB.getHeight()-y;\n    }\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 48.4
        }
    ]
}
{ 
    "_id" : "iLhSFheqbbsCQc293", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T14:01:42.223+0000"), 
    "updatedAt" : ISODate("2016-04-25T11:28:09.172+0000"), 
    "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String args[]){\n\n        int num = 0;\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        do\n        {\n            num = sc.nextInt();\n            if(num!= -1){\n                sum += num;\n            }\n        }while(num != -1);\n        System.out.print(\"The sum is \"+ sum+\".\");\n    }        \n}", 
    "status" : "PASS", 
    "activeTime" : 35.5, 
    "totalActiveTime" : 386.70000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T11:22:54.994+0000"), 
            "code" : "public class Adder{\n    int num = 0;\n    Scanner sc = new Scanner(System.in);\n    int sum = 0;\n    do{\n        System.out.print(\"Enter number>\");\n        num = sc.nextInt();\n        sum += num;\n    }while(num != -1)\n        \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 148.3
        }, 
        {
            "date" : ISODate("2016-04-25T11:23:19.734+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    int num = 0;\n    Scanner sc = new Scanner(System.in);\n    int sum = 0;\n    do{\n        System.out.print(\"Enter number>\");\n        num = sc.nextInt();\n        sum += num;\n    }while(num != -1)\n        \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.6
        }, 
        {
            "date" : ISODate("2016-04-25T11:24:06.110+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    int num = 0;\n    Scanner sc = new Scanner(System.in);\n    int sum = 0;\n    try{\n        System.out.print(\"Enter number>\");\n        num = sc.nextInt();\n        sum += num;\n    }while(num != -1)\n        \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.1
        }, 
        {
            "date" : ISODate("2016-04-25T11:24:32.013+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    int num = 0;\n    Scanner sc = new Scanner(System.in);\n    int sum = 0;\n    do\n    {\n        System.out.print(\"Enter number>\");\n        num = sc.nextInt();\n        sum += num;\n    }while(num != -1)\n        \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.5
        }, 
        {
            "date" : ISODate("2016-04-25T11:25:55.584+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(string args[]){\n\n        int num = 0;\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        do\n        {\n            System.out.print(\"Enter number>\");\n            num = sc.nextInt();\n            sum += num;\n        }while(num != -1)\n    }        \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(43)
        }, 
        {
            "date" : ISODate("2016-04-25T11:26:03.903+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(string args[]){\n\n        int num = 0;\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        do\n        {\n            System.out.print(\"Enter number>\");\n            num = sc.nextInt();\n            sum += num;\n        }while(num != -1);\n    }        \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.3
        }, 
        {
            "date" : ISODate("2016-04-25T11:26:16.116+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String args[]){\n\n        int num = 0;\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        do\n        {\n            System.out.print(\"Enter number>\");\n            num = sc.nextInt();\n            sum += num;\n        }while(num != -1);\n    }        \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.9
        }, 
        {
            "date" : ISODate("2016-04-25T11:26:32.438+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String args[]){\n\n        int num = 0;\n        int sum = 0;\n        do\n        {\n            num = sc.nextInt();\n            sum += num;\n        }while(num != -1);\n    }        \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.6
        }, 
        {
            "date" : ISODate("2016-04-25T11:26:45.381+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String args[]){\n\n        int num = 0;\n        int sum = 0;\n        do\n        {\n            num = nextInt();\n            sum += num;\n        }while(num != -1);\n    }        \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.9
        }, 
        {
            "date" : ISODate("2016-04-25T11:26:53.590+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String args[]){\n\n        int num = 0;\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        do\n        {\n            num = sc.nextInt();\n            sum += num;\n        }while(num != -1);\n    }        \n}", 
            "status" : "FAIL", 
            "activeTime" : 8.1
        }, 
        {
            "date" : ISODate("2016-04-25T11:27:28.001+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String args[]){\n\n        int num = 0;\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        do\n        {\n            num = sc.nextInt();\n            sum += num;\n        }while(num != -1);\n        System.out.print(\"The sum is \"+ sum+\".\")\n    }        \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.6
        }, 
        {
            "date" : ISODate("2016-04-25T11:27:33.683+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String args[]){\n\n        int num = 0;\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        do\n        {\n            num = sc.nextInt();\n            sum += num;\n        }while(num != -1);\n        System.out.print(\"The sum is \"+ sum+\".\");\n    }        \n}", 
            "status" : "FAIL", 
            "activeTime" : 5.3
        }, 
        {
            "date" : ISODate("2016-04-25T11:28:09.172+0000"), 
            "code" : "import java.util.*;\npublic class Adder{\n    public static void main(String args[]){\n\n        int num = 0;\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        do\n        {\n            num = sc.nextInt();\n            if(num!= -1){\n                sum += num;\n            }\n        }while(num != -1);\n        System.out.print(\"The sum is \"+ sum+\".\");\n    }        \n}", 
            "status" : "PASS", 
            "activeTime" : 35.5
        }
    ]
}
{ 
    "_id" : "zuYrQjjfXM4KjtWQF", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "m8u4AidaqHqXybizW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-25T11:28:27.745+0000"), 
    "updatedAt" : ISODate("2016-04-25T11:29:38.679+0000"), 
    "code" : "public static double doubleInt(int x, int y){\n    double sum = x + y;\n    \n    return sum;\n}", 
    "status" : "PASS", 
    "activeTime" : 89.4, 
    "totalActiveTime" : 89.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T11:29:38.678+0000"), 
            "code" : "public static double doubleInt(int x, int y){\n    double sum = x + y;\n    \n    return sum;\n}", 
            "status" : "PASS", 
            "activeTime" : 89.4
        }
    ]
}
{ 
    "_id" : "jnsXHyux9Et5tr37S", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "L46REaDboHACstAXr", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-25T11:29:48.694+0000"), 
    "updatedAt" : ISODate("2016-04-25T11:31:28.799+0000"), 
    "code" : "public static void quotify(String x){\n    System.out.print(\"\\\"\"+ x + \"\\\"\" );\n}", 
    "status" : "PASS", 
    "activeTime" : 19.1, 
    "totalActiveTime" : 109.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T11:31:09.341+0000"), 
            "code" : "public static void quotify(String x){\n    System.out.print(\"\"\"+ x + \"\"\"\" );\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 90.8
        }, 
        {
            "date" : ISODate("2016-04-25T11:31:28.799+0000"), 
            "code" : "public static void quotify(String x){\n    System.out.print(\"\\\"\"+ x + \"\\\"\" );\n}", 
            "status" : "PASS", 
            "activeTime" : 19.1
        }
    ]
}
{ 
    "_id" : "CtJNLdu8sXyZrD6sf", 
    "userId" : "rczYdr6YaF4Nv8DqY", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T23:44:24.746+0000"), 
    "updatedAt" : ISODate("2016-04-25T13:23:04.556+0000"), 
    "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        String lowerCase = word.toLowerCase();\n        boolean check = true;\n        int n = lowerCase.length();\n              for (int i=0;i<(n / 2) + 1;++i) {\n                 if (lowerCase.charAt(i) != lowerCase.charAt(n - i - 1)) {\n                     check = false;\n                 }\n              }\n        if (check) {\n            System.out.println(word + \" is a palindrome!\");\n        }    else {\n            System.out.println(word + \" is not a palindrome.\");\n        }\n\n}", 
    "status" : "PASS", 
    "activeTime" : 105.5, 
    "totalActiveTime" : 1952.5999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T23:49:40.076+0000"), 
            "code" : "public static void printPalindrome(String word) {\n    for (int i = 0; i<word.length(); i++) {\n        for (int j = word.length() - 1; j >= 0; j++) {\n            if (word.charAt(i) == word.charAt(j)) {\n                System.out.println(word + \"is a palindrome!\");\n            } else {\n                System.out.println(word + \"is not a palindrome.\");\n            }\n                \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 321.5
        }, 
        {
            "date" : ISODate("2016-04-24T23:54:01.341+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \") {\n        console = sc.nextLine();\n    for (int i = 0; i<word.length(); i++) {\n        for (int j = word.length() - 1; j >= 0; j++) {\n            if (word.charAt(i) == word.charAt(j)) {\n                System.out.println(word + \"is a palindrome!\");\n            } else {\n                System.out.println(word + \"is not a palindrome.\");\n            }\n                \n        }\n    }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 261.4
        }, 
        {
            "date" : ISODate("2016-04-24T23:54:19.347+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \"); \n        console = sc.nextLine();\n    for (int i = 0; i<word.length(); i++) {\n        for (int j = word.length() - 1; j >= 0; j++) {\n            if (word.charAt(i) == word.charAt(j)) {\n                System.out.println(word + \"is a palindrome!\");\n            } else {\n                System.out.println(word + \"is not a palindrome.\");\n            }\n                \n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(18)
        }, 
        {
            "date" : ISODate("2016-04-24T23:54:38.808+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \"); \n        String word = console.nextLine();\n    for (int i = 0; i<word.length(); i++) {\n        for (int j = word.length() - 1; j >= 0; j++) {\n            if (word.charAt(i) == word.charAt(j)) {\n                System.out.println(word + \"is a palindrome!\");\n            } else {\n                System.out.println(word + \"is not a palindrome.\");\n            }\n                \n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 19.1
        }, 
        {
            "date" : ISODate("2016-04-24T23:55:49.603+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \"); \n        String word = console.nextLine();\n    for (int i = 0; i<word.length(); i++) {\n        for (int j = word.length() - 1; j >= 0; j++) {\n            if (word.charAt(i) == word.charAt(j)) {\n                System.out.println(word + \" is a palindrome!\");\n            } else {\n                System.out.println(word + \" is not a palindrome.\");\n            }\n                \n        }\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 70.8
        }, 
        {
            "date" : ISODate("2016-04-25T00:02:46.762+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        if (check = true) {\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (word.charAt(i) == word.charAt(j)) {\n                        check = true;\n                    } else {\n                        check = false;\n                    }\n                        \n                }\n            }\n        }\n    if (check = true) {\n        System.out.println(word + \" is a palindrome!\");\n    } else (check = false) {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 417.4
        }, 
        {
            "date" : ISODate("2016-04-25T00:03:00.115+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        if (check = true) {\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (word.charAt(i) == word.charAt(j)) {\n                        check = true;\n                    } else {\n                        check = false;\n                    }\n                        \n                }\n            }\n        }\n    if (check == true) {\n        System.out.println(word + \" is a palindrome!\");\n    } else (check == false) {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.4
        }, 
        {
            "date" : ISODate("2016-04-25T00:03:31.803+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.println(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        if (check = true) {\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (word.charAt(i) == word.charAt(j)) {\n                        check = true;\n                    } else {\n                        check = false;\n                    }\n                        \n                }\n            }\n        }\n    if (check) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 31.3
        }, 
        {
            "date" : ISODate("2016-04-25T00:03:58.598+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        if (check = true) {\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (word.charAt(i) == word.charAt(j)) {\n                        check = true;\n                    } else {\n                        check = false;\n                    }\n                        \n                }\n            }\n        }\n    if (check) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 26.8
        }, 
        {
            "date" : ISODate("2016-04-25T00:04:32.759+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        if (check = true) {\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (check = true) {\n                        if (word.charAt(i) == word.charAt(j)) {\n                            check = true;\n                        } else {\n                            check = false;\n                        }\n                    }  \n                }\n            }\n        }\n    if (check) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 34.1
        }, 
        {
            "date" : ISODate("2016-04-25T00:05:48.599+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        if (check = true) {\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (check) {\n                        if (word.charAt(i) == word.charAt(j)) {\n                            check = true;\n                        } else {\n                            check = false;\n                    }  \n                }\n            }\n        }\n    if (check) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 76.3
        }, 
        {
            "date" : ISODate("2016-04-25T00:08:43.323+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        if (check = true) {\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (word.charAt(i) == word.charAt(j)) {\n                        check = true;\n                    } else {\n                        check = false;\n                    }\n                        \n                }\n            }\n        }\n    if (check) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 90.6
        }, 
        {
            "date" : ISODate("2016-04-25T00:10:57.798+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (word.charAt(i) == word.charAt(j)) {\n                        check = true;\n                    } else {\n                        check = false;\n                    }\n                        \n                }\n            }\n    if (check) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 163.6
        }, 
        {
            "date" : ISODate("2016-04-25T12:57:26.548+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        String one = word.substring(0, word.length()/2);\n        String two = word.substring(word.length()/2, word.length());\n        \n        boolean check = true;\n            for (int i = 0; i<word.length() / 2; i++) {\n                for (int j = word.length() - 1 / 2; j >= 0; j--) {\n                    if (word.charAt(i) == word.charAt(j)) {\n                        check = true;\n                    } else {\n                        check = false;\n                    }\n                        \n                }\n            }\n    if (check) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 10.8
        }, 
        {
            "date" : ISODate("2016-04-25T12:57:52.164+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (word.charAt(i) == word.charAt(j)) {\n                        check = true;\n                    } else {\n                        check = false;\n                    }\n                        \n                }\n            }\n    if (check) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 25.7
        }, 
        {
            "date" : ISODate("2016-04-25T12:58:12.895+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n            for (int i = 0; i<word.length(); i++) {\n                for (int j = word.length() - 1; j >= 0; j--) {\n                    if (word.charAt(i) != word.charAt(j)) {\n                        check = false;\n                    } \n                }\n            }\n    if (check) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 20.8
        }, 
        {
            "date" : ISODate("2016-04-25T13:02:37.269+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        int n = s.length();\n              for (int i=0;i<(n / 2) + 1;++i) {\n                 if (s.charAt(i) != s.charAt(n - i - 1)) {\n                     check = false;\n                 }\n              }\n        if (check) {\n            System.out.println(word + \" is a palindrome.\");\n        }    else {\n            System.out.println(word + \" is not a palindrome!\")\n        }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 213.7
        }, 
        {
            "date" : ISODate("2016-04-25T13:02:40.569+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        int n = s.length();\n              for (int i=0;i<(n / 2) + 1;++i) {\n                 if (s.charAt(i) != s.charAt(n - i - 1)) {\n                     check = false;\n                 }\n              }\n        if (check) {\n            System.out.println(word + \" is a palindrome.\");\n        }    else {\n            System.out.println(word + \" is not a palindrome!\");\n        }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.2
        }, 
        {
            "date" : ISODate("2016-04-25T13:02:48.902+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        int n = word.length();\n              for (int i=0;i<(n / 2) + 1;++i) {\n                 if (s.charAt(i) != s.charAt(n - i - 1)) {\n                     check = false;\n                 }\n              }\n        if (check) {\n            System.out.println(word + \" is a palindrome.\");\n        }    else {\n            System.out.println(word + \" is not a palindrome!\");\n        }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.4
        }, 
        {
            "date" : ISODate("2016-04-25T13:02:54.219+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        int n = word.length();\n              for (int i=0;i<(n / 2) + 1;++i) {\n                 if (word.charAt(i) != word.charAt(n - i - 1)) {\n                     check = false;\n                 }\n              }\n        if (check) {\n            System.out.println(word + \" is a palindrome.\");\n        }    else {\n            System.out.println(word + \" is not a palindrome!\");\n        }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.1
        }, 
        {
            "date" : ISODate("2016-04-25T13:03:09.450+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        boolean check = true;\n        int n = word.length();\n              for (int i=0;i<(n / 2) + 1;++i) {\n                 if (word.charAt(i) != word.charAt(n - i - 1)) {\n                     check = false;\n                 }\n              }\n        if (check) {\n            System.out.println(word + \" is a palindrome!\");\n        }    else {\n            System.out.println(word + \" is not a palindrome.\");\n        }\n\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.1
        }, 
        {
            "date" : ISODate("2016-04-25T13:23:04.555+0000"), 
            "code" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        String lowerCase = word.toLowerCase();\n        boolean check = true;\n        int n = lowerCase.length();\n              for (int i=0;i<(n / 2) + 1;++i) {\n                 if (lowerCase.charAt(i) != lowerCase.charAt(n - i - 1)) {\n                     check = false;\n                 }\n              }\n        if (check) {\n            System.out.println(word + \" is a palindrome!\");\n        }    else {\n            System.out.println(word + \" is not a palindrome.\");\n        }\n\n}", 
            "status" : "PASS", 
            "activeTime" : 105.5
        }
    ]
}
{ 
    "_id" : "b6QcZRXocByJ3Qx3t", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "HqBD3vaejm5KybHnD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T14:01:14.458+0000"), 
    "updatedAt" : ISODate("2016-04-25T13:55:31.944+0000"), 
    "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    Counter counter = supermarket.getCounter(counterNumber);\n    \n    if(counter!= null){\n        return counter.setCashier(cashier);\n    }\n    return false;\n}", 
    "status" : "PASS", 
    "activeTime" : 19.5, 
    "totalActiveTime" : 591.3000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T13:47:58.993+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    return counterNumber.setCounter(cashier);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 334.2
        }, 
        {
            "date" : ISODate("2016-04-25T13:48:22.129+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    return counterNumber.setCashier(cashier);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-04-25T13:49:06.781+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    return counterNumber.getId().setCashier(cashier);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-04-25T13:51:31.191+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    int num = counterNumber.getId();\n    return num.setCashier(cashier);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 74.5
        }, 
        {
            "date" : ISODate("2016-04-25T13:54:12.230+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    Counter counter = supermarket.getCounter(counterNumber);\n    return counter.setCashier(cashier);\n}", 
            "status" : "FAIL", 
            "activeTime" : 73.4
        }, 
        {
            "date" : ISODate("2016-04-25T13:55:12.139+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    Counter counter = supermarket.getCounter(counterNumber);\n    \n    if(counter!= null){\n    return counter.setCashier(cashier);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 58.2
        }, 
        {
            "date" : ISODate("2016-04-25T13:55:31.944+0000"), 
            "code" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    Counter counter = supermarket.getCounter(counterNumber);\n    \n    if(counter!= null){\n        return counter.setCashier(cashier);\n    }\n    return false;\n}", 
            "status" : "PASS", 
            "activeTime" : 19.5
        }
    ]
}
{ 
    "_id" : "TfP6gL6C5Hm97h4zS", 
    "userId" : "rczYdr6YaF4Nv8DqY", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-25T13:55:11.421+0000"), 
    "updatedAt" : ISODate("2016-04-25T14:00:48.055+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight() {\n        return height;\n    }\n    public int getWidth() {\n        return width;\n    }\n    public int getX() {\n        return x;\n    }\n    public int getY() {\n        return y;\n    }\n    public String toString() {\n        return (\"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 364.3, 
    "totalActiveTime" : 364.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T14:00:48.054+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight() {\n        return height;\n    }\n    public int getWidth() {\n        return width;\n    }\n    public int getX() {\n        return x;\n    }\n    public int getY() {\n        return y;\n    }\n    public String toString() {\n        return (\"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 364.3
        }
    ]
}
{ 
    "_id" : "xA2zX3GNpJQJyG6SX", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "RDWYAzXw67dJDNyz8", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-25T13:55:35.542+0000"), 
    "updatedAt" : ISODate("2016-04-25T14:16:33.690+0000"), 
    "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int totalNumOfCounter = supermarket.getNumCounters();\n    int count =0;\n    for(int i =1; i<=totalNumOfCounter;i++){\n        Counter counter = supermarket.getCounter(i);\n        if(counter != null){\n            int numOfCustomer = counter.getNumCustomersInQueue();\n        \n            if(numOfCustomer == 0){\n                count++;\n            } \n        }\n    }\n    return count;\n}", 
    "status" : "PASS", 
    "activeTime" : 7.8, 
    "totalActiveTime" : 914.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T14:12:35.688+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int totalNumOfCounter = supermarket.getNumCounters();\n    int count =0;\n    for(int i =0; i<totalNumOfCounter;i++){\n        Counter counter = getCounter(int i);\n        int numOfCustomer = counter.getNumCustomersInQueue();\n        \n        if(numOfCustomer == 0){\n            count++;\n        }\n    }\n    return count;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 693.2
        }, 
        {
            "date" : ISODate("2016-04-25T14:12:47.013+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int totalNumOfCounter = supermarket.getNumCounters();\n    int count =0;\n    for(int i =0; i<totalNumOfCounter;i++){\n        Counter counter = getCounter(i);\n        int numOfCustomer = counter.getNumCustomersInQueue();\n        \n        if(numOfCustomer == 0){\n            count++;\n        }\n    }\n    return count;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-04-25T14:13:20.186+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int totalNumOfCounter = supermarket.getNumCounters();\n    int count =0;\n    for(int i =0; i<totalNumOfCounter;i++){\n        Counter counter = supermarket.getCounter(i);\n        int numOfCustomer = counter.getNumCustomersInQueue();\n        \n        if(numOfCustomer == 0){\n            count++;\n        }\n    }\n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 28.5
        }, 
        {
            "date" : ISODate("2016-04-25T14:14:30.040+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int totalNumOfCounter = supermarket.getNumCounters()-1;\n    int count =0;\n    for(int i =0; i<totalNumOfCounter;i++){\n        Counter counter = supermarket.getCounter(i);\n        int numOfCustomer = counter.getNumCustomersInQueue();\n        \n        if(numOfCustomer == 0){\n            count++;\n        }\n    }\n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 60.3
        }, 
        {
            "date" : ISODate("2016-04-25T14:15:49.770+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int totalNumOfCounter = supermarket.getNumCounters()-1;\n    int count =0;\n    for(int i =0; i<totalNumOfCounter;i++){\n        Counter counter = supermarket.getCounter(i);\n        if(counter != null){\n            int numOfCustomer = counter.getNumCustomersInQueue();\n        \n            if(numOfCustomer == 0){\n                count++;\n            } \n        }\n    }\n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 77.4
        }, 
        {
            "date" : ISODate("2016-04-25T14:16:26.113+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int totalNumOfCounter = supermarket.getNumCounters()-1;\n    int count =0;\n    for(int i =1; i<=totalNumOfCounter;i++){\n        Counter counter = supermarket.getCounter(i);\n        if(counter != null){\n            int numOfCustomer = counter.getNumCustomersInQueue();\n        \n            if(numOfCustomer == 0){\n                count++;\n            } \n        }\n    }\n    return count;\n}", 
            "status" : "FAIL", 
            "activeTime" : 36.2
        }, 
        {
            "date" : ISODate("2016-04-25T14:16:33.690+0000"), 
            "code" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int totalNumOfCounter = supermarket.getNumCounters();\n    int count =0;\n    for(int i =1; i<=totalNumOfCounter;i++){\n        Counter counter = supermarket.getCounter(i);\n        if(counter != null){\n            int numOfCustomer = counter.getNumCustomersInQueue();\n        \n            if(numOfCustomer == 0){\n                count++;\n            } \n        }\n    }\n    return count;\n}", 
            "status" : "PASS", 
            "activeTime" : 7.8
        }
    ]
}
{ 
    "_id" : "STm6kNGv5TR7uZAQL", 
    "userId" : "rczYdr6YaF4Nv8DqY", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-25T14:00:58.677+0000"), 
    "updatedAt" : ISODate("2016-04-25T14:55:58.204+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = 0;\n    int y = 0;\n    int width = 0;\n    int height = 0;\n    \n    if (rectA.getX()>rectB.getX()) {\n        x = rectB.getX();\n    } else {\n        x = rectA.getX();\n    }\n    \n    if (rectA.getY()>rectB.getY()) {\n        y = rectB.getY();\n    } else {\n        y = rectA.getY();\n    }\n    \n    if (rectA.getX()+rectA.getWidth() > rectB.getX()+rectB.getWidth()) {\n        width = rectA.getX() - rectB.getX() +rectA.getWidth();\n    } else {\n        width = rectB.getX() - rectA.getX() +rectB.getWidth();\n    }\n    \n    if (rectA.getY()+rectA.getHeight() > rectB.getY()+rectB.getHeight()) {\n        height = rectA.getY() - rectB.getY() +rectA.getHeight();\n    } else {\n        height = rectB.getY() - rectA.getY() +rectB.getHeight();\n    }\n    Rectangle rect = new Rectangle(x, y, width, height);\n    return (rect);\n}", 
    "status" : "PASS", 
    "activeTime" : 722.6, 
    "totalActiveTime" : 2179.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T14:28:34.004+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = 0;\n    int y = 0;\n    int width = 0;\n    int height = 0;\n    \n    if (rectA.getX()>rectB.getX()) {\n        x = rectB.getX();\n    } else {\n        x = rectA.getX();\n    }\n    \n    if (rectA.getY()>rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    if (rectA.getX()+rectA.getWidth() > rectB.getX()+rectB.getWidth() {\n        width = rectA.getX()+rectA.getWidth();\n    } else {\n        width = rectB.getX()+rectB.getWidth();\n    }\n    \n    if (rectA.getY()+rectA.getHeight() > rectB.getY()+rectB.getHeight() {\n        height = rectA.getY()+rectA.getHeight();\n    } else {\n        height = rectB.getY()+rectB.getHeight();\n    }\n    \n    return (Rectangle rect = new Rectangle(int x, int y, int width, int height));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 945.1
        }, 
        {
            "date" : ISODate("2016-04-25T14:37:08.988+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = 0;\n    int y = 0;\n    int width = 0;\n    int height = 0;\n    \n    if (rectA.getX()>rectB.getX()) {\n        x = rectB.getX();\n    } else {\n        x = rectA.getX();\n    }\n    \n    if (rectA.getY()>rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    if (rectA.getX()+rectA.getWidth() > rectB.getX()+rectB.getWidth()) {\n        width = rectA.getX()+rectA.getWidth();\n    } else {\n        width = rectB.getX()+rectB.getWidth();\n    }\n    \n    if (rectA.getY()+rectA.getHeight() > rectB.getY()+rectB.getHeight()) {\n        height = rectA.getY()+rectA.getHeight();\n    } else {\n        height = rectB.getY()+rectB.getHeight();\n    }\n    \n    return (Rectangle rect = new Rectangle(int x, int y, int width, int height));\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 274.5
        }, 
        {
            "date" : ISODate("2016-04-25T14:37:26.857+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = 0;\n    int y = 0;\n    int width = 0;\n    int height = 0;\n    \n    if (rectA.getX()>rectB.getX()) {\n        x = rectB.getX();\n    } else {\n        x = rectA.getX();\n    }\n    \n    if (rectA.getY()>rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    if (rectA.getX()+rectA.getWidth() > rectB.getX()+rectB.getWidth()) {\n        width = rectA.getX()+rectA.getWidth();\n    } else {\n        width = rectB.getX()+rectB.getWidth();\n    }\n    \n    if (rectA.getY()+rectA.getHeight() > rectB.getY()+rectB.getHeight()) {\n        height = rectA.getY()+rectA.getHeight();\n    } else {\n        height = rectB.getY()+rectB.getHeight();\n    }\n    Rectangle rect = new Rectangle(int x, int y, int width, int height)\n    return (rect);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-04-25T14:37:29.674+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = 0;\n    int y = 0;\n    int width = 0;\n    int height = 0;\n    \n    if (rectA.getX()>rectB.getX()) {\n        x = rectB.getX();\n    } else {\n        x = rectA.getX();\n    }\n    \n    if (rectA.getY()>rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    if (rectA.getX()+rectA.getWidth() > rectB.getX()+rectB.getWidth()) {\n        width = rectA.getX()+rectA.getWidth();\n    } else {\n        width = rectB.getX()+rectB.getWidth();\n    }\n    \n    if (rectA.getY()+rectA.getHeight() > rectB.getY()+rectB.getHeight()) {\n        height = rectA.getY()+rectA.getHeight();\n    } else {\n        height = rectB.getY()+rectB.getHeight();\n    }\n    Rectangle rect = new Rectangle(int x, int y, int width, int height);\n    return (rect);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.9
        }, 
        {
            "date" : ISODate("2016-04-25T14:37:47.517+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = 0;\n    int y = 0;\n    int width = 0;\n    int height = 0;\n    \n    if (rectA.getX()>rectB.getX()) {\n        x = rectB.getX();\n    } else {\n        x = rectA.getX();\n    }\n    \n    if (rectA.getY()>rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    if (rectA.getX()+rectA.getWidth() > rectB.getX()+rectB.getWidth()) {\n        width = rectA.getX()+rectA.getWidth();\n    } else {\n        width = rectB.getX()+rectB.getWidth();\n    }\n    \n    if (rectA.getY()+rectA.getHeight() > rectB.getY()+rectB.getHeight()) {\n        height = rectA.getY()+rectA.getHeight();\n    } else {\n        height = rectB.getY()+rectB.getHeight();\n    }\n    Rectangle rect = new Rectangle(x, y, width, height);\n    return (rect);\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.4
        }, 
        {
            "date" : ISODate("2016-04-25T14:41:14.289+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = 0;\n    int y = 0;\n    int width = 0;\n    int height = 0;\n    \n    if (rectA.getX()>rectB.getX()) {\n        x = rectB.getX();\n    } else {\n        x = rectA.getX();\n    }\n    \n    if (rectA.getY()>rectB.getY()) {\n        y = rectB.getY();\n    } else {\n        y = rectA.getY();\n    }\n    \n    if (rectA.getX()+rectA.getWidth() > rectB.getX()+rectB.getWidth()) {\n        width = rectA.getX()+rectA.getWidth();\n    } else {\n        width = rectB.getX()+rectB.getWidth();\n    }\n    \n    if (rectA.getY()+rectA.getHeight() > rectB.getY()+rectB.getHeight()) {\n        height = rectA.getY()+rectA.getHeight();\n    } else {\n        height = rectB.getY()+rectB.getHeight();\n    }\n    Rectangle rect = new Rectangle(x, y, width, height);\n    return (rect);\n}", 
            "status" : "FAIL", 
            "activeTime" : 199.5
        }, 
        {
            "date" : ISODate("2016-04-25T14:55:58.204+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = 0;\n    int y = 0;\n    int width = 0;\n    int height = 0;\n    \n    if (rectA.getX()>rectB.getX()) {\n        x = rectB.getX();\n    } else {\n        x = rectA.getX();\n    }\n    \n    if (rectA.getY()>rectB.getY()) {\n        y = rectB.getY();\n    } else {\n        y = rectA.getY();\n    }\n    \n    if (rectA.getX()+rectA.getWidth() > rectB.getX()+rectB.getWidth()) {\n        width = rectA.getX() - rectB.getX() +rectA.getWidth();\n    } else {\n        width = rectB.getX() - rectA.getX() +rectB.getWidth();\n    }\n    \n    if (rectA.getY()+rectA.getHeight() > rectB.getY()+rectB.getHeight()) {\n        height = rectA.getY() - rectB.getY() +rectA.getHeight();\n    } else {\n        height = rectB.getY() - rectA.getY() +rectB.getHeight();\n    }\n    Rectangle rect = new Rectangle(x, y, width, height);\n    return (rect);\n}", 
            "status" : "PASS", 
            "activeTime" : 722.6
        }
    ]
}
{ 
    "_id" : "RuxMRBJqQjb62ppmf", 
    "userId" : "skeAjiWQ9cA4BLDxs", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-25T07:29:41.383+0000"), 
    "updatedAt" : ISODate("2016-04-26T01:26:36.945+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //get x\n    int x = Math.min(rectA.getX(), rectB.getX());\n    //get y\n    int y = Math.min(rectA.getY(), rectB.getY());\n    //get width\n    int width = Math.min(rectA.getWidth(), rectB.getWidth());\n    //get height\n    int height = Math.min(rectA.getHeight(), rectB.getHeight());\n    \n    Rectangle result = new Rectangle(x, y, width, height);\n    return result;\n}", 
    "status" : "FAIL", 
    "activeTime" : 147.5, 
    "totalActiveTime" : 147.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T01:26:36.944+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //get x\n    int x = Math.min(rectA.getX(), rectB.getX());\n    //get y\n    int y = Math.min(rectA.getY(), rectB.getY());\n    //get width\n    int width = Math.min(rectA.getWidth(), rectB.getWidth());\n    //get height\n    int height = Math.min(rectA.getHeight(), rectB.getHeight());\n    \n    Rectangle result = new Rectangle(x, y, width, height);\n    return result;\n}", 
            "status" : "FAIL", 
            "activeTime" : 147.5
        }
    ]
}
{ 
    "_id" : "HT3DFdN7z8SiQpJZx", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T03:10:02.352+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:52:13.678+0000"), 
    "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 3.8, 
    "totalActiveTime" : 753.7999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T03:14:57.866+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname)}{\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight =%skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight))\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 251.6
        }, 
        {
            "date" : ISODate("2016-04-26T03:15:42.196+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname)}{\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight =%skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight))\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.1
        }, 
        {
            "date" : ISODate("2016-04-26T03:15:55.432+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight =%skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight))\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-04-26T03:16:02.946+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight =%skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 7.3
        }, 
        {
            "date" : ISODate("2016-04-26T03:17:57.409+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight =%skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(16)
        }, 
        {
            "date" : ISODate("2016-04-26T03:18:17.090+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-04-26T03:19:49.364+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.2
        }, 
        {
            "date" : ISODate("2016-04-26T03:20:09.805+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 6.4
        }, 
        {
            "date" : ISODate("2016-04-26T03:52:48.847+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 134.4
        }, 
        {
            "date" : ISODate("2016-04-26T03:53:18.030+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 28.8
        }, 
        {
            "date" : ISODate("2016-04-26T05:06:18.246+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 218.1
        }, 
        {
            "date" : ISODate("2016-04-26T05:06:44.885+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 8.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:52:13.677+0000"), 
            "code" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 3.8
        }
    ]
}
{ 
    "_id" : "Ge5JFKv4mXWDjvkss", 
    "userId" : "dPGDwJc58vokTNtKk", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T04:01:03.984+0000"), 
    "updatedAt" : ISODate("2016-04-26T04:08:58.087+0000"), 
    "code" : "public static String parseEmail(String email){\n    String emailID = \"\";\n    \n    int index = email.indexOf('@');\n    for(int i = 0; i < index; i++){\n        char ch = email.charAt(i);\n        emailID += (\"\" + ch);\n    }\n    \n    return emailID;\n}", 
    "status" : "PASS", 
    "activeTime" : 58.8, 
    "totalActiveTime" : 402.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T04:06:49.788+0000"), 
            "code" : "public static String parseEmail(String email){\n    String emailID = \"\";\n    \n    int index = email.indexOf('@');\n    for(int i = 0; i < index; i++){\n        char ch = email.charAt(i);\n        emailID = \"\" + ch;\n    }\n    \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 279.3
        }, 
        {
            "date" : ISODate("2016-04-26T04:07:50.116+0000"), 
            "code" : "public static String parseEmail(String email){\n    String emailID = \"\";\n    \n    int index = email.indexOf('@');\n    for(int i = 0; i <= index; i++){\n        char ch = email.charAt(i);\n        emailID = \"\" + ch;\n    }\n    \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 56.7
        }, 
        {
            "date" : ISODate("2016-04-26T04:07:58.021+0000"), 
            "code" : "public static String parseEmail(String email){\n    String emailID = \"\";\n    \n    int index = email.indexOf('@');\n    for(int i = 0; i < index; i++){\n        char ch = email.charAt(i);\n        emailID = \"\" + ch;\n    }\n    \n    return emailID;\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.7
        }, 
        {
            "date" : ISODate("2016-04-26T04:08:58.086+0000"), 
            "code" : "public static String parseEmail(String email){\n    String emailID = \"\";\n    \n    int index = email.indexOf('@');\n    for(int i = 0; i < index; i++){\n        char ch = email.charAt(i);\n        emailID += (\"\" + ch);\n    }\n    \n    return emailID;\n}", 
            "status" : "PASS", 
            "activeTime" : 58.8
        }
    ]
}
{ 
    "_id" : "YL5eCSMjTC47AuQts", 
    "userId" : "dPGDwJc58vokTNtKk", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T04:09:04.414+0000"), 
    "updatedAt" : ISODate("2016-04-26T05:09:18.798+0000"), 
    "code" : "public static void printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrome = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 20.1, 
    "totalActiveTime" : 2087.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T04:42:00.139+0000"), 
            "code" : "public String printPalindrome(){\n    Scanner console = new Scanner(System.in);\n    system.out.println(\"\")\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 514.9
        }, 
        {
            "date" : ISODate("2016-04-26T04:42:06.610+0000"), 
            "code" : "public String printPalindrome(){\n    Scanner console = new Scanner(System.in);\n    system.out.println(\"\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.6
        }, 
        {
            "date" : ISODate("2016-04-26T04:43:07.672+0000"), 
            "code" : "public String printPalindrome(){\n    system.out.println(\"Type one or more words: \");\n    String input = console.nextLine();\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.3
        }, 
        {
            "date" : ISODate("2016-04-26T04:46:31.877+0000"), 
            "code" : "public String printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrom = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n    \n    return palindrome;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 204.3
        }, 
        {
            "date" : ISODate("2016-04-26T04:46:42.127+0000"), 
            "code" : "public String printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrom = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n    \n    return palindrome;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.2
        }, 
        {
            "date" : ISODate("2016-04-26T04:46:56.056+0000"), 
            "code" : "public static String printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrom = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n    \n    return palindrome;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-04-26T05:01:28.673+0000"), 
            "code" : "public static void String printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrom = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n    \n    return palindrome;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 821.2
        }, 
        {
            "date" : ISODate("2016-04-26T05:01:49.883+0000"), 
            "code" : "public static void String printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrom = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.2
        }, 
        {
            "date" : ISODate("2016-04-26T05:02:18.258+0000"), 
            "code" : "public static void String printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrome = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.5
        }, 
        {
            "date" : ISODate("2016-04-26T05:02:45.929+0000"), 
            "code" : "public static void printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrome = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.6
        }, 
        {
            "date" : ISODate("2016-04-26T05:07:12.102+0000"), 
            "code" : "public static void printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrome = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 265.9
        }, 
        {
            "date" : ISODate("2016-04-26T05:08:58.715+0000"), 
            "code" : "public static void printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrome = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 106.4
        }, 
        {
            "date" : ISODate("2016-04-26T05:09:18.797+0000"), 
            "code" : "public static void printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrome = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.1
        }
    ]
}
{ 
    "_id" : "9ePbTusPdv7B5iLyK", 
    "userId" : "jY3HQTQ3dYhv8vib8", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T05:01:52.994+0000"), 
    "updatedAt" : ISODate("2016-04-26T05:08:35.466+0000"), 
    "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight() {\n        return height;\n        \n    } \n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 152.7, 
    "totalActiveTime" : 489.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T05:06:02.983+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight() {\n        return height;\n        \n    } \n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 336.3
        }, 
        {
            "date" : ISODate("2016-04-26T05:08:35.465+0000"), 
            "code" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight() {\n        return height;\n        \n    } \n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 152.7
        }
    ]
}
{ 
    "_id" : "uPhwELS2izqjyMrCg", 
    "userId" : "jY3HQTQ3dYhv8vib8", 
    "questionId" : "5HWDSn4hFGs8nBvfD", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T05:08:38.644+0000"), 
    "updatedAt" : ISODate("2016-04-26T06:22:37.814+0000"), 
    "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    \n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    \n    int highHeightA = rectA.getHeight() + rectA.getY();\n    int highHeightB = rectB.getHeight() + rectB.getY();\n    \n    int highestHeight = Math.max(highHeightA, highHeightB);\n    int heightReturn = highestHeight - minY;\n    \n    int longWidthA = rectA.getWidth() + rectA.getX();\n    int longWidthB = rectB.getWidth() + rectB.getX();\n    \n    int longestWidth = Math.max(longWidthA, longWidthB);\n    int widthReturn = longestWidth - minX;\n    \n    Rectangle toReturn = new Rectangle(minX, minY, widthReturn, heightReturn);\n    return toReturn;\n}", 
    "status" : "PASS", 
    "activeTime" : 359.4, 
    "totalActiveTime" : 1183.3000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T05:14:10.112+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle toReturn = new Rectangle();\n    int minX = Math.min(rectA.getX, rectB.getX);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 244.8
        }, 
        {
            "date" : ISODate("2016-04-26T05:14:29.201+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle toReturn = new Rectangle(int x, int y, int width, int height);\n    int minX = Math.min(rectA.getX, rectB.getX);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-04-26T05:14:37.433+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle toReturn = new Rectangle(int x, int y, int width, int height);\n    int minX = Math.min(rectA.getX, rectB.getX);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-04-26T05:14:46.179+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle toReturn = new Rectangle(int x, int y, int width, int height);\n    //int minX = Math.min(rectA.getX, rectB.getX);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.8
        }, 
        {
            "date" : ISODate("2016-04-26T05:15:33.334+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle toReturn = new Rectangle(int x, int y, int width, int height);\n    //int minX = Math.min(rectA.getX, rectB.getX);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.3
        }, 
        {
            "date" : ISODate("2016-04-26T05:15:57.722+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle toReturn = new Rectangle(int x, int y, int width, int height);\n    //int minX = Math.min(rectA.getX, rectB.getX);\n    return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.4
        }, 
        {
            "date" : ISODate("2016-04-26T05:16:47.010+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle toReturn = new Rectangle(int a, int b, int width1, int height1);\n    //int minX = Math.min(rectA.getX, rectB.getX);\n    return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.2
        }, 
        {
            "date" : ISODate("2016-04-26T05:17:20.603+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    //int minX = Math.min(rectA.getX, rectB.getX);\n    return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.1
        }, 
        {
            "date" : ISODate("2016-04-26T05:17:51.771+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    int minX = Math.min(rectA.getX, rectB.getX);\n    //return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(31)
        }, 
        {
            "date" : ISODate("2016-04-26T05:18:08.242+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    //return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.6
        }, 
        {
            "date" : ISODate("2016-04-26T05:18:24.128+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    System.out.println(minX);\n    //return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.8
        }, 
        {
            "date" : ISODate("2016-04-26T05:18:32.482+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    System.out.println(minX);\n    return null;\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-04-26T05:18:58.822+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    System.out.println(minX);\n    return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.5
        }, 
        {
            "date" : ISODate("2016-04-26T05:19:55.279+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int a;\n    int b; \n    int width;\n    int height;\n    Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    System.out.println(minX);\n    return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.1
        }, 
        {
            "date" : ISODate("2016-04-26T05:20:02.975+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int a;\n    int b; \n    int width1;\n    int height1;\n    Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    System.out.println(minX);\n    return toReturn;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.6
        }, 
        {
            "date" : ISODate("2016-04-26T05:20:20.847+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int a = 0;\n    int b = 0; \n    int width1 = 0;\n    int height1 = 0;\n    Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    System.out.println(minX);\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.3
        }, 
        {
            "date" : ISODate("2016-04-26T05:48:23.953+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int a = 0;\n    int b = 0; \n    int width1 = 0;\n    int height1 = 0;\n    Rectangle toReturn = new Rectangle(a, b, width1, height1);\n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    \n    int maxHeight = Math.max((rectA.getY() + rectA.getHeight()), (rectB.getY() + rectB.getHeight()));\n    int maxWidth = Math.max((rectB.getX() + rectA.getWidth()), (rectB.getX() + rectB.getWidth()));\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 246.1
        }, 
        {
            "date" : ISODate("2016-04-26T05:48:57.550+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    \n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    \n    int maxHeight = Math.max((rectA.getY() + rectA.getHeight()), (rectB.getY() + rectB.getHeight()));\n    int maxWidth = Math.max((rectB.getX() + rectA.getWidth()), (rectB.getX() + rectB.getWidth()));\n    \n    Rectangle toReturn = new Rectangle(minX, minY, maxWidth, maxHeight);\n    return toReturn;\n}", 
            "status" : "FAIL", 
            "activeTime" : 33.6
        }, 
        {
            "date" : ISODate("2016-04-26T06:22:37.813+0000"), 
            "code" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    \n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    \n    int highHeightA = rectA.getHeight() + rectA.getY();\n    int highHeightB = rectB.getHeight() + rectB.getY();\n    \n    int highestHeight = Math.max(highHeightA, highHeightB);\n    int heightReturn = highestHeight - minY;\n    \n    int longWidthA = rectA.getWidth() + rectA.getX();\n    int longWidthB = rectB.getWidth() + rectB.getX();\n    \n    int longestWidth = Math.max(longWidthA, longWidthB);\n    int widthReturn = longestWidth - minX;\n    \n    Rectangle toReturn = new Rectangle(minX, minY, widthReturn, heightReturn);\n    return toReturn;\n}", 
            "status" : "PASS", 
            "activeTime" : 359.4
        }
    ]
}
{ 
    "_id" : "yGg5gZ992eZu5tv3a", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-24T19:28:06.650+0000"), 
    "updatedAt" : ISODate("2016-04-26T05:22:04.056+0000"), 
    "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) {\nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n} else {\n    System.out.println(\"Type one or more words: \" +s +\" is not a palindrome!\");\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : NumberInt(15), 
    "totalActiveTime" : 15719.700000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T19:54:22.221+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nSystem.out.println(\"Word please! \"); \nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) \nSystem.out.println(\"Palindrome detected!\"); \n}", 
            "status" : "FAIL", 
            "activeTime" : 135.2
        }, 
        {
            "date" : ISODate("2016-04-24T20:03:03.570+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nSystem.out.println(\"Word please! \"); \nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) \nSystem.out.println(\"Palindrome detected!\"); \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(38)
        }, 
        {
            "date" : ISODate("2016-04-24T20:03:22.616+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) \nSystem.out.println(\"Palindrome detected!\"); \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(19)
        }, 
        {
            "date" : ISODate("2016-04-26T05:19:43.799+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) \nSystem.out.println(\"Type one or more words:\" +s +\"is a palindrome!\"); \n}", 
            "status" : "FAIL", 
            "activeTime" : 15387.2
        }, 
        {
            "date" : ISODate("2016-04-26T05:19:57.675+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) \nSystem.out.println(\"Type one or more words: \" +s +\"is a palindrome!\"); \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-26T05:20:19.963+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) \nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n}", 
            "status" : "FAIL", 
            "activeTime" : 22.2
        }, 
        {
            "date" : ISODate("2016-04-26T05:20:49.793+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) \nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n} else {\n    System.out.println(\"Type one or more words: \" +s +\" is not a palindrome!\")\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.2
        }, 
        {
            "date" : ISODate("2016-04-26T05:21:02.206+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) \nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n} else {\n    System.out.println(\"Type one or more words: \" +s +\" is not a palindrome!\");\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.5
        }, 
        {
            "date" : ISODate("2016-04-26T05:21:16.094+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) \nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n} else {\n    System.out.println(\"Type one or more words: \" +s +\" is not a palindrome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-04-26T05:21:23.227+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) {\nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n} else {\n    System.out.println(\"Type one or more words: \" +s +\" is not a palindrome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.1
        }, 
        {
            "date" : ISODate("2016-04-26T05:21:37.315+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) {\nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n} else {\n    System.out.println(\"Type one or more words: \" +s +\" is not a palindrome!\");", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-04-26T05:21:48.921+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) {\nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n} else {\n    System.out.println(\"Type one or more words: \" +s +\" is not a palindrome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-04-26T05:22:04.055+0000"), 
            "code" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) {\nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n} else {\n    System.out.println(\"Type one or more words: \" +s +\" is not a palindrome!\");\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(15)
        }
    ]
}
{ 
    "_id" : "5a2HQQgrgHeKtKkn3", 
    "userId" : "hKfr63JxQMPjGCBqz", 
    "questionId" : "aLMMnyPgXYE9M2oyq", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-24T09:28:12.800+0000"), 
    "updatedAt" : ISODate("2016-04-26T05:21:12.573+0000"), 
    "code" : "public static String parseEmail (String email){\n    String correctEmail = \"\"; \n    int str = email.indexOf('@'); \n    int str2 = email.indexOf('@', str+1);\n    \n   \n    correctEmail = email.substring(0,str);\n\n    return correctEmail;\n}", 
    "status" : "PASS", 
    "activeTime" : 19.1, 
    "totalActiveTime" : 296.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-24T16:51:35.117+0000"), 
            "code" : "public string parseEmail (String email){\n    String correctEmail = \"\";\n    int str = email.indexOf('@');\n    int str2 = email.indexOf('@', pos+1);\n    \n   \n    correctEmail = email.substring(0,pos);\n\n    return correctEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 177.8
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:36.084+0000"), 
            "code" : "public string parseEmail (String email){\n    String correctEmail = \"\";\n    int str = email.indexOf('@');\n    int str2 = email.indexOf('@', pos+1);\n    \n   \n    correctEmail = email.substring(0,pos);\n\n    return correctEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(2)
        }, 
        {
            "date" : ISODate("2016-04-24T16:51:36.861+0000"), 
            "code" : "public string parseEmail (String email){\n    String correctEmail = \"\";\n    int str = email.indexOf('@');\n    int str2 = email.indexOf('@', str+1);\n    \n   \n    correctEmail = email.substring(0,pos);\n\n    return correctEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.9
        }, 
        {
            "date" : ISODate("2016-04-26T05:19:25.178+0000"), 
            "code" : "public string parseEmail (String email){\n    String correctEmail = \"\"; //it's an ok name, but emailID would have been better\n    int str = email.indexOf('@'); //str is not used! \n    int str2 = email.indexOf('@', str+1); //so is str2 :P\n    \n   \n    correctEmail = email.substring(0,pos);\n\n    return correctEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.6
        }, 
        {
            "date" : ISODate("2016-04-26T05:19:40.108+0000"), 
            "code" : "public static string parseEmail (String email){\n    String correctEmail = \"\"; //it's an ok name, but emailID would have been better\n    int str = email.indexOf('@'); //str is not used! \n    int str2 = email.indexOf('@', str+1); //so is str2 :P\n    \n   \n    correctEmail = email.substring(0,pos);\n\n    return correctEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(15)
        }, 
        {
            "date" : ISODate("2016-04-26T05:20:07.710+0000"), 
            "code" : "public static string parseEmail (String email){\n    String correctEmail = \"\"; //it's an ok name, but emailID would have been better\n    int str = email.indexOf('@'); //str is not used! \n    int str2 = email.indexOf('@', str+1); //so is str2 :P\n    \n   \n    correctEmail = email.substring(0,str);\n\n    return correctEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.5
        }, 
        {
            "date" : ISODate("2016-04-26T05:20:21.708+0000"), 
            "code" : "import java.util.*;\npublic static string parseEmail (String email){\n    String correctEmail = \"\"; //it's an ok name, but emailID would have been better\n    int str = email.indexOf('@'); //str is not used! \n    int str2 = email.indexOf('@', str+1); //so is str2 :P\n    \n   \n    correctEmail = email.substring(0,str);\n\n    return correctEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-26T05:20:32.275+0000"), 
            "code" : "import java.util.*;\npublic static string parseEmail (String email){\n    String correctEmail = \"\"; //it's an ok name, but emailID would have been better\n    int str = email.indexOf('@'); //str is not used! \n    int str2 = email.indexOf('@', str+1); //so is str2 :P\n    \n   \n    correctEmail = email.substring(0,str);\n\n    return correctEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.8
        }, 
        {
            "date" : ISODate("2016-04-26T05:20:45.065+0000"), 
            "code" : "public static string parseEmail (String email){\n    String correctEmail = \"\"; //it's an ok name, but emailID would have been better\n    int str = email.indexOf('@'); //str is not used! \n    int str2 = email.indexOf('@', str+1); //so is str2 :P\n    \n   \n    correctEmail = email.substring(0,str);\n\n    return correctEmail;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.7
        }, 
        {
            "date" : ISODate("2016-04-26T05:20:53.371+0000"), 
            "code" : "public static String parseEmail (String email){\n    String correctEmail = \"\"; //it's an ok name, but emailID would have been better\n    int str = email.indexOf('@'); //str is not used! \n    int str2 = email.indexOf('@', str+1); //so is str2 :P\n    \n   \n    correctEmail = email.substring(0,str);\n\n    return correctEmail;\n}", 
            "status" : "PASS", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-04-26T05:21:12.572+0000"), 
            "code" : "public static String parseEmail (String email){\n    String correctEmail = \"\"; \n    int str = email.indexOf('@'); \n    int str2 = email.indexOf('@', str+1);\n    \n   \n    correctEmail = email.substring(0,str);\n\n    return correctEmail;\n}", 
            "status" : "PASS", 
            "activeTime" : 19.1
        }
    ]
}
{ 
    "_id" : "Ze2EvL3AgKDAECPhx", 
    "userId" : "dPGDwJc58vokTNtKk", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T04:51:20.136+0000"), 
    "updatedAt" : ISODate("2016-04-26T05:44:50.812+0000"), 
    "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    ArrayList<Integer> shorterArrayList = a1;\n    ArrayList<Integer> longerArrayList = a2;\n    \n    if(a1.size() > a2.size()){\n        shorterArrayList = a2;\n        longerArrayList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < smallerArrayList.size(); i++) {\n        int a = smallerArrayList.get(i);\n        int b = largerArrayList.get(i);\n        newList.add(a);\n        newList.add(b);\n    }\n        \n    for (int j = i; j < largerArrayList.size(); i++) {\n        int c = largerArrayList.get(j);\n        newList.add(c);\n    }\n    \n    return newList;\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : NumberInt(26), 
    "totalActiveTime" : 1852.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T05:41:28.002+0000"), 
            "code" : "public ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    ArrayList<Integer> shorterArrayList = a1;\n    ArrayList<Integer> longerArrayList = a2;\n    \n    if(a1.size() > a2.size()){\n        shorterArrayList = a2;\n        longerArrayList = a1;\n    }\n    \n    for(int i = 0; i < shorterArrayList.size(); i++){\n        int a =  shorterArrayList.get(i);\n        int b = longerArrayList.get(i);\n        newList.add(a);\n        newList.add(b);\n    }\n    \n    return newList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1649.8
        }, 
        {
            "date" : ISODate("2016-04-26T05:41:35.074+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    ArrayList<Integer> shorterArrayList = a1;\n    ArrayList<Integer> longerArrayList = a2;\n    \n    if(a1.size() > a2.size()){\n        shorterArrayList = a2;\n        longerArrayList = a1;\n    }\n    \n    for(int i = 0; i < shorterArrayList.size(); i++){\n        int a =  shorterArrayList.get(i);\n        int b = longerArrayList.get(i);\n        newList.add(a);\n        newList.add(b);\n    }\n    \n    return newList;\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(7)
        }, 
        {
            "date" : ISODate("2016-04-26T05:44:25.027+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    ArrayList<Integer> shorterArrayList = a1;\n    ArrayList<Integer> longerArrayList = a2;\n    \n    if(a1.size() > a2.size()){\n        shorterArrayList = a2;\n        longerArrayList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < smallerList.size(); i++) {\n        int a = smallerList.get(i);\n        int b = largerList.get(i);\n        newList.add(a);\n        newList.add(b);\n    }\n        \n    for (int j = i; j < largerList.size(); i++) {\n        int c = largerList.get(j);\n        newList.add(c);\n    }\n    \n    return newList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(170)
        }, 
        {
            "date" : ISODate("2016-04-26T05:44:50.812+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    ArrayList<Integer> shorterArrayList = a1;\n    ArrayList<Integer> longerArrayList = a2;\n    \n    if(a1.size() > a2.size()){\n        shorterArrayList = a2;\n        longerArrayList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < smallerArrayList.size(); i++) {\n        int a = smallerArrayList.get(i);\n        int b = largerArrayList.get(i);\n        newList.add(a);\n        newList.add(b);\n    }\n        \n    for (int j = i; j < largerArrayList.size(); i++) {\n        int c = largerArrayList.get(j);\n        newList.add(c);\n    }\n    \n    return newList;\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(26)
        }
    ]
}
{ 
    "_id" : "dgTa3zm28hgARdxWx", 
    "userId" : "hKfr63JxQMPjGCBqz", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T05:21:18.522+0000"), 
    "updatedAt" : ISODate("2016-04-26T05:53:37.159+0000"), 
    "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String userInput = console.nextLine();\n    String input = userInput.toLowerCase();\n    boolean isSame = true;\n    for (int i =0; i< input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isSame = false;\n        }\n    }\n    if (!isSame){\n        System.out.print(userInput + \" is not a palindrome.\");\n    }\n    else{\n        System.out.print(userInput + \" is a palindrome!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 30.7, 
    "totalActiveTime" : 1742.1000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T05:52:00.148+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String userInput = console.nextLine();\n    String input = userInput.toLowerCase();\n    boolean isSame = true;\n    for (int i =0; i< input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isSame = false;\n        }\n    }\n    if (!isSame){\n        System.out.print(userInput + \"is not a palindrome.\");\n    }\n    else{\n        System.out.print(userInput + \"is a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(1645)
        }, 
        {
            "date" : ISODate("2016-04-26T05:53:06.479+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String userInput = console.nextLine();\n    String input = userInput.toLowerCase();\n    boolean isSame = true;\n    for (int i =0; i< input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isSame = false;\n        }\n    }\n    if (!isSame){\n        System.out.print(userInput + \" is not a palindrome.\");\n    }\n    else{\n        System.out.print(userInput + \" is a palindrome.\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 66.4
        }, 
        {
            "date" : ISODate("2016-04-26T05:53:37.158+0000"), 
            "code" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String userInput = console.nextLine();\n    String input = userInput.toLowerCase();\n    boolean isSame = true;\n    for (int i =0; i< input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isSame = false;\n        }\n    }\n    if (!isSame){\n        System.out.print(userInput + \" is not a palindrome.\");\n    }\n    else{\n        System.out.print(userInput + \" is a palindrome!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 30.7
        }
    ]
}
{ 
    "_id" : "p2cKiDojXkBsb6gQr", 
    "userId" : "hKfr63JxQMPjGCBqz", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T05:35:25.157+0000"), 
    "updatedAt" : ISODate("2016-04-26T06:12:40.282+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> listR = new ArrayList<Integer>();\n    int i;\n    for (i = 0; i< Math.min(a1.size(), a2.size()); i++){\n        listR.add(a1.get(i));\n        listR.add(a2.get(i));\n    }\n    \n    for(int j =i ; i < a1.size(); i++){\n        listR.add(a1.get(i));\n    }\n    \n    for (int j = i; i < a2.size(); i++){\n        listR.add(a2.get(i));\n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : 35.5, 
    "totalActiveTime" : 1042.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T06:11:28.872+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> listR = new ArrayList<Integer>();\n    int i;\n    for (int i = 0; i< Math.min(a1.size(), a2.size()); i++){\n        listR.add(a1.get(i));\n        listR.add(a2.get(i));\n    }\n    \n    for(int j =i ; j < a1.size(); j++){\n        listR(a1.get(j));\n    }\n    \n    for (int j = i; j < a2.size(); j++){\n        listR.add(a2.get(j));\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 971.1
        }, 
        {
            "date" : ISODate("2016-04-26T06:11:48.769+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> listR = new ArrayList<Integer>();\n    int i;\n    for (int i = 0; i< Math.min(a1.size(), a2.size()); i++){\n        listR.add(a1.get(i));\n        listR.add(a2.get(i));\n    }\n    \n    for(int j =i ; j < a1.size(); j++){\n        listR.add(a1.get(j));\n    }\n    \n    for (int j = i; j < a2.size(); j++){\n        listR.add(a2.get(j));\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(20)
        }, 
        {
            "date" : ISODate("2016-04-26T06:12:04.854+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> listR = new ArrayList<Integer>();\n    int i;\n    for (i = 0; i< Math.min(a1.size(), a2.size()); i++){\n        listR.add(a1.get(i));\n        listR.add(a2.get(i));\n    }\n    \n    for(int j =i ; j < a1.size(); j++){\n        listR.add(a1.get(j));\n    }\n    \n    for (int j = i; j < a2.size(); j++){\n        listR.add(a2.get(j));\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.8
        }, 
        {
            "date" : ISODate("2016-04-26T06:12:40.281+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> listR = new ArrayList<Integer>();\n    int i;\n    for (i = 0; i< Math.min(a1.size(), a2.size()); i++){\n        listR.add(a1.get(i));\n        listR.add(a2.get(i));\n    }\n    \n    for(int j =i ; i < a1.size(); i++){\n        listR.add(a1.get(i));\n    }\n    \n    for (int j = i; i < a2.size(); i++){\n        listR.add(a2.get(i));\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.5
        }
    ]
}
{ 
    "_id" : "gMbwCeQ5s3oZbQpBX", 
    "userId" : "dPGDwJc58vokTNtKk", 
    "questionId" : "uNXs444ceH9v9m7gw", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T06:36:42.039+0000"), 
    "updatedAt" : ISODate("2016-04-26T07:10:29.999+0000"), 
    "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + \n                            height + \"]\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 2295.7, 
    "totalActiveTime" : 2295.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T07:10:29.998+0000"), 
            "code" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + \n                            height + \"]\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2295.7
        }
    ]
}
{ 
    "_id" : "g7tWTXK4pmdcc5ss7", 
    "userId" : "jY3HQTQ3dYhv8vib8", 
    "questionId" : "QdoLFm2K7dGfGu8wH", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T04:59:44.318+0000"), 
    "updatedAt" : ISODate("2016-04-26T07:19:56.826+0000"), 
    "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(i) != inputLower.charAt(inputLower.length() - i - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is a palindrome!\");\n        \n    } else {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 11.9, 
    "totalActiveTime" : 1548.0000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T06:54:01.224+0000"), 
            "code" : "public static void printPalindrome() {\n    Scanner sc = new Scanner (System.in);\n    System.out.println(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = false;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(input.length() - 1)) {\n            isPalidrome = false;\n        }\n    }\n    \n    isPalindrome = true;\n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n        \n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 358.7
        }, 
        {
            "date" : ISODate("2016-04-26T06:56:50.975+0000"), 
            "code" : "public static void printPalindrome() {\n   \n    Scanner sc = new Scanner(System.in);\n    System.out.println(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(input.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 168.2
        }, 
        {
            "date" : ISODate("2016-04-26T07:03:48.094+0000"), 
            "code" : "public static void printPalindrome(console) {\n   \n    Scanner sc = new Scanner(System.in);\n    System.out.println(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(input.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 340.1
        }, 
        {
            "date" : ISODate("2016-04-26T07:05:46.126+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    printPalindrome(console); \n    \n}\n\npublic static void printPalindrome(console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    System.out.println(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(input.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 70.7
        }, 
        {
            "date" : ISODate("2016-04-26T07:06:04.008+0000"), 
            "code" : "import java.util.*;\n\npublic static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    printPalindrome(console); \n    \n}\n\npublic static void printPalindrome(console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    System.out.println(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(input.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.9
        }, 
        {
            "date" : ISODate("2016-04-26T07:06:15.737+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    printPalindrome(console); \n    \n}\n\npublic static void printPalindrome(console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    System.out.println(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(input.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-04-26T07:06:51.934+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    printPalindrome(console); \n    \n}\n\npublic static void printPalindrome(console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    System.out.println(\"Type one or more words: \");\n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(input.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.2
        }, 
        {
            "date" : ISODate("2016-04-26T07:07:10.790+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    printPalindrome(console); \n    \n    \n\npublic static void printPalindrome(console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    System.out.println(\"Type one or more words: \");\n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(input.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.8
        }, 
        {
            "date" : ISODate("2016-04-26T07:07:30.064+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    System.out.println(\"Type one or more words: \");\n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(input.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.5
        }, 
        {
            "date" : ISODate("2016-04-26T07:14:23.591+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(inputLower.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 214.6
        }, 
        {
            "date" : ISODate("2016-04-26T07:14:35.818+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(inputLower.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.9
        }, 
        {
            "date" : ISODate("2016-04-26T07:15:11.865+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(inputLower.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 36.2
        }, 
        {
            "date" : ISODate("2016-04-26T07:15:28.282+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(inputLower.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is a palindrome.\");\n        \n    } else {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is not a palindrome!\");\n          \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.3
        }, 
        {
            "date" : ISODate("2016-04-26T07:15:48.029+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(inputLower.length() - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is a palindrome!\");\n        \n    } else {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-04-26T07:18:40.219+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(inputLower.length() - i - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is a palindrome~\");\n        \n    } else {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 146.5
        }, 
        {
            "date" : ISODate("2016-04-26T07:19:04.981+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(0) != inputLower.charAt(inputLower.length() - i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is a palindrome~\");\n        \n    } else {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.6
        }, 
        {
            "date" : ISODate("2016-04-26T07:19:44.980+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(i) != inputLower.charAt(inputLower.length() - i - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is a palindrome~\");\n        \n    } else {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 38.4
        }, 
        {
            "date" : ISODate("2016-04-26T07:19:56.825+0000"), 
            "code" : "public static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(i) != inputLower.charAt(inputLower.length() - i - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is a palindrome!\");\n        \n    } else {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 11.9
        }
    ]
}
{ 
    "_id" : "eXMqyCzqzB48gtQXj", 
    "userId" : "jY3HQTQ3dYhv8vib8", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-26T05:01:01.165+0000"), 
    "updatedAt" : ISODate("2016-04-26T07:24:12.377+0000"), 
    "code" : "//hello! my code works on notepad++ but it doesn't work here. could either one of you \n//please clarify? thanks!\n\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
    "status" : "FAIL", 
    "activeTime" : 158.6, 
    "totalActiveTime" : 1418.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T06:36:02.005+0000"), 
            "code" : "public ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size()- 1; k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = 0; n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 619.5
        }, 
        {
            "date" : ISODate("2016-04-26T06:38:45.472+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size()- 1; k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = 0; n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 15.7
        }, 
        {
            "date" : ISODate("2016-04-26T06:43:47.502+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = 0; n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 302.2
        }, 
        {
            "date" : ISODate("2016-04-26T06:45:07.284+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 79.6
        }, 
        {
            "date" : ISODate("2016-04-26T06:45:16.067+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-04-26T06:46:26.909+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size() - 1; i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toRetur n.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(71)
        }, 
        {
            "date" : ISODate("2016-04-26T06:46:41.344+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size() - 1; i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 14.2
        }, 
        {
            "date" : ISODate("2016-04-26T06:46:54.951+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size() + 1; i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-04-26T06:47:06.341+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-04-26T06:47:54.707+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 27.5
        }, 
        {
            "date" : ISODate("2016-04-26T07:20:06.475+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 9.3
        }, 
        {
            "date" : ISODate("2016-04-26T07:20:25.657+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 19.2
        }, 
        {
            "date" : ISODate("2016-04-26T07:20:56.749+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n        return toReturn;\n        \n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n        return toReturn;\n    \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n        return toReturn;\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 31.2
        }, 
        {
            "date" : ISODate("2016-04-26T07:21:33.138+0000"), 
            "code" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 36.3
        }, 
        {
            "date" : ISODate("2016-04-26T07:24:12.376+0000"), 
            "code" : "//hello! my code works on notepad++ but it doesn't work here. could either one of you \n//please clarify? thanks!\n\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 158.6
        }
    ]
}
{ 
    "_id" : "rYJPGnBaabS34PXjA", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "rGJuaMEdzu7ndcaAx", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T09:20:12.718+0000"), 
    "updatedAt" : ISODate("2016-04-26T09:31:00.857+0000"), 
    "code" : "import java.util.*;\n\npublic class Adder{\n    public static void main (String [] args){\n        Scanner sc = new Scanner(System.in);\n        boolean check = true;\n        int total =0;\n        \n        while(check == true){\n            //System.out.print(\"Enter number>\");\n            int num = sc.nextInt();  \n            \n            if(num >0){\n               total += num; \n            }\n            if(num <=0){\n                check = false;\n            }\n            \n        }\n    \n        System.out.println(\"The sum is \" + total +\".\");       \n        }\n\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 5.8, 
    "totalActiveTime" : 43711.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T09:25:19.359+0000"), 
            "code" : "import java.util.*;\n\npublic class Adder{\n    Scanner sc = new Scanner(System.in);\n    boolean check = true;\n    int total =0;\n    while(check == true){\n        System.out.print(\"Enter number>\");\n        int num = sc.nextInt();    \n        if(num <=0){\n            check = false;\n        }\n        total += num;\n    }\n\n    System.out.println(\"The sum is \" + total);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43370.5
        }, 
        {
            "date" : ISODate("2016-04-26T09:25:22.775+0000"), 
            "code" : "import java.util.*;\n\npublic class Adder{\n    Scanner sc = new Scanner(System.in);\n    boolean check = true;\n    int total =0;\n    while(check == true){\n        System.out.print(\"Enter number>\");\n        int num = sc.nextInt();    \n        if(num <=0){\n            check = false;\n        }\n        total += num;\n    }\n\n    System.out.println(\"The sum is \" + total);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.5
        }, 
        {
            "date" : ISODate("2016-04-26T09:26:10.903+0000"), 
            "code" : "import java.util.*;\n\npublic class Adder{\n    public static void main (String [] args){\n        Scanner sc = new Scanner(System.in);\n        boolean check = true;\n        int total =0;\n        while(check == true){\n            System.out.print(\"Enter number>\");\n            int num = sc.nextInt();    \n            if(num <=0){\n                check = false;\n            }\n            total += num;\n        }\n    \n        System.out.println(\"The sum is \" + total);       \n        }\n\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(48)
        }, 
        {
            "date" : ISODate("2016-04-26T09:29:32.888+0000"), 
            "code" : "import java.util.*;\n\npublic class Adder{\n    public static void main (String [] args){\n        Scanner sc = new Scanner(System.in);\n        boolean check = true;\n        int total =0;\n        \n        while(check == true){\n            System.out.print(\"Enter number>\");\n            int num = sc.nextInt();  \n            \n            if(num >0){\n               total += num; \n            }\n            if(num <=0){\n                check = false;\n            }\n            \n        }\n    \n        System.out.println(\"The sum is \" + total);       \n        }\n\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(202)
        }, 
        {
            "date" : ISODate("2016-04-26T09:30:55.028+0000"), 
            "code" : "import java.util.*;\n\npublic class Adder{\n    public static void main (String [] args){\n        Scanner sc = new Scanner(System.in);\n        boolean check = true;\n        int total =0;\n        \n        while(check == true){\n            //System.out.print(\"Enter number>\");\n            int num = sc.nextInt();  \n            \n            if(num >0){\n               total += num; \n            }\n            if(num <=0){\n                check = false;\n            }\n            \n        }\n    \n        System.out.println(\"The sum is \" + total +\".\");       \n        }\n\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 82.1
        }, 
        {
            "date" : ISODate("2016-04-26T09:31:00.857+0000"), 
            "code" : "import java.util.*;\n\npublic class Adder{\n    public static void main (String [] args){\n        Scanner sc = new Scanner(System.in);\n        boolean check = true;\n        int total =0;\n        \n        while(check == true){\n            //System.out.print(\"Enter number>\");\n            int num = sc.nextInt();  \n            \n            if(num >0){\n               total += num; \n            }\n            if(num <=0){\n                check = false;\n            }\n            \n        }\n    \n        System.out.println(\"The sum is \" + total +\".\");       \n        }\n\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 5.8
        }
    ]
}
{ 
    "_id" : "YPBpZF2oFusy57uLr", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "m8u4AidaqHqXybizW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T09:31:08.566+0000"), 
    "updatedAt" : ISODate("2016-04-26T09:33:15.818+0000"), 
    "code" : "public static double doubleInt(int a, int b){\n    double a1 = (double)a;\n    double b1 = (double)b;\n    double total = a1 +b1;\n    return total;\n}", 
    "status" : "PASS", 
    "activeTime" : 134.7, 
    "totalActiveTime" : 134.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T09:33:15.817+0000"), 
            "code" : "public static double doubleInt(int a, int b){\n    double a1 = (double)a;\n    double b1 = (double)b;\n    double total = a1 +b1;\n    return total;\n}", 
            "status" : "PASS", 
            "activeTime" : 134.7
        }
    ]
}
{ 
    "_id" : "ENzytwNkfFdtYEC7W", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "L46REaDboHACstAXr", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T09:33:25.721+0000"), 
    "updatedAt" : ISODate("2016-04-26T09:42:59.230+0000"), 
    "code" : "public static void quotify(String s){\n    System.out.print('\"' + s + '\"');\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 4.8, 
    "totalActiveTime" : 506.20000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T09:37:24.472+0000"), 
            "code" : "public static void quotify(String s){\n    system.out.print(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 248.7
        }, 
        {
            "date" : ISODate("2016-04-26T09:37:29.421+0000"), 
            "code" : "public static void quotify(String s){\n    system.out.print(s);\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(5)
        }, 
        {
            "date" : ISODate("2016-04-26T09:37:40.117+0000"), 
            "code" : "public static void quotify(String s){\n    System.out.print(s);\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.4
        }, 
        {
            "date" : ISODate("2016-04-26T09:40:13.963+0000"), 
            "code" : "public static void quotify(String s){\n    int indexOfFirst = s.indexOf(\"\"\");\n    //String substring = s.substring()\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(77)
        }, 
        {
            "date" : ISODate("2016-04-26T09:42:29.868+0000"), 
            "code" : "public static void quotify(String s){\n    system.out.print('\"' + s);\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 135.9
        }, 
        {
            "date" : ISODate("2016-04-26T09:42:36.386+0000"), 
            "code" : "public static void quotify(String s){\n    System.out.print('\"' + s);\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 6.3
        }, 
        {
            "date" : ISODate("2016-04-26T09:42:54.281+0000"), 
            "code" : "public static void quotify(String s){\n    System.out.print('\"' + s + '\"');\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 18.1
        }, 
        {
            "date" : ISODate("2016-04-26T09:42:59.229+0000"), 
            "code" : "public static void quotify(String s){\n    System.out.print('\"' + s + '\"');\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 4.8
        }
    ]
}
{ 
    "_id" : "L3uJYzAnqiewD44Dh", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "g5XDQiSZsCC2c8DiW", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T09:46:03.398+0000"), 
    "updatedAt" : ISODate("2016-04-26T10:22:21.055+0000"), 
    "code" : "public static int power(int base, int exponent){\n    int total=base;\n    \n    for(int i=1; i<exponent; i++){\n        total = total*base;\n    }\n    return total;\n}", 
    "status" : "PASS", 
    "activeTime" : 10.8, 
    "totalActiveTime" : 1649.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T09:50:08.630+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=0;\n    for(int i=0; i<exponent; i++){\n        total = base*base;\n    }\n    return total;\n}", 
            "status" : "FAIL", 
            "activeTime" : 428.6
        }, 
        {
            "date" : ISODate("2016-04-26T09:50:14.057+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=0;\n    for(int i=0; i<exponent; i++){\n        total = base*base;\n    }\n    return total;\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.5
        }, 
        {
            "date" : ISODate("2016-04-26T09:50:39.430+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=0;\n    for(int i=1; i<=exponent; i++){\n        total = base*base;\n    }\n    return total;\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.5
        }, 
        {
            "date" : ISODate("2016-04-26T09:51:15.654+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=0;\n    for(int i=1; i<exponent; i++){\n        total = base*base;\n    }\n    return total;\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.9
        }, 
        {
            "date" : ISODate("2016-04-26T09:51:36.269+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=0;\n    \n    for(int i=0; i<exponent; i++){\n        total = base*base;\n    }\n    return total;\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.4
        }, 
        {
            "date" : ISODate("2016-04-26T09:54:26.442+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=0;\n    \n    for(int i=0; i<exponent; i++){\n        total = base*base;\n    }\n    return total;\n}", 
            "status" : "FAIL", 
            "activeTime" : 170.3
        }, 
        {
            "date" : ISODate("2016-04-26T10:20:54.833+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=base;\n    \n    for(int i=0; i<exponent; i++){\n        total = total*base;\n    }\n    return total;\n}", 
            "status" : "FAIL", 
            "activeTime" : 877.3
        }, 
        {
            "date" : ISODate("2016-04-26T10:21:44.058+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=base;\n    \n    for(int i=0; i<=exponent; i++){\n        total = total*base;\n    }\n    return total;\n}", 
            "status" : "FAIL", 
            "activeTime" : 49.2
        }, 
        {
            "date" : ISODate("2016-04-26T10:22:10.229+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=base;\n    \n    for(int i=0; i<exponent; i++){\n        total = total*base;\n    }\n    return total;\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.9
        }, 
        {
            "date" : ISODate("2016-04-26T10:22:21.055+0000"), 
            "code" : "public static int power(int base, int exponent){\n    int total=base;\n    \n    for(int i=1; i<exponent; i++){\n        total = total*base;\n    }\n    return total;\n}", 
            "status" : "PASS", 
            "activeTime" : 10.8
        }
    ]
}
{ 
    "_id" : "bMTxRPLSEdubfX6RW", 
    "userId" : "rczYdr6YaF4Nv8DqY", 
    "questionId" : "XSgGpjTLEh38eJ9Tc", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-25T13:23:08.309+0000"), 
    "updatedAt" : ISODate("2016-04-26T10:46:34.184+0000"), 
    "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> list = new ArrayList<>();\n    \n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            list.add(a1.get(i));\n            list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n    a1 = list;\n    \n}", 
    "status" : "FAIL", 
    "activeTime" : 17.2, 
    "totalActiveTime" : 2334.7000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-25T13:31:22.134+0000"), 
            "code" : "public static ArrayList<Integer> interleave(a1, a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i);\n        list.add(a2.get(i);\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j);\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i);\n        list.add(a2.get(i);\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j);\n        }\n    }\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 455.2
        }, 
        {
            "date" : ISODate("2016-04-25T13:32:02.408+0000"), 
            "code" : "import java.util.*;\npublic static ArrayList<Integer> interleave(a1, a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.2
        }, 
        {
            "date" : ISODate("2016-04-25T13:32:16.547+0000"), 
            "code" : "public static ArrayList<Integer> interleave(a1, a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.3
        }, 
        {
            "date" : ISODate("2016-04-25T13:32:35.190+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-04-25T13:32:48.611+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-04-25T13:54:43.710+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 262.1
        }, 
        {
            "date" : ISODate("2016-04-25T15:14:28.669+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 587.8
        }, 
        {
            "date" : ISODate("2016-04-25T15:16:26.288+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.isEmpty() && a2.isEmpty()) {\n        return list;\n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 117.5
        }, 
        {
            "date" : ISODate("2016-04-26T05:03:03.024+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.isEmpty() && a2.isEmpty()) {\n        return list;\n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 42.7
        }, 
        {
            "date" : ISODate("2016-04-26T10:27:47.078+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.isEmpty() && a2.isEmpty()) {\n        return list;\n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size() - a2.size()) - 1 ; j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a2.size() - a1.size()) - 1 ; j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 28.1
        }, 
        {
            "date" : ISODate("2016-04-26T10:30:49.184+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.isEmpty() && a2.isEmpty()) {\n        return list;\n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = (a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 144.8
        }, 
        {
            "date" : ISODate("2016-04-26T10:31:07.519+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.isEmpty() && a2.isEmpty()) {\n        return list;\n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 17.5
        }, 
        {
            "date" : ISODate("2016-04-26T10:33:07.488+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.isEmpty() && a2.isEmpty()) {\n        return list;\n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            System.out.print(\"hello\");\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 112.5
        }, 
        {
            "date" : ISODate("2016-04-26T10:36:59.318+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.isEmpty() && a2.isEmpty()) {\n        return list;\n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            System.out.print(a1.get(i)+ \" \"+a2.get(i));\n            list.add(a1.get(i));\n            list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 96.9
        }, 
        {
            "date" : ISODate("2016-04-26T10:38:40.036+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList <Integer> list = new ArrayList<> ();\n    if (a1.isEmpty() && a2.isEmpty()) {\n        return list;\n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            list.add(a1.get(i));\n            list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\nreturn list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 75.4
        }, 
        {
            "date" : ISODate("2016-04-26T10:45:09.394+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    if (a1.isEmpty() && a2.isEmpty()) {\n        \n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            list.add(a1.get(i));\n            list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n    a1 = list;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 223.4
        }, 
        {
            "date" : ISODate("2016-04-26T10:45:38.378+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    if (a1.isEmpty() && a2.isEmpty()) {\n        return a1;\n    }\n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            list.add(a1.get(i));\n            list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n    a1 = list;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(29)
        }, 
        {
            "date" : ISODate("2016-04-26T10:46:04.849+0000"), 
            "code" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> list = new ArrayList<>();\n    \n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            list.add(a1.get(i));\n            list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n    a1 = list;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.5
        }, 
        {
            "date" : ISODate("2016-04-26T10:46:16.633+0000"), 
            "code" : "public static void ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> list = new ArrayList<>();\n    \n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            list.add(a1.get(i));\n            list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n    a1 = list;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-04-26T10:46:34.184+0000"), 
            "code" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> list = new ArrayList<>();\n    \n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            list.add(a1.get(i));\n            list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n    a1 = list;\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 17.2
        }
    ]
}
{ 
    "_id" : "Q7Yv9xebb7pR4QHPk", 
    "userId" : "9rYoFH5igugDWpN2i", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-26T03:50:08.377+0000"), 
    "updatedAt" : ISODate("2016-04-26T15:05:32.567+0000"), 
    "status" : "PASS", 
    "activeTime" : 12.9, 
    "totalActiveTime" : 656.4000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-26T14:47:15.251+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 364.6
        }, 
        {
            "date" : ISODate("2016-04-26T14:49:46.244+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-26T14:50:09.028+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.4
        }, 
        {
            "date" : ISODate("2016-04-26T14:51:04.003+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(55)
        }, 
        {
            "date" : ISODate("2016-04-26T14:52:03.870+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 12.6
        }, 
        {
            "date" : ISODate("2016-04-26T14:53:06.117+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 12.1
        }, 
        {
            "date" : ISODate("2016-04-26T14:55:46.614+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.4
        }, 
        {
            "date" : ISODate("2016-04-26T14:56:41.776+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 22.2
        }, 
        {
            "date" : ISODate("2016-04-26T14:56:57.130+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 15.4
        }, 
        {
            "date" : ISODate("2016-04-26T15:01:00.430+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            super.setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 58.2
        }, 
        {
            "date" : ISODate("2016-04-26T15:02:05.899+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            super.setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(7)
        }, 
        {
            "date" : ISODate("2016-04-26T15:03:13.122+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.9
        }, 
        {
            "date" : ISODate("2016-04-26T15:03:24.533+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            super.setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 11.2
        }, 
        {
            "date" : ISODate("2016-04-26T15:04:39.659+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            super.setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 26.6
        }, 
        {
            "date" : ISODate("2016-04-26T15:05:32.566+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            super.setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 12.9
        }
    ], 
    "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int odds = r.nextInt(10);\n        if(odds < 5){\n            //fail hunting\n            return false;\n        } else {\n            this.prey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey(){\n        return prey != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    @Override\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            super.setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n}"
}
{ 
    "_id" : "34ifgR3FoxbC75JCD", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:37.410+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:21:05.102+0000"), 
    "code" : "public class Marketer extends Employee{\n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    //public Marketer()\n}", 
    "status" : "PASS", 
    "activeTime" : 19.7, 
    "totalActiveTime" : 5890.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:20:16.030+0000"), 
            "code" : "public class Marketer extends Employee{\n    public double getSalary() {\n\t\treturn baseSalary + 10000;               // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    //public Marketer()\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5846.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:45.529+0000"), 
            "code" : "public class Marketer extends Employee{\n    public double getSalary() {\n\t\treturn super.getSalary + 10000;               // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    //public Marketer()\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(25)
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:05.102+0000"), 
            "code" : "public class Marketer extends Employee{\n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    //public Marketer()\n}", 
            "status" : "PASS", 
            "activeTime" : 19.7
        }
    ]
}
{ 
    "_id" : "dmeRJvx6b4LEZ8jrv", 
    "userId" : "ukRzCFySZXsgLobtY", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:18.381+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:22:59.325+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n        return super.getSalary()+10000;\n    }\n    \n    public void advertise() {\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 110.2, 
    "totalActiveTime" : 271.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:20:44.155+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary = 50000.00;\n    \n    public double getSalary() {\n        return salary;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(136)
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:08.182+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary = 50000.00;\n    \n    public double getSalary() {\n        return salary;\n    }\n    \n    public void advertise() {\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(25)
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:59.324+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n        return super.getSalary()+10000;\n    }\n    \n    public void advertise() {\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 110.2
        }
    ]
}
{ 
    "_id" : "ruDLr33gFr7X4ndCs", 
    "userId" : "ZwzuuSYKWikrzBcXP", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:22.876+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:21:10.742+0000"), 
    "code" : "public class Marketer extends Employee {\n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(9), 
    "totalActiveTime" : 181.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:21:01.986+0000"), 
            "code" : "public class Marketer extends Employee {\n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\")\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 172.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:10.741+0000"), 
            "code" : "public class Marketer extends Employee {\n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(9)
        }
    ]
}
{ 
    "_id" : "sR5kiNKGnGBjoChmC", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:30.899+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:23:42.950+0000"), 
    "code" : "public class Marketer extends Employee{\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getSalary() + 10000;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 39.6, 
    "totalActiveTime" : 252.00000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:19:08.984+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 100.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:41.609+0000"), 
            "code" : "public class Marketer extends Employee{\n    Employee e = new Marketer();\n    e.getSalary();\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 65.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:49.599+0000"), 
            "code" : "public class Marketer extends Employee{\n    Employee e = new Marketer();\n    e.getSalary() + 10000;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:05.406+0000"), 
            "code" : "public class Marketer extends Employee{\n    Employee e = new Marketer();\n    baseSalary = e.getSalary() + 10000;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:19.243+0000"), 
            "code" : "public class Marketer extends Employee{\n    Employee e = new Marketer();\n    int baseSalary = e.getSalary() + 10000;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:28.766+0000"), 
            "code" : "public class Marketer extends Employee{\n    Employee e = new Marketer();\n    double baseSalary = e.getSalary() + 10000;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:42.950+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getSalary() + 10000;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 39.6
        }
    ]
}
{ 
    "_id" : "qGZpREEaxJgSsBqvT", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:32.707+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:34:56.724+0000"), 
    "code" : "public class Marketer extends Employee{\n    public Marketer(){\n        //super();\n        super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 19.3, 
    "totalActiveTime" : 276.09999999999997, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:20:19.160+0000"), 
            "code" : "public class Marketer{\n    public Marketer(){\n        super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 121.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:28.059+0000"), 
            "code" : "public class Marketer{\n    public Marketer(){\n        //super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:56.872+0000"), 
            "code" : "public class Marketer{\n    public Marketer(){\n        //super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:06.905+0000"), 
            "code" : "public class Marketer{\n    public Marketer(){\n        //super.setBaseSalary(50000);\n    }\n    .public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:14.400+0000"), 
            "code" : "public class Marketer{\n    public Marketer(){\n        //super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:33.541+0000"), 
            "code" : "public class Marketer{\n    public Marketer(){\n        super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:49.845+0000"), 
            "code" : "public class Marketer{\n    public Marketer(){\n        super();\n        super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:03.084+0000"), 
            "code" : "public class Marketer{\n    public Marketer(){\n        super();\n        super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:38.914+0000"), 
            "code" : "public class Marketer{\n    public Marketer(){\n        //super();\n        super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:56.724+0000"), 
            "code" : "public class Marketer extends Employee{\n    public Marketer(){\n        //super();\n        super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 19.3
        }
    ]
}
{ 
    "_id" : "fw4pcfJyhxHrN6SXz", 
    "userId" : "skeAjiWQ9cA4BLDxs", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:11.797+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:22:50.649+0000"), 
    "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        super();\n        setBaseSalary(50000.0);\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 6.6, 
    "totalActiveTime" : 257.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:20:56.770+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        baseSalary = 50000.0;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 150.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:35.102+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        super(50000.0);\n        //baseSalary = 50000.0;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:50.621+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        super();\n        baseSalary = 50000.0;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 15.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:00.965+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        super();\n        this.baseSalary = 50000.0;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 10.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:15.803+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        baseSalary = 50000.0;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 14.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:44.112+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        super();\n        setBaseSalary(50000.0);\n        //baseSalary = 50000.0;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:50.649+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        super();\n        setBaseSalary(50000.0);\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 6.6
        }
    ]
}
{ 
    "_id" : "37K34wgsYSdNtFofc", 
    "userId" : "47MxiJWsWkBezecN9", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:48.868+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:45:39.116+0000"), 
    "code" : "public class Marketer extends Employee{\n    \n    public double getSalary(){\n        return super.getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 34.7, 
    "totalActiveTime" : 676.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:20:52.067+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer{\n        salary = getSalary() + 10000;\n        \n    }\n    \n    public void Advertise(){\n        System.out.println(\"Act now, while supplies last!\")\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 184.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:14.791+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000;\n        \n    }\n    \n    public void Advertise(){\n        System.out.println(\"Act now, while supplies last!\")\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:43.330+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000;\n        \n    }\n    \n    public void Advertise(){\n        System.out.println(\"Act now, while supplies last!\")\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:15.495+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000;\n        \n    }\n    \n    public void Advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:36.320+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:11.801+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        baseSalary = getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 42.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:05.320+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n    super.baseSalary = getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 211.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:10.083+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n    baseSalary = getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 3.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:52.459+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n    this.baseSalary = getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:15.410+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary(){\n    return getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 80.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:39.115+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public double getSalary(){\n        return super.getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 34.7
        }
    ]
}
{ 
    "_id" : "qSaK9P6rJLzekWNTo", 
    "userId" : "jY3HQTQ3dYhv8vib8", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:16:43.128+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:34:14.857+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n    \n    \n}", 
    "status" : "FAIL", 
    "activeTime" : 19.9, 
    "totalActiveTime" : 283.79999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:19:40.666+0000"), 
            "code" : "public class Marketer extends Employee {\n    private int bonus;\n    \n    public Marketer() {\n        bonus = 10000;\n        \n    }\n    \n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 106.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:19:53.821+0000"), 
            "code" : "public class Marketer extends Employee {\n    private int bonus;\n    \n    \n    \n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:35.587+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last\");\n        \n    }\n    \n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 41.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:46.095+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(10)
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:58.797+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n    public int getSalary() {\n        return getBaseSalary + 10000;\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 82.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:04.101+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n    public int getSalary() {\n        return getBaseSalary() + 10000;\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:09.292+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n    public int getSalary() {\n        return super.getBaseSalary() + 10000;\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:14.856+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 19.9
        }
    ]
}
{ 
    "_id" : "m8ncBEQsTzpXHTkbB", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:36.952+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:23:45.829+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn super.getSalary()+10000;               // $40,000.00\n\t}\n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n\n}", 
    "status" : "PASS", 
    "activeTime" : 34.5, 
    "totalActiveTime" : 329.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:19:06.105+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer{\n    }\n    \n    public void Advertise(){\n        System.out.println(\"Act now, while supplies last!\")\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 147.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:19:20.592+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n \n    public void Advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:40.007+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn baseSalary+10000;               // $40,000.00\n\t}\n    public void Advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:26.884+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn baseSalary+10000;               // $40,000.00\n\t}\n    public void Advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:02.900+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn baseSalary+10000;               // $40,000.00\n\t}\n    public void Advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:09.333+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn baseSalary+10000;               // $40,000.00\n\t}\n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 6.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:45.829+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn super.getSalary()+10000;               // $40,000.00\n\t}\n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n\n}", 
            "status" : "PASS", 
            "activeTime" : 34.5
        }
    ]
}
{ 
    "_id" : "cKdMnXjPErPrBQ9Pg", 
    "userId" : "8DSANwmE8m6iARS9v", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:22:56.412+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:23:13.309+0000"), 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 14.3, 
    "totalActiveTime" : 14.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:23:13.308+0000"), 
            "code" : "", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.3
        }
    ]
}
{ 
    "_id" : "k5SyaYk7NQ4GiFTg8", 
    "userId" : "tBRTnCWLCp63vtcx8", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:48.777+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:24:10.947+0000"), 
    "code" : "public class Marketer extends Employee {\n    private double salary;\n    public Marketer() {\n        salary = 50000;\n    }\n    \n    public double getSalary() {\n\t\treturn salary;\n\t}\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 52.8, 
    "totalActiveTime" : 329.40000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:22:46.126+0000"), 
            "code" : "public class Marketer extends Employee {\n    private int salary;\n    public Marketer() {\n        salary = 50000;\n    }\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 244.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:17.984+0000"), 
            "code" : "public class Marketer extends Employee {\n    private int salary;\n    public Marketer() {\n        salary = 50000;\n    }\n    public void advertise() {\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(32)
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:10.947+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    public Marketer() {\n        salary = 50000;\n    }\n    \n    public double getSalary() {\n\t\treturn salary;\n\t}\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 52.8
        }
    ]
}
{ 
    "_id" : "uq45veMX4S7Crjkoo", 
    "userId" : "gdDMJZWTCmRwtc6m5", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:17:10.649+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:23:33.688+0000"), 
    "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        baseSalary = 50000;\n        \n    }\n    \n    public void advertise () {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : 84.6, 
    "totalActiveTime" : 242.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:21:05.721+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer() {\n        salary = 50000;\n    }\n    \n    public void advertise () {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 157.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:33.687+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        baseSalary = 50000;\n        \n    }\n    \n    public void advertise () {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 84.6
        }
    ]
}
{ 
    "_id" : "LCJdXASqmhuukDHab", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:33.534+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:24:06.509+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    public double getSalary(){\n        return super.getSalary()+ 10000;\n    }\n   \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");    \n    }\n        \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 22.1, 
    "totalActiveTime" : 340.70000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:20:46.303+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    super.setBaseSalary(50000);\n    public void advertise(){\n        System.out.println(\"Act now , while supplies last!\");    \n    }\n        \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 187.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:05.003+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    super.setBaseSalary(50000);\n   \n    public void advertise(){\n        System.out.print(\"Act now , while supplies last!\");    \n    }\n        \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:43.843+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary(){\n        return super.getSalary()+ 10000;\n    }\n   \n    public void advertise(){\n        System.out.print(\"Act now , while supplies last!\");    \n    }\n        \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 98.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:06.509+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary(){\n        return super.getSalary()+ 10000;\n    }\n   \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");    \n    }\n        \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 22.1
        }
    ]
}
{ 
    "_id" : "My2LDZWb6tvwRqiND", 
    "userId" : "qRRx6bzkx25XcK7w8", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:18:21.171+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:20:03.123+0000"), 
    "code" : "public class Marketer extends Employee {\n\n\tpublic Marketer() {\n\t    baseSalary = getSalary();\n\t}\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 1823.5, 
    "totalActiveTime" : 2264.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:22:55.798+0000"), 
            "code" : "public class Marketer {\n\tprivate double baseSalary = 50000.0;\n    public Marketer(int baseHours, double baseSalary, int baseVacationDays, String baseVacationForm) {\n        super(baseHours, baseVacationDays, baseVacationForm);\n        this.baseSalary = baseSalary;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 223.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:23.977+0000"), 
            "code" : "public class Marketer {\n\tprivate double baseSalary = 50000.0;\n    public Marketer(int baseHours, double baseSalary, int baseVacationDays, String baseVacationForm) {\n        super(baseHours, baseVacationDays, baseVacationForm);\n        this.baseSalary = baseSalary;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(28)
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:57.031+0000"), 
            "code" : "public class Marketer extends Employee {\n\tprivate double baseSalary = 50000.0;\n    public Marketer(int baseHours, double baseSalary, int baseVacationDays, String baseVacationForm) {\n        super(baseHours, baseVacationDays, baseVacationForm);\n        this.baseSalary = baseSalary;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:04.703+0000"), 
            "code" : "public class Marketer extends Employee {\n\tprivate double baseSalary = 50000.0;\n    public Marketer(int baseHours, double baseSalary, int baseVacationDays, String baseVacationForm) {\n        super(baseHours, baseVacationDays, baseVacationForm);\n        this.baseSalary = baseSalary;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:08.434+0000"), 
            "code" : "public class Marketer extends Employee {\n\tprivate double baseSalary = 50000.0;\n    public Marketer(int baseHours, double baseSalary, int baseVacationDays, String baseVacationForm) {\n        super(baseHours, baseVacationDays, baseVacationForm);\n        this.baseSalary = baseSalary;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:22.473+0000"), 
            "code" : "import java.util.*;\n\npublic class Marketer extends Employee {\n\tprivate double baseSalary = 50000.0;\n    public Marketer(int baseHours, double baseSalary, int baseVacationDays, String baseVacationForm) {\n        super(baseHours, baseVacationDays, baseVacationForm);\n        this.baseSalary = baseSalary;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:41.831+0000"), 
            "code" : "public class Marketer extends Employee {\n\tprivate double baseSalary = 50000.0;\n    public Marketer(int baseHours, double baseSalary, int baseVacationDays, String baseVacationForm) {\n        //super(baseHours, baseVacationDays, baseVacationForm);\n        this.baseSalary = baseSalary;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:51.251+0000"), 
            "code" : "public class Marketer extends Employee {\n\tprivate double baseSalary = 50000.0;\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:06.672+0000"), 
            "code" : "public class Marketer extends Employee {\n\tprivate double baseSalary = 50000.0;\n    public Marketer(double baseSalary) {\n        //super(baseHours, baseVacationDays, baseVacationForm);\n        this.baseSalary = baseSalary;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:05.365+0000"), 
            "code" : "public class Marketer extends Employee {\n\tprivate double baseSalary = 50000.0;\n\t\n\tpublic Marketer() {\n\t    \n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 86.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:20:03.123+0000"), 
            "code" : "public class Marketer extends Employee {\n\n\tpublic Marketer() {\n\t    baseSalary = getSalary();\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1823.5
        }
    ]
}
{ 
    "_id" : "DWrD7eiFJ8bkMv9if", 
    "userId" : "6S4oHGNjdgG5fWts7", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:51.801+0000"), 
    "updatedAt" : ISODate("2016-04-29T02:30:02.183+0000"), 
    "code" : "public class Marketer extends Employee{\n    public double getSalary(){\n        return super.getSalary()+10000;\n    }\n    \n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 491.8, 
    "totalActiveTime" : 896.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:21:50.670+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    public void advertise(){\n        super();\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 195.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:03.955+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    public void advertise(){\n        //super();\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:07.435+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    \n    \n    public void advertise(){\n        //super();\n        baseSalary=super(baseSalary)+10000;\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 56.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:37.965+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    \n    \n    public void advertise(){\n        //super();\n        baseSalary= getSalary()+10000;\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:48.101+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    \n    \n    public void advertise(){\n        //super();\n        baseSalary= getSalary()+10000;\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:21.969+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    \n    \n    public void advertise(){\n        \n        baseSalary= getSalary()+10000;\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 33.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:34.279+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    \n    \n    public void advertise(){\n        \n        baseSalary= super(baseSalary)+10000;\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:55.063+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    \n    \n    public void advertise(){\n        baseSalary= super(baseSalary)+10000;\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:28.445+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    \n    \n    public void advertise(){\n        super(baseSalary);\n        baseSalary= super(baseSalary)+10000;\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:37.761+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    \n    \n    public void advertise(){\n\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:47.135+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary;\n    \n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.5
        }, 
        {
            "date" : ISODate("2016-04-29T02:30:02.182+0000"), 
            "code" : "public class Marketer extends Employee{\n    public double getSalary(){\n        return super.getSalary()+10000;\n    }\n    \n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 491.8
        }
    ]
}
{ 
    "_id" : "54HyGze2CixfANt4t", 
    "userId" : "8DSANwmE8m6iARS9v", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:24:25.783+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:24:25.783+0000")
}
{ 
    "_id" : "nHJDCBo4HoLwn2SwT", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:20:05.418+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:37:32.792+0000"), 
    "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        \n        super.setBaseSalary(50000.0);\n        \n    }\n    \n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 11.5, 
    "totalActiveTime" : 750.4000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:24:17.494+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    private double baseSalary = 50000.0;\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 183.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:35.141+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    private double baseSalary = this.50000.0;\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:57.001+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n   super.setBaseSalary(50000.0)\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 417.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:25.318+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        \n        super.setBaseSalary(50000.0)\n        \n    }\n    \n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 119.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:32.791+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        \n        super.setBaseSalary(50000.0);\n        \n    }\n    \n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 11.5
        }
    ]
}
{ 
    "_id" : "7xoHdL7ZdJLkgTL7T", 
    "userId" : "dPGDwJc58vokTNtKk", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:20:05.453+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:25:14.491+0000"), 
    "code" : "public class Marketer extends Employee{\n    public Marketer(){\n        super();\n        setBaseSalary(50000.00);\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 14.2, 
    "totalActiveTime" : 284.49999999999994, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:23:34.970+0000"), 
            "code" : "public class Marketer extends Employee{\n    public Marketer(){\n        super();\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 193.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:00.537+0000"), 
            "code" : "public class Marketer extends Employee{\n    public Marketer(){\n        super();\n        setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 76.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:14.491+0000"), 
            "code" : "public class Marketer extends Employee{\n    public Marketer(){\n        super();\n        setBaseSalary(50000.00);\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 14.2
        }
    ]
}
{ 
    "_id" : "KtKmvnTozswS7HeKe", 
    "userId" : "7KfbnSL6HCME3H7es", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:28.068+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:25:16.940+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 28.6, 
    "totalActiveTime" : 250.29999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:18:18.639+0000"), 
            "code" : "public class Marketer extends Employee {\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 83.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:16.172+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public void setBaseSalary(double salary) {\n        this.getSalary() + salary;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 59.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:37.389+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public void setBaseSalary(double salary) {\n        this.getSalary() = salary  + 10000;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:51.095+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public final void setBaseSalary(double salary) {\n        this.getSalary() = salary  + 10000;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:00.344+0000"), 
            "code" : "public class Marketer extends Employee {\n    public void advertise() {\n        setBaseSalary(50000);\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 43.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:16.939+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 28.6
        }
    ]
}
{ 
    "_id" : "m5sDRrgHStQ5XmP9M", 
    "userId" : "fzFhAfCHiwc4842pK", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:56.481+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:25:50.780+0000"), 
    "code" : "public class Marketer extends Employee{\n    private double bonusSalary;\n    public Marketer(){\n        super();\n        bonusSalary = 10000;\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getSalary()+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = newBonus;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 10.5, 
    "totalActiveTime" : 423.40000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:23:02.197+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int bonusSalary;\n    \n    public Marketer(int bonusSalary) {\n        super();\n        this.bonusSalary = bonusSalary;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now,while supplies last!\")\n    }\n    \n    public double getSalary(){\n        return super.baseSalary+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = new newBonus;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 259.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:09.833+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int bonusSalary;\n    \n    public Marketer(int bonusSalary) {\n        super();\n        this.bonusSalary = bonusSalary;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now,while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.baseSalary+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = new newBonus;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:09.425+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int bonusSalary;\n    \n    public Marketer(int bonusSalary) {\n        super();\n        this.bonusSalary = bonusSalary;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now,while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getBaseSalary+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = newBonus;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 59.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:30.622+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double bonusSalary;\n    \n    public Marketer(double bonusSalary) {\n        super();\n        this.bonusSalary = bonusSalary;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now,while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getBaseSalary+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = newBonus;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:43.853+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double bonusSalary;\n    \n    public Marketer(double bonusSalary) {\n        super();\n        this.bonusSalary = bonusSalary;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now,while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getBaseSalary()+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = newBonus;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:00.697+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double bonusSalary;\n    \n    public Marketer(double bonusSalary) {\n        super();\n        this.bonusSalary = bonusSalary;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now,while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getSalary()+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = newBonus;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:40.360+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double bonusSalary;\n    public Marketer(){\n        super();\n        bonusSalary = 10000;\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now,while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getSalary()+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = newBonus;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 39.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:50.780+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double bonusSalary;\n    public Marketer(){\n        super();\n        bonusSalary = 10000;\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getSalary()+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = newBonus;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 10.5
        }
    ]
}
{ 
    "_id" : "6dGYvXfcK4SwqJuXc", 
    "userId" : "uAgTDnJFYMxpGshJq", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:33.877+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:26:25.036+0000"), 
    "code" : "public class Marketer extends Employee{\n\t\n\tpublic Marketer(){\n\t    this.setBaseSalary(50000);\n\t}\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
    "status" : "PASS", 
    "activeTime" : 6.7, 
    "totalActiveTime" : 428.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:19:51.190+0000"), 
            "code" : "public class Marketer extends Employee{\n    public final void setBaseSalary(double salary) {\n\t\tbaseSalary = super.getSalary()+10000;\n\t}\n\t\n\tpublic final void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 141.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:28.619+0000"), 
            "code" : "public class Marketer extends Employee{\n    public final void setBaseSalary(double salary) {\n\t\tsalary = super.getSalary()+10000;\n\t}\n\t\n\tpublic final void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:51.058+0000"), 
            "code" : "public class Marketer extends Employee{\n    public void setBaseSalary(double salary) {\n\t\tsalary = super.getSalary()+10000;\n\t}\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:19.170+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    setBaseSalary(50000);\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 131.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:58.423+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    setBaseSalary(50000);\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:03.473+0000"), 
            "code" : "public class Marketer extends Employee{\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(5)
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:55.920+0000"), 
            "code" : "public class Marketer extends Employee{\n\t\n\tpublic Marketer(){\n\t    Employee e=new Employee();\n\t    e.setBaseSalary(50000);\n\t}\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 42.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:02.845+0000"), 
            "code" : "public class Marketer extends Employee{\n\t\n\tpublic Marketer(){\n\t    Employee e=new Employee();\n\t    e.setBaseSalary(50000);\n\t}\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:18.399+0000"), 
            "code" : "public class Marketer extends Employee{\n\t\n\tpublic Marketer(){\n\t    Employee e=new Employee();\n\t    this.setBaseSalary(50000);\n\t}\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 15.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:25.035+0000"), 
            "code" : "public class Marketer extends Employee{\n\t\n\tpublic Marketer(){\n\t    this.setBaseSalary(50000);\n\t}\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 6.7
        }
    ]
}
{ 
    "_id" : "SQmHq35DQbfHZ89gu", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:30.681+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:27:03.089+0000"), 
    "code" : "public class Marketer extends Employee{\n\n    public Marketer(){\n        setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(46), 
    "totalActiveTime" : 444.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:22:57.477+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double bonusSal = 10000;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 241.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:14.813+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary = getSalary() + 10000;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 53.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:37.173+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary = getSalary();\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 22.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:57.795+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary = 10000.0 +getSalary();\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 20.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:09.621+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary = 50000.0 ;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:13.780+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary = 50000.0 ;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(4)
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:01.947+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double super.baseSalary = 50000 ;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:13.549+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary = 50000 ;\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 11.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:03.089+0000"), 
            "code" : "public class Marketer extends Employee{\n\n    public Marketer(){\n        setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(46)
        }
    ]
}
{ 
    "_id" : "p3xcMkdHKMqYW64iG", 
    "userId" : "hKfr63JxQMPjGCBqz", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:16:55.174+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:27:16.639+0000"), 
    "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 10000;               \n\t}\n    public static void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : 35.7, 
    "totalActiveTime" : 542.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:24:29.395+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 50000;               \n\t}\n    public String advertise(){\n        System.out.println(\"Act now, while supplies last!\")\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(375)
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:37.628+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 50000;               \n\t}\n    public String advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:02.026+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 50000;               \n\t}\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:26.440+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 50000;               \n\t}\n    public static void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:20.675+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 10000;               \n\t}\n    public static void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 53.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:28.971+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 10000;               \n\t}\n    public static void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:40.996+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 10000;               \n\t}\n    public static void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:16.638+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 10000;               \n\t}\n    public static void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.7
        }
    ]
}
{ 
    "_id" : "MKqXiqXmWSPb3tcSZ", 
    "userId" : "KqQptyqdavcd4i7Jm", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:01.106+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:26:48.888+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return \"\" + nickname + \", height = \" + height +\"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 26.9, 
    "totalActiveTime" : 376.79999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:26:22.354+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return \"\" + nickname + \" height = \" + height +\"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 349.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:48.887+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return \"\" + nickname + \", height = \" + height +\"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 26.9
        }
    ]
}
{ 
    "_id" : "yPxD3PMWJEAdFTqDH", 
    "userId" : "N5BQLGMBRKq32m5Ay", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:39.742+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:42:57.745+0000"), 
    "code" : "public class Marketer extends Employee{\n    private double additionalSalary;\n    \n    public Marketer(){\n        super();\n        \n        setBaseSalary(50000);\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 76.9, 
    "totalActiveTime" : 1115.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:22:17.768+0000"), 
            "code" : "public class Marketer extends Employeee{\n    private int additionalSalary;\n    \n    public Marketer{\n        super(super.getHours(), super.getSalary(), super.getVacationDays(),super.getVacationForm());\n        additionalSalary = 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 226.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:47.780+0000"), 
            "code" : "public class Marketer extends Employeee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super(super.getHours(), super.getSalary(), super.getVacationDays(),super.getVacationForm());\n        additionalSalary = 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(30)
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:22.374+0000"), 
            "code" : "public class Marketer extends Employeee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super(super.getHours(), super.getSalary(), super.getVacationDays(),super.getVacationForm());\n        additionalSalary = 10000;\n    }\n    \n    public static void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:46.582+0000"), 
            "code" : "public class Marketer extends Employeee{\n    private int additionalSalary;\n    \n    public Marketer(int additionalSalary){\n        super(super.getHours(), super.getSalary(), super.getVacationDays(),super.getVacationForm());\n        additionalSalary = 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:57.720+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(int additionalSalary){\n        super(super.getHours(), super.getSalary(), super.getVacationDays(),super.getVacationForm());\n        additionalSalary = 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:52.335+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(int additionalSalary){\n        super();\n        additionalSalary = 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(50)
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:04.254+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super();\n        additionalSalary = 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:40.909+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super();\n        additionalSalary = 10000;\n        super.getSalary() += additionalSalary;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:27.115+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super();\n        //additionalSalary = 10000;\n        salary = super.getSalary() + additionalSalary;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:42.456+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super();\n        //additionalSalary = 10000;\n        int salary = (int)super.getSalary() + additionalSalary;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:03.215+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super();\n        //additionalSalary = 10000;\n        additionalSalary = (int)super.getSalary() + 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:36.176+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super(additionalSalary);\n        //additionalSalary = 10000;\n        //additionalSalary = (int)super.getSalary() + 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:53.108+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super();\n        additionalSalary = 10000;\n        //additionalSalary = (int)super.getSalary() + 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:54:33.347+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int additionalSalary;\n    \n    public Marketer(){\n        super();\n        additionalSalary = 10000;\n        int salary = (int) super.getSalary()  + additionalSalary;\n        \n        //additionalSalary = (int)super.getSalary() + 10000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 232.5
        }, 
        {
            "date" : ISODate("2016-04-29T01:00:47.009+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double additionalSalary;\n    \n    public Marketer(){\n        super();\n        additionalSalary = super.getSalary() + 10000;\n        \n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 133.9
        }, 
        {
            "date" : ISODate("2016-04-29T01:07:43.508+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double additionalSalary;\n    \n    public Marketer(){\n        super();\n        //additionalSalary = super.getSalary() + 10000;\n        additionalSalary = 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 65.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:10:42.605+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double additionalSalary;\n    \n    public Marketer(){\n        super();\n        \n        additionalSalary = getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 54.7
        }, 
        {
            "date" : ISODate("2016-04-29T01:42:57.744+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double additionalSalary;\n    \n    public Marketer(){\n        super();\n        \n        setBaseSalary(50000);\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 76.9
        }
    ]
}
{ 
    "_id" : "s9oeueGSL9qWdji8K", 
    "userId" : "skeAjiWQ9cA4BLDxs", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:22:52.006+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:28:20.614+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 10.5, 
    "totalActiveTime" : 307.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:28:10.063+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 296.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:28:20.613+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 10.5
        }
    ]
}
{ 
    "_id" : "j9TCE45TmE3mTiTmL", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:29:07.479+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:29:07.479+0000")
}
{ 
    "_id" : "Kqu5uop4AwYzjrRgt", 
    "userId" : "7KfbnSL6HCME3H7es", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:22:17.036+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:05:39.660+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 29.6, 
    "totalActiveTime" : 456.00000000000006, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:24:39.844+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickName;\n    \n    public Animal(double height, double weight, String nickName) {\n        this.height = height;\n        this.weight = weight;\n        this.nickName = nickName;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 153.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:57.133+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickName;\n    \n    public Animal(double height, double weight, String nickName) {\n        this.height = height;\n        this.weight = weight;\n        this.nickName = nickName;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\")\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weigth = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 156.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:28:05.757+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickName;\n    \n    public Animal(double height, double weight, String nickName) {\n        this.height = height;\n        this.weight = weight;\n        this.nickName = nickName;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weigth = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:28:25.269+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickName = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weigth = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:28:43.204+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weigth = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:29:08.984+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:29:47.091+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 38.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:29:53.571+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 6.5
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:39.660+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 29.6
        }
    ]
}
{ 
    "_id" : "hLuYmMyNJC3qHpiue", 
    "userId" : "ukRzCFySZXsgLobtY", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:18.398+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:30:25.220+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 439.6, 
    "totalActiveTime" : 439.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:30:25.219+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 439.6
        }
    ]
}
{ 
    "_id" : "XkKZfinCssNSP78Aa", 
    "userId" : "Cp9j6PryRY7XDwG8r", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:24:15.057+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:31:29.138+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    public Animal(double height, double weight) {\n        nickname = \"animal\";\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    public double getHeight() {\n        return height;\n    }\n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString() {\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 30.3, 
    "totalActiveTime" : 690.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:30:58.491+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    public double getHeight() {\n        return height;\n    }\n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString() {\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 660.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:29.137+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    public Animal(double height, double weight) {\n        nickname = \"animal\";\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    public double getHeight() {\n        return height;\n    }\n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString() {\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 30.3
        }
    ]
}
{ 
    "_id" : "WjTmQEr9gzrYoC53w", 
    "userId" : "ZwzuuSYKWikrzBcXP", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:13.744+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:31:19.446+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        \n        String result = nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n        return result;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 35.2, 
    "totalActiveTime" : 605.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:30:25.978+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        \n        String result = nickname + \", height = \" + height + \", weight = \" + weight + \"kg\";\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 552.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:30:44.480+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        \n        String result = nickname + \", height = \" + height + \", weight = \" + weight + \"kg\";\n        return result;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 18.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:19.446+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        \n        String result = nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n        return result;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 35.2
        }
    ]
}
{ 
    "_id" : "jBbp8fYkXCL6f5Tow", 
    "userId" : "jY3HQTQ3dYhv8vib8", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:23:23.687+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:14.906+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this.weight = weight;\n        this.height = height; \n        nickname = \"animal\";\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this(height, weight);\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n        \n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\"; \n    \n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 58.8, 
    "totalActiveTime" : 586.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:29:58.272+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this.weight = weight;\n        this.height = height; \n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n        \n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight = \" + weight + \"kg\"; \n    \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 407.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:30:55.764+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this.weight = weight;\n        this.height = height; \n        nickname = \"animal\";\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this.weight = weight;\n        this.height = height;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n        \n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight = \" + weight + \"kg\"; \n    \n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 57.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:17.995+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this.weight = weight;\n        this.height = height; \n        nickname = \"animal\";\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this.weight = weight;\n        this.height = height;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n        \n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\"; \n    \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:31.076+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this.weight = weight;\n        this.height = height; \n        nickname = \"animal\";\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this.weight = weight;\n        this.height = height;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n        \n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\"; \n    \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:52.903+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this.weight = weight;\n        this.height = height; \n        nickname = \"animal\";\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this.weight = weight;\n        this.height = height;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n        \n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\"; \n    \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 27.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:14.906+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this.weight = weight;\n        this.height = height; \n        nickname = \"animal\";\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this(height, weight);\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n        \n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\"; \n    \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 58.8
        }
    ]
}
{ 
    "_id" : "RdJWQAunH7ASbfTkC", 
    "userId" : "qRRx6bzkx25XcK7w8", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:26:41.192+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:31:46.689+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(15), 
    "totalActiveTime" : 360.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:03.787+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nicname + \", height = \" + height + \", weight = \" + weight;\n    }\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 317.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:13.634+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \", weight = \" + weight;\n    }\n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 9.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:31.813+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \", weight = \" + weight + \"kg\";\n    }\n    \n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 18.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:46.689+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(15)
        }
    ]
}
{ 
    "_id" : "D9gWzqM5kiCbZEgNh", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:13.982+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:35:07.601+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        //nickname = \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double w){\n        weight = w;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \"+ height + \"m, weight = \"+ weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 20.6, 
    "totalActiveTime" : 839.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:28:27.083+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        //nickname = \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double w){\n        weight = w;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height =\"+ height + \"m, weight =\"+ weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 440.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:29:16.927+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        //nickname = \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double w){\n        weight = w;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height =\"+ height + \"m, weight =\"+ weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 49.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:30:24.991+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        //nickname = \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double weight){\n        weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height =\"+ height + \"m, weight =\"+ weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(68)
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:43.030+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        //nickname = \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double weight){\n        weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height =\"+ height + \"m, weight =\"+ weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 77.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:57.300+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        //nickname = \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double w){\n        w = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height =\"+ height + \"m, weight =\"+ weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 132.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:47.698+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        //nickname = \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double w){\n        w = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \"+ height + \"m, weight = \"+ weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 50.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:07.601+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        //nickname = \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double w){\n        weight = w;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \"+ height + \"m, weight = \"+ weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 20.6
        }
    ]
}
{ 
    "_id" : "heymwysHfH28LXo7m", 
    "userId" : "68LkTBk27sS7rTZ2u", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:56.535+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:32:06.258+0000"), 
    "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println (\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height \n        + \"m, weight = \" \n        + weight + \"kg\";\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 4.2, 
    "totalActiveTime" : 396.30000000000007, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:34.000+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println (\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height \n        + \"m, weight = \" \n        + weight + \"kg\"';\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 364.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:42.707+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println (\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height \n        + \"m, weight = \" \n        + weight + \"kg\";\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:49.407+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println (\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height \n        + \"m, weight = \" \n        + weight + \"kg\";\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:02.161+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println (\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height \n        + \"m, weight = \" \n        + weight + \"kg\";\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:06.257+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println (\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height \n        + \"m, weight = \" \n        + weight + \"kg\";\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 4.2
        }
    ]
}
{ 
    "_id" : "tYybT7qM93S8Rypq6", 
    "userId" : "npjNBBuP23XiG7zn3", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:49.748+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:32:09.748+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 13.4, 
    "totalActiveTime" : 641.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:56.710+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 627.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:09.748+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 13.4
        }
    ]
}
{ 
    "_id" : "xutC2faCHBk4rrAaa", 
    "userId" : "vu9erLrF9tWsY8uAx", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:25:48.984+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:32:32.281+0000"), 
    "code" : "public class Animal{\n\tprivate double height; \n\tprivate double weight; \n\tprivate String nickname; \n\t\n\t\n\tpublic Animal(double height, double weight, String nickname){\n\t\tthis.height = height;\n\t\tthis.weight = weight; \n\t\tthis.nickname = nickname; \n\t}\n\t\n\tpublic Animal(double height, double weight){\n\t\tthis.height = height; \n\t\tthis.weight = weight; \n\t\tnickname = \"animal\"; \n\t}\n\t\n\tpublic double getHeight(){\n\t\treturn height; \n\t}\n\t\n\tpublic double getWeight(){\n\t\treturn weight; \n\t}\n\t\n\tpublic void setWeight(double weight){\n\t\tthis.weight = weight; \n\t}\n\t\n\tpublic String getNickname(){\n\t\treturn nickname; \n\t}\n\t\n\tpublic void eat(){\n\t\tSystem.out.print(\"OM NOM NOM NOM\"); \n\t}\n\t\n\tpublic String toString(){\n\t\treturn nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\"; \n\t}\n}", 
    "status" : "PASS", 
    "activeTime" : 34.8, 
    "totalActiveTime" : 410.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:26.685+0000"), 
            "code" : "public class Animal{\n\tprivate double height; \n\tprivate double weight; \n\tprivate String nickname; \n\t\n\t\n\tpublic Animal(double height, double weight, String nickname){\n\t\tthis.height = height;\n\t\tthis.weight = weight; \n\t\tthis.nickname = nickname; \n\t}\n\t\n\tpublic Animal(double height, double weight){\n\t\tsuper(height, weight); \n\t\tnickname = \"animal\"; \n\t}\n\t\n\tpublic double getHeight(){\n\t\treturn height; \n\t}\n\t\n\tpublic double getWeight(){\n\t\treturn weight; \n\t}\n\t\n\tpublic void setWeight(double weight){\n\t\tthis.weight = weight; \n\t}\n\t\n\tpublic String getNickname(){\n\t\treturn nickname; \n\t}\n\t\n\tpublic void eat(){\n\t\tSystem.out.print(\"OM NOM NOM NOM\"); \n\t}\n\t\n\tpublic String toString(){\n\t\treturn nickname + \" , height = \" + height + \", weight = \" + weight; \n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 344.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:57.369+0000"), 
            "code" : "public class Animal{\n\tprivate double height; \n\tprivate double weight; \n\tprivate String nickname; \n\t\n\t\n\tpublic Animal(double height, double weight, String nickname){\n\t\tthis.height = height;\n\t\tthis.weight = weight; \n\t\tthis.nickname = nickname; \n\t}\n\t\n\tpublic Animal(double height, double weight){\n\t\tthis.height = height; \n\t\tthis.weight = weight; \n\t\tnickname = \"animal\"; \n\t}\n\t\n\tpublic double getHeight(){\n\t\treturn height; \n\t}\n\t\n\tpublic double getWeight(){\n\t\treturn weight; \n\t}\n\t\n\tpublic void setWeight(double weight){\n\t\tthis.weight = weight; \n\t}\n\t\n\tpublic String getNickname(){\n\t\treturn nickname; \n\t}\n\t\n\tpublic void eat(){\n\t\tSystem.out.print(\"OM NOM NOM NOM\"); \n\t}\n\t\n\tpublic String toString(){\n\t\treturn nickname + \" , height = \" + height + \", weight = \" + weight; \n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 30.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:32.281+0000"), 
            "code" : "public class Animal{\n\tprivate double height; \n\tprivate double weight; \n\tprivate String nickname; \n\t\n\t\n\tpublic Animal(double height, double weight, String nickname){\n\t\tthis.height = height;\n\t\tthis.weight = weight; \n\t\tthis.nickname = nickname; \n\t}\n\t\n\tpublic Animal(double height, double weight){\n\t\tthis.height = height; \n\t\tthis.weight = weight; \n\t\tnickname = \"animal\"; \n\t}\n\t\n\tpublic double getHeight(){\n\t\treturn height; \n\t}\n\t\n\tpublic double getWeight(){\n\t\treturn weight; \n\t}\n\t\n\tpublic void setWeight(double weight){\n\t\tthis.weight = weight; \n\t}\n\t\n\tpublic String getNickname(){\n\t\treturn nickname; \n\t}\n\t\n\tpublic void eat(){\n\t\tSystem.out.print(\"OM NOM NOM NOM\"); \n\t}\n\t\n\tpublic String toString(){\n\t\treturn nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\"; \n\t}\n}", 
            "status" : "PASS", 
            "activeTime" : 34.8
        }
    ]
}
{ 
    "_id" : "ZgG3MDSNmBrsCZAD8", 
    "userId" : "sJHc88TqFpuuuT54p", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:24:07.420+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:35:31.497+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        \n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+ \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 27.7, 
    "totalActiveTime" : 702.3000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:29:10.692+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname-nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight);\n        nickname=\"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public String getNickname(){\n        return \"OM NOM NOM NOM\";\n    }\n    public String toString(){\n        return nickname+ \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 324.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:29:53.793+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname-nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight);\n        nickname=\"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public String eat(){\n        return \"OM NOM NOM NOM\";\n    }\n    public String toString(){\n        return nickname+ \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:30:34.173+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight);\n        nickname=\"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public String eat(){\n        return \"OM NOM NOM NOM\";\n    }\n    public String toString(){\n        return nickname+ \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:02.112+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        \n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public String eat(){\n        return \"OM NOM NOM NOM\";\n    }\n    public String toString(){\n        return nickname+ \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 87.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:36.559+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        \n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public String eat(){\n        return \"OM NOM NOM NOM\";\n    }\n    public String toString(){\n        return nickname+ \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 154.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:01.263+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        \n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public String eat(){\n        return \"OM NOM NOM NOM\";\n    }\n    public String toString(){\n        return nickname+ \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:31.497+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        \n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+ \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 27.7
        }
    ]
}
{ 
    "_id" : "XypeGaidK7FyomYxJ", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:23:49.800+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:33:19.902+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    //constructor\n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    //getters\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    //methods\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 40.9, 
    "totalActiveTime" : 549.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:13.307+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    //constructor\n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        Animal a = new Animal(height, weight, \"animal\");\n    }\n    \n    //getters\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    //setters\n    public void setWeight(double weight)\n    \n    //methods\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 448.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:44.189+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    //constructor\n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        Animal a = new Animal(height, weight, \"animal\");\n    }\n    \n    //getters\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    //methods\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 30.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:01.562+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    //constructor\n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        Animal(height, weight, \"animal\");\n    }\n    \n    //getters\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    //methods\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(18)
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:13.593+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    //constructor\n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        new Animal(height, weight, \"animal\");\n    }\n    \n    //getters\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    //methods\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:19.902+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    //constructor\n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    //getters\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    //methods\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 40.9
        }
    ]
}
{ 
    "_id" : "FSzm4oogwjM6FYdp8", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:39.991+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:33:15.370+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return getNickname() + \", height = \" + getHeight() + \"m, weight = \" + getWeight() + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(10), 
    "totalActiveTime" : 548.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:32:14.256+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return getNickname() + \", height = \" + getHeight() + \"m, weight = \" + getWeight() + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 493.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:05.293+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return getNickname() + \", height = \" + getHeight() + \"m, weight = \" + getWeight() + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:15.369+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return getNickname() + \", height = \" + getHeight() + \"m, weight = \" + getWeight() + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(10)
        }
    ]
}
{ 
    "_id" : "sFxj6zSmxopEgLCGR", 
    "userId" : "fzFhAfCHiwc4842pK", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:25:54.817+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:32:51.378+0000"), 
    "code" : "public class Animal {\n    private double weight;\n    private double height;\n    private String nickname;\n    \n    public Animal(double height,double weight,String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 34.3, 
    "totalActiveTime" : 419.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:32:03.225+0000"), 
            "code" : "public class Animal {\n    private double weight;\n    private double height;\n    private String nickname;\n    \n    public Animal(double height,double weight,String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname+\", height = \"+height+\", weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 370.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:17.210+0000"), 
            "code" : "public class Animal {\n    private double weight;\n    private double height;\n    private String nickname;\n    \n    public Animal(double height,double weight,String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname+\", height = \"+height+\", weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:51.377+0000"), 
            "code" : "public class Animal {\n    private double weight;\n    private double height;\n    private String nickname;\n    \n    public Animal(double height,double weight,String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 34.3
        }
    ]
}
{ 
    "_id" : "Pec2ECjxS6wRZA6SA", 
    "userId" : "Cp9j6PryRY7XDwG8r", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:08.253+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:34:21.507+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;\n\t}\n    public void advertise () {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 90.2, 
    "totalActiveTime" : 138.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:32:17.261+0000"), 
            "code" : "public class Marketer {\n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;\n\t}\n    public void advertise () {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:21.507+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;\n\t}\n    public void advertise () {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 90.2
        }
    ]
}
{ 
    "_id" : "8ndHu4A4SogjikCJ6", 
    "userId" : "dPGDwJc58vokTNtKk", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:25:18.443+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:40:17.034+0000"), 
    "code" : "public class Animal{\n    protected double height;\n    protected double weight;\n    protected String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        this.nickname = nickname;\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 30.5, 
    "totalActiveTime" : 440.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:32.872+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        this.nickname = nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 351.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:56.825+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        this.nickname = nickname;\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 23.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:31.774+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        this.nickname = nickname;\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 35.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:17.034+0000"), 
            "code" : "public class Animal{\n    protected double height;\n    protected double weight;\n    protected String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        this.nickname = nickname;\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 30.5
        }
    ]
}
{ 
    "_id" : "5QS2qreGjteAiantF", 
    "userId" : "F5XnEFAmSrqP7Hbf4", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:30.325+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:45:05.720+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getWeight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return nickname + \", \" + \"height = \" + height + \"m, weight = \" + weight + \"kg\";\n        \n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 3.2, 
    "totalActiveTime" : 1090.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:22:15.187+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double weight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        System.out.println(beast + \", \" + \"height =\" + height + \"m, weight\" + weight + \"kg\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(307)
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:49.769+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double weight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        System.out.println(nickname + \", \" + \"height =\" + height + \"m, weight\" + weight + \"kg\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 34.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:54.883+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double weight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        System.out.println(nickname + \", \" + \"height =\" + height + \"m, weight\" + weight + \"kg\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:45.124+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double weight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public void toString() {\n        System.out.println(nickname + \", \" + \"height =\" + height + \"m, weight\" + weight + \"kg\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 110.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:22.483+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double weight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return System.out.println(nickname + \", \" + \"height =\" + height + \"m, weight\" + weight + \"kg\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:42.126+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getweight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return System.out.println(nickname + \", \" + \"height =\" + height + \"m, weight\" + weight + \"kg\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 397.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:52.433+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getWeight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return System.out.println(nickname + \", \" + \"height =\" + height + \"m, weight\" + weight + \"kg\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:13.282+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\"'\n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getWeight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return System.out.println(nickname + \", \" + \"height =\" + height + \"m, weight\" + weight + \"kg\");\n        \n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 108.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:57.687+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getWeight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return nickname + \", \" + \"height =\" + height + \"m, weight\" + weight + \"kg\";\n        \n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 33.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:14.534+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getWeight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return nickname + \", \" + \"height =\" + height + \"m, weight\" + weight + \"= kg\";\n        \n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 15.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:25.882+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getWeight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return nickname + \", \" + \"height =\" + height + \"m, weight =\" + weight + \"kg\";\n        \n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:44:05.217+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getWeight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return nickname + \", \" + \"height = \" + height + \"m, weight = \" + weight + \"kg\";\n        \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 15.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:05.720+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getWeight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return nickname + \", \" + \"height = \" + height + \"m, weight = \" + weight + \"kg\";\n        \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 3.2
        }
    ]
}
{ 
    "_id" : "eiCXzTWGyo4QshceL", 
    "userId" : "rczYdr6YaF4Nv8DqY", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:17:12.271+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:33:22.864+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 9.6, 
    "totalActiveTime" : 496.00000000000006, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:32:55.470+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        Animal(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 468.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:13.091+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public this.(double height, double weight) {\n        Animal(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:22.864+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.6
        }
    ]
}
{ 
    "_id" : "LF3AXFARypFzXSX8P", 
    "userId" : "tBRTnCWLCp63vtcx8", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:24:17.992+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:33:14.603+0000"), 
    "code" : "public class Animal {\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(543), 
    "totalActiveTime" : NumberInt(543), 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:33:14.603+0000"), 
            "code" : "public class Animal {\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(543)
        }
    ]
}
{ 
    "_id" : "zjuWfwgfKBuJACqNf", 
    "userId" : "47MxiJWsWkBezecN9", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:33:14.722+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:33:14.722+0000")
}
{ 
    "_id" : "YQawaYDQ7k8s9qtFg", 
    "userId" : "Cp9j6PryRY7XDwG8r", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:33:52.434+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:33:52.434+0000")
}
{ 
    "_id" : "EPwyuy8Ct6qmfHzL2", 
    "userId" : "y69LScAMNyacdTiSs", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:23:21.832+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:12:05.511+0000"), 
    "code" : "import java.text.*;\npublic class Animal{\n    private double height;\n    protected double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"0.00\"); \n        return nickname + \", height = \" + df.format(height) + \"m, weight = \" + df.format(weight) +\"kg\";\n}\n}", 
    "status" : "PASS", 
    "activeTime" : 23.9, 
    "totalActiveTime" : 722.9000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:05.401+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        System.out.println(nickname + \", height = \" + height + \"m, weight =\" + weight +\"kg\");\n)\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 474.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:22.694+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        System.out.println(nickname + \", height = \" + height + \"m, weight =\" + weight +\"kg\");\n)\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:37.346+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        System.out.println(nickname + \", height = \" + height + \"m, weight =\" + weight +\"kg\");\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:50.313+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight =\" + weight +\"kg\");\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:04.261+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight =\" + weight +\"kg\";\n}\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:06.755+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"#.00\"); \n        return nickname + \", height = \" + df.height + \"m, weight =\" + df.weight +\"kg\";\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:37.861+0000"), 
            "code" : "import java.util.*;\npublic class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"#.00\"); \n        return nickname + \", height = \" + df.height + \"m, weight =\" + df.weight +\"kg\";\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:55.022+0000"), 
            "code" : "import java.math.*;\npublic class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"#.00\"); \n        return nickname + \", height = \" + df.height + \"m, weight =\" + df.weight +\"kg\";\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:45.796+0000"), 
            "code" : "import java.text.*;\npublic class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"#.00\"); \n        return nickname + \", height = \" + df.height + \"m, weight =\" + df.weight +\"kg\";\n}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:20.260+0000"), 
            "code" : "import java.text.*;\npublic class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"#.00\"); \n        return nickname + \", height = \" + df.format(height) + \"m, weight =\" + df.format(weight) +\"kg\";\n}\n}", 
            "status" : "FAIL", 
            "activeTime" : 34.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:40.182+0000"), 
            "code" : "import java.text.*;\npublic class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"0.00\"); \n        return nickname + \", height = \" + df.format(height) + \"m, weight =\" + df.format(weight) +\"kg\";\n}\n}", 
            "status" : "FAIL", 
            "activeTime" : 18.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:59.204+0000"), 
            "code" : "import java.text.*;\npublic class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"0.00\"); \n        return nickname + \", height = \" + df.format(height) + \"m, weight = \" + df.format(weight) +\"kg\";\n}\n}", 
            "status" : "PASS", 
            "activeTime" : 20.6
        }, 
        {
            "date" : ISODate("2016-04-29T01:12:05.511+0000"), 
            "code" : "import java.text.*;\npublic class Animal{\n    private double height;\n    protected double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"0.00\"); \n        return nickname + \", height = \" + df.format(height) + \"m, weight = \" + df.format(weight) +\"kg\";\n}\n}", 
            "status" : "PASS", 
            "activeTime" : 23.9
        }
    ]
}
{ 
    "_id" : "t3EXkwYfiapusQGMX", 
    "userId" : "mzEYkra6nhsvCgSH7", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:26:12.674+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:34:52.494+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight ;\n        this.nickname= nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight1){\n        weight = weight1;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString (){\n    \n        return nickname+\", height = \"+ height+\"m, weight = \"+ weight+\"kg\"; \n    }\n    \n\n}", 
    "status" : "PASS", 
    "activeTime" : 11.9, 
    "totalActiveTime" : 520.3000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:30:04.030+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight ;\n        this.nickname= nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 232.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:40.185+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight ;\n        this.nickname= nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight1){\n        weight = weight1;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString (){\n    \n        return nickname+\", height = \"+ height+\"m, weight = \"+ weight+\"kg\" \n    }\n    \n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 276.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:52.494+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight ;\n        this.nickname= nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight1){\n        weight = weight1;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString (){\n    \n        return nickname+\", height = \"+ height+\"m, weight = \"+ weight+\"kg\"; \n    }\n    \n\n}", 
            "status" : "PASS", 
            "activeTime" : 11.9
        }
    ]
}
{ 
    "_id" : "5HgAkQawJJrsTWMr9", 
    "userId" : "gdDMJZWTCmRwtc6m5", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:24:59.705+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:36:12.873+0000"), 
    "code" : "import java.text.DecimalFormat;\n\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight (double newWeight) {\n        weight = newWeight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        DecimalFormat df = new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 17.9, 
    "totalActiveTime" : 637.4999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:34:35.411+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight (double newWeight) {\n        weight = newWeight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        DecimalFormat df = new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        \"<nickname>, height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 551.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:54.602+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight (double newWeight) {\n        weight = newWeight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        DecimalFormat df = new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        return \"<nickname>, height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:27.610+0000"), 
            "code" : "import java.text.DecimalFormat;\n\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight (double newWeight) {\n        weight = newWeight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        DecimalFormat df = new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        return \"<nickname>, height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:56.898+0000"), 
            "code" : "import java.text.DecimalFormat;\n\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight (double newWeight) {\n        weight = newWeight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        DecimalFormat df = new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        return nickname \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:12.873+0000"), 
            "code" : "import java.text.DecimalFormat;\n\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight (double newWeight) {\n        weight = newWeight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        DecimalFormat df = new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 17.9
        }
    ]
}
{ 
    "_id" : "XzsnjMD37FimWHfhL", 
    "userId" : "6S4oHGNjdgG5fWts7", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:25:50.721+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:40:11.376+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +\", height = \" +height+\"m, weight = \" +weight +\"kg\";\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 13.2, 
    "totalActiveTime" : 858.3000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:32:54.425+0000"), 
            "code" : "public class Animal{\n    private int height;\n    private int weight;\n    private String nickname;\n    \n    public animal(int height, int weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    \n    public animal(int height, int weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +\" , height= \" +height+\"m, weight = \" +weight +\"kg\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 426.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:24.993+0000"), 
            "code" : "public class Animal{\n    private int height;\n    private int weight;\n    private String nickname;\n    \n    public Animal(int height, int weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    \n    public Animal(int height, int weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +\" , height= \" +height+\"m, weight = \" +weight +\"kg\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 90.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:14.744+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(int height, int weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    \n    public Animal(int height, int weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +\" , height= \" +height+\"m, weight = \" +weight +\"kg\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:44.498+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(int height, int weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    \n    public Animal(int height, int weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +\" , height= \" +height+\"m, weight = \" +weight +\"kg\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:36.754+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +\" , height= \" +height+\"m, weight = \" +weight +\"kg\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 230.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:58.383+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +\", height= \" +height+\"m, weight = \" +weight +\"kg\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 22.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:11.376+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +\", height = \" +height+\"m, weight = \" +weight +\"kg\";\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 13.2
        }
    ]
}
{ 
    "_id" : "hJZNGy85fk8kPzX42", 
    "userId" : "6S4oHGNjdgG5fWts7", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:35:50.883+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:35:50.883+0000")
}
{ 
    "_id" : "ZouvZBjWhHcdPZWY4", 
    "userId" : "gdDMJZWTCmRwtc6m5", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:36:16.787+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:36:16.787+0000")
}
{ 
    "_id" : "jwdqBiYA5EpGymmyn", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:24:12.552+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:37:19.154+0000"), 
    "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(26), 
    "totalActiveTime" : 781.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:14.854+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 426.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:39.165+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        super.(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:07.043+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        Animal(height,weight,\"Animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 28.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:17.153+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.(height,weight,\"Animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(10)
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:32.685+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:26.672+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 53.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:40.701+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 74.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:02.628+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 81.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:22.593+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.Animal(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(20)
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:51.004+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:19.154+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(26)
        }
    ]
}
{ 
    "_id" : "96v7DkSpuKGBYjJYK", 
    "userId" : "kL5wJ3qdYDvbWke7w", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:05.217+0000"), 
    "updatedAt" : ISODate("2016-04-29T04:15:34.923+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    public Marketer() {\n        setBaseSalary(50000);\n    }\n\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 31.9, 
    "totalActiveTime" : 7044.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:22:55.023+0000"), 
            "code" : "public class Marketer {\n    \n    super.getSalary() + 10000;\n    \n    public String advertise {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 273.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:08.038+0000"), 
            "code" : "public class Marketer {\n    \n    super.getSalary() + 10000;\n    \n    public String advertise {\n        return \"Act now, while supplies last!\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:49.509+0000"), 
            "code" : "public class Marketer {\n    public double getSalary() {\n            \n        super.getSalary() + 10000;\n    }\n\n    \n    public String advertise {\n        return \"Act now, while supplies last!\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 147.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:47.293+0000"), 
            "code" : "public class Marketer {\n    public double getSalary() {\n        super.getSalary() + 10000;\n    }\n\n    \n    public String advertise {\n        return \"Act now, while supplies last!\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 56.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:52.853+0000"), 
            "code" : "public class Marketer {\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n\n    \n    public String advertise {\n        return \"Act now, while supplies last!\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:17.243+0000"), 
            "code" : "public class Marketer extends Employee {\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n\n    \n    public String advertise {\n        return \"Act now, while supplies last!\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.8
        }, 
        {
            "date" : ISODate("2016-04-29T04:14:50.726+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer() {\n        setBaseSalary(50000);\n    }\n\n    \n    public String advertise {\n        return \"Act now, while supplies last!\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(6481)
        }, 
        {
            "date" : ISODate("2016-04-29T04:15:03.014+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer() {\n        setBaseSalary(50000);\n    }\n\n    \n    public String advertise() {\n        return \"Act now, while supplies last!\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 12.1
        }, 
        {
            "date" : ISODate("2016-04-29T04:15:34.922+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer() {\n        setBaseSalary(50000);\n    }\n\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 31.9
        }
    ]
}
{ 
    "_id" : "koyXQ3KXptp3QRe2Q", 
    "userId" : "rczYdr6YaF4Nv8DqY", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:16:34.689+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:37:27.260+0000"), 
    "code" : "public class Marketer extends Employee{\n    private double marketerSalary;\n    \n    marketerSalary = setBaseSalary(50000);\n\t\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 51.7, 
    "totalActiveTime" : 629.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:21:44.223+0000"), 
            "code" : "public class Marketer extends Employee{\n    baseSalary = getSalary() + 10000;\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 250.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:58.752+0000"), 
            "code" : "public class Marketer extends Employee{\n    this.baseSalary = getSalary() + 10000;\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:31.699+0000"), 
            "code" : "public class Marketer extends Employee{\n    double marketerBaseSalary = getSalary() + 10000;\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:50.429+0000"), 
            "code" : "public class Marketer extends Employee{\n    double marketerBaseSalary = getSalary() + 20000;\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 18.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:05.772+0000"), 
            "code" : "public class Marketer extends Employee{\n    double marketerBaseSalary = getSalary() + 10000;\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:44.680+0000"), 
            "code" : "public class Marketer extends Employee{\n    private marketerBaseSalary;\n    \n    marketerBaseSalary = getSalary() + 10000;\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:05.544+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double marketerBaseSalary;\n    \n    marketerBaseSalary = getSalary() + 10000;\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:04.445+0000"), 
            "code" : "public class Marketer extends Employee{\n    double marketerBaseSalary = getSalary() + 10000;\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 58.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:37.152+0000"), 
            "code" : "public class Marketer extends Employee{\n    public final void setBaseSalary(double 50000) {\n\t\tbaseSalary = salary;\n\t}\n\t\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 59.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:51.915+0000"), 
            "code" : "public class Marketer extends Employee{\n    public final void setBaseSalary(50000) {\n\t\tbaseSalary = salary;\n\t}\n\t\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:12.954+0000"), 
            "code" : "public class Marketer extends Employee{\n    this.setBaseSalary(50000) {\n\t\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:20.034+0000"), 
            "code" : "public class Marketer extends Employee{\n    this.setBaseSalary(50000);\n\t\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:16.754+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double marketerSalary;\n    \n    marketerSalary = this.setBaseSalary(50000);\n\t\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 50.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:27.260+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double marketerSalary;\n    \n    marketerSalary = setBaseSalary(50000);\n\t\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 51.7
        }
    ]
}
{ 
    "_id" : "rBE5quC57AHvMeG6v", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:14.019+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:56:30.008+0000"), 
    "code" : "public class Animal{\n    double height; \n    double weight; \n    String nickname; \n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n        \n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 6.3, 
    "totalActiveTime" : 748.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:40.274+0000"), 
            "code" : "public class Animal{\n    double height; \n    double weight; \n    String nickname; \n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Animal(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n        \n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 348.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:15.200+0000"), 
            "code" : "public class Animal{\n    double height; \n    double weight; \n    String nickname; \n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Animal(double height, double weight){\n        super(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n        \n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 95.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:55.139+0000"), 
            "code" : "public class Animal{\n    double height; \n    double weight; \n    String nickname; \n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Animal(double height, double weight){\n        super(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n        \n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 156.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:41.400+0000"), 
            "code" : "public class Animal{\n    double height; \n    double weight; \n    String nickname; \n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Animal(double height, double weight){\n        super(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n        \n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 106.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:59.031+0000"), 
            "code" : "public class Animal{\n    double height; \n    double weight; \n    String nickname; \n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n        \n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:38:15.817+0000"), 
            "code" : "public class Animal{\n    double height; \n    double weight; \n    String nickname; \n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n        \n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 16.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:56:30.007+0000"), 
            "code" : "public class Animal{\n    double height; \n    double weight; \n    String nickname; \n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n        \n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 6.3
        }
    ]
}
{ 
    "_id" : "aDWQD36DTeXkakr38", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:27:23.612+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:37:54.209+0000"), 
    "code" : "public class Marketer extends Employee{\n    \n    public  advertise (){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 478.3, 
    "totalActiveTime" : 478.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:37:54.209+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public  advertise (){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 478.3
        }
    ]
}
{ 
    "_id" : "nqLzXDNg8NCsSpEgA", 
    "userId" : "KqQptyqdavcd4i7Jm", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:51.791+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:42:40.561+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               \n\t}\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 32.7, 
    "totalActiveTime" : 422.90000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:18:40.996+0000"), 
            "code" : "public class Marketer extends Employee {\n    baseSalary = 50000;\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 80.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:23.703+0000"), 
            "code" : "public class Marketer extends Employee {\n    setBaseSalary(50000.0);\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 67.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:41.863+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary = getSalary();\n    salary = 50000;\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:15.444+0000"), 
            "code" : "public class Marketer extends Employee {\n    double salary = getSalary();\n    salary = 50000;\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:29.308+0000"), 
            "code" : "public class Marketer extends Employee {\n    double salary = getSalary() + 10000;\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:50.956+0000"), 
            "code" : "public class Marketer extends Employee {\n    double salary = (getSalary() + 10000);\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(22)
        }, 
        {
            "date" : ISODate("2016-04-29T00:38:23.129+0000"), 
            "code" : "public class Marketer extends Employee {\n    double salary = (getSalary() + 10000.0);\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:11.679+0000"), 
            "code" : "public class Marketer extends Employee {\n    baseSalary = (getSalary() + 10000.0);\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:24.316+0000"), 
            "code" : "public class Marketer extends Employee {\n    double baseSalary = (getSalary() + 10000.0);\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(21)
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:33.605+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double baseSalary = (getSalary() + 10000.0);\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(22)
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:14.820+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary = (getSalary() + 10000.0);\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 26.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:08.345+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn getSalary() + 10000;               \n\t}\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:40.561+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               \n\t}\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 32.7
        }
    ]
}
{ 
    "_id" : "rSszRWLXN8FXzSFtv", 
    "userId" : "zna4wuKiLGvFRJriv", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:21.145+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:39:34.236+0000"), 
    "code" : "public class Marketer extends Employee{\n    private int totalSalary; \n    \n    public Marketer(){\n    super.setBaseSalary(50000.0);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 30.5, 
    "totalActiveTime" : 1254.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:25:14.982+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int totalSalary; \n    \n    public Marketer(int getSalary);\n    super(totalSalary+1000);\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 419.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:49.015+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int totalSalary; \n    \n    public Marketer(int getSalary);\n    super(5000);\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(94)
        }, 
        {
            "date" : ISODate("2016-04-29T00:28:56.702+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int totalSalary; \n    \n    public Marketer(int getSalary){\n    super(5000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 127.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:51.530+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int totalSalary; \n    \n    public Marketer(int getSalary){\n    super(5000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 412.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:13.989+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int totalSalary; \n    \n    public Marketer(){\n    super.setBaseSalary(5000.0);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 170.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:34.236+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int totalSalary; \n    \n    public Marketer(){\n    super.setBaseSalary(50000.0);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 30.5
        }
    ]
}
{ 
    "_id" : "NKdPxRcpZ7mS73koW", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:32:21.491+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:42:31.352+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 147.8, 
    "totalActiveTime" : 401.20000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:40:03.434+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 253.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:31.352+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 147.8
        }
    ]
}
{ 
    "_id" : "K2fJdBL8c7p58JvSr", 
    "userId" : "68LkTBk27sS7rTZ2u", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:54.958+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:56:26.534+0000"), 
    "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = super.getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return salary;\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 19.8, 
    "totalActiveTime" : 786.9999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:19:55.300+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = 50000;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 135.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:20:32.537+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 37.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:51.836+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 54.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:17.514+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        setBaseSalary(40000);\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 73.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:06.925+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return salary;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 41.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:15.465+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return salary;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:28.924+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return salary;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:53.297+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        setBaseSalary(40000);\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return salary;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:25.011+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        setBaseSalary(40000);\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:29.780+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        setBaseSalary(40000);\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 4.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:11.085+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        setBaseSalary(40000);\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 78.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:02.949+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        setBaseSalary(50000);\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(42)
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:12.235+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = super.getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 52.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:26.107+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = super.getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 47.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:50:21.168+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getSalary() + 10000;\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 114.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:56:06.597+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return salary;\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 15.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:56:26.533+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = super.getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return salary;\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 19.8
        }
    ]
}
{ 
    "_id" : "axJaSGi7ozSgbK8dE", 
    "userId" : "uAgTDnJFYMxpGshJq", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:22:19.709+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:52:38.550+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 110.3, 
    "totalActiveTime" : 1291.7999999999997, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:30:36.165+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        System.out.println(nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg \");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 241.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:30:50.775+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg \");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:00.650+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:21.089+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(21)
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:54.538+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 33.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:59.745+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:39.245+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return this.nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 39.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:49.719+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:56.509+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:26.728+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 30.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:02.447+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:38.549+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(34)
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:04.727+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 85.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:28.172+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null){\n            nickname=\"Animal\";\n        }else{\n            this.nickname=nickname;\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 188.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:49.953+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null){\n            this.nickname=\"Animal\";\n        }else{\n            this.nickname=nickname;\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:17.598+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname.equals(\"\")){\n            nickname=\"Animal\";\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 27.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:29.927+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(this.nickname.equals(\"\")){\n            nickname=\"Animal\";\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(12)
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:42.387+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(this.nickname==null){\n            nickname=\"Animal\";\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:54.853+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null){\n            this.nickname=\"Animal\";\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:12.806+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null){\n            this.nickname=\"Animal\";\n        }else{\n            this.nickname=nickname;\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:31.573+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null || nickname.equals(\"\")){\n            this.nickname=\"Animal\";\n        }else{\n            this.nickname=nickname;\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:05.750+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null || nickname.equals(\"\")){\n            nickname=\"Animal\";\n        }else{\n            this.nickname=nickname;\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(15)
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:18.202+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null || nickname.equals(\"\")){\n            nickname=\"animal\";\n        }else{\n            this.nickname=nickname;\n        }\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 32.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:33.380+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        nickname=\"animal\";\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:42.389+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n        \n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:54.853+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null || nickname.equals(\"\")){\n            nickname=\"animal\";\n        }else{\n            this.nickname=nickname;\n        }\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:15.757+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null || nickname.equals(\"\")){\n            nickname=\"animal\";\n        }else{\n            this.nickname=nickname;\n        }\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:49:12.398+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(getNickname()==null){\n            this.nickname=\"animal\";\n        }else{\n            this.nickname=nickname;\n        }\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 110.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:50:48.328+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        if(nickname==null){\n            this.nickname=\"animal\";\n        }else{\n            this.nickname=nickname;\n        }\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 95.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:52:38.549+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 110.3
        }
    ]
}
{ 
    "_id" : "LgKLFv9Auyxy8k5yN", 
    "userId" : "57sNXhBgcWRbAj43Q", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:05.814+0000"), 
    "updatedAt" : ISODate("2016-04-29T04:30:19.350+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    public void advertise() {\n        \n        System.out.println(\"Act now, while supplies last!\");\n    \n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 128.3, 
    "totalActiveTime" : 888.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:19:24.203+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    //public Marketer(int )\n    public String advertise() {\n        return \"Act now, while supplies last!\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 135.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:43.498+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    \n    public String advertise() {\n        return \"Act now, while supplies last!\";\n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 326.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:07.871+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    \n    public String advertise() {\n        String result = \"\";\n        result = (\"Act now, while supplies last!\");\n        return result;\n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 66.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:05.182+0000"), 
            "code" : "public class Marketer extends Employee {\n    private String advertisement;\n    \n    public String advertise(String advertisement) {\n        \n        return \"Act now, while supplies last!\");\n    \n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 75.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:15.125+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public String advertise(String advertisement) {\n        \n        return \"Act now, while supplies last!\");\n    \n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(10)
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:28.535+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public String advertise() {\n        \n        return \"Act now, while supplies last!\");\n    \n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:38.615+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public String advertise() {\n        \n        return \"Act now, while supplies last!\";\n    \n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.1
        }, 
        {
            "date" : ISODate("2016-04-29T04:28:10.680+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public String advertise() {\n        \n        return \"Act now, while supplies last!\";\n    \n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 122.8
        }, 
        {
            "date" : ISODate("2016-04-29T04:30:19.349+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public void advertise() {\n        \n        System.out.println(\"Act now, while supplies last!\");\n    \n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 128.3
        }
    ]
}
{ 
    "_id" : "483PQGEGq2a4r23kN", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:18:10.380+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:40:49.959+0000"), 
    "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public double getSalary(){\n        double baseSalary = super.getSalary() + 10000;\n        return baseSalary;\n        \n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 17.7, 
    "totalActiveTime" : 555.9000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:24:05.068+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public Marketer(){\n        super();\n        baseSalary += 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 295.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:16.558+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public Marketer(){\n        super();\n        baseSalary += 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:32.570+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public Marketer(){\n        super();\n        baseSalary += 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:39.312+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public Marketer(){\n        super();\n        baseSalary += super.getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 66.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:51.486+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public Marketer(){\n        super();\n        baseSalary += 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:14.204+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public Marketer(){\n        baseSalary = super.getSalary();\n        baseSalary += 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 48.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:35.806+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public Marketer(){\n        baseSalary = super.getSalary();\n        baseSalary += 10,000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:45.319+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public Marketer(){\n        baseSalary = super.getSalary();\n        baseSalary += 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(10)
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:59.509+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public Marketer(){\n        baseSalary = super.getSalary() + 10000;\n        \n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:32.074+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public double getSalary(){\n        baseSalary = super.getSalary() + 10000;\n        \n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:49.958+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public double getSalary(){\n        double baseSalary = super.getSalary() + 10000;\n        return baseSalary;\n        \n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 17.7
        }
    ]
}
{ 
    "_id" : "A43q6Rh7DtML5DvCd", 
    "userId" : "skeAjiWQ9cA4BLDxs", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:28:26.673+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:17.199+0000"), 
    "code" : "java.util.Random;\npublic class Lion extends Animal {\n    private Animal currentPrey;\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super (height, weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rnd = new Random();\n        int r = rnd.nextInt(1);\n        \n        if (currentPrey != null) {\n            currentPrey = prey;\n            return true;\n        } else {\n            if (r == 0) { //true\n                currentPrey = prey;\n            }\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (currentPrey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (hasPrey()) {\n            return currentPrey;\n        }\n        return null;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 260.9, 
    "totalActiveTime" : 949.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:36:38.095+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal currentPrey;\n    \n    public boolean hunt(Animal prey) {\n        if (currentPrey != null) {\n            currentPrey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if (currentPrey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (hasPrey()) {\n            return currentPrey;\n        }\n        return null;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 496.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:38:28.627+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal currentPrey;\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super (height, weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (currentPrey != null) {\n            currentPrey = prey;\n            return true;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if (currentPrey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (hasPrey()) {\n            return currentPrey;\n        }\n        return null;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 110.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:40.728+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal currentPrey;\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super (height, weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (currentPrey != null) {\n            currentPrey = prey;\n            return true;\n        }\n        \n        if (currentPrey == null) {\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if (currentPrey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (hasPrey()) {\n            return currentPrey;\n        }\n        return null;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 81.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:17.198+0000"), 
            "code" : "java.util.Random;\npublic class Lion extends Animal {\n    private Animal currentPrey;\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super (height, weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rnd = new Random();\n        int r = rnd.nextInt(1);\n        \n        if (currentPrey != null) {\n            currentPrey = prey;\n            return true;\n        } else {\n            if (r == 0) { //true\n                currentPrey = prey;\n            }\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (currentPrey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (hasPrey()) {\n            return currentPrey;\n        }\n        return null;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 260.9
        }
    ]
}
{ 
    "_id" : "rXGnwMJvZXBJJmhts", 
    "userId" : "hKfr63JxQMPjGCBqz", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:28:38.360+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:40:58.494+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String toString(){\n        return nickname + \", height =\" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 4.4, 
    "totalActiveTime" : 820.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:40:09.061+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String toString(){\n        return nickname + \", height =\" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 771.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:54.233+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String toString(){\n        return nickname + \", height =\" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:58.494+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String toString(){\n        return nickname + \", height =\" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.4
        }
    ]
}
{ 
    "_id" : "nPqG9EiDPMm4CsaEH", 
    "userId" : "Z336xndcAP4QN8KAm", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:33:39.440+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:43:29.506+0000"), 
    "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    //constructor\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    //methods\n    public boolean hunt(Animal prey){\n        prey = new Animal();\n        return true;\n        \n    }\n    \n    public boolean hasPrey(){\n        return(prey!=null);\n           \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n    }\n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 65.4, 
    "totalActiveTime" : 606.9999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:38:17.734+0000"), 
            "code" : "public class Lion extends Animal{\n    \n    //constructor\n    public Lion(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    //methods\n    public boolean hunt(Animal prey){\n        return true;\n        \n    }\n    \n    public boolean hasPrey(){\n        return true;\n    }\n    \n    public Animal getPrey(){\n        return true;\n    }\n    \n    public void eat(){\n        System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 294.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:22.720+0000"), 
            "code" : "public class Lion extends Animal{\n    Animal prey;\n    \n    //constructor\n    public Lion(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    //methods\n    public boolean hunt(Animal prey){\n        prey = new Animal();\n        return true;\n        \n    }\n    \n    public boolean hasPrey(){\n        return(prey!=null);\n           \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 186.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:07.931+0000"), 
            "code" : "public class Lion extends Animal{\n    Animal prey;\n    \n    //constructor\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    //methods\n    public boolean hunt(Animal prey){\n        prey = new Animal();\n        return true;\n        \n    }\n    \n    public boolean hasPrey(){\n        return(prey!=null);\n           \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:22.762+0000"), 
            "code" : "public class Lion extends Animal{\n    public Animal prey;\n    \n    //constructor\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    //methods\n    public boolean hunt(Animal prey){\n        prey = new Animal();\n        return true;\n        \n    }\n    \n    public boolean hasPrey(){\n        return(prey!=null);\n           \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:29.506+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    //constructor\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    //methods\n    public boolean hunt(Animal prey){\n        prey = new Animal();\n        return true;\n        \n    }\n    \n    public boolean hasPrey(){\n        return(prey!=null);\n           \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 65.4
        }
    ]
}
{ 
    "_id" : "cPA9eRdhCJkvABfck", 
    "userId" : "hKfr63JxQMPjGCBqz", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:42:11.001+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:42:11.001+0000")
}
{ 
    "_id" : "jqk7jNpScnv9EM5jB", 
    "userId" : "kL5wJ3qdYDvbWke7w", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:23:34.776+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:45:47.192+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(78), 
    "totalActiveTime" : 1101.1999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:28.051+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        super(height, weight);\n        if (nickname == null) {\n            nickname = \"animal\";\n        }\n        \n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight =\" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 498.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:58.925+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        \n        if (nickname == null) {\n            nickname = \"animal\";\n        }\n        super(height, weight, nickname);\n        \n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight =\" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 90.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:09.823+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        super(height, weight);\n        if (nickname == null) {\n            nickname = \"animal\";\n        }\n        \n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight =\" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:30.211+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        super(height, weight);\n        if (nickname == null) {\n            nickname = \"animal\";\n        }\n        \n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight =\" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 128.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:31.793+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        super(height, weight, \"animal\");\n        \n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight =\" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:09.595+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        super(height, weight, \"animal\");\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight =\" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(97)
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:14.125+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        super(height, weight, \"animal\");\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight =\" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:58.250+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        super(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight =\" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 44.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:22.989+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height =\" + height + \"m, weight =\" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:08.105+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 59.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:47.192+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(78)
        }
    ]
}
{ 
    "_id" : "3tX6bt6d4d2DGxkSD", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:42:34.174+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:42:34.174+0000")
}
{ 
    "_id" : "P4svSJrkn7tfkCxG4", 
    "userId" : "vu9erLrF9tWsY8uAx", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:32:38.944+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:43:08.119+0000"), 
    "code" : "public class Lion extends Animal{\n\tprivate Animal prey; \n\t\n\tpublic Lion(double height, double weight, String nickname){\n\t\tsuper(height, weight, nickname); \n\t}\n\t\n\tpublic boolean hunt(Animal prey){\n\t\tif(prey != null){\n\t\t\tLion lion = (Lion)prey; \n\t\t\treturn true; \n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic boolean hasPrey(){\n\t\tif(prey != null){\n\t\t\treturn true; \n\t\t}else{\n\t\t\treturn false; \n\t\t}\n\t}\n\t\n\tpublic Animal getPrey(){\n\t\tif(prey == null){\n\t\t\treturn null; \n\t\t}\n\t\treturn prey; \n\t}\n\t\n}", 
    "status" : "FAIL", 
    "activeTime" : 54.3, 
    "totalActiveTime" : 634.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:42:07.999+0000"), 
            "code" : "public class Lion extends Animal{\n\tprivate Animal prey; \n\t\n\tpublic Lion(double height, double weight, String nickname){\n\t\tsuper(height, weight, nickname); \n\t}\n\t\n\tpublic boolean hunt(Animal prey){\n\t\tif(prey != null){\n\t\t\tLion lion = prey; \n\t\t\treturn true; \n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic boolean hasPrey(){\n\t\tif(prey != null){\n\t\t\treturn true; \n\t\t}else{\n\t\t\treturn false; \n\t\t}\n\t}\n\t\n\tpublic Animal getPrey(){\n\t\tif(prey == null){\n\t\t\treturn null; \n\t\t}\n\t\treturn prey; \n\t}\n\t\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 556.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:13.580+0000"), 
            "code" : "public class Lion extends Animal{\n\tprivate Animal prey; \n\t\n\tpublic Lion(double height, double weight, String nickname){\n\t\tsuper(height, weight, nickname); \n\t}\n\t\n\tpublic boolean hunt(Animal prey){\n\t\tif(prey != null){\n\t\t\tLion lion = prey; \n\t\t\treturn true; \n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic boolean hasPrey(){\n\t\tif(prey != null){\n\t\t\treturn true; \n\t\t}else{\n\t\t\treturn false; \n\t\t}\n\t}\n\t\n\tpublic Animal getPrey(){\n\t\tif(prey == null){\n\t\t\treturn null; \n\t\t}\n\t\treturn prey; \n\t}\n\t\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:08.119+0000"), 
            "code" : "public class Lion extends Animal{\n\tprivate Animal prey; \n\t\n\tpublic Lion(double height, double weight, String nickname){\n\t\tsuper(height, weight, nickname); \n\t}\n\t\n\tpublic boolean hunt(Animal prey){\n\t\tif(prey != null){\n\t\t\tLion lion = (Lion)prey; \n\t\t\treturn true; \n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic boolean hasPrey(){\n\t\tif(prey != null){\n\t\t\treturn true; \n\t\t}else{\n\t\t\treturn false; \n\t\t}\n\t}\n\t\n\tpublic Animal getPrey(){\n\t\tif(prey == null){\n\t\t\treturn null; \n\t\t}\n\t\treturn prey; \n\t}\n\t\n}", 
            "status" : "FAIL", 
            "activeTime" : 54.3
        }
    ]
}
{ 
    "_id" : "4wCdQMw6p8ovRjWvC", 
    "userId" : "57sNXhBgcWRbAj43Q", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:20:25.659+0000"), 
    "updatedAt" : ISODate("2016-04-29T04:26:06.798+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 67.2, 
    "totalActiveTime" : 1322.3000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:27:39.487+0000"), 
            "code" : "public class Animal {\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 482.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:29:50.420+0000"), 
            "code" : "public class Animal {\n    private height;\n    private weight;\n    private nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 129.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:48.605+0000"), 
            "code" : "public class Animal {\n    private height;\n    private weight;\n    private nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 118.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:15.328+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:10.029+0000"), 
            "code" : "public class Animal {\n    //private double height;\n    //private double weight;\n    //private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:12.287+0000"), 
            "code" : "public class Animal {\n    //private double height;\n    //private double weight;\n    //private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public void eat() {\n        return \"OM NOM NOM NOM\";\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 122.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:49.091+0000"), 
            "code" : "public class Animal {\n    //private double height;\n    //private double weight;\n    //private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public void eat() {\n        return \"OM NOM NOM NOM\";\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 150.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:11.746+0000"), 
            "code" : "public class Animal {\n    //private double height;\n    //private double weight;\n    //private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n\n    \n    public void eat() {\n        return \"OM NOM NOM NOM\";\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n}\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:10.277+0000"), 
            "code" : "public class Animal {\n    //private double height;\n    //private double weight;\n    //private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n\n    \n    public void eat() {\n        return \"OM NOM NOM NOM\";\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.2
        }, 
        {
            "date" : ISODate("2016-04-29T04:24:59.464+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n\n    \n    public void eat() {\n        return \"OM NOM NOM NOM\";\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 93.8
        }, 
        {
            "date" : ISODate("2016-04-29T04:26:06.797+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 67.2
        }
    ]
}
{ 
    "_id" : "6oKZxjpKNp3CASGx4", 
    "userId" : "abAbxgL3EmmWjB7sf", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:33:20.079+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:58:22.902+0000"), 
    "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        this.prey = prey;\n        return true;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Lion getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            double preyWeight = prey.getWeight() * (1/3);\n            prey = null;\n            setWeight(getWeight() + preyWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 631.9, 
    "totalActiveTime" : 1446.6999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:42:17.276+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n    this.height = height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Lion(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            double preyWeight = prey.getWeight() * (1/3);\n            prey = null;\n            setWeight(getWeight() + preyWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 499.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:40.056+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n    this.height = height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Lion(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Lion getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            double preyWeight = prey.getWeight() * (1/3);\n            prey = null;\n            setWeight(getWeight() + preyWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:35.136+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n    this.height = height;\n    this.weight = weight;\n    this.nickname = nickname;\n    prey = null;\n    }\n    \n    public Lion(double height, double weight){\n        this(height, weight, \"animal\");\n        prey = null;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Lion getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            double preyWeight = prey.getWeight() * (1/3);\n            prey = null;\n            setWeight(getWeight() + preyWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(41)
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:05.467+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey = null;\n    \n    public Lion(double height, double weight, String nickname){\n    this.height = height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Lion(double height, double weight){\n        this(height, weight, \"animal\");\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Lion getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            double preyWeight = prey.getWeight() * (1/3);\n            prey = null;\n            setWeight(getWeight() + preyWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:14.021+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n    this.height = height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Lion(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        this.prey = prey;\n        return true;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Lion getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            double preyWeight = prey.getWeight() * (1/3);\n            prey = null;\n            setWeight(getWeight() + preyWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 221.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:58:22.901+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        this.prey = prey;\n        return true;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Lion getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            double preyWeight = prey.getWeight() * (1/3);\n            prey = null;\n            setWeight(getWeight() + preyWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 631.9
        }
    ]
}
{ 
    "_id" : "wRb6xEksu7HcFr5fz", 
    "userId" : "qRRx6bzkx25XcK7w8", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:31:52.279+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:11.486+0000"), 
    "code" : "public class Lion extends Animal {\n    private double height;\n    private double weight;\n    private String name;\n    private Animal prey;\n    \n    public Lion() {\n        \n    }\n    public Lion(double height, double weight, String name) {\n        this.height = height;\n        this.weight = weight;\n        this.name = name;\n        prey = null;\n    }\n    \n    public boolean hunt(Animal prey) {\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } \n        return null;\n    }\n    \n    public void eat() {\n        if (prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            prey = null;\n            weight = 0;\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 80.1, 
    "totalActiveTime" : 835.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:34:19.564+0000"), 
            "code" : "public class Lion extends Animal {\n    public boolean hunt(Animal prey) {\n        Animal c = new Lion(prey);\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 152.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:24.301+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        Animal c = new Lion(prey);\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 101.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:43.588+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:55.197+0000"), 
            "code" : "public class Lion {\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:08.082+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(13)
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:32.195+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion() {\n        \n    }\n    public boolean hunt(Animal prey) {\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 55.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:16.449+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    private double weight;\n    \n    public Lion(Animal prey, double weight) {\n        prey = null;\n        this.weight = weight;\n    }\n    public boolean hunt(Animal prey) {\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } \n        return null;\n    }\n    \n    public void eat() {\n        if (prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            prey = null;\n            weight = \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 221.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:09.442+0000"), 
            "code" : "public class Lion extends Animal {\n    private double height;\n    private double weight;\n    private String name;\n    \n    public Lion(double height, double weight, String name) {\n        this.height = height;\n        this.weight = weight;\n        this.name = name;\n    }\n    public boolean hunt(Animal prey) {\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } \n        return null;\n    }\n    \n    public void eat() {\n        if (prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            prey = null;\n            weight = \n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(75)
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:09.618+0000"), 
            "code" : "public class Lion extends Animal {\n    private double height;\n    private double weight;\n    private String name;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String name) {\n        this.height = height;\n        this.weight = weight;\n        this.name = name;\n        prey = null;\n    }\n    \n    public boolean hunt(Animal prey) {\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } \n        return null;\n    }\n    \n    public void eat() {\n        if (prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            prey = null;\n            weight = 0;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 105.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:11.486+0000"), 
            "code" : "public class Lion extends Animal {\n    private double height;\n    private double weight;\n    private String name;\n    private Animal prey;\n    \n    public Lion() {\n        \n    }\n    public Lion(double height, double weight, String name) {\n        this.height = height;\n        this.weight = weight;\n        this.name = name;\n        prey = null;\n    }\n    \n    public boolean hunt(Animal prey) {\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } \n        return null;\n    }\n    \n    public void eat() {\n        if (prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            prey = null;\n            weight = 0;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 80.1
        }
    ]
}
{ 
    "_id" : "ES4z5GLRSXnCLWLqP", 
    "userId" : "ukRzCFySZXsgLobtY", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:30:34.863+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:45:12.267+0000"), 
    "code" : "public class Lion extends Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if(prey==null) {\n            return false;\n        }else {\n            this.prey = prey;\n        }\n        return true;\n    }\n    \n    public boolean hasPrey() {\n        if(prey!=null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if(prey == null) {\n            return null;\n        }\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey==null) {\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else {\n            double additionalWeight = prey.getWeight()/3;\n            prey = null;\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 864.4, 
    "totalActiveTime" : 864.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:45:12.267+0000"), 
            "code" : "public class Lion extends Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if(prey==null) {\n            return false;\n        }else {\n            this.prey = prey;\n        }\n        return true;\n    }\n    \n    public boolean hasPrey() {\n        if(prey!=null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if(prey == null) {\n            return null;\n        }\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey==null) {\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else {\n            double additionalWeight = prey.getWeight()/3;\n            prey = null;\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 864.4
        }
    ]
}
{ 
    "_id" : "uQ8ns4o2LFgsj9f63", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:27:08.327+0000"), 
    "updatedAt" : ISODate("2016-04-29T04:31:29.789+0000"), 
    "code" : "public class Animal{\n    //attribute\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    //constructors\n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return  nickname + \", height = \"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 134.5, 
    "totalActiveTime" : 706.4, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:34:08.386+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public Strign getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return \"Beast, height =\"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 415.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:27.431+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return \"Beast, height =\"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(19)
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:43.625+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"Animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return \"Beast, height = \"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:25.412+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return  getClass().getName()\", height = \"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 42.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:33.636+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return  getClass().getName()+\", height = \"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 4.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:10.918+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return  nickname+ \", height = \"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 40.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:14.473+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    //constructors\n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return  nickname+ \", height = \"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 33.8
        }, 
        {
            "date" : ISODate("2016-04-29T04:31:29.788+0000"), 
            "code" : "public class Animal{\n    //attribute\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    //constructors\n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return  nickname + \", height = \"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 134.5
        }
    ]
}
{ 
    "_id" : "ktpx65nCYudTdJNAi", 
    "userId" : "jY3HQTQ3dYhv8vib8", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:31:37.292+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:45:17.230+0000"), 
    "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname, Animal prey) {\n        super(height, weight, nickname);\n        this.prey = prey;\n    }\n    \n    public boolean hunt(Animal prey) {\n        \n        \n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } else {\n            return null;\n            \n        }\n        \n    }\n    \n    public void eat() {\n        boolean anyPrey = hunt(Animal prey) \n        if (!anyPrey) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3 \");\n        } else {\n            prey = null;\n            weight = weight + (super.getWeight()/3);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }\n    \n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 243.7, 
    "totalActiveTime" : 769.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:32:28.885+0000"), 
            "code" : "public class Lion extends Animal() {\n   \n    public Lion() {\n        super();\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 57.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:54.736+0000"), 
            "code" : "public class Lion extends Animal() {\n   \n    public Lion() {\n        super();\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 85.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:22.257+0000"), 
            "code" : "public class Lion extends Animal {\n   \n    public Lion() {\n        super();\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:11.783+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight);\n        \n        \n    }\n    public boolean hunt(Animal prey) {\n        \n        \n    }\n    \n    public boolean getPrey() {\n        if (prey != null) {\n            return true;\n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 167.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:21.113+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    \n    public boolean hunt(Animal prey) {\n        \n        \n    }\n    \n    public boolean getPrey() {\n        if (prey != null) {\n            return true;\n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:27.363+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname, Animal prey) {\n        super(height, weight, nickname);\n        this.prey = prey;\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (prey)\n        \n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } else {\n            return null;\n            \n        }\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 188.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:37.269+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname, Animal prey) {\n        super(height, weight, nickname);\n        this.prey = prey;\n    }\n    \n    public boolean hunt(Animal prey) {\n        \n        \n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } else {\n            return null;\n            \n        }\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:17.230+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname, Animal prey) {\n        super(height, weight, nickname);\n        this.prey = prey;\n    }\n    \n    public boolean hunt(Animal prey) {\n        \n        \n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } else {\n            return null;\n            \n        }\n        \n    }\n    \n    public void eat() {\n        boolean anyPrey = hunt(Animal prey) \n        if (!anyPrey) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3 \");\n        } else {\n            prey = null;\n            weight = weight + (super.getWeight()/3);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 243.7
        }
    ]
}
{ 
    "_id" : "BQ8pxpotSX3LHGBK2", 
    "userId" : "7KfbnSL6HCME3H7es", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:30:00.121+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:07.674+0000"), 
    "code" : "public class Lion extends Animal {\n    private boolean isPrey;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n        isPrey = false;\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n        isPrey = false;\n    }\n    \n    public boolean hunt(Animal prey) {\n        double preyWeight = prey.getWeight();\n        double preyHeight = prey.getHeight();\n        \n        if (this.getWeight() > prey.getWeight() && this.getHeight() > prey.getHeight()) {\n            prey = new Animal(preyHeight, preyWeight);\n            isPrey = true;\n        }\n        \n        return isPrey;\n    }\n    \n    public boolean getPrey() {\n        return isPrey;\n    }\n    \n    public Animal hasPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (isPrey) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            double newWeight = super.getWeight() + (1 / 3 * super.getWeight());\n            setWeight(newWeight);\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 75.4, 
    "totalActiveTime" : 1005.1999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:45:09.735+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        double preyWeight = prey.getWeight();\n        double preyHeight = prey.getHeight();\n        boolean isPrey = false;\n        \n        if (this.getWeight() > prey.getWeight() && this.getHeight() > prey.getHeight()) {\n            prey = new Animal(preyHeight, preyWeight);\n            isPrey = true;\n        }\n        \n        return isPrey;\n    }\n    \n    public boolean getPrey() {\n        return isPrey;\n    }\n    \n    public Animal hasPrey() {\n        \n    }\n    \n    public void eat() {\n        if (isPrey) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            double newWeight = super.getWeight + (1 / 3 * super.getWeight());\n            setWeight(newWeight);\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 845.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:23.601+0000"), 
            "code" : "public class Lion extends Animal {\n    private boolean isPrey;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n        isPrey = false;\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n        isPrey = false;\n    }\n    \n    public boolean hunt(Animal prey) {\n        double preyWeight = prey.getWeight();\n        double preyHeight = prey.getHeight();\n        \n        if (this.getWeight() > prey.getWeight() && this.getHeight() > prey.getHeight()) {\n            prey = new Animal(preyHeight, preyWeight);\n            isPrey = true;\n        }\n        \n        return isPrey;\n    }\n    \n    public boolean getPrey() {\n        return isPrey;\n    }\n    \n    public Animal hasPrey() {\n        \n    }\n    \n    public void eat() {\n        if (isPrey) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            double newWeight = super.getWeight + (1 / 3 * super.getWeight());\n            setWeight(newWeight);\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 50.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:50.973+0000"), 
            "code" : "public class Lion extends Animal {\n    private boolean isPrey;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n        isPrey = false;\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n        isPrey = false;\n    }\n    \n    public boolean hunt(Animal prey) {\n        double preyWeight = prey.getWeight();\n        double preyHeight = prey.getHeight();\n        \n        if (this.getWeight() > prey.getWeight() && this.getHeight() > prey.getHeight()) {\n            prey = new Animal(preyHeight, preyWeight);\n            isPrey = true;\n        }\n        \n        return isPrey;\n    }\n    \n    public boolean getPrey() {\n        return isPrey;\n    }\n    \n    public Animal hasPrey() {\n        \n    }\n    \n    public void eat() {\n        if (isPrey) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            double newWeight = super.getWeight() + (1 / 3 * super.getWeight());\n            setWeight(newWeight);\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:05.145+0000"), 
            "code" : "public class Lion extends Animal {\n    private boolean isPrey;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n        isPrey = false;\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n        isPrey = false;\n    }\n    \n    public boolean hunt(Animal prey) {\n        double preyWeight = prey.getWeight();\n        double preyHeight = prey.getHeight();\n        \n        if (this.getWeight() > prey.getWeight() && this.getHeight() > prey.getHeight()) {\n            prey = new Animal(preyHeight, preyWeight);\n            isPrey = true;\n        }\n        \n        return isPrey;\n    }\n    \n    public boolean getPrey() {\n        return isPrey;\n    }\n    \n    public Animal hasPrey() {\n        \n    }\n    \n    public void eat() {\n        if (isPrey) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            double newWeight = super.getWeight() + (1 / 3 * super.getWeight());\n            setWeight(newWeight);\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:07.673+0000"), 
            "code" : "public class Lion extends Animal {\n    private boolean isPrey;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n        isPrey = false;\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n        isPrey = false;\n    }\n    \n    public boolean hunt(Animal prey) {\n        double preyWeight = prey.getWeight();\n        double preyHeight = prey.getHeight();\n        \n        if (this.getWeight() > prey.getWeight() && this.getHeight() > prey.getHeight()) {\n            prey = new Animal(preyHeight, preyWeight);\n            isPrey = true;\n        }\n        \n        return isPrey;\n    }\n    \n    public boolean getPrey() {\n        return isPrey;\n    }\n    \n    public Animal hasPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (isPrey) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            double newWeight = super.getWeight() + (1 / 3 * super.getWeight());\n            setWeight(newWeight);\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 75.4
        }
    ]
}
{ 
    "_id" : "Bv9CocQHcsuFdhWiu", 
    "userId" : "L9Ag4SxXYcjeRshDH", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:27:03.724+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:45:57.047+0000"), 
    "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n     \n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    \n    public double getHeight(){\n        \n        return height;\n    }\n    \n    public double getWeight(){\n        \n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        \n        this.weight = weight;\n    }\n    \n    \n    public String getNickname(){\n        \n        return nickname;\n    }\n    \n    public void eat(){\n        \n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n       \n      return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\"; \n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 26.6, 
    "totalActiveTime" : 433.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:45:13.330+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n     \n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    \n    public double getHeight(){\n        \n        return height;\n    }\n    \n    public double getWeight(){\n        \n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        \n        this.weight = weight;\n    }\n    \n    \n    public String getNickname(){\n        \n        return nickname;\n    }\n    \n    public void eat(){\n        \n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n       \n       System.out.print(nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\") \n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 375.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:22.358+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n     \n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    \n    public double getHeight(){\n        \n        return height;\n    }\n    \n    public double getWeight(){\n        \n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        \n        this.weight = weight;\n    }\n    \n    \n    public String getNickname(){\n        \n        return nickname;\n    }\n    \n    public void eat(){\n        \n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n       \n       System.out.print(nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\"); \n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:57.046+0000"), 
            "code" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n     \n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    \n    public double getHeight(){\n        \n        return height;\n    }\n    \n    public double getWeight(){\n        \n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        \n        this.weight = weight;\n    }\n    \n    \n    public String getNickname(){\n        \n        return nickname;\n    }\n    \n    public void eat(){\n        \n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n       \n      return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\"; \n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 26.6
        }
    ]
}
{ 
    "_id" : "w2sn4KfFqQTY49GJv", 
    "userId" : "BnQfkFwW6XZvrKmrn", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:46:55.471+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:46:55.471+0000")
}
{ 
    "_id" : "EfcS7sHyHA5d8vzNi", 
    "userId" : "KqQptyqdavcd4i7Jm", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:26:51.389+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:08.897+0000"), 
    "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        if (hasPrey()){\n            this.prey = prey;\n        }\n        return hasPrey();\n    }\n    \n    public boolean hasPrey(){\n        return getPrey() != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n        else{\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : NumberInt(3), 
    "totalActiveTime" : 374.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:31:54.628+0000"), 
            "code" : "public class Lion extends Animal{\n    public boolean hunt(Animal prey){\n        if (hasPrey()){\n            prey = getPrey();\n        }\n        return hasPrey();\n    }\n    \n    public boolean hasPrey(){\n        return getPrey() != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n        else{\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 305.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:39.779+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super();\n    }\n    \n    public boolean hunt(Animal prey){\n        if (hasPrey()){\n            prey = getPrey();\n        }\n        return hasPrey();\n    }\n    \n    public boolean hasPrey(){\n        return getPrey() != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n        else{\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 45.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:55.917+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        if (hasPrey()){\n            prey = getPrey();\n        }\n        return hasPrey();\n    }\n    \n    public boolean hasPrey(){\n        return getPrey() != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n        else{\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:17.039+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        if (hasPrey()){\n            this.prey = prey;\n        }\n        return hasPrey();\n    }\n    \n    public boolean hasPrey(){\n        return getPrey() != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n        else{\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:08.157+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        if (hasPrey()){\n            this.prey = prey;\n        }\n        return hasPrey();\n    }\n    \n    public boolean hasPrey(){\n        return getPrey() != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n        else{\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(3)
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:08.897+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        if (hasPrey()){\n            this.prey = prey;\n        }\n        return hasPrey();\n    }\n    \n    public boolean hasPrey(){\n        return getPrey() != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n        else{\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(3)
        }
    ]
}
{ 
    "_id" : "iJrpLs8r8SZJcK8mD", 
    "userId" : "z3hbMD42bzhqtN3Sf", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:19:25.455+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:47:21.155+0000"), 
    "code" : "public class Marketer extends Employee {\n    \n    public Marketer(){\n        super.setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n       \n        System.out.println(\"Act now, while supplies last!\");\n \n            \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 212.7, 
    "totalActiveTime" : 1101.1, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:22:17.724+0000"), 
            "code" : "public class Marketer {\n    private int salary;\n    \n    public Marketer(int salary){\n        this.salary = salary;    \n    }    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 169.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:07.591+0000"), 
            "code" : "public class Marketer extends Employee {\n\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 185.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:00.704+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    private int salary = 50000;\n    private ArrayList<Employee> employees;\n    \n    public Marketer(int salary){\n        this.salary = salary;\n    }\n    public void advertise(ArrayList<Employee> employees){\n        for(Employee e: employees){\n            if(e.getSalary()=50000){\n                Marketer marketer = (Marketer)e;\n            }\n        }\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 259.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:38.526+0000"), 
            "code" : "public class Marketer extends Employee {\n    private int salary = 50000;\n    \n    public Marketer(){\n        \n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 36.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:13.914+0000"), 
            "code" : "public class Marketer extends Employee {\n    private int salary;\n    \n    public Marketer(){\n        this.salary = 50000;\n    }\n    public void advertise(){\n        \n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:31.301+0000"), 
            "code" : "public class Marketer extends Employee {\n    private int salary;\n    \n    public Marketer(){\n        \n    }\n    \n    public void advertise(){\n        \n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 76.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:44.722+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer(){\n        \n    }\n    \n    public void advertise(){\n        \n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:46.360+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer(){\n    \n    }\n    \n    public void advertise(){\n        if(e.getSalary()==50,000){\n            System.out.println(\"Act now, while supplies last!\");\n        }\n            \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 56.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:05.465+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer(){\n    \n    }\n    \n    public void advertise(){\n        if(e.getSalary()==50000) {\n            System.out.println(\"Act now, while supplies last!\");\n        }\n            \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:22.213+0000"), 
            "code" : "public class Marketer extends Employee {\n    private Employee e;\n    \n    public Marketer(){\n        \n    }\n    \n    public void advertise(){\n        if(e.getSalary()==50000) {\n            System.out.println(\"Act now, while supplies last!\");\n        }\n            \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:42.634+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer(){\n        \n    }\n    \n    public void advertise(){\n       \n        System.out.println(\"Act now, while supplies last!\");\n \n            \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:21.154+0000"), 
            "code" : "public class Marketer extends Employee {\n    \n    public Marketer(){\n        super.setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n       \n        System.out.println(\"Act now, while supplies last!\");\n \n            \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 212.7
        }
    ]
}
{ 
    "_id" : "jZN9Dm5DeBwZCRwqu", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:44:29.727+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:49:05.338+0000"), 
    "code" : "public class Marketer extends Employee {\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    public double getSalary() {\n        return (super.getSalary() + 10000.0);\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 99.4, 
    "totalActiveTime" : 219.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:47:24.967+0000"), 
            "code" : "public class Marketer extends Employee {\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 120.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:49:05.338+0000"), 
            "code" : "public class Marketer extends Employee {\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    public double getSalary() {\n        return (super.getSalary() + 10000.0);\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 99.4
        }
    ]
}
{ 
    "_id" : "LqiLqNXCkwbFk7ivi", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:30:29.983+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:06.130+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        if (nickname == null){\n            nickname = \"animal\";\n        }\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +  \"height =\" + height + \"m\" + \"weight =\" + weight +\"kg\";\n    }\n    \n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 89.4, 
    "totalActiveTime" : 525.6999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:45:11.927+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        if (nickname == null){\n            nickname = \"animal\";\n        }\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return name + \"height =\" + height + \"m\" + \"weight =\" + weight +\"kg\";\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 383.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:45.142+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        if (nickname == null){\n            nickname = \"animal\";\n        }\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \"height =\" + height + \"m\" + \"weight =\" + weight +\"kg\";\n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 52.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:06.129+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        if (nickname == null){\n            nickname = \"animal\";\n        }\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +  \"height =\" + height + \"m\" + \"weight =\" + weight +\"kg\";\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 89.4
        }
    ]
}
{ 
    "_id" : "NFsSdjPbHhpfGo5Bg", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:48:06.499+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:06.499+0000")
}
{ 
    "_id" : "3ckYehEJsns629mrn", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:48:08.587+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:08.587+0000")
}
{ 
    "_id" : "SSEd2xGyLBiPdPE8r", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:48:09.212+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:09.212+0000")
}
{ 
    "_id" : "YJF63KuNHAnkJFrXt", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:48:09.244+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:09.244+0000")
}
{ 
    "_id" : "q7cLkPRpZ6qTBzkg4", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:48:09.251+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:09.251+0000")
}
{ 
    "_id" : "qmiSKRL6tbei5oyNz", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:48:09.257+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:09.257+0000")
}
{ 
    "_id" : "hJ2xgYwZWKo4taMB8", 
    "userId" : "EKDd6JCmxZ4E8Sb5J", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:48:09.263+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:09.263+0000")
}
{ 
    "_id" : "rPXnwJJMmLpm9uayR", 
    "userId" : "rczYdr6YaF4Nv8DqY", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:37:32.171+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:10.884+0000"), 
    "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        Random r = new Random();\n        r = nextInt(2);\n        if (r == 0) {\n            this.prey = prey;\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null && prey.getWeight > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public Animal getPrey() {\n        if (prey != null && prey.getWeight > 0) {\n            return prey;\n        } else {\n            return null;\n        }\n    }\n    \n    public eat() {\n        \n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 565.3, 
    "totalActiveTime" : 565.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:48:10.884+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        Random r = new Random();\n        r = nextInt(2);\n        if (r == 0) {\n            this.prey = prey;\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null && prey.getWeight > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public Animal getPrey() {\n        if (prey != null && prey.getWeight > 0) {\n            return prey;\n        } else {\n            return null;\n        }\n    }\n    \n    public eat() {\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 565.3
        }
    ]
}
{ 
    "_id" : "Y2qs7owuKz9eSy76b", 
    "userId" : "fzFhAfCHiwc4842pK", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:32:54.966+0000"), 
    "updatedAt" : ISODate("2016-04-29T02:38:32.151+0000"), 
    "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height,double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int num = ran.nextInt(2);\n        if(num=0){\n            return true;\n            this.prey = prey;\n        } \n            return false;\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        } \n            return true;\n        \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            weight = prey.getWeight()/3;\n            prey = null;\n            \n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 64.9, 
    "totalActiveTime" : 1953.7, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:39:16.045+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal pray;\n    \n    public Animal(double height,double weight,String nickname){\n        super.height = height;\n        super.weight = weight;\n        super.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hasPrey(){\n        if(prat == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public String eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 373.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:13.133+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal pray;\n    \n    public Animal(double height,double weight,String nickname){\n        super.height = height;\n        super.weight = weight;\n        super.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hasPrey(){\n        if(prat == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public String eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 71.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:05.442+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal pray;\n    \n    public Animal(double height,double weight,String nickname){\n        super.height = height;\n        super.weight = weight;\n        super.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hasPray(){\n        if(pray == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        return pray;\n    }\n    \n    public String eat(){\n        if(hasPray()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:12.302+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal pray;\n    \n    public Animal(double height,double weight,String nickname){\n        super.height = height;\n        super.weight = weight;\n        super.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hasPray(){\n        if(pray == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        return pray;\n    }\n    \n    public String eat(){\n        if(hasPray()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:25.825+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal pray;\n    \n    public Animal(double height,double weight,String nickname){\n        super.height = height;\n        super.weight = weight;\n        super.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hasPray(){\n        if(pray == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPray(){\n        return pray;\n    }\n    \n    public String eat(){\n        if(hasPray()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:31.344+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal pray;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public boolean hasPray(){\n        if(pray == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPray(){\n        return pray;\n    }\n    \n    public String eat(){\n        if(hasPray()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 62.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:07.652+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal pray;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public void hasPray(){\n        if(pray == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPray(){\n        return pray;\n    }\n    \n    public String eat(){\n        if(hasPray()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 42.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:35.243+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public void hasPrey(){\n        if(prey == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public String eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:05.212+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public void hasPrey(){\n        if(prey == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(23)
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:13.568+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public void hasPrey(){\n        if(prey == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            super.weight = prey.getWeight()/3;\n            prey = null;\n            \n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 110.6
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:50.662+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            weight = prey.getWeight()/3;\n            prey = null;\n            \n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(253)
        }, 
        {
            "date" : ISODate("2016-04-29T02:34:17.359+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int num = ran.nextInt(2);\n        if(num=0){\n            return true;\n            this.prey = prey;\n        } else {\n            return false;\n        }\n    }\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        } else{\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            weight = prey.getWeight()/3;\n            prey = null;\n            \n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 616.9
        }, 
        {
            "date" : ISODate("2016-04-29T02:36:51.462+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int num = ran.nextInt(2);\n        if(num=0){\n            return true;\n            this.prey = prey;\n        } \n            return false;\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        } \n            return true;\n        \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            weight = prey.getWeight()/3;\n            prey = null;\n            \n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 154.1
        }, 
        {
            "date" : ISODate("2016-04-29T02:37:01.160+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int num = ran.nextInt(2);\n        if(num=0){\n            return true;\n            this.prey = prey;\n        } \n            return false;\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        } \n            return true;\n        \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            weight = prey.getWeight()/3;\n            prey = null;\n            \n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.9
        }, 
        {
            "date" : ISODate("2016-04-29T02:37:27.196+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Animal(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Animal(double height,double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int num = ran.nextInt(2);\n        if(num=0){\n            return true;\n            this.prey = prey;\n        } \n            return false;\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        } \n            return true;\n        \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            weight = prey.getWeight()/3;\n            prey = null;\n            \n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.8
        }, 
        {
            "date" : ISODate("2016-04-29T02:38:32.151+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height,double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int num = ran.nextInt(2);\n        if(num=0){\n            return true;\n            this.prey = prey;\n        } \n            return false;\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        } \n            return true;\n        \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            weight = prey.getWeight()/3;\n            prey = null;\n            \n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.9
        }
    ]
}
{ 
    "_id" : "dv3px4AGFt6aB3bs8", 
    "userId" : "vu9erLrF9tWsY8uAx", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:18:07.122+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:48:16.981+0000"), 
    "code" : "public class Marketer extends Employee{\n  \n    public Marketer(){\n        super.setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\"); \n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 31.1, 
    "totalActiveTime" : 576.9000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:23:22.973+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int salary; \n    \n    public Marketer(int empSalary, int mktSalary){\n        super(40000);\n        this.salary = 50000; \n    }\n    public String advertise(){\n        return \"Act now, while supplies last!\"; \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 253.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:45.898+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int salary; \n    \n    public Marketer(){\n        super(40000);\n        this.salary = 50000; \n    }\n    public String advertise(){\n        return \"Act now, while supplies last!\"; \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 22.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:00.661+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int salary; \n    \n    public Marketer(){\n        super();\n        this.salary = 50000; \n    }\n    public String advertise(){\n        return \"Act now, while supplies last!\"; \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:45.903+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int salary; \n    \n    public Marketer(){\n        super();\n        this.salary = 40000; \n    }\n    public String advertise(){\n        return \"Act now, while supplies last!\"; \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 45.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:25:41.436+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int salary; \n    \n    public Marketer(){\n        super();\n        this.salary = 50000; \n    }\n    public String advertise(){\n        return \"Act now, while supplies last!\"; \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 40.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:11.654+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int salary; \n    \n    public Marketer(){\n        super();\n        this.salary = 50000; \n    }\n    public String advertise(){\n        return \"Act now, while supplies last!\"; \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 79.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:18.328+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int salary; \n    \n    public Marketer(){\n        super();\n        this.salary = 50000; \n    }\n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\"); \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:42.934+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    \n    public Marketer(){\n        super() + 10000;\n        \n    }\n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\"); \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:07.778+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int salary; \n    \n    public Marketer(){\n        super(10000);\n        this.salary = 50000; \n    }\n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\"); \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:05.491+0000"), 
            "code" : "public class Marketer extends Employee{\n  \n    \n    public Marketer(){\n        super.setBaseSalary(50000);\n      \n    }\n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\"); \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(3)
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:12.662+0000"), 
            "code" : "public class Marketer extends Employee{\n  \n    \n    public Marketer(){\n        super.setBaseSalary(50000);\n      \n    }\n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\"); \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:16.981+0000"), 
            "code" : "public class Marketer extends Employee{\n  \n    public Marketer(){\n        super.setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\"); \n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 31.1
        }
    ]
}
{ 
    "_id" : "i8qSL49q4SgfwqqfF", 
    "userId" : "zLjuBoH29r9sJ9fGq", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:33:47.458+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:50:15.137+0000"), 
    "code" : "public class Lion extends Animal{\n    private Animal currentPrey; \n    \n     public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean success = false; \n        if(currentPrey != null){\n            currentPrey = prey; \n            success = true; \n        }\n    }\n    \n    public boolean hasPrey(){\n        if(currentPrey != null){\n            return true;\n            \n        } else {\n            return false; \n            \n        }    \n    }\n    \n    public Animal getPrey(){\n        return currentPrey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"OM NOM NOM NOM\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }    \n    }   \n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 16.4, 
    "totalActiveTime" : 562.5999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:49:05.295+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal currentPrey; \n    \n     public Lion(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Lion(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean success = false; \n        if(currentPrey != null){\n            currentPrey = prey; \n            success = true; \n        }\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n            \n        } else {\n            return false; \n            \n        }    \n    }\n    \n    public Animal getPrey(){\n        return currentPrey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"OM NOM NOM NOM\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }    \n    }   \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 481.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:49:58.907+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal currentPrey; \n    \n     public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean success = false; \n        if(currentPrey != null){\n            currentPrey = prey; \n            success = true; \n        }\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n            \n        } else {\n            return false; \n            \n        }    \n    }\n    \n    public Animal getPrey(){\n        return currentPrey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"OM NOM NOM NOM\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }    \n    }   \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 64.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:50:15.137+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal currentPrey; \n    \n     public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean success = false; \n        if(currentPrey != null){\n            currentPrey = prey; \n            success = true; \n        }\n    }\n    \n    public boolean hasPrey(){\n        if(currentPrey != null){\n            return true;\n            \n        } else {\n            return false; \n            \n        }    \n    }\n    \n    public Animal getPrey(){\n        return currentPrey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"OM NOM NOM NOM\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }    \n    }   \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.4
        }
    ]
}
{ 
    "_id" : "pEpAMe9Zj5aeDdvAJ", 
    "userId" : "N5BQLGMBRKq32m5Ay", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:18:07.682+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:50:50.304+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        if(nickname == null){\n            nickname = \"animal\";\n        }\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        \n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 118.3, 
    "totalActiveTime" : 727.0999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:35:09.418+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        System.out.println(name + \" height = \" + height + \", weight = \" + weight \"kg\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 451.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:29.411+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        System.out.println(name + \" height = \" + height + \", weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:38.485+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        System.out.println(nickname + \" height = \" + height + \", weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:53.398+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \" height = \" + height + \", weight = \" + weight + \"kg\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:06.818+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \" height = \" + height + \", weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:23.392+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        \n        return nickname + \", height = \" + height + \", weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 76.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:46.787+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        \n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 25.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:50:50.304+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        if(nickname == null){\n            nickname = \"animal\";\n        }\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        \n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 118.3
        }
    ]
}
{ 
    "_id" : "xBf9xof2kH3nHbC3X", 
    "userId" : "BCnEAMERRHWsSycBM", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:37:23.492+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:54:21.066+0000"), 
    "code" : "import java.util.*;\npublic class Lion extends Animal{\n    Animal preyed = null;\n    \n    public Lion(double height, double weight ,String nickname){\n        super(height,weight,nickname);\n    }\n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int Result = r.nextInt(1); \n        if (Result == 0){\n            preyed = prey;\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public boolean hasPrey(){\n        if (preyed == null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if (preyed == null){\n            return null;\n        }else{\n            return preyed;\n        }\n    }\n    \n    public void eat(){\n        if(preyed == null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            double weightGain = (preyed.getWeight() / 3);\n            double currentWeight = Lion.getWeight();\n            setWeight(currentWeight + weightGain);\n            preyed = null;\n            \n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 63.2, 
    "totalActiveTime" : 822.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:53:17.750+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    Animal preyed = null;\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int Result = r.nextInt(1); \n        if (Result == 0){\n            preyed = prey;\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public boolean hasPrey(){\n        if (preyed == null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if (preyed == null){\n            return null;\n        }else{\n            return preyed;\n        }\n    }\n    \n    public void eat(){\n        if(preyed == null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            double weightGain = (preyed.getWeight() / 3);\n            double currentWeight = Lion.getWeight();\n            setWeight(currentWeight + weightGain);\n            preyed = null;\n            \n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 758.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:54:21.065+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    Animal preyed = null;\n    \n    public Lion(double height, double weight ,String nickname){\n        super(height,weight,nickname);\n    }\n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int Result = r.nextInt(1); \n        if (Result == 0){\n            preyed = prey;\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public boolean hasPrey(){\n        if (preyed == null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if (preyed == null){\n            return null;\n        }else{\n            return preyed;\n        }\n    }\n    \n    public void eat(){\n        if(preyed == null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            double weightGain = (preyed.getWeight() / 3);\n            double currentWeight = Lion.getWeight();\n            setWeight(currentWeight + weightGain);\n            preyed = null;\n            \n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 63.2
        }
    ]
}
{ 
    "_id" : "jH8TeasBTvtEfmnLJ", 
    "userId" : "F5XnEFAmSrqP7Hbf4", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:25:38.604+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:56:14.573+0000"), 
    "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super.setWeight(super.getWeight() + (prey.getWeight() / 3) );\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 16.5, 
    "totalActiveTime" : 786.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:35:16.581+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey == prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            prey == null \n            double newWeight = super.getWeight() / 3 * 4;\n            super().setWeight(newWeight); \n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 132.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:47.801+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            prey = null \n            double newWeight = super.getWeight() / 3 * 4;\n            super().setWeight(newWeight); \n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:58.695+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            prey = null;\n            double newWeight = super.getWeight() / 3 * 4;\n            super().setWeight(newWeight); \n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:09.956+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    //public Lion()\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            prey = null;\n            double newWeight = super.getWeight() / 3 * 4;\n            super().setWeight(newWeight); \n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 69.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:38:19.698+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            prey = null;\n            double newWeight = super.getWeight() / 3 * 4;\n            super().setWeight(newWeight); \n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 70.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:38:32.447+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            prey = null;\n            double newWeight = super.getWeight() / 3 * 4;\n            super().setWeight(newWeight); \n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:11.900+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super().setWeight(newWeight);\n            prey = null;\n            double newWeight = super.getWeight() / 3 * 4;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:19.857+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super();\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super().setWeight(newWeight);\n            prey = null;\n            double newWeight = super.getWeight() / 3 * 4;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:28.257+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super().setWeight(newWeight);\n            prey = null;\n            double newWeight = super.getWeight() / 3 * 4;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:41.205+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super().setWeight(newWeight);\n            prey = null;\n            double newWeight = super.getWeight() / 3 * 4;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:50:52.225+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super.setWeight(newWeight);\n            prey = null;\n            double newWeight = super.getWeight() / 3 * 4;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 70.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:51:21.605+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n            this.prey = prey;\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super.setWeight(super.getWeight() / 3 * 4);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 29.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:52:27.427+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super.setWeight((super.getWeight() / 3) * 4);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 65.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:54:22.924+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super.setWeight((super.prey.getWeight() / 3) * 4);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 114.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:55:30.667+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super.setWeight((prey.getWeight() / 3) * 4);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 68.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:55:58.001+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super.setWeight(super.getWeight() + (prey.getWeight() / 3) * 4);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 27.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:56:14.573+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super.setWeight(super.getWeight() + (prey.getWeight() / 3) );\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 16.5
        }
    ]
}
{ 
    "_id" : "Nridyva9CdFYEaFLy", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:49:10.443+0000"), 
    "updatedAt" : ISODate("2016-04-29T00:57:02.934+0000"), 
    "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 478.8, 
    "totalActiveTime" : 478.8, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:57:02.933+0000"), 
            "code" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 478.8
        }
    ]
}
{ 
    "_id" : "w55tEjpvHQgaemYsk", 
    "userId" : "47MxiJWsWkBezecN9", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:25:36.079+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:02:05.677+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight=weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight = weight;\n        nickname = defaultNickname();\n    }\n    \n    public String defaultNickname(){\n        nickname = \"animal\";\n        return nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight= weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 33.4, 
    "totalActiveTime" : 1349.0000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:33:09.585+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight=weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight = weight;\n        nickname = defaultNickname();\n    }\n    \n    public String defaultNickname(){\n        nickname = \"animal\";\n        return nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight= weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 512.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:55:05.131+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight=weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight = weight;\n        nickname = defaultNickname();\n    }\n    \n    public String defaultNickname(){\n        nickname = \"animal\";\n        return nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight= weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(447)
        }, 
        {
            "date" : ISODate("2016-04-29T01:00:45.038+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight=weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight = weight;\n        nickname = defaultNickname();\n    }\n    \n    public Animal(String nickname){\n        nickname = \"animal\";\n        \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight= weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 342.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:00:59.091+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight=weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight = weight;\n        \n    }\n    \n    public Animal(String nickname){\n        nickname = \"animal\";\n        \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight= weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 13.7
        }, 
        {
            "date" : ISODate("2016-04-29T01:02:05.677+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight=weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight = weight;\n        nickname = defaultNickname();\n    }\n    \n    public String defaultNickname(){\n        nickname = \"animal\";\n        return nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight= weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 33.4
        }
    ]
}
{ 
    "_id" : "2k5sTk2jHe5kgbugr", 
    "userId" : "prcQ7CZ5EtxxnNWBg", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:18:12.325+0000"), 
    "updatedAt" : ISODate("2016-04-29T03:35:57.742+0000"), 
    "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getSalary() {\n        double s = super.getSalary(); \n        double finalSalary = s + 10000;\n\t\treturn  finalSalary;             \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(5194), 
    "totalActiveTime" : 6327.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:22:37.173+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    super();\n    salary = 50000;\n    }\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 230.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:15.842+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    super(salary);\n    salary = 50000;\n    }\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:34:04.368+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getSalary() {\n\t\treturn baseSalary + 10000;               \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 62.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:03.477+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getMSalary() {\n\t\treturn getSalary() + 10000;               \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "FAIL", 
            "activeTime" : 44.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:18.463+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getMSalary() {\n\t\treturn (getSalary() + 10000);               \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "FAIL", 
            "activeTime" : 15.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:14.967+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getMSalary() {\n        double salary = getSalary();\n        \n\t\treturn (10000 + salary);               \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "FAIL", 
            "activeTime" : 56.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:49.136+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getMSalary() {\n        double salary = getSalary();\n        double finalSalary = (10000 + salary); \n\t\treturn  finalSalary;             \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "FAIL", 
            "activeTime" : 32.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:01.294+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getMSalary() {\n        double salary = getSalary();\n        double finalSalary = (20000 + salary); \n\t\treturn  finalSalary;             \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "FAIL", 
            "activeTime" : 9.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:13.845+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getMSalary() {\n        double salary = getSalary();\n        double finalSalary = (10000 + salary); \n\t\treturn  finalSalary;             \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "FAIL", 
            "activeTime" : 10.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:02:08.008+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getSalary() {\n        double s = super.getSalary(); \n        double finalSalary = s + 10000;\n\t\treturn  finalSalary;             \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "PASS", 
            "activeTime" : 633.4
        }, 
        {
            "date" : ISODate("2016-04-29T03:35:57.742+0000"), 
            "code" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getSalary() {\n        double s = super.getSalary(); \n        double finalSalary = s + 10000;\n\t\treturn  finalSalary;             \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(5194)
        }
    ]
}
{ 
    "_id" : "n4DZRiPFevc8Tf2AB", 
    "userId" : "mzEYkra6nhsvCgSH7", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:17:41.049+0000"), 
    "updatedAt" : ISODate("2016-04-29T02:05:19.260+0000"), 
    "code" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate double baseSalary;\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm  ;\n\tpublic Marketer (){\n\t     \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
    "status" : "FAIL", 
    "activeTime" : 16.9, 
    "totalActiveTime" : 1454.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:24:16.817+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours = 40;\n\tprivate double baseSalary = 50000.0;\n\tprivate int baseVacationDays = 10;\n\tprivate String baseVacationForm = \"yellow\";\n\tpublic Marketer (int baseHours, double baseSalary,int baseVacations,String baseVacationForm){\n\t    super(baseHours,baseSalary,baseVacations,baseVacationForm);\n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(367)
        }, 
        {
            "date" : ISODate("2016-04-29T00:24:46.541+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours = 40;\n\tprivate double baseSalary = 50000.0;\n\tprivate int baseVacationDays = 10;\n\tprivate String baseVacationForm = \"yellow\";\n\tpublic Marketer (){\n\t    \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 24.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:10.304+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours = 40;\n\tprivate double baseSalary = 50000.0;\n\tprivate int baseVacationDays = 10;\n\tprivate String baseVacationForm = \"yellow\";\n\tpublic Marketer (){\n\t    \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(48)
        }, 
        {
            "date" : ISODate("2016-04-29T00:50:54.127+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours = 40;\n\tprivate final double baseSalary = 50000.0;\n\tprivate int baseVacationDays = 10;\n\tprivate String baseVacationForm = \"yellow\";\n\tpublic Marketer (){\n\t    \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 216.5
        }, 
        {
            "date" : ISODate("2016-04-29T01:03:16.400+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate final double baseSalary;\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm = ;\n\tpublic Marketer (int baseHours, double baseSalary,int baseVacationDays,String baseVacationForm){\n\t    super(baseHours,baseSalay+10000,baseVacationDays,baseVacationForm);\n\t    \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 580.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:03:51.369+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate final double baseSalary;\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm = ;\n\tpublic Marketer (){\n\t    super(baseHours,baseSalay+10000,baseVacationDays,baseVacationForm);\n\t    \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(35)
        }, 
        {
            "date" : ISODate("2016-04-29T01:04:09.439+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate final double baseSalary;\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm = ;\n\tpublic Marketer (){\n\t   \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.1
        }, 
        {
            "date" : ISODate("2016-04-29T01:04:19.543+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate final double baseSalary;\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm  ;\n\tpublic Marketer (){\n\t   \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:04:48.634+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate double baseSalary;\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm  ;\n\tpublic Marketer (){\n\t   \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 28.6
        }, 
        {
            "date" : ISODate("2016-04-29T02:04:41.890+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate double baseSalary+10000;\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm  ;\n\tpublic Marketer (){\n\t     \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 88.9
        }, 
        {
            "date" : ISODate("2016-04-29T02:05:01.835+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate double (baseSalary+10000);\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm  ;\n\tpublic Marketer (){\n\t     \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.8
        }, 
        {
            "date" : ISODate("2016-04-29T02:05:19.259+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate double baseSalary;\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm  ;\n\tpublic Marketer (){\n\t     \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
            "status" : "FAIL", 
            "activeTime" : 16.9
        }
    ]
}
{ 
    "_id" : "RXeXYoTPfwcfJfAPY", 
    "userId" : "ZwzuuSYKWikrzBcXP", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:31:22.710+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:06:56.872+0000"), 
    "code" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        if(prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname())){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    public boolean hasPrey(){\n        if(prey1 != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public Animal getPrey(){\n        return prey1;\n    }\n    public void eat(){\n        if(prey1 != null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : 17.3, 
    "totalActiveTime" : 2133.4999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:36:08.770+0000"), 
            "code" : "public class Lion extends Animal{\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        \n    }\n    public Animal getPrey(){\n        \n    }\n    public void eat(){\n        if(hasPrey())\n        System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        System.out.println(\"AHHHHH... FRESH MEAT!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 285.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:46.995+0000"), 
            "code" : "public class Lion extends Animal{\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        \n    }\n    public Animal getPrey(){\n        \n    }\n    public void eat(){\n        if(hasPrey())\n        System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        System.out.println(\"AHHHHH... FRESH MEAT!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 279.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:33.164+0000"), 
            "code" : "public class Lion extends Animal{\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if(super.getPrey() != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public Animal getPrey(){\n        return \n    }\n    public void eat(){\n        if(hasPrey() != null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 164.6
        }, 
        {
            "date" : ISODate("2016-04-29T01:04:42.253+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        if(prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname()){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    public boolean hasPrey(){\n        if(super.getPrey() != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public Animal getPrey(){\n        return true\n    }\n    public void eat(){\n        if(hasPrey() != null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1269.1
        }, 
        {
            "date" : ISODate("2016-04-29T01:04:48.157+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        if(prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname()){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    public boolean hasPrey(){\n        if(super.getPrey() != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public Animal getPrey(){\n        return true;\n    }\n    public void eat(){\n        if(hasPrey() != null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 5.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:21.054+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        if(prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname())){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    public boolean hasPrey(){\n        if(super.getPrey() != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public Animal getPrey(){\n        return true;\n    }\n    public void eat(){\n        if(hasPrey() != null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 32.9
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:57.429+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        if(prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname())){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    public boolean hasPrey(){\n        if(Lion.getPrey() != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public Animal getPrey(){\n        return true;\n    }\n    public void eat(){\n        if(hasPrey() != null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(36)
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:22.189+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        if(prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname())){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    public boolean hasPrey(){\n        if(prey1 != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public Animal getPrey(){\n        return true;\n    }\n    public void eat(){\n        if(hasPrey() != null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 25.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:39.298+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        if(prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname())){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    public boolean hasPrey(){\n        if(prey1 != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public Animal getPrey(){\n        return prey1;\n    }\n    public void eat(){\n        if(hasPrey() != null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.1
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:56.871+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    public boolean hunt(Animal prey){\n        if(prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname())){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    public boolean hasPrey(){\n        if(prey1 != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public Animal getPrey(){\n        return prey1;\n    }\n    public void eat(){\n        if(prey1 != null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.3
        }
    ]
}
{ 
    "_id" : "6s88qLmcW2rAyk6gt", 
    "userId" : "tBRTnCWLCp63vtcx8", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:33:22.708+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:07:49.394+0000"), 
    "code" : "public class Lion extends Animal {\n\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n\n    public boolean hunt(Animal prey) {\n        if (prey != null) {\n            if (prey.getNickname() != null) {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight(), prey.getNickname());\n            } else {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public boolean hasPrey() {\n        return prey != null;\n    }\n\n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            prey = null;\n            setWeight(getWeight() *= (1.0/3.0));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 12.1, 
    "totalActiveTime" : 2072.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:45:07.892+0000"), 
            "code" : "public class Lion extends Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Lion(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n\n    public boolean hunt(Animal prey) {\n        if (prey != null) {\n            if (prey.getNickname != null) {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight(), prey.getNickname());\n            } else {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public boolean hasPrey() {\n        return prey != null;\n    }\n\n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            prey = null;\n            weight *= (1.0/3.0);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 665.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:13.923+0000"), 
            "code" : "public class Lion extends Animal {\n\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n\n    public boolean hunt(Animal prey) {\n        if (prey != null) {\n            if (prey.getNickname != null) {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight(), prey.getNickname());\n            } else {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public boolean hasPrey() {\n        return prey != null;\n    }\n\n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            prey = null;\n            weight *= (1.0/3.0);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 131.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:39.888+0000"), 
            "code" : "public class Lion extends Animal {\n\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n\n    public boolean hunt(Animal prey) {\n        if (prey != null) {\n            if (prey.getNickname() != null) {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight(), prey.getNickname());\n            } else {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public boolean hasPrey() {\n        return prey != null;\n    }\n\n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            prey = null;\n            weight *= (1.0/3.0);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(126)
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:16.821+0000"), 
            "code" : "public class Lion extends Animal {\n\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n\n    public boolean hunt(Animal prey) {\n        if (prey != null) {\n            if (prey.getNickname() != null) {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight(), prey.getNickname());\n            } else {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public boolean hasPrey() {\n        return prey != null;\n    }\n\n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            prey = null;\n            super.weight *= (1.0/3.0);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1057.1
        }, 
        {
            "date" : ISODate("2016-04-29T01:07:37.204+0000"), 
            "code" : "public class Lion extends Animal {\n\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n\n    public boolean hunt(Animal prey) {\n        if (prey != null) {\n            if (prey.getNickname() != null) {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight(), prey.getNickname());\n            } else {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public boolean hasPrey() {\n        return prey != null;\n    }\n\n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            prey = null;\n            setWeight(getWeight *= (1.0/3.0));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 80.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:07:49.394+0000"), 
            "code" : "public class Lion extends Animal {\n\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n\n    public boolean hunt(Animal prey) {\n        if (prey != null) {\n            if (prey.getNickname() != null) {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight(), prey.getNickname());\n            } else {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public boolean hasPrey() {\n        return prey != null;\n    }\n\n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            prey = null;\n            setWeight(getWeight() *= (1.0/3.0));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.1
        }
    ]
}
{ 
    "_id" : "3wAfmxRYePJPEFaTh", 
    "userId" : "EZWJtckhLqqNwhMdt", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:57:08.545+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:10:11.170+0000"), 
    "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (Math.random() > 0.5) {\n            this.prey = prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            double weightGained = ((double)1 / 3) * prey.getWeight();\n            setWeight(getWeight() + weightGained);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n        else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : NumberInt(141), 
    "totalActiveTime" : 745.1999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T01:03:50.483+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        if (Math.random() > 0.5) {\n            this.prey = prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 364.9
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:17.206+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (Math.random() > 0.5) {\n            this.prey = prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 86.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:07:16.342+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (Math.random() > 0.5) {\n            this.prey = prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            setWeight(getWeight() + ((1/3) * prey.getWeight()));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 119.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:07:51.469+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (Math.random() > 0.5) {\n            this.prey = prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            setWeight(getWeight() + ((1/3) * prey.getWeight()));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n        else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 33.9
        }, 
        {
            "date" : ISODate("2016-04-29T01:10:11.169+0000"), 
            "code" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (Math.random() > 0.5) {\n            this.prey = prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            double weightGained = ((double)1 / 3) * prey.getWeight();\n            setWeight(getWeight() + weightGained);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n        else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(141)
        }
    ]
}
{ 
    "_id" : "oJuAvqEqsCvE6CqGT", 
    "userId" : "zna4wuKiLGvFRJriv", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:29:16.145+0000"), 
    "updatedAt" : ISODate("2016-04-29T02:26:07.455+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        String s = getNickname()+\", height = \"+ getHeight() + \"m, weight = \" + getWeight() + \"kg\" ;\n        return s;\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 16.5, 
    "totalActiveTime" : 2279.0000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:48:15.297+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    {\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        if(nickname==null){\n            return \"animal\";\n        }else{\n        return nickname;\n        }\n    }\n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        String s = getNickname+\", height = \"+ getHeight + \"m, weight = \" + getWeight + \"kg\" ;\n        return s;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 500.6
        }, 
        {
            "date" : ISODate("2016-04-29T01:09:09.527+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"anmial\";\n    }\n    {\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        \n        return nickname;\n        }\n    }\n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        String s = getNickname+\", height = \"+ getHeight + \"m, weight = \" + getWeight + \"kg\" ;\n        return s;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1272.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:09:18.150+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"anmial\";\n    }\n    {\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        \n        return nickname;\n        }\n    }\n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        String s = getNickname+\", height = \"+ getHeight + \"m, weight = \" + getWeight + \"kg\" ;\n        return s;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.6
        }, 
        {
            "date" : ISODate("2016-04-29T02:24:17.251+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"anmial\";\n    }\n    {\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        \n        return nickname;\n        }\n    }\n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        String s = getNickname+\", height = \"+ getHeight + \"m, weight = \" + getWeight + \"kg\" ;\n        return s;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 387.3
        }, 
        {
            "date" : ISODate("2016-04-29T02:25:04.550+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"anmial\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        String s = getNickname+\", height = \"+ getHeight + \"m, weight = \" + getWeight + \"kg\" ;\n        return s;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 46.3
        }, 
        {
            "date" : ISODate("2016-04-29T02:25:50.970+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"anmial\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        String s = getNickname()+\", height = \"+ getHeight() + \"m, weight = \" + getWeight() + \"kg\" ;\n        return s;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 47.3
        }, 
        {
            "date" : ISODate("2016-04-29T02:26:07.454+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        String s = getNickname()+\", height = \"+ getHeight() + \"m, weight = \" + getWeight() + \"kg\" ;\n        return s;\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 16.5
        }
    ]
}
{ 
    "_id" : "ALxHKRJSxhNNnQcDR", 
    "userId" : "y69LScAMNyacdTiSs", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:37:02.098+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:12:42.149+0000"), 
    "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            setWeight(weight += ((1/3) * prey.getWeight()));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n    \n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 10.3, 
    "totalActiveTime" : 1543.3000000000002, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:40:15.346+0000"), 
            "code" : "public class Lion extends Animal{\n        \n    \n    public Lion(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n     public Lion(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 135.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:17.537+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            weight += ((1/3) * prey.getWeight);\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 379.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:58:18.550+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            weight += ((1/3) * prey.getWeight);\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 696.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:59:02.062+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            setWeight(getWeight += ((1/3) * prey.getWeight);\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 43.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:59:14.449+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            setWeight(getWeight += ((1/3) * prey.getWeight));\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:00:01.274+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            setWeight(getWeight += ((1/3) * prey.getWeight));\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(47)
        }, 
        {
            "date" : ISODate("2016-04-29T01:00:42.420+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            setWeight(getWeight() += ((1/3) * prey.getWeight()));\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 38.9
        }, 
        {
            "date" : ISODate("2016-04-29T01:11:06.267+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            setWeight(getWeight() += ((1/3) * prey.getWeight()));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 163.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:11:23.202+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            setWeight(weight += ((1/3) * prey.getWeight()));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.9
        }, 
        {
            "date" : ISODate("2016-04-29T01:12:42.148+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            setWeight(weight += ((1/3) * prey.getWeight()));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.3
        }
    ]
}
{ 
    "_id" : "EMm4u9bDM84JFtxX5", 
    "userId" : "dPGDwJc58vokTNtKk", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:32:35.532+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:12:05.472+0000"), 
    "code" : "import java.util.random;\n\npublic class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random rdm = new Random\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(getPrey() != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        Animal prey = getPrey();\n        if(prey == null){\n            return true;\n        }\n        \n        return prey;\n    }\n    \n    public void eat(){\n        if(hunt == true){\n            prey == null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 336.1, 
    "totalActiveTime" : 852.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:33:22.363+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(){\n        super();\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(50)
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:45.591+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(){\n        super();\n    }\n    \n    public boolean hunt(Animal prey){\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        if(getPrey() != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        Animal prey = getPrey();\n        if(prey == null){\n            eat();\n            \n        }\n        \n        return prey;\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 382.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:24.483+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(){\n        super();\n    }\n    \n    public boolean hunt(Animal prey){\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        if(getPrey() != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        Animal prey = getPrey();\n        if(prey == null){\n            eat();\n            \n        }\n        \n        return prey;\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:18.227+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        if(getPrey() != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        Animal prey = getPrey();\n        if(prey == null){\n            eat();\n            \n        }\n        \n        return prey;\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 53.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:06.832+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    \n    public boolean hasPrey(){\n        if(getPrey() != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        Animal prey = getPrey();\n        if(prey == null){\n            eat();\n            \n        }\n        \n        return prey;\n    }\n\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:12:05.472+0000"), 
            "code" : "import java.util.random;\n\npublic class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random rdm = new Random\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(getPrey() != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        Animal prey = getPrey();\n        if(prey == null){\n            return true;\n        }\n        \n        return prey;\n    }\n    \n    public void eat(){\n        if(hunt == true){\n            prey == null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 336.1
        }
    ]
}
{ 
    "_id" : "2Q5kjahQqebWkHaX5", 
    "userId" : "mzEYkra6nhsvCgSH7", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:34:55.366+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:17:45.078+0000"), 
    "code" : "import java.lang.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(double height,double weight,Animal prey){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 246.7, 
    "totalActiveTime" : 1299.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:42:05.405+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(Animal prey,double height,double weight){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 308.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:08.360+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(Animal prey,double height,double weight){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void Eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 341.1
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:08.246+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(double height,double weight){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void Eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 79.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:44.298+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(double height,double weight){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.1
        }, 
        {
            "date" : ISODate("2016-04-29T01:07:11.524+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(Animal prey,double height,double weight){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:10:04.731+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n   \n    public Lion(Animal prey,double height,double weight){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 167.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:11:12.905+0000"), 
            "code" : "import java.*\npublic class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(Animal prey,double height,double weight){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 73.5
        }, 
        {
            "date" : ISODate("2016-04-29T01:13:38.202+0000"), 
            "code" : "import java.lang.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(Animal prey,double height,double weight){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.1
        }, 
        {
            "date" : ISODate("2016-04-29T01:17:45.078+0000"), 
            "code" : "import java.lang.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(double height,double weight,Animal prey){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 246.7
        }
    ]
}
{ 
    "_id" : "FwptKqDYtuT9snzZP", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:55.656+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:16:53.698+0000"), 
    "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 2.3, 
    "totalActiveTime" : 540.9, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:26:13.571+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        Beast, height = 1.22m, weight = 42.02kg \n        return nickName+\", height = \"+height+\", weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 262.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:21.475+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height+\", weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:26:50.061+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height+\", weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 28.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:06.573+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height+m\", weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 16.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:24.767+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height\",m weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(18)
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:39.145+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height+\",m weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-04-29T00:27:50.150+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 11.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:50:20.972+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 179.7
        }, 
        {
            "date" : ISODate("2016-04-29T01:16:53.697+0000"), 
            "code" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 2.3
        }
    ]
}
{ 
    "_id" : "ANySDX7CDRheWrhPZ", 
    "userId" : "tPgDpL2f7Hh6ZHa8B", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:27:54.943+0000"), 
    "updatedAt" : ISODate("2016-04-29T04:06:30.858+0000"), 
    "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        Random r = new Random();\n        int low = 1;\n        int high = 3;\n        int rand = r.nextInt(high-low) + low;\n        if(rand==1){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        return prey!=null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight()+(1.0/3.0*prey.getWeight()));\n            prey=null;\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 26.8, 
    "totalActiveTime" : 2214.1000000000004, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:29:14.286+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(){\n        \n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        \n    }\n    public Animal getPrey(){\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 83.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:30:42.382+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        \n    }\n    public Animal getPrey(){\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 87.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:17.264+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal;\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(35)
        }, 
        {
            "date" : ISODate("2016-04-29T00:31:36.997+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:32.954+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 114.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:33:44.547+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:35:11.224+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:36:45.592+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 96.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:37:48.758+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 62.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:38:03.877+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:05.287+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:07.625+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        //super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        //this(height,weight,\"\");\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:15.849+0000"), 
            "code" : "public class Lion extends Animal{\n    //private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        //super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        //this(height,weight,\"\");\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:24.551+0000"), 
            "code" : "public class Lion extends Animal{\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:34.690+0000"), 
            "code" : "public class Lion extends Animal{\n    \n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:47.170+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(){\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:39:53.576+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(){\n        super();\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:07.804+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(){\n        super();\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:20.697+0000"), 
            "code" : "private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.1
        }, 
        {
            "date" : ISODate("2016-04-29T00:40:52.531+0000"), 
            "code" : "public Lion extends Animal(){\n    private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:07.575+0000"), 
            "code" : "public class Lion extends Animal(){\n    private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(15)
        }, 
        {
            "date" : ISODate("2016-04-29T00:41:29.232+0000"), 
            "code" : "public class Lion extends Animal(){\n    private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        super(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:44.445+0000"), 
            "code" : "public class Lion extends Animal(){\n    private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 73.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:27.704+0000"), 
            "code" : "public class Lion extends Animal(){\n    private Animal prey = new Animal();\n\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 42.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:43:37.861+0000"), 
            "code" : "public class Lion extends Animal(){\n    //private Animal prey = new Animal();\n\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return Animal a = new Animal;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(11)
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:05.716+0000"), 
            "code" : "public class Lion extends Animal(){\n    //private Animal prey = new Animal();\n\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 27.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:09.938+0000"), 
            "code" : "public class Lion extends Animal(){\n    //private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(9)
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:16.402+0000"), 
            "code" : "public class Lion extends Animal{\n    //private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:09.438+0000"), 
            "code" : "public class Lion extends Animal{\n    //private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 50.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:09.697+0000"), 
            "code" : "public class Lion extends Animal{\n    //private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:51:01.023+0000"), 
            "code" : "public class Lion extends Animal{\n    //private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 40.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:52:00.527+0000"), 
            "code" : "public class Lion extends Animal{\n    //private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 59.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:52:40.326+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey = new Animal();\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 39.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:53:47.833+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        return false;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 67.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:55:04.959+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 70.1
        }, 
        {
            "date" : ISODate("2016-04-29T01:02:05.392+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 384.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:02:56.520+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 93.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:03:28.365+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    /*public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }*/\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:03:54.498+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    /*public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }*/\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:04:15.608+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    /*public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        this(height,weight,\"\");\n    }*/\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 21.1
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:04.390+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 48.7
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:12.976+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        //super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        //super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:26.170+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        //super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:55.487+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(29)
        }, 
        {
            "date" : ISODate("2016-04-29T01:08:10.581+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname)\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight)\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(1/3*prey.getWeight());\n            prey=null;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(130)
        }, 
        {
            "date" : ISODate("2016-04-29T01:17:43.114+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:18:52.703+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 29.5
        }, 
        {
            "date" : ISODate("2016-04-29T01:19:05.284+0000"), 
            "code" : "public class Lion extends Animal{\n    //private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:24:42.284+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey = new Animal();\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(1/3*prey.getWeight());\n            prey=null;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:54:22.947+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        if(prey!=null){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if(prey!=null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        if(prey!=null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getweight()+(1/3*prey.getWeight()));\n            prey=null;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 2.6
        }, 
        {
            "date" : ISODate("2016-04-29T04:05:26.967+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        Random r = new Random();\n        int low = 1;\n        int high = 3;\n        int result = r.nextInt(high-low) + low;\n        if(r==1){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        return prey!=null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight()+(1.0/3.0*prey.getWeight()));\n            prey=null;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 70.9
        }, 
        {
            "date" : ISODate("2016-04-29T04:05:45.684+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        Random r = new Random();\n        int low = 1;\n        int high = 3;\n        int result = r.nextInt(high-low) + low;\n        if(r==1){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        return prey!=null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight()+(1.0/3.0*prey.getWeight()));\n            prey=null;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.7
        }, 
        {
            "date" : ISODate("2016-04-29T04:06:03.863+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        Random r = new Random();\n        int low = 1;\n        int high = 3;\n        int result = r.nextInt(high-low) + low;\n        if(result==1){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        return prey!=null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight()+(1.0/3.0*prey.getWeight()));\n            prey=null;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.1
        }, 
        {
            "date" : ISODate("2016-04-29T04:06:30.857+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        Random r = new Random();\n        int low = 1;\n        int high = 3;\n        int rand = r.nextInt(high-low) + low;\n        if(rand==1){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        return prey!=null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight()+(1.0/3.0*prey.getWeight()));\n            prey=null;\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 26.8
        }
    ]
}
{ 
    "_id" : "m8vWC7yTEo6wjF9Qz", 
    "userId" : "F5XnEFAmSrqP7Hbf4", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:17:04.743+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:34:37.622+0000"), 
    "code" : "public class Marketer extends Employee {\n    private double salary = 50000;\n    \n    public double getSalary() {\n        return salary;\n        \n    }\n    \n    public void advertise() {\n        salary = 50000;\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n \n    \n}", 
    "status" : "PASS", 
    "activeTime" : 65.1, 
    "totalActiveTime" : 1124.8999999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:47:22.960+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n    Salary = 50000.00;\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 98.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:48:15.990+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n    Super().setBaseSalary(double 50000);\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 46.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:58:08.919+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n    Super.setBaseSalary(double 50000);\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 114.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:58:20.373+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n    Super.setBaseSalary(50000);\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:03:15.648+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n    super.setBaseSalary(50000);\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 278.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:04.130+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 111.5
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:42.307+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n        super.setBaseSalary(50000);\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 23.9
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:56.546+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    salary = 50000.00;\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:07:26.325+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary = 50000;\n    \n\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 29.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:11:25.042+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    public void setSalary(int Salary) {\n        this.salary = Salary;\n        \n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 65.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:29:45.126+0000"), 
            "code" : "public class Marketer extends Employee {\n    salary = 50000;\n    \n\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(184)
        }, 
        {
            "date" : ISODate("2016-04-29T01:30:01.612+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n\n    \n    public void advertise() {\n        salary = 50000;\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n \n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 16.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:31:13.987+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary;\n    \n    public Manager(50000) {\n        this.salary = 50000;\n    }\n\n    \n    public void advertise() {\n        salary = 50000;\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 66.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:34:37.621+0000"), 
            "code" : "public class Marketer extends Employee {\n    private double salary = 50000;\n    \n    public double getSalary() {\n        return salary;\n        \n    }\n    \n    public void advertise() {\n        salary = 50000;\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n \n    \n}", 
            "status" : "PASS", 
            "activeTime" : 65.1
        }
    ]
}
{ 
    "_id" : "TiLYwQ2c4K782gAEb", 
    "userId" : "npjNBBuP23XiG7zn3", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:16:48.339+0000"), 
    "updatedAt" : ISODate("2016-04-29T02:14:20.990+0000"), 
    "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n       super(baseHours, baseSalary, baseDays, baseForm); \n    }\n    \n    public void setSalary(){\n        salary = getSalary() + 10000.0;\n    }\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : NumberInt(389), 
    "totalActiveTime" : 1252.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:21:22.648+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public void setSalary(){\n        super.getSalary() + 10000;\n    }\n    \n    public String advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 221.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:27:33.481+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        \n    }\n    \n    public void setSalary(){\n        super.getSalary() + 10000.0;\n    }\n    \n    public String advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 224.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:27:46.751+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        \n    }\n    \n    public void setSalary(){\n        getSalary() + 10000.0;\n    }\n    \n    public String advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:32:46.195+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        \n    }\n    \n    public void setSalary(){\n        salary = getSalary() + 10000.0;\n    }\n    \n    public String advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 299.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:33:19.769+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        \n    }\n    \n    public void setSalary(){\n        salary = getSalary() + 10000.0;\n    }\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 33.4
        }, 
        {
            "date" : ISODate("2016-04-29T02:07:39.246+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n       super(hours, salary, days, form); \n    }\n    \n    public void setSalary(){\n        salary = getSalary() + 10000.0;\n    }\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(72)
        }, 
        {
            "date" : ISODate("2016-04-29T02:14:20.989+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n       super(baseHours, baseSalary, baseDays, baseForm); \n    }\n    \n    public void setSalary(){\n        salary = getSalary() + 10000.0;\n    }\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(389)
        }
    ]
}
{ 
    "_id" : "irNPvnCcMQDsjr6LP", 
    "userId" : "y69LScAMNyacdTiSs", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:42.743+0000"), 
    "updatedAt" : ISODate("2016-04-29T01:35:19.208+0000"), 
    "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        \n        setBaseSalary(50000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 102.8, 
    "totalActiveTime" : 1309.6999999999998, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:19:06.695+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 111.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:25.984+0000"), 
            "code" : "public class Marketer extends Employee{\n    private int baseHours = 40;\n\tprivate double baseSalary = 50000.0;\n\tprivate int baseVacationDays = 10;\n\tprivate String baseVacationForm = \"yellow\";\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 92.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:21:56.366+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        baseSalary = 50000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.5
        }, 
        {
            "date" : ISODate("2016-04-29T00:22:06.528+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        double baseSalary = 50000;\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 9.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:04.049+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        baseSalary+=10000;\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 41.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:04:39.801+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        setBaseSalary(baseSalary += 10000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 188.7
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:00.663+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        setBaseSalary(getSalary += 10000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:05:10.222+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        setBaseSalary(getSalary() += 10000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.7
        }, 
        {
            "date" : ISODate("2016-04-29T01:07:37.396+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        \n        setBaseSalary(getSalary() += 10000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 135.2
        }, 
        {
            "date" : ISODate("2016-04-29T01:08:16.461+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        super();\n        setBaseSalary(getSalary() += 10000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 20.5
        }, 
        {
            "date" : ISODate("2016-04-29T01:33:21.037+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        super();\n        setBaseSalary(getSalary() += 10000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 536.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:33:36.159+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        super();\n        setBaseSalary(50000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : NumberInt(15)
        }, 
        {
            "date" : ISODate("2016-04-29T01:35:19.208+0000"), 
            "code" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        \n        setBaseSalary(50000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 102.8
        }
    ]
}
{ 
    "_id" : "bK33bam76rfFmoFxa", 
    "userId" : "npjNBBuP23XiG7zn3", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:32:24.973+0000"), 
    "updatedAt" : ISODate("2016-04-29T02:05:52.602+0000"), 
    "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey==null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            setWeight(getWeight()+(prey.getWeight()/3));\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n            prey=null;\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 312.2, 
    "totalActiveTime" : 3386.9999999999995, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T01:00:26.557+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n         \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1402.6
        }, 
        {
            "date" : ISODate("2016-04-29T01:02:05.637+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    private int height;\n    private int weight;\n    private String nickname;\n    \n    public Lion(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n         \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 56.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:37:47.554+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    private int height;\n    private int weight;\n    private String nickname;\n    \n    public Lion(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n         \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 242.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:39:46.702+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n         \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 118.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:54:46.557+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey==false){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        prey=null;\n        setWeight(weight+(prey.getWeight/3));\n        System.out.print(\"AHHHHH... FRESH MEAT!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(900)
        }, 
        {
            "date" : ISODate("2016-04-29T01:56:00.194+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey==null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        prey=null;\n        setWeight(super.weight+(prey.getWeight()/3));\n        System.out.print(\"AHHHHH... FRESH MEAT!\");\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 73.6
        }, 
        {
            "date" : ISODate("2016-04-29T01:56:30.189+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey==null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        prey=null;\n        setWeight(getWeight()+(prey.getWeight()/3));\n        System.out.print(\"AHHHHH... FRESH MEAT!\");\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 29.9
        }, 
        {
            "date" : ISODate("2016-04-29T01:57:20.022+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey==null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        setWeight(getWeight()+(prey.getWeight()/3));\n        System.out.print(\"AHHHHH... FRESH MEAT!\");\n        prey=null;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 49.7
        }, 
        {
            "date" : ISODate("2016-04-29T02:00:40.506+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()==false){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        setWeight(getWeight()+(prey.getWeight()/3));\n        System.out.print(\"AHHHHH... FRESH MEAT!\");\n        prey=null;\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 200.6
        }, 
        {
            "date" : ISODate("2016-04-29T02:05:52.602+0000"), 
            "code" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey==null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            setWeight(getWeight()+(prey.getWeight()/3));\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n            prey=null;\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 312.2
        }
    ]
}
{ 
    "_id" : "Ae3SPsK82SwTzTdeQ", 
    "userId" : "sJHc88TqFpuuuT54p", 
    "questionId" : "TKP2nEKfcv4Wq8Jo9", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:16:56.613+0000"), 
    "updatedAt" : ISODate("2016-04-29T02:29:40.053+0000"), 
    "code" : "public class Marketer extends Employee{\n    //public double getSalary(){\n        \n        //return (super.getSalary()+10000);\n    //}\n    public double getSalary() {\n        return super.getSalary() + 10000;               \n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 20.6, 
    "totalActiveTime" : 2803.0, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:23:18.026+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary=super.getSalary()+10000;\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 164.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:39.372+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary=50000.0;\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:23:43.889+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary=50000.0;\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 4.4
        }, 
        {
            "date" : ISODate("2016-04-29T01:06:09.520+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary=super.getSalary()+10000;\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 1839.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:09:24.673+0000"), 
            "code" : "public class Marketer extends Employee{\n    private double baseSalary=getSalary()+10000;\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 67.6
        }, 
        {
            "date" : ISODate("2016-04-29T02:25:10.256+0000"), 
            "code" : "public class Marketer extends Employee{\n    public double baseSalary(){\n        \n        super.getSalary()+10000;\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 484.2
        }, 
        {
            "date" : ISODate("2016-04-29T02:25:24.371+0000"), 
            "code" : "public class Marketer extends Employee{\n    public double baseSalary(){\n        \n        return super.getSalary()+10000;\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-04-29T02:26:00.773+0000"), 
            "code" : "public class Marketer extends Employee{\n    public double baseSalary(){\n        \n        return (super.getSalary()+10000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 36.3
        }, 
        {
            "date" : ISODate("2016-04-29T02:28:02.794+0000"), 
            "code" : "public class Marketer extends Employee{\n    //public double baseSalary(){\n        \n        //return (super.getSalary()+10000);\n    //}\n    public double getSalary() {\n        return super.getSalary() + 10000;               \n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 105.8
        }, 
        {
            "date" : ISODate("2016-04-29T02:28:47.328+0000"), 
            "code" : "public class Marketer extends Employee{\n    //public double getSalary(){\n        \n        //return (super.getSalary()+10000);\n    //}\n    public double baseSalary() {\n        return super.getSalary() + 10000;               \n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 44.5
        }, 
        {
            "date" : ISODate("2016-04-29T02:29:40.052+0000"), 
            "code" : "public class Marketer extends Employee{\n    //public double getSalary(){\n        \n        //return (super.getSalary()+10000);\n    //}\n    public double getSalary() {\n        return super.getSalary() + 10000;               \n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 20.6
        }
    ]
}
{ 
    "_id" : "3grhPwf8Yek6Fip2F", 
    "userId" : "zna4wuKiLGvFRJriv", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T02:26:09.668+0000"), 
    "updatedAt" : ISODate("2016-04-29T02:26:09.668+0000")
}
{ 
    "_id" : "5RRYp6vwnZMBGBFWB", 
    "userId" : "sJHc88TqFpuuuT54p", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:35:34.734+0000"), 
    "updatedAt" : ISODate("2016-04-29T02:29:49.627+0000"), 
    "code" : "public class Lion extends Animal{\n    private Animal animal;\n    public boolean hunt(Animal prey){\n        if(animal!=null && prey!= null || animal==null && prey!=null ||\n        animal!=null && prey == null){\n            animal = prey;\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    public boolean hasPrey(){\n        return animal!=null;\n    }\n    public Animal getPrey(){\n        return animal;\n    }\n    public String eat(){\n        if(animal==null){\n            return \"I GOT NUTHIN TO EAT >:3\";\n        }\n        else{\n            animal=null;\n            1/3*animal.super.getWeight();\n            return \"AHHHHH... FRESH MEAT!\"\n        }\n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 9.6, 
    "totalActiveTime" : 9.6, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T02:29:49.626+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal animal;\n    public boolean hunt(Animal prey){\n        if(animal!=null && prey!= null || animal==null && prey!=null ||\n        animal!=null && prey == null){\n            animal = prey;\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    public boolean hasPrey(){\n        return animal!=null;\n    }\n    public Animal getPrey(){\n        return animal;\n    }\n    public String eat(){\n        if(animal==null){\n            return \"I GOT NUTHIN TO EAT >:3\";\n        }\n        else{\n            animal=null;\n            1/3*animal.super.getWeight();\n            return \"AHHHHH... FRESH MEAT!\"\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 9.6
        }
    ]
}
{ 
    "_id" : "7brBifGXrrHsrog6B", 
    "userId" : "prcQ7CZ5EtxxnNWBg", 
    "questionId" : "EPgKn5cqueMCRMi4y", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:23:20.340+0000"), 
    "updatedAt" : ISODate("2016-04-29T03:37:04.698+0000"), 
    "code" : "import java.util.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n    this.height= height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height= height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n    return height;\n    }\n    \n    public double getWeight(){\n    return weight;\n    }\n    \n    public void setWeight(double weight){\n    this.weight = weight;\n    }\n    \n    public String getNickname(){\n    return nickname;\n    }\n    \n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n    return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 58.2, 
    "totalActiveTime" : 519.5, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:30:10.770+0000"), 
            "code" : "import java.util.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n    this.height= height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height= height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n    return height;\n    }\n    \n    public double getWeight(){\n    return weight;\n    }\n    \n    public void setWeight(double weight){\n    this.weight = weight;\n    }\n    \n    public String getNickname(){\n    return nickname;\n    }\n    \n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n    return nickname + \", height = \" + height + \", weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 413.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:30:44.031+0000"), 
            "code" : "import java.util.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n    this.height= height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height= height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n    return height;\n    }\n    \n    public double getWeight(){\n    return weight;\n    }\n    \n    public void setWeight(double weight){\n    this.weight = weight;\n    }\n    \n    public String getNickname(){\n    return nickname;\n    }\n    \n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n    return nickname + \", height = \" + height + \"m , weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 33.3
        }, 
        {
            "date" : ISODate("2016-04-29T00:32:26.169+0000"), 
            "code" : "import java.util.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n    this.height= height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height= height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n    return height;\n    }\n    \n    public double getWeight(){\n    return weight;\n    }\n    \n    public void setWeight(double weight){\n    this.weight = weight;\n    }\n    \n    public String getNickname(){\n    return nickname;\n    }\n    \n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n    return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 14.1
        }, 
        {
            "date" : ISODate("2016-04-29T03:37:04.697+0000"), 
            "code" : "import java.util.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n    this.height= height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height= height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n    return height;\n    }\n    \n    public double getWeight(){\n    return weight;\n    }\n    \n    public void setWeight(double weight){\n    this.weight = weight;\n    }\n    \n    public String getNickname(){\n    return nickname;\n    }\n    \n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n    return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 58.2
        }
    ]
}
{ 
    "_id" : "vxtfPNj4m5M45Q5Pp", 
    "userId" : "uAgTDnJFYMxpGshJq", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:34:04.865+0000"), 
    "updatedAt" : ISODate("2016-04-29T03:53:27.836+0000"), 
    "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey()==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n            setWeight(getWeight() + a.getWeight()/3.0);\n            a=null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n            \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 7.3, 
    "totalActiveTime" : 6458.199999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:45:41.013+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(height, weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 154.7
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:58.936+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(height, weight){\n        super(height, weight);\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:07.831+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(height, weight){\n        super(height, weight);\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 17.4
        }, 
        {
            "date" : ISODate("2016-04-29T00:53:44.644+0000"), 
            "code" : "public class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(height, weight){\n        super(height, weight);\n    }\n    \n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 54.4
        }, 
        {
            "date" : ISODate("2016-04-29T02:15:54.931+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(height, weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(I GOT NUTHIN TO EAT >:3);\n        }\n            \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4825.4
        }, 
        {
            "date" : ISODate("2016-04-29T02:16:09.833+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(I GOT NUTHIN TO EAT >:3);\n        }\n            \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.9
        }, 
        {
            "date" : ISODate("2016-04-29T02:16:28.978+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n            \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.3
        }, 
        {
            "date" : ISODate("2016-04-29T02:16:53.080+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n            \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.1
        }, 
        {
            "date" : ISODate("2016-04-29T02:17:07.554+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey()==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n            \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.2
        }, 
        {
            "date" : ISODate("2016-04-29T03:53:04.150+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey()==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n            setWeight(getWeight() + prey.getWeight()/3.0);\n            prey=null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n            \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1300.7
        }, 
        {
            "date" : ISODate("2016-04-29T03:53:20.193+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey()==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n            setWeight(getWeight() + prey.getWeight()/3.0);\n            a=null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n            \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-04-29T03:53:27.835+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey()==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n            setWeight(getWeight() + a.getWeight()/3.0);\n            a=null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n            \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 7.3
        }
    ]
}
{ 
    "_id" : "yBhX3hsNswwPSi2ba", 
    "userId" : "CKsJ2eZ8twzHunyDh", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:36:21.715+0000"), 
    "updatedAt" : ISODate("2016-04-29T05:25:00.249+0000"), 
    "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        Random rdm = new Random();\n        if(prey == null){\n            return false;\n        }\n        if(rdm.nextBoolean()){\n            this.prey = prey;\n            return true;\n        }\n        return false;\n\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n\n    \n}", 
    "status" : "PASS", 
    "activeTime" : 72.7, 
    "totalActiveTime" : 834.3000000000001, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:42:19.013+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    \n    public boolean hunt(Animal prey){\n        this.prey = prey;\n    }\n    \n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n    }\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 341.9
        }, 
        {
            "date" : ISODate("2016-04-29T02:27:27.964+0000"), 
            "code" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    //public Lion(double height, double weight, String nickname ){\n    //    super(height, weight, nickname);\n    //}\n    \n    //public Lion(double height, double weight ){\n    //    super(height, weight);\n    //}    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        this.prey = prey;\n        return true;\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n    }\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1.4
        }, 
        {
            "date" : ISODate("2016-04-29T04:35:02.257+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        Random rdm = new Random();\n        if(rdm.nextBoolean()){\n            this.prey = prey;\n            return true;\n        }\n        if(prey == null){\n            return false;\n        }\n\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n    }\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 188.4
        }, 
        {
            "date" : ISODate("2016-04-29T04:35:29.698+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        Random rdm = new Random();\n        if(rdm.nextBoolean()){\n            this.prey = prey;\n            return true;\n        }\n        if(prey == null){\n            return false;\n        }\n        return false;\n\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n    }\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 27.1
        }, 
        {
            "date" : ISODate("2016-04-29T04:36:05.004+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        Random rdm = new Random();\n        if(rdm.nextBoolean()){\n            this.prey = prey;\n            this.weight += prey.getWeight();\n            return true;\n        }\n        if(prey == null){\n            return false;\n        }\n        return false;\n\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n    }\n\n    \n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 35.6
        }, 
        {
            "date" : ISODate("2016-04-29T04:36:44.688+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        Random rdm = new Random();\n        if(rdm.nextBoolean()){\n            this.prey = prey;\n            setWeight(getWeight() + prey.getWeight());\n            return true;\n        }\n        if(prey == null){\n            return false;\n        }\n        return false;\n\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n    }\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 39.5
        }, 
        {
            "date" : ISODate("2016-04-29T04:38:04.439+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        Random rdm = new Random();\n        if(rdm.nextBoolean()){\n            this.prey = prey;\n            \n            return true;\n        }\n        if(prey == null){\n            return false;\n        }\n        return false;\n\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight() + prey.getWeight());\n            prey = null;\n        }\n    }\n\n    \n}", 
            "status" : "FAIL", 
            "activeTime" : 79.2
        }, 
        {
            "date" : ISODate("2016-04-29T04:38:52.783+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        Random rdm = new Random();\n        if(rdm.nextBoolean()){\n            this.prey = prey;\n            \n            return true;\n        }\n        if(prey == null){\n            return false;\n        }\n        return false;\n\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 48.5
        }, 
        {
            "date" : ISODate("2016-04-29T05:25:00.249+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        Random rdm = new Random();\n        if(prey == null){\n            return false;\n        }\n        if(rdm.nextBoolean()){\n            this.prey = prey;\n            return true;\n        }\n        return false;\n\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n\n    \n}", 
            "status" : "PASS", 
            "activeTime" : 72.7
        }
    ]
}
{ 
    "_id" : "PWmfa9dn9m2XCrmC7", 
    "userId" : "57sNXhBgcWRbAj43Q", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:21:32.305+0000"), 
    "updatedAt" : ISODate("2016-04-29T05:07:28.777+0000"), 
    "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            double weight = getWeight() + (prey.getWeight()*(1.0/3));\n            setWeight(weight);\n            prey = null;\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 145.8, 
    "totalActiveTime" : 2031.1000000000004, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T04:52:44.742+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1344.9
        }, 
        {
            "date" : ISODate("2016-04-29T04:54:57.126+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion() {\n        super()\n    }\n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 131.1
        }, 
        {
            "date" : ISODate("2016-04-29T04:55:08.469+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 11.4
        }, 
        {
            "date" : ISODate("2016-04-29T04:56:26.281+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(int height, int weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 77.9
        }, 
        {
            "date" : ISODate("2016-04-29T04:57:04.951+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 37.4
        }, 
        {
            "date" : ISODate("2016-04-29T04:58:57.942+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            weight = weight - (weight*(1.0/3));\n            prey = null;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 113.2
        }, 
        {
            "date" : ISODate("2016-04-29T04:59:42.399+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            double weight = super.getWeight() - (super.getWeight()*(1.0/3));\n            prey = null;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 44.3
        }, 
        {
            "date" : ISODate("2016-04-29T05:00:00.493+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            double weight = super.getWeight() - (super.getWeight()*(1.0/3));\n            prey = null;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.4
        }, 
        {
            "date" : ISODate("2016-04-29T05:00:19.078+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            weight = super.getWeight() - (super.getWeight()*(1.0/3));\n            prey = null;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.7
        }, 
        {
            "date" : ISODate("2016-04-29T05:00:38.325+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            double weight = super.getWeight() + (super.getWeight()*(1.0/3));\n            prey = null;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.2
        }, 
        {
            "date" : ISODate("2016-04-29T05:01:18.901+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            double weight = super.getWeight() + (prey.getWeight()*(1.0/3));\n            prey = null;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 40.5
        }, 
        {
            "date" : ISODate("2016-04-29T05:01:48.369+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            double weight = getWeight() + (prey.getWeight()*(1.0/3));\n            prey = null;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 29.3
        }, 
        {
            "date" : ISODate("2016-04-29T05:07:28.777+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            double weight = getWeight() + (prey.getWeight()*(1.0/3));\n            setWeight(weight);\n            prey = null;\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 145.8
        }
    ]
}
{ 
    "_id" : "p7FYsCajjHApy93Ro", 
    "userId" : "prcQ7CZ5EtxxnNWBg", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:37:17.755+0000"), 
    "updatedAt" : ISODate("2016-04-29T05:37:01.295+0000"), 
    "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    \n    \n    public boolean hunt(Animal prey){\n        Random rnd = new Random();\n        if(prey == null){\n         return false;\n        }\n        \n        if(rnd.nextBoolean()){\n            this.prey=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }else{\n            double finalWeight = getWeight() + (prey.getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            \n        }\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 25.4, 
    "totalActiveTime" : 2305.7000000000003, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:48:34.716+0000"), 
            "code" : "import java.util.*;\npublic class Lion {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n    super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n    super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n    \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 682.6
        }, 
        {
            "date" : ISODate("2016-04-29T00:51:01.390+0000"), 
            "code" : "import java.util.*;\npublic class Lion {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n    super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n    super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 146.8
        }, 
        {
            "date" : ISODate("2016-04-29T01:02:21.344+0000"), 
            "code" : "import java.util.*;\npublic class Lion {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n    super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n    super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 26.7
        }, 
        {
            "date" : ISODate("2016-04-29T03:36:06.233+0000"), 
            "code" : "import java.util.*;\npublic class Lion {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n    super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n    super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 8.4
        }, 
        {
            "date" : ISODate("2016-04-29T03:37:17.338+0000"), 
            "code" : "import java.util.*;\npublic class Lion {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n    super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n    super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-04-29T03:39:25.941+0000"), 
            "code" : "import java.util.*;\npublic class Lion {\n    private Animal prey;\n    \n    /*public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }*/\n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 128.5
        }, 
        {
            "date" : ISODate("2016-04-29T03:41:35.589+0000"), 
            "code" : "import java.util.*;\npublic class Lion {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 103.9
        }, 
        {
            "date" : ISODate("2016-04-29T03:47:56.080+0000"), 
            "code" : "import java.util.*;\npublic class Lion {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    /*public Lion(double height, double weight){\n        super(height, weight);\n    }*/\n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 106.9
        }, 
        {
            "date" : ISODate("2016-04-29T03:48:49.638+0000"), 
            "code" : "import java.util.*;\npublic class Lion {\n    private Animal prey;\n    /*\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    */\n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 53.3
        }, 
        {
            "date" : ISODate("2016-04-29T03:49:39.476+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    \n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 49.9
        }, 
        {
            "date" : ISODate("2016-04-29T03:50:16.181+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    \n    \n    public boolean hunt(Animal prey){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return Animal;\n        }else{\n            return null;\n        }\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            prey = null;\n            double finalWeight = getWeight() + (getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 36.7
        }, 
        {
            "date" : ISODate("2016-04-29T05:34:58.123+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    \n    \n    public boolean hunt(Animal prey){\n        Random rnd = new Random();\n        if(prey == null){\n         return false;\n        }\n        \n        if(rnd.nextBoolean){\n            this.prey=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            double finalWeight = getWeight() + (prey.getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 826.2
        }, 
        {
            "date" : ISODate("2016-04-29T05:35:23.042+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    \n    \n    public boolean hunt(Animal prey){\n        Random rnd = new Random();\n        if(prey == null){\n         return false;\n        }\n        \n        if(rnd.nextBoolean){\n            this.prey=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }\n        if(hunt(Animal prey)){\n            double finalWeight = getWeight() + (prey.getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 24.9
        }, 
        {
            "date" : ISODate("2016-04-29T05:36:21.030+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    \n    \n    public boolean hunt(Animal prey){\n        Random rnd = new Random();\n        if(prey == null){\n         return false;\n        }\n        \n        if(rnd.nextBoolean){\n            this.prey=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }else{\n            double finalWeight = getWeight() + (prey.getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            \n        }\n        \n    }", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(58)
        }, 
        {
            "date" : ISODate("2016-04-29T05:36:35.853+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    \n    \n    public boolean hunt(Animal prey){\n        Random rnd = new Random();\n        if(prey == null){\n         return false;\n        }\n        \n        if(rnd.nextBoolean){\n            this.prey=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }else{\n            double finalWeight = getWeight() + (prey.getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            \n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.7
        }, 
        {
            "date" : ISODate("2016-04-29T05:37:01.295+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    \n    \n    public boolean hunt(Animal prey){\n        Random rnd = new Random();\n        if(prey == null){\n         return false;\n        }\n        \n        if(rnd.nextBoolean()){\n            this.prey=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }else{\n            double finalWeight = getWeight() + (prey.getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            \n        }\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 25.4
        }
    ]
}
{ 
    "_id" : "R7FcLzdTWS9aPKKHo", 
    "userId" : "N5BQLGMBRKq32m5Ay", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:38:10.890+0000"), 
    "updatedAt" : ISODate("2016-04-29T09:30:43.850+0000"), 
    "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 4.2, 
    "totalActiveTime" : 5320.599999999999, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T04:41:53.699+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(){\n        super();\n    }\n    \n    public boolean hunt(Animal prey){\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey.equals(prey)){\n            this.prey = prey;\n            return true;\n        }   else if (a == false) {\n            return false;\n        }\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 1202.4
        }, 
        {
            "date" : ISODate("2016-04-29T04:42:08.150+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(){\n        super();\n    }\n    \n    public boolean hunt(Animal prey){\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey.equals(prey))){\n            this.prey = prey;\n            return true;\n        }   else if (a == false) {\n            return false;\n        }\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 14.2
        }, 
        {
            "date" : ISODate("2016-04-29T04:44:23.682+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey.equals(prey))){\n            this.prey = prey;\n            return true;\n        }   else if (a == false) {\n            return false;\n        }\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 108.2
        }, 
        {
            "date" : ISODate("2016-04-29T04:44:43.067+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey().equals(prey))){\n            this.prey = prey;\n            return true;\n        }   else if (a == false) {\n            return false;\n        }\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 19.2
        }, 
        {
            "date" : ISODate("2016-04-29T04:46:03.066+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey().equals(prey))){\n            \n            this.prey = (Lion) prey\n            return true;\n        }   else if (a == false) {\n            return false;\n        }\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : NumberInt(80)
        }, 
        {
            "date" : ISODate("2016-04-29T04:46:10.312+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey().equals(prey))){\n            \n            this.prey = (Lion) prey;\n            return true;\n        }   else if (a == false) {\n            return false;\n        }\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 7.2
        }, 
        {
            "date" : ISODate("2016-04-29T04:47:13.714+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey().equals(prey))){\n            \n            this.prey = (Lion) prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 63.2
        }, 
        {
            "date" : ISODate("2016-04-29T04:53:19.771+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey().equals(prey))){\n            \n            this.prey = (Lion) prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            weight = weight + weight*1/3;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 362.3
        }, 
        {
            "date" : ISODate("2016-04-29T04:54:55.984+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey().equals(prey))){\n            \n            this.prey = (Lion) prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            super.setWeight(super.getWeight() + (super.getWeight()*1/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 78.3
        }, 
        {
            "date" : ISODate("2016-04-29T04:55:28.107+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a == true && !(getPrey().equals(prey))){\n            \n            this.prey = (Lion) prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            super.setWeight(super.getWeight() + (super.getWeight()*1/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 32.1
        }, 
        {
            "date" : ISODate("2016-04-29T05:02:55.474+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            this.prey = (Lion) prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            super.setWeight(super.getWeight() + (super.getWeight()*1/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 447.5
        }, 
        {
            "date" : ISODate("2016-04-29T05:03:51.093+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            super.setWeight(super.getWeight() + (super.getWeight()*1/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 55.8
        }, 
        {
            "date" : ISODate("2016-04-29T05:04:09.700+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            this.prey = (Animal) prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            super.setWeight(super.getWeight() + (super.getWeight()*1/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.6
        }, 
        {
            "date" : ISODate("2016-04-29T05:05:02.886+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Lion prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = (Lion) prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            super.setWeight(super.getWeight() + (super.getWeight()*1/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(53)
        }, 
        {
            "date" : ISODate("2016-04-29T05:22:23.795+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            //animal type convert to lion\n            //how to convert type animal\n            \n            \n            //animal = (lion) animal;\n            \n            this.prey = (Lion) prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            super.setWeight(super.getWeight() + (super.getWeight()*1/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 806.8
        }, 
        {
            "date" : ISODate("2016-04-29T05:38:15.594+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            super.setWeight(super.getWeight() + (super.getWeight()*1/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 218.4
        }, 
        {
            "date" : ISODate("2016-04-29T05:39:24.897+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            double weight = super.getWeight();\n            super.setWeight(weight + weight*(1/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 67.4
        }, 
        {
            "date" : ISODate("2016-04-29T05:39:43.994+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            double weight = super.getWeight();\n            super.setWeight(weight + (weight*(1/3)));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.1
        }, 
        {
            "date" : ISODate("2016-04-29T05:40:56.261+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            double weight = super.getWeight();\n            double addWeight = weight * (1/3);\n            super.setWeight(weight + addWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 72.1
        }, 
        {
            "date" : ISODate("2016-04-29T05:41:52.329+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n            prey = null;\n            double weight = super.getWeight();\n            double addWeight = (1/3) * prey.getWeight();\n            super.setWeight(weight + addWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 56.3
        }, 
        {
            "date" : ISODate("2016-04-29T05:42:06.211+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = (1/3) * prey.getWeight();\n            super.setWeight(weight + addWeight);\n             prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-29T05:42:29.941+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = (double)(1/3) * prey.getWeight();\n            super.setWeight(weight + addWeight);\n             prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 21.6
        }, 
        {
            "date" : ISODate("2016-04-29T05:42:45.639+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = prey.getWeight();\n            super.setWeight(weight + addWeight);\n             prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 15.6
        }, 
        {
            "date" : ISODate("2016-04-29T05:43:31.173+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 45.5
        }, 
        {
            "date" : ISODate("2016-04-29T05:43:42.822+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = (1/3) * this.prey.getWeight();\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.6
        }, 
        {
            "date" : ISODate("2016-04-29T05:43:57.894+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = double (1/3) * (this.prey.getWeight());\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 15.6
        }, 
        {
            "date" : ISODate("2016-04-29T05:44:08.268+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = (double) (1/3) * (this.prey.getWeight());\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 9.8
        }, 
        {
            "date" : ISODate("2016-04-29T05:44:39.350+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            \n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            super.setWeight(weight + ((1/3) * addWeight));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 31.3
        }, 
        {
            "date" : ISODate("2016-04-29T05:45:31.271+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            super.setWeight(weight + ((1/3) * addWeight));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 51.7
        }, 
        {
            "date" : ISODate("2016-04-29T05:46:04.821+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            super.setWeight(weight + ((1/3) * addWeight));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 33.6
        }, 
        {
            "date" : ISODate("2016-04-29T05:46:24.470+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            super.setWeight(weight + ((1/3) * addWeight));\n            this.prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 19.6
        }, 
        {
            "date" : ISODate("2016-04-29T05:46:59.850+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            super.setWeight(weight + ((1/3) * addWeight));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 35.4
        }, 
        {
            "date" : ISODate("2016-04-29T05:47:20.502+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            super.setWeight(weight + ((double)(1/3) * addWeight));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 20.7
        }, 
        {
            "date" : ISODate("2016-04-29T05:48:17.974+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (double)(1/3);\n            super.setWeight(weight + (j * addWeight));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 57.4
        }, 
        {
            "date" : ISODate("2016-04-29T05:49:02.684+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (double)(1/3);\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 44.8
        }, 
        {
            "date" : ISODate("2016-04-29T05:49:09.138+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (double)(1/3);\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.6
        }, 
        {
            "date" : ISODate("2016-04-29T07:41:05.324+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (double)(1/3);\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 46.9
        }, 
        {
            "date" : ISODate("2016-04-29T07:41:12.725+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (double)(1/3);\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 7.6
        }, 
        {
            "date" : ISODate("2016-04-29T09:27:26.883+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (double)(1/3);\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 852.4
        }, 
        {
            "date" : ISODate("2016-04-29T09:28:17.653+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (1/3) * 1.0;\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 50.7
        }, 
        {
            "date" : ISODate("2016-04-29T09:28:36.150+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (1/3) * 1.0;\n            super.setWeight(weight + (addWeight * j);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 18.8
        }, 
        {
            "date" : ISODate("2016-04-29T09:28:49.287+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (1/3) * 1.0;\n            super.setWeight(weight + (addWeight * j));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 12.8
        }, 
        {
            "date" : ISODate("2016-04-29T09:29:20.403+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (1/3) * 1.0;\n            double total = weight + (addWeight * j)\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.4
        }, 
        {
            "date" : ISODate("2016-04-29T09:29:30.712+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (1/3) * 1.0;\n            double total = weight + (addWeight * j);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 10.1
        }, 
        {
            "date" : ISODate("2016-04-29T09:29:48.205+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (1/3) * 1.0;\n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 17.4
        }, 
        {
            "date" : ISODate("2016-04-29T09:30:02.018+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n           \n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-04-29T09:30:13.606+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 11.5
        }, 
        {
            "date" : ISODate("2016-04-29T09:30:19.875+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(6)
        }, 
        {
            "date" : ISODate("2016-04-29T09:30:25.170+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.4
        }, 
        {
            "date" : ISODate("2016-04-29T09:30:30.290+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 5.2
        }, 
        {
            "date" : ISODate("2016-04-29T09:30:36.761+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 6.6
        }, 
        {
            "date" : ISODate("2016-04-29T09:30:39.574+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 2.8
        }, 
        {
            "date" : ISODate("2016-04-29T09:30:43.850+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey)){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double total = weight + (addWeight/3.0);\n            super.setWeight(total);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 4.2
        }
    ]
}
{ 
    "_id" : "2jbthdbdJYLZnrjWg", 
    "userId" : "68LkTBk27sS7rTZ2u", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:32:11.206+0000"), 
    "updatedAt" : ISODate("2016-04-29T11:48:29.353+0000"), 
    "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            setWeight(getWeight()+getWeight()*1.0/6);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
    "status" : "FAIL", 
    "activeTime" : NumberInt(1311), 
    "totalActiveTime" : 3098.9000000000005, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T00:39:09.632+0000"), 
            "code" : "public class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        \n    }\n    \n    public boolean hasPrey(){\n        \n    }\n    \n    public Animal getPrey(){\n        \n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 404.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:42:11.518+0000"), 
            "code" : "public class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        \n    }\n    \n    public boolean hasPrey(){\n        \n    }\n    \n    public Animal getPrey(){\n        \n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 68.2
        }, 
        {
            "date" : ISODate("2016-04-29T00:45:54.870+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random(2);\n        \n        if (r == 0){\n            return true;\n            this.prey = prey;\n        }else{\n            return false;\n        }\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 188.9
        }, 
        {
            "date" : ISODate("2016-04-29T00:47:19.160+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        \n        if (randomNum == 0){\n            return true;\n            this.prey = prey;\n        }else{\n            return false;\n        }\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 52.8
        }, 
        {
            "date" : ISODate("2016-04-29T00:50:51.523+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        \n        if (randomNum == 0){\n            return true;\n            this.prey = prey;\n        }else{\n            return false;\n        }\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 30.3
        }, 
        {
            "date" : ISODate("2016-04-29T01:07:24.770+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        \n        if (randomNum == 0){\n            return true;\n            this.prey = prey;\n        }else{\n            return false;\n        }\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 31.8
        }, 
        {
            "date" : ISODate("2016-04-29T11:02:09.858+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        \n        if (randomNum == 0){\n            return true;\n            this.prey = prey;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 10.4
        }, 
        {
            "date" : ISODate("2016-04-29T11:06:04.805+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 116.8
        }, 
        {
            "date" : ISODate("2016-04-29T11:12:36.626+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            setWeight() = getWeight() + (getWeight*1.0/6);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 257.6
        }, 
        {
            "date" : ISODate("2016-04-29T11:12:50.762+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            setWeight() = getWeight() + (getWeight()*1.0/6);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 13.9
        }, 
        {
            "date" : ISODate("2016-04-29T11:13:48.202+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            setWeight(getWeight() + (getWeight()*1.0/6));\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 56.9
        }, 
        {
            "date" : ISODate("2016-04-29T11:14:45.637+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            setWeight((getWeight()*1.0/6));\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 57.4
        }, 
        {
            "date" : ISODate("2016-04-29T11:15:00.035+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            setWeight(1.0/6);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 14.4
        }, 
        {
            "date" : ISODate("2016-04-29T11:15:08.741+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            setWeight(1.0/6);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 8.7
        }, 
        {
            "date" : ISODate("2016-04-29T11:15:11.845+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            setWeight(1.0/6);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(3)
        }, 
        {
            "date" : ISODate("2016-04-29T11:22:21.910+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            super.setWeight(1.0/6);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 429.7
        }, 
        {
            "date" : ISODate("2016-04-29T11:22:35.955+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            super.setWeight(100);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(14)
        }, 
        {
            "date" : ISODate("2016-04-29T11:23:04.197+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n            setWeight(100);\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 28.2
        }, 
        {
            "date" : ISODate("2016-04-29T11:48:29.352+0000"), 
            "code" : "import java.util.*;\n\npublic class Lion extends Animal{\n    \n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int randomNum = r.nextInt(2);\n        boolean result = true;\n        if (randomNum == 0){\n            result = false;\n            this.prey = prey;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            setWeight(getWeight()+getWeight()*1.0/6);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : NumberInt(1311)
        }
    ]
}
{ 
    "_id" : "GDKyHinX7JoWQJNkh", 
    "userId" : "kL5wJ3qdYDvbWke7w", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : false, 
    "createdAt" : ISODate("2016-04-29T00:33:13.471+0000"), 
    "updatedAt" : ISODate("2016-04-29T12:51:18.272+0000"), 
    "code" : "public class Lion extends Animal {\n    private \n    public boolean hunt(Animal prey) {\n        Lions are able to hunt other Animals. \n        When they hunt, they have a 50% chance of successfully hunting their prey. \n        If they have successfully hunted their prey, store the prey in a field of \n        the class Lion. If the Lion has previously hunted and got a prey, replace the \n        old prey with the current prey. If they have been successful in hunting in any \n        way, return true. Otherwise, if they failed in hunting, return false.\n        \n        if (successhunt) {\n            Lion lion = new Animal(prey);\n        }\n        \n        \n    }\n    \n    public boolean hasPrey() {\n        if (\n        \n    }\n    \n    public Animal getPrey() {\n        eat()\n        \n    }\n}", 
    "status" : "COMPILE_ERROR", 
    "activeTime" : 638.2, 
    "totalActiveTime" : 638.2, 
    "history" : [
        {
            "date" : ISODate("2016-04-29T12:51:18.271+0000"), 
            "code" : "public class Lion extends Animal {\n    private \n    public boolean hunt(Animal prey) {\n        Lions are able to hunt other Animals. \n        When they hunt, they have a 50% chance of successfully hunting their prey. \n        If they have successfully hunted their prey, store the prey in a field of \n        the class Lion. If the Lion has previously hunted and got a prey, replace the \n        old prey with the current prey. If they have been successful in hunting in any \n        way, return true. Otherwise, if they failed in hunting, return false.\n        \n        if (successhunt) {\n            Lion lion = new Animal(prey);\n        }\n        \n        \n    }\n    \n    public boolean hasPrey() {\n        if (\n        \n    }\n    \n    public Animal getPrey() {\n        eat()\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 638.2
        }
    ]
}
{ 
    "_id" : "o9qRLRbZaoht6T9Te", 
    "userId" : "2nQpqcnFzxqqZyXQC", 
    "questionId" : "8xd3u57oobkYzCskL", 
    "completed" : true, 
    "createdAt" : ISODate("2016-04-29T00:31:07.362+0000"), 
    "updatedAt" : ISODate("2016-04-30T04:30:52.064+0000"), 
    "code" : "import java.util.*;\npublic class Lion extends Animal{\n    public Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal p){\n        Random d1 = new Random();//random no generator\n        int num1 = d1.nextInt(2);// 0, 1 excluding 2\n        if(num1 == 0){\n            prey = p;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            \n            double lionWeight = super.getWeight();\n            lionWeight = lionWeight + ((1.0/3.0)* prey.getWeight());\n            setWeight(lionWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
    "status" : "PASS", 
    "activeTime" : 92.7, 
    "totalActiveTime" : 4587.3, 
    "history" : [
        {
            "date" : ISODate("2016-04-30T04:25:33.360+0000"), 
            "code" : "public class Lion extends Animal{\n    public Animal prey;\n    \n    public Animal(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Animal(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal p){\n        Random d1 = new Random();//random no generator\n        int num1 = d1.nextInt(2);// 0, 1 excluding 2\n        if(num1 == 0){\n            prey = p;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            prey = null;\n            double lionWeight = super.getWeight();\n            lionWeight = lionWeight + ((1/3)* prey.getWeight());\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 4268.8
        }, 
        {
            "date" : ISODate("2016-04-30T04:26:43.681+0000"), 
            "code" : "public class Lion extends Animal{\n    public Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal p){\n        Random d1 = new Random();//random no generator\n        int num1 = d1.nextInt(2);// 0, 1 excluding 2\n        if(num1 == 0){\n            prey = p;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            prey = null;\n            double lionWeight = super.getWeight();\n            lionWeight = lionWeight + ((1/3)* prey.getWeight());\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 70.2
        }, 
        {
            "date" : ISODate("2016-04-30T04:27:20.654+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    public Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal p){\n        Random d1 = new Random();//random no generator\n        int num1 = d1.nextInt(2);// 0, 1 excluding 2\n        if(num1 == 0){\n            prey = p;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            prey = null;\n            double lionWeight = super.getWeight();\n            lionWeight = lionWeight + ((1/3)* prey.getWeight());\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
            "status" : "COMPILE_ERROR", 
            "activeTime" : 37.1
        }, 
        {
            "date" : ISODate("2016-04-30T04:27:39.321+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    public Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal p){\n        Random d1 = new Random();//random no generator\n        int num1 = d1.nextInt(2);// 0, 1 excluding 2\n        if(num1 == 0){\n            prey = p;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            prey = null;\n            double lionWeight = super.getWeight();\n            lionWeight = lionWeight + ((1/3)* prey.getWeight());\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 18.4
        }, 
        {
            "date" : ISODate("2016-04-30T04:28:44.735+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    public Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal p){\n        Random d1 = new Random();//random no generator\n        int num1 = d1.nextInt(2);// 0, 1 excluding 2\n        if(num1 == 0){\n            prey = p;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            \n            double lionWeight = super.getWeight();\n            lionWeight = lionWeight + ((1/3)* prey.getWeight());\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 65.5
        }, 
        {
            "date" : ISODate("2016-04-30T04:29:19.479+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    public Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal p){\n        Random d1 = new Random();//random no generator\n        int num1 = d1.nextInt(2);// 0, 1 excluding 2\n        if(num1 == 0){\n            prey = p;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            \n            double lionWeight = super.getWeight();\n            lionWeight = lionWeight + ((1.0/3.0)* prey.getWeight());\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
            "status" : "FAIL", 
            "activeTime" : 34.6
        }, 
        {
            "date" : ISODate("2016-04-30T04:30:52.063+0000"), 
            "code" : "import java.util.*;\npublic class Lion extends Animal{\n    public Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal p){\n        Random d1 = new Random();//random no generator\n        int num1 = d1.nextInt(2);// 0, 1 excluding 2\n        if(num1 == 0){\n            prey = p;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            \n            double lionWeight = super.getWeight();\n            lionWeight = lionWeight + ((1.0/3.0)* prey.getWeight());\n            setWeight(lionWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
            "status" : "PASS", 
            "activeTime" : 92.7
        }
    ]
}
