{ 
    "_id" : "wbMFX8tnvj5JPY9L3", 
    "data" : {
        "v" : NumberInt(57), 
        "meta" : {
            "mtime" : 1452065942301.0, 
            "ctime" : 1452065942301.0
        }, 
        "snapshot" : "public static int add(int a, int b){\n    return a+b;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "CQGdnrXtEWLPiDuKM", 
    "data" : {
        "v" : NumberInt(145), 
        "meta" : {
            "mtime" : 1452068719989.0, 
            "ctime" : 1452068719989.0
        }, 
        "snapshot" : "public static int calculate(double x, int y, int z){\n    \n    int xInt = (int) x;\n    \n    int subtracted = xInt - y;\n    \n    return subtracted/z;\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LehegBkxTgBEF8JEm", 
    "data" : {
        "v" : NumberInt(100), 
        "meta" : {
            "mtime" : 1452068838190.0, 
            "ctime" : 1452068838190.0
        }, 
        "snapshot" : "public static void quotify(String str){\n    \n    \n    \n    System.out.println(\"\\\"\" + str + \"\\\"\" );\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ubk3weFEXwkTgmbrb", 
    "data" : {
        "v" : NumberInt(88), 
        "meta" : {
            "mtime" : 1452068933123.0, 
            "ctime" : 1452068933123.0
        }, 
        "snapshot" : "public static double doubleInt(int a, int b){\n    \n    \n    \n    return (double) a + b;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "iDjBNfa3GtXdbg9pf", 
    "data" : {
        "v" : NumberInt(256), 
        "meta" : {
            "mtime" : 1452068995322.0, 
            "ctime" : 1452068995322.0
        }, 
        "snapshot" : "\npublic static void flippedTriangle(int height){\n    \n    for (int i = 1; i <= height; i++){\n        \n        for(int empty = i; empty < height; empty++){\n            System.out.print(\" \");\n        }\n        for (int ast = i; ast > 0; ast-- ){\n            System.out.print(\"*\");\n        }\n        System.out.println();\n        \n        \n    }\n    \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "vrDrsTDQzvxCrTMbo", 
    "data" : {
        "v" : NumberInt(361), 
        "meta" : {
            "mtime" : 1452141573517.0, 
            "ctime" : 1452141573517.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "dyhqiivYQAzD2FfPa", 
    "data" : {
        "v" : NumberInt(362), 
        "meta" : {
            "mtime" : 1452141566296.0, 
            "ctime" : 1452141566296.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LvMB3M9Qq3CePtswt", 
    "data" : {
        "v" : NumberInt(297), 
        "meta" : {
            "mtime" : 1452141520467.0, 
            "ctime" : 1452141520467.0
        }, 
        "snapshot" : "\n    public static void main(String [] args){\n        \n        helloWorld(2);\n    \n        \n    }\n    \n    public static void helloWorld (int n) {\n        \n        for(int i = 0; i<n;i++){\n            System.out.println(\"Hello World!\");    \n        }\n        \n        \n    }\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "rYCeACwN5Cxrergja", 
    "data" : {
        "v" : NumberInt(121), 
        "meta" : {
            "mtime" : 1452141582549.0, 
            "ctime" : 1452141582549.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "gk6w6xF3JRPKE5hiT", 
    "data" : {
        "v" : NumberInt(415), 
        "meta" : {
            "mtime" : 1452141593870.0, 
            "ctime" : 1452141593870.0
        }, 
        "snapshot" : "//just writing the method is sufficient, you may omit the class\n\n    \n    public static void helloWorld(int n){\n    \n        for (int i = 0; i < n; i++){\n        \n        System.out.println(\"Hello World!\");\n        \n        }\n    }\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "6GwdAmJ334sNJvLQo", 
    "data" : {
        "v" : NumberInt(418), 
        "meta" : {
            "mtime" : 1452141502143.0, 
            "ctime" : 1452141502143.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "x3QM9pZNsN3jFdcjZ", 
    "data" : {
        "v" : NumberInt(111), 
        "meta" : {
            "mtime" : 1452141501506.0, 
            "ctime" : 1452141501506.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "KiHHZYBS5kLqQn2i9", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452144528195.0, 
            "ctime" : 1452144528195.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "25kRJdwPzFd6Zuk2Z", 
    "data" : {
        "v" : NumberInt(629), 
        "meta" : {
            "mtime" : 1452141506650.0, 
            "ctime" : 1452141506650.0
        }, 
        "snapshot" : "//you only need this, with the proper method name\npublic static void sayHi(){\n    for(int i = 0; i < 6; i++){\n        System.out.println(\"helloWorld!\");\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "F2LYrgr7iPiRDbbBS", 
    "data" : {
        "v" : NumberInt(193), 
        "meta" : {
            "mtime" : 1452141520093.0, 
            "ctime" : 1452141520093.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "iZTtFPR5YtNPMtkqi", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452149827477.0, 
            "ctime" : 1452149827477.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "9aeuDPs7wfDWMKR39", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452186046043.0, 
            "ctime" : 1452186046043.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "xREbqjbLFZTXwbTTg", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452228065216.0, 
            "ctime" : 1452228065216.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "sXqBaSuYvimnJtq52", 
    "data" : {
        "v" : NumberInt(106), 
        "meta" : {
            "mtime" : 1451974629273.0, 
            "ctime" : 1451974629273.0
        }, 
        "snapshot" : "public int adder(int a, int b) {\n    return a + b;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ciydQM9rrJTvHpijv", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451977930941.0, 
            "ctime" : 1451977930941.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "8KGgPiiD8tLvhKXDF", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451978340296.0, 
            "ctime" : 1451978340296.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "bqy2vNTnyezZ4hTjH", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451980631730.0, 
            "ctime" : 1451980631730.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "XcrY6EhacBKhsGcAs", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451980634503.0, 
            "ctime" : 1451980634503.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "JCfAMTMKrWSRuE3Zb", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451981346268.0, 
            "ctime" : 1451981346268.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "2cDpyzrzW7fMYtgqY", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452000445818.0, 
            "ctime" : 1452000445818.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "KKQAzrCAWdAsxynaS", 
    "data" : {
        "v" : NumberInt(52), 
        "meta" : {
            "mtime" : 1452000459928.0, 
            "ctime" : 1452000459928.0
        }, 
        "snapshot" : "public static int add(int a, int b) {\n    return a + b;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LtfY3sfqJ6Q5z8PrL", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452000507279.0, 
            "ctime" : 1452000507279.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "xTxj5iz785bzyyw5n", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452000908552.0, 
            "ctime" : 1452000908552.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "QwTcdzzCBQNH8b6C3", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452000915024.0, 
            "ctime" : 1452000915024.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "D7YtoY2rxe8aiixxk", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452001124052.0, 
            "ctime" : 1452001124052.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "hHHz5GMCJeLFyCjEv", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452001137803.0, 
            "ctime" : 1452001137803.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "wdzZbffweuTzDEapv", 
    "data" : {
        "v" : NumberInt(95), 
        "meta" : {
            "mtime" : 1452005936687.0, 
            "ctime" : 1452005936687.0
        }, 
        "snapshot" : "public static int adder(int a, int b){\n    return a + b\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Rikv379BsQnfcP4fB", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452007437369.0, 
            "ctime" : 1452007437369.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "aBjkkxrTPtu8GTHrJ", 
    "data" : {
        "v" : NumberInt(87), 
        "meta" : {
            "mtime" : 1452052226585.0, 
            "ctime" : 1452052226585.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for (int i=0; i<n;i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ZPDD3QxNJNftreA9W", 
    "data" : {
        "v" : NumberInt(120), 
        "meta" : {
            "mtime" : 1452054030531.0, 
            "ctime" : 1452054030531.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }kk\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "xeJKFzv2DaieutLzN", 
    "data" : {
        "v" : NumberInt(186), 
        "meta" : {
            "mtime" : 1452054041796.0, 
            "ctime" : 1452054041796.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    int count = Math.abs(n);\n    for(int i = 0; i < count; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "485FrHELN3xrJfc9Q", 
    "data" : {
        "v" : NumberInt(175), 
        "meta" : {
            "mtime" : 1452054064466.0, 
            "ctime" : 1452054064466.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n>0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        } \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6TCavHC6ZfXtYwvyG", 
    "data" : {
        "v" : NumberInt(310), 
        "meta" : {
            "mtime" : 1452054024893.0, 
            "ctime" : 1452054024893.0
        }, 
        "snapshot" : "public static void helloWorld(int x){\n    if(x >= 0){\n\t    for(int i = 0; i < x; i++){\n\t        System.out.println(\"Hello World!\");\n\t        \n\t    }\n    }    \n\t    \n}\t", 
        "type" : "text"
    }
}
{ 
    "_id" : "5MfSESh3JThBKKriE", 
    "data" : {
        "v" : NumberInt(240), 
        "meta" : {
            "mtime" : 1452054068703.0, 
            "ctime" : 1452054068703.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n > 0){\n        for(int i = 0;i < n;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "ssfnSdiBntafRN9La", 
    "data" : {
        "v" : NumberInt(116), 
        "meta" : {
            "mtime" : 1452054114870.0, 
            "ctime" : 1452054114870.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "o5Mnw6okqBBXnPmEK", 
    "data" : {
        "v" : NumberInt(124), 
        "meta" : {
            "mtime" : 1452054081131.0, 
            "ctime" : 1452054081131.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int x = 0; x < n ; x++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "a3dzSb8JEavXaHMFf", 
    "data" : {
        "v" : NumberInt(204), 
        "meta" : {
            "mtime" : 1452054050448.0, 
            "ctime" : 1452054050448.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n < 0){\n        return;\n    }else{\n        for(int i = 1; i <= n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "88vHSs3pnL3acdcJe", 
    "data" : {
        "v" : NumberInt(208), 
        "meta" : {
            "mtime" : 1452054019821.0, 
            "ctime" : 1452054019821.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rTKLEAiJiWnAugPyi", 
    "data" : {
        "v" : NumberInt(372), 
        "meta" : {
            "mtime" : 1452054001218.0, 
            "ctime" : 1452054001218.0
        }, 
        "snapshot" : "    public static void helloWorld(int n) {\n        for (int i=0 ; i<n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "g34mpfsiT4RDEAreg", 
    "data" : {
        "v" : NumberInt(210), 
        "meta" : {
            "mtime" : 1452054048096.0, 
            "ctime" : 1452054048096.0
        }, 
        "snapshot" : "\n    public static void main(String [] args){\n        helloWorld(8);\n    }\n    public static void helloWorld(int n){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n            \n    }\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "7ap7fA2a59ppsYacT", 
    "data" : {
        "v" : NumberInt(136), 
        "meta" : {
            "mtime" : 1452053997176.0, 
            "ctime" : 1452053997176.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 1; i <= n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rZeg5B28m2XjqQvmS", 
    "data" : {
        "v" : NumberInt(198), 
        "meta" : {
            "mtime" : 1452054027275.0, 
            "ctime" : 1452054027275.0
        }, 
        "snapshot" : "public static void helloWorld(int num){\n    for (int i = 0; i< num; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qmrGmXuxjoxKQQRNi", 
    "data" : {
        "v" : NumberInt(340), 
        "meta" : {
            "mtime" : 1452054113514.0, 
            "ctime" : 1452054113514.0
        }, 
        "snapshot" : "public static void helloWorld (int x){\n    for (int i = 0; i < x; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "r7F9SxNsiyKo6SPuw", 
    "data" : {
        "v" : NumberInt(98), 
        "meta" : {
            "mtime" : 1452054031259.0, 
            "ctime" : 1452054031259.0
        }, 
        "snapshot" : "public static void helloWorld (int n){\n    if(n>=0){\n\n        for(int i =0;i<n;i++){\n            System.out.println(\"Hello World!\");\n            \n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "9C7eGWWKu9HSXXfer", 
    "data" : {
        "v" : NumberInt(312), 
        "meta" : {
            "mtime" : 1452054199991.0, 
            "ctime" : 1452054199991.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "hj7ZApYsqCKSWhXpK", 
    "data" : {
        "v" : NumberInt(133), 
        "meta" : {
            "mtime" : 1452054141761.0, 
            "ctime" : 1452054141761.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n>0){\n      for(int i = 0; i < n; i++){\n          System.out.println(\"Hello World!\");\n      }  \n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jvc6hFf2P7LWtaiKB", 
    "data" : {
        "v" : NumberInt(266), 
        "meta" : {
            "mtime" : 1452054042680.0, 
            "ctime" : 1452054042680.0
        }, 
        "snapshot" : "\n    public static void helloWorld(int n) {\n\n        for(int i=1;i<=n;i++){\n        System.out.println(\"Hello World!\");\n        }\n    }\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "iQw6othRyNbrEBkYz", 
    "data" : {
        "v" : NumberInt(129), 
        "meta" : {
            "mtime" : 1452054239553.0, 
            "ctime" : 1452054239553.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for ( int i = 0 ; i < n ; i++ ) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "q6bSHCKQ9uzcSncqB", 
    "data" : {
        "v" : NumberInt(183), 
        "meta" : {
            "mtime" : 1452054124119.0, 
            "ctime" : 1452054124119.0
        }, 
        "snapshot" : "public static void helloWorld (int n){\n    if(n >= 0) {\n        for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    } else {\n        System.out.println(\"Input must be positive!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "RTczWWbscp78DHW7G", 
    "data" : {
        "v" : NumberInt(190), 
        "meta" : {
            "mtime" : 1452054172559.0, 
            "ctime" : 1452054172559.0
        }, 
        "snapshot" : "    public static void helloWorld(int n){\n        for(int k=0;k<n;k++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "W4HTpniNBxj4jzyfP", 
    "data" : {
        "v" : NumberInt(125), 
        "meta" : {
            "mtime" : 1452054077269.0, 
            "ctime" : 1452054077269.0
        }, 
        "snapshot" : "public static void helloWorld(int k){\n    \n    if(k>=1){\n        for(int i= 1;i<=k;i++){\n            System.out.println(\"Hello World!\");\n            \n        }\n        \n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "8RsyboSdycnQKPSbg", 
    "data" : {
        "v" : NumberInt(366), 
        "meta" : {
            "mtime" : 1452054109924.0, 
            "ctime" : 1452054109924.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n       \n    for (int i = 1; i <=n; i++){\n        System.out.println(\"Hello World!\");\n    }\n\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "2W5sNrqtxc48FQktp", 
    "data" : {
        "v" : NumberInt(162), 
        "meta" : {
            "mtime" : 1452054372746.0, 
            "ctime" : 1452054372746.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    \n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "enLBQammzsfXw25NJ", 
    "data" : {
        "v" : NumberInt(496), 
        "meta" : {
            "mtime" : 1452054236037.0, 
            "ctime" : 1452054236037.0
        }, 
        "snapshot" : "\n    public static void helloWorld(int n){\n        \n        if(n >=0){\n            \n            for(int i=0;i<n;i++){\n                System.out.println(\"Hello World!\");\n            }\n            \n        }\n    \n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "fPv5iLkcXNvpRN8ab", 
    "data" : {
        "v" : NumberInt(151), 
        "meta" : {
            "mtime" : 1452055140813.0, 
            "ctime" : 1452055140813.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    if (n >= 0) {\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cahCYZ27DjL43y7To", 
    "data" : {
        "v" : NumberInt(119), 
        "meta" : {
            "mtime" : 1452054241035.0, 
            "ctime" : 1452054241035.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n>0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "eg2MDt8wbWRYLPXQL", 
    "data" : {
        "v" : NumberInt(450), 
        "meta" : {
            "mtime" : 1452060737589.0, 
            "ctime" : 1452060737589.0
        }, 
        "snapshot" : "\n    public static void helloWorld(int n){\n        \n        if(n>0) {\n            for(int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n            }\n        }\n        \n    }\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "huy6niyWkrRAqKkBK", 
    "data" : {
        "v" : NumberInt(269), 
        "meta" : {
            "mtime" : 1452054074475.0, 
            "ctime" : 1452054074475.0
        }, 
        "snapshot" : "public static void helloWorld(int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "RomhCRP6gjtgfwFbK", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452065953654.0, 
            "ctime" : 1452065953654.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "CtvxrpNgGXMnuMfmT", 
    "data" : {
        "v" : NumberInt(120), 
        "meta" : {
            "mtime" : 1452066131771.0, 
            "ctime" : 1452066131771.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    \n    for (int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "QTcP25QyF79aGyK62", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452066586063.0, 
            "ctime" : 1452066586063.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "REPrJ8iXHkDg8Mscd", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452067080381.0, 
            "ctime" : 1452067080381.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "jAnn7tYe9HW4fKbHe", 
    "data" : {
        "v" : NumberInt(170), 
        "meta" : {
            "mtime" : 1452066847285.0, 
            "ctime" : 1452066847285.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n\n    return email.substring(0,email.indexOf('@'));\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "koMXhsre5ziHdJt9d", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452067761709.0, 
            "ctime" : 1452067761709.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "wvD7P9jvHw4cPBsph", 
    "data" : {
        "v" : NumberInt(135), 
        "meta" : {
            "mtime" : 1452069732944.0, 
            "ctime" : 1452069732944.0
        }, 
        "snapshot" : "public static int power (int base, int exponent){\n    \n    return (int) java.lang.Math.pow(base, exponent);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "gWqvyA5WWdvKc7hQv", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452069896833.0, 
            "ctime" : 1452069896833.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "JQbFmSECHDB84JY7j", 
    "data" : {
        "v" : NumberInt(28), 
        "meta" : {
            "mtime" : 1452069909759.0, 
            "ctime" : 1452069909759.0
        }, 
        "snapshot" : "", 
        "type" : "text"
    }
}
{ 
    "_id" : "A52DJZADxRB9HfPdm", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452069930269.0, 
            "ctime" : 1452069930269.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "QbNZEoCCJLBPacW2F", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452069946836.0, 
            "ctime" : 1452069946836.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "2gZTovt22BSCRqXPw", 
    "data" : {
        "v" : NumberInt(111), 
        "meta" : {
            "mtime" : 1452141508409.0, 
            "ctime" : 1452141508409.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "SSy6gRcBTrHhsTQNP", 
    "data" : {
        "v" : NumberInt(177), 
        "meta" : {
            "mtime" : 1452141508519.0, 
            "ctime" : 1452141508519.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "6afpW65z7nvrBge3g", 
    "data" : {
        "v" : NumberInt(370), 
        "meta" : {
            "mtime" : 1452141539316.0, 
            "ctime" : 1452141539316.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i=0; i<n ; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "xuw8YzJva7KFsyjvX", 
    "data" : {
        "v" : NumberInt(339), 
        "meta" : {
            "mtime" : 1452141510403.0, 
            "ctime" : 1452141510403.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 1 ; i<=n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "wcQPasjdzmQck6aRS", 
    "data" : {
        "v" : NumberInt(130), 
        "meta" : {
            "mtime" : 1452141511477.0, 
            "ctime" : 1452141511477.0
        }, 
        "snapshot" : "public static void helloWorld (int n){\n    for(int i = 0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "idrFyiyxGNvEgDv7F", 
    "data" : {
        "v" : NumberInt(393), 
        "meta" : {
            "mtime" : 1452141518034.0, 
            "ctime" : 1452141518034.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if (n > 0){\n        for (int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }   \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "C8QgLE2KgiKz8buey", 
    "data" : {
        "v" : NumberInt(193), 
        "meta" : {
            "mtime" : 1452141526127.0, 
            "ctime" : 1452141526127.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i =0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "hwYQAayBsEaL2FK2H", 
    "data" : {
        "v" : NumberInt(140), 
        "meta" : {
            "mtime" : 1452141509072.0, 
            "ctime" : 1452141509072.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "eukY92DaWdtNiL8XY", 
    "data" : {
        "v" : NumberInt(172), 
        "meta" : {
            "mtime" : 1452141510759.0, 
            "ctime" : 1452141510759.0
        }, 
        "snapshot" : "public static void helloWorld (int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "H5byezFftT5Zgsc4h", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452141870701.0, 
            "ctime" : 1452141870701.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "NNdmahB3wxZBuHiy6", 
    "data" : {
        "v" : NumberInt(206), 
        "meta" : {
            "mtime" : 1452141524275.0, 
            "ctime" : 1452141524275.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    \n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n    \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "2AKyPNkJdCdbGy3a6", 
    "data" : {
        "v" : NumberInt(167), 
        "meta" : {
            "mtime" : 1452141637539.0, 
            "ctime" : 1452141637539.0
        }, 
        "snapshot" : "\tpublic static void helloWorld(int n){\n\t   for(int i=0;i<n;i++){\n\t       System.out.println(\"Hello World!\");\n\t   } \n\t}", 
        "type" : "text"
    }
}
{ 
    "_id" : "BaSQ6cSyMoGmSzcJ4", 
    "data" : {
        "v" : NumberInt(370), 
        "meta" : {
            "mtime" : 1452141500835.0, 
            "ctime" : 1452141500835.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "26x5dpJAXYEAPRGrJ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452142326490.0, 
            "ctime" : 1452142326490.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "uRwbhk2dMDpC7HKyZ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452144438595.0, 
            "ctime" : 1452144438595.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "tNpfMDCBGKMqg3ofP", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452146035072.0, 
            "ctime" : 1452146035072.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Yb5iRCmMjBcL2CWne", 
    "data" : {
        "v" : NumberInt(20), 
        "meta" : {
            "mtime" : 1452146471823.0, 
            "ctime" : 1452146471823.0
        }, 
        "snapshot" : "for (int i = 0 ; i)", 
        "type" : "text"
    }
}
{ 
    "_id" : "ConFkQ4NBsMgGgMcJ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452151186125.0, 
            "ctime" : 1452151186125.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ff5kQBauE2jex3C9a", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452153327999.0, 
            "ctime" : 1452153327999.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "vKJQzrvACWM6TMCN4", 
    "data" : {
        "v" : NumberInt(324), 
        "meta" : {
            "mtime" : 1452171047302.0, 
            "ctime" : 1452171047302.0
        }, 
        "snapshot" : "public class Book {\n    private String title;\n    private int price;\n    \n    public void setTitle(String _title) {\n        title = _title;\n    }\n    \n    public void setPrice(int _price) {\n        price = _price;\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public int getPrice() {\n        return price;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cXv5sJzFEfKZWMjEf", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452177339278.0, 
            "ctime" : 1452177339278.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "DQiuRKejRffzXbbS7", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452178128222.0, 
            "ctime" : 1452178128222.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "bsx7roNvBjb2YqvCt", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452224241147.0, 
            "ctime" : 1452224241147.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Naec4QXe9wLwD4Hnr", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452230450941.0, 
            "ctime" : 1452230450941.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "P4Gasy3k2m26EpN35", 
    "data" : {
        "v" : NumberInt(130), 
        "meta" : {
            "mtime" : 1452261504622.0, 
            "ctime" : 1452261504622.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    return email.substring(0, email.length() - 11);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ZD2AvCcRQpvnpq2vN", 
    "data" : {
        "v" : NumberInt(77), 
        "meta" : {
            "mtime" : 1451646711374.0, 
            "ctime" : 1451646711374.0
        }, 
        "snapshot" : "public static int power(int b, int e) {\n    return (int) Math.pow(b, e);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "4WFNY82JXaCd5ZEPL", 
    "data" : {
        "v" : NumberInt(158), 
        "meta" : {
            "mtime" : 1451646895150.0, 
            "ctime" : 1451646895150.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter c = supermarket.getCounter(counterNumber);\n    if(c != null){\n        return c.setCashier(cashier);\n    }\n    return false;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "QWZK7HgKjxFvjwhJw", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451647220200.0, 
            "ctime" : 1451647220200.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "tidnboJkGL2frTjXA", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451647266103.0, 
            "ctime" : 1451647266103.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "YP6iiXmvRxY7mFkbD", 
    "data" : {
        "v" : NumberInt(257), 
        "meta" : {
            "mtime" : 1451647968440.0, 
            "ctime" : 1451647968440.0
        }, 
        "snapshot" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int count = 0;\n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            if(c.getNumCustomersInQueue() == 0){\n                count++;\n            }\n        }\n        \n    }\n    return count;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qc6zsNQW2aSfHyYpH", 
    "data" : {
        "v" : NumberInt(374), 
        "meta" : {
            "mtime" : 1451648470710.0, 
            "ctime" : 1451648470710.0
        }, 
        "snapshot" : "public static String  retrieveStatusOfAllCounters(Supermarket supermarket) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        sb.append(i + \"-\");\n        if(c != null){\n            if(c.getCashier() != null){\n                sb.append(\"open\");\n            } else{\n                sb.append(\"closed\");\n            }\n        } else {\n            sb.append(\"closed\");\n        }\n        if(i != supermarket.getNumCounters()){\n            sb.append(\", \");\n        }\n    }\n    sb.append(\"]\");\n    return sb.toString();\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "42rHTgNAZZ5wEphiu", 
    "data" : {
        "v" : NumberInt(637), 
        "meta" : {
            "mtime" : 1451649288021.0, 
            "ctime" : 1451649288021.0
        }, 
        "snapshot" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int counterNum = -1;\n    double percentage = 0.0;\n    \n    for(int i = 1; i <= supermarket.getNumCounters(); i++){\n        Counter c = supermarket.getCounter(i);\n        if(c != null){\n            int numSeniors = 0;\n            for(int j = 1; j <= c.getNumCustomersInQueue(); j++){\n                Customer cus = c.getCustomerAtPosition(j);\n                if(cus.getAge() >= 60){\n                    numSeniors++;\n                }\n            }\n            double curPercentage = (double)numSeniors / c.getNumCustomersInQueue();\n            if(curPercentage > percentage){\n                counterNum = i;\n                percentage = curPercentage;\n            }\n        }\n    }\n    \n    return counterNum;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "x9mJLFe7nND7xM4nB", 
    "data" : {
        "v" : NumberInt(341), 
        "meta" : {
            "mtime" : 1451650689705.0, 
            "ctime" : 1451650689705.0
        }, 
        "snapshot" : "public static String printPattern(String word, char ch){\n    if(word == null){\n        return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < word.length(); i++){\n        char c = word.charAt(i);\n        sb.append(c);\n        if(i != word.length() - 1){\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "epXKR9LwzDpcCGWXD", 
    "data" : {
        "v" : NumberInt(452), 
        "meta" : {
            "mtime" : 1451653561467.0, 
            "ctime" : 1451653561467.0
        }, 
        "snapshot" : "public static void printCheckerBoard(String input, int row, int col){\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if((i+j) % 2 == 0){\n                printStars(input);\n            } else{\n                System.out.print(input);\n            }\n        }\n        if(i != row - 1){\n            System.out.println(\"\");\n        }\n    }\n}\n\nprivate static void printStars(String input){\n    for(int i = 0; i < input.length(); i++){\n        System.out.print(\"*\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "AAYJ3HkZBpaSTjQz9", 
    "data" : {
        "v" : NumberInt(470), 
        "meta" : {
            "mtime" : 1451655192347.0, 
            "ctime" : 1451655192347.0
        }, 
        "snapshot" : "public static String translateMessage(MessageTranslator translator, String secretMessage) {\n    return null;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ngyeuy94AQaKfbHeW", 
    "data" : {
        "v" : NumberInt(20), 
        "meta" : {
            "mtime" : 1451665020542.0, 
            "ctime" : 1451665020542.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;         // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "smRLhzSbzpnLDLFxm", 
    "data" : {
        "v" : NumberInt(22), 
        "meta" : {
            "mtime" : 1451665548347.0, 
            "ctime" : 1451665548347.0
        }, 
        "snapshot" : "public class Tester {\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "25JmGcMa2XKvZWKCw", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451667875456.0, 
            "ctime" : 1451667875456.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "eq5hundtsYBLXegGA", 
    "data" : {
        "v" : NumberInt(152), 
        "meta" : {
            "mtime" : 1451670927420.0, 
            "ctime" : 1451670927420.0
        }, 
        "snapshot" : "public static int addPositive(int a, int b){\n    if(a <= 0 || b <= 0){\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "DjErDzZXznA8Cq5nH", 
    "data" : {
        "v" : NumberInt(163), 
        "meta" : {
            "mtime" : 1451673795252.0, 
            "ctime" : 1451673795252.0
        }, 
        "snapshot" : "public static int addPositive(int a, int b) {\n    if (a <= 0 || b <= 0) {\n        throw new IllegalArgumentException(\"Only positive integers allowed!\");\n    }\n    return a + b;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qHPAJKj6AYo57DxeG", 
    "data" : {
        "v" : NumberInt(3), 
        "meta" : {
            "mtime" : 1451673889621.0, 
            "ctime" : 1451673889621.0
        }, 
        "snapshot" : "asd", 
        "type" : "text"
    }
}
{ 
    "_id" : "kmwuiR8FrAxcyF84i", 
    "data" : {
        "v" : NumberInt(422), 
        "meta" : {
            "mtime" : 1451718592257.0, 
            "ctime" : 1451718592257.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    Counter counter = supermarket.getCounter(counterNumber);\n    if (counter == null) {\n        return false;\n    }\n    if (counter.getCashier() != null) {\n        return false;\n    } else {\n        counter.setCashier(cashier);\n        return true;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Hb6au2Jr5RTK85q6b", 
    "data" : {
        "v" : NumberInt(332), 
        "meta" : {
            "mtime" : 1451718932961.0, 
            "ctime" : 1451718932961.0
        }, 
        "snapshot" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n    int noQueue = 0;\n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getNumCustomersInQueue() == 0) {\n            noQueue++;\n        }\n    }\n    return noQueue;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "vBRD7WE7HZfa9Fuje", 
    "data" : {
        "v" : NumberInt(543), 
        "meta" : {
            "mtime" : 1451719126977.0, 
            "ctime" : 1451719126977.0
        }, 
        "snapshot" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    String toReturn = \"[\";\n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        String status = \"open\";\n        if (counter.getCashier() == null) {\n            status = \"closed\";\n        }\n        toReturn = toReturn + i + \"-\" + status;\n        if (i+1 > supermarket.getNumCounters()) {\n            toReturn = toReturn + \"]\";\n        } else {\n            toReturn = toReturn + \", \";\n        }\n    }\n    return toReturn;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "kR5QbTh7FTybM2H2x", 
    "data" : {
        "v" : NumberInt(659), 
        "meta" : {
            "mtime" : 1451719516040.0, 
            "ctime" : 1451719516040.0
        }, 
        "snapshot" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int toReturn = -1;\n    double percentage = 0;\n    \n    for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n        Counter counter = supermarket.getCounter(i);\n        int snr = 0;\n        for (int j = 1; j <= counter.getNumCustomersInQueue(); j++) {\n            Customer customer = counter.getCustomerAtPosition(j);\n            if (customer.getAge() >= 60) {\n                snr++;\n            }\n        }\n        double currentPercentage = (double) snr / counter.getNumCustomersInQueue();\n        if (currentPercentage > percentage) {\n            percentage = currentPercentage;\n            toReturn = counter.getId();\n        }\n    }\n    return toReturn;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6BM7vcoQHfu6qR92i", 
    "data" : {
        "v" : NumberInt(369), 
        "meta" : {
            "mtime" : 1451719941175.0, 
            "ctime" : 1451719941175.0
        }, 
        "snapshot" : "public static String printPattern(String word, char ch) {\n    String toReturn = \"\";\n    \n    if (word == null || word.length() == 0) {\n        return toReturn;\n    }\n    \n    for (int i = 0; i < word.length(); i++) {\n        toReturn += \"\" + word.charAt(i);\n        if (i+1 < word.length()) {\n            toReturn += \"\" + ch;\n        }\n    }\n    return toReturn;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "vYonX7Pkm5jB2tbAb", 
    "data" : {
        "v" : NumberInt(729), 
        "meta" : {
            "mtime" : 1451720279194.0, 
            "ctime" : 1451720279194.0
        }, 
        "snapshot" : "public static void printCheckerBoard(String word, int r, int c) {\n    String stars = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        stars += \"*\";\n    }\n    \n    for (int i = 1; i <= r; i++) {\n        if (i % 2 == 1) {\n            for (int j = 1; j < c; j+=2) {\n                System.out.print(stars);\n                System.out.print(word);\n                if(j+2 == c) {\n                    System.out.print(stars);\n                }\n            }\n        } else {\n            for (int j = 1; j < c; j+=2) {\n                System.out.print(word);\n                System.out.print(stars);\n                if (j+2 == c) {\n                    System.out.print(word);\n                }\n            }\n        }\n        System.out.println();\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "KzZJ4nLx29xy6okuv", 
    "data" : {
        "v" : NumberInt(1356), 
        "meta" : {
            "mtime" : 1451721018415.0, 
            "ctime" : 1451721018415.0
        }, 
        "snapshot" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    //extract each String that is separated by '|'\n    //decode the String\n    //store in toReturn container\n    \n    String toReturn = \"\";\n    \n    for (int i = 0; i < secretMessage.length(); i+=0) {\n        int indexOfPipe = secretMessage.indexOf('|');\n        if (indexOfPipe != -1) {\n            String secret = secretMessage.substring(i, indexOfPipe);\n            char ch = messageTranslator.decode(secret);\n            if (ch == '#') {\n                ch = ' ';\n            }\n            toReturn += \"\" + ch;\n            secretMessage = secretMessage.substring(indexOfPipe+1);\n        } else {\n            char ch = messageTranslator.decode(secretMessage);\n            toReturn += \"\" + ch;\n            break;\n        }\n    }\n    //toReturn.replaceAll(\"#\", \" \");\n    return toReturn;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "o3Z7xyYksdysDwvx4", 
    "data" : {
        "v" : NumberInt(354), 
        "meta" : {
            "mtime" : 1451723390881.0, 
            "ctime" : 1451723390881.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n       \n        boolean assignmentSuccess = false;\n        if (supermarket.getCounter(counterNumber) != null) {\n            Counter toAssign = supermarket.getCounter(counterNumber);\n            if (toAssign.setCashier(cashier)) {\n                toAssign.setCashier(cashier);\n                assignmentSuccess = true;\n            }\n        }\n        return assignmentSuccess;\n    }\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "QmPKSx4WxzYyhHEy4", 
    "data" : {
        "v" : NumberInt(266), 
        "meta" : {
            "mtime" : 1451724724534.0, 
            "ctime" : 1451724724534.0
        }, 
        "snapshot" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n        int CnoQ = 0;\n        for (int i = 1; i <= supermarket.getNumCounters(); i++) {\n            Counter c = supermarket.getCounter(i);\n            if (c.getNumCustomersInQueue() == 0) {\n                CnoQ++;\n            }\n        }\n        return CnoQ;\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "PqK7aeBvbPrb9owKW", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451727747901.0, 
            "ctime" : 1451727747901.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "EMqKC538oa4XREmao", 
    "data" : {
        "v" : NumberInt(239), 
        "meta" : {
            "mtime" : 1451742982286.0, 
            "ctime" : 1451742982286.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    if (supermarket.getCounter(counterNumber) != null) {\n        Counter counter = supermarket.getCounter(counterNumber);\n        boolean isTaken = counter.setCashier(cashier);\n        if (isTaken) {\n            return true;\n        }\n    }\n    return false;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "WoAT7mZ7DX7CWRP6H", 
    "data" : {
        "v" : NumberInt(286), 
        "meta" : {
            "mtime" : 1451743360510.0, 
            "ctime" : 1451743360510.0
        }, 
        "snapshot" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n    int numOfCounters = supermarket.getNumCounters();\n    int numOfEmptyCounters = 0;\n    for (int i = 1; i <= numOfCounters; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getNumCustomersInQueue() == 0) {\n            numOfEmptyCounters++;\n        }\n    }\n    return numOfEmptyCounters;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LteMHJGjdYenr2a8S", 
    "data" : {
        "v" : NumberInt(507), 
        "meta" : {
            "mtime" : 1451743620597.0, 
            "ctime" : 1451743620597.0
        }, 
        "snapshot" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int totalCounters = supermarket.getNumCounters();\n    String status = \"[\";\n    if (supermarket.getCounter(1).getCashier() == null) {\n        status += \"1-closed\";\n    }\n    else {\n        status += \"1-open\";\n    }\n    if (totalCounters > 1) {\n        for (int i = 2; i <= totalCounters; i++) {\n            Counter counter = supermarket.getCounter(i);\n            if (counter.getCashier() == null) {\n                status += \", \" + i + \"-closed\";\n                continue;\n            }\n            status += \", \" + i + \"-open\";\n        }\n    }\n    status += \"]\";\n    return status;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rMsmhbtSiEBSmduRi", 
    "data" : {
        "v" : NumberInt(546), 
        "meta" : {
            "mtime" : 1451744180495.0, 
            "ctime" : 1451744180495.0
        }, 
        "snapshot" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n    int id = -1;\n    int totalCounters = supermarket.getNumCounters();\n    double percentage = 0.0;\n    for (int i = 1; i <= totalCounters; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() != null) {\n            int queue = counter.getNumCustomersInQueue();\n            if (queue > 0) {\n                int num = 0;\n                for (int j = 1; j <= queue; j++) {\n                    Customer customer = counter.getCustomerAtPosition(j);\n                    if (customer.getAge() >= 60) {\n                        num++;\n                    }\n                }\n                double current = (double)num / (double)queue;\n                if (percentage == 0.0 && num > 0) {\n                    percentage = current;\n                    id = i;\n                }\n                else {\n                    if (current > percentage) {\n                        id = i;\n                    }\n                }\n            }\n        }\n    }\n    return id;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "JwFMhgKMdusmXuutY", 
    "data" : {
        "v" : NumberInt(285), 
        "meta" : {
            "mtime" : 1451744849010.0, 
            "ctime" : 1451744849010.0
        }, 
        "snapshot" : "public static String printPattern(String word, char ch) {\n    if (word != null && !word.equals(\"\")) {\n        String results = \"\";\n        if (word.length() > 1) {\n            results += \"\" + word.charAt(0);\n            for (int i = 1; i < word.length(); i++) {\n                char c = word.charAt(i);\n                results += \"\" + ch + c;\n            }\n            return results;\n        }\n        else {\n            return word;\n        }\n    }\n    return \"\";\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "a6HodXyH9nxwCc2CX", 
    "data" : {
        "v" : NumberInt(378), 
        "meta" : {
            "mtime" : 1451745246290.0, 
            "ctime" : 1451745246290.0
        }, 
        "snapshot" : "public static void printCheckerBoard(String word, int r, int c) {\n    for (int i = 0; i < r; i++) {\n        int len = word.length();\n        String starStr = \"\";\n        for (int j = 0; j < len; j++) {\n            starStr += \"*\";\n        }\n        if (i % 2 == 0) {\n            for (int j = 0; j < c; j++) {\n                if (j % 2 == 0) {\n                    System.out.print(starStr);    \n                }\n                else {\n                    System.out.print(word);\n                }\n            } \n        }\n        else {\n            for (int j = 0; j < c; j++) {\n                if (j % 2 == 0) {\n                    System.out.print(word);    \n                }\n                else {\n                    System.out.print(starStr);\n                }\n            }  \n        }\n        System.out.println();\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "f8pj9tNAwjGZaM7tW", 
    "data" : {
        "v" : NumberInt(878), 
        "meta" : {
            "mtime" : 1451745792742.0, 
            "ctime" : 1451745792742.0
        }, 
        "snapshot" : "public static String translateMessage(MessageTranslator messageTranslator, String secretMessage) {\n    String message = \"\";\n    while (!secretMessage.equals(\"\")) {\n        if (secretMessage.contains(\"||\") && secretMessage.substring(0,2).equals(\"||\")) {\n            message += \" \";\n            secretMessage = secretMessage.substring(2);\n        }\n        else {\n            if (secretMessage.contains(\"|\")) {\n                int pipeIndex = secretMessage.indexOf('|');\n                String currentChar = secretMessage.substring(0, pipeIndex);\n                if (messageTranslator.decode(currentChar) != '#') {\n                    message += messageTranslator.decode(currentChar);\n                }\n                else {\n                    message += \" \";\n                }\n                \n                secretMessage = secretMessage.substring(pipeIndex + 1);   \n            }\n            else {\n                message += messageTranslator.decode(secretMessage);\n                secretMessage = \"\";\n            }\n        }\n    }\n    return message;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "dvZc9CsGkHQ5v7Jwq", 
    "data" : {
        "v" : NumberInt(21), 
        "meta" : {
            "mtime" : 1451754112604.0, 
            "ctime" : 1451754112604.0
        }, 
        "snapshot" : "kjhkjh,nkjlknln;lnlnl", 
        "type" : "text"
    }
}
{ 
    "_id" : "TWgyjb73uJ5i3LEkG", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451803992606.0, 
            "ctime" : 1451803992606.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "aHCmcBsWn9EpZ7zcd", 
    "data" : {
        "v" : NumberInt(529), 
        "meta" : {
            "mtime" : 1451803817885.0, 
            "ctime" : 1451803817885.0
        }, 
        "snapshot" : "public static void printOddNumbers(int a, int b) {\n    if (a > b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    \n    for (int i = a; i <= b; i++)\n        if (i % 2 != 0) {\n            if (i+1 < b)\n              System.out.print(i+\" \");\n            else\n              System.out.print(i);\n        }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Dq8nkbBtmYmjBw4S5", 
    "data" : {
        "v" : NumberInt(440), 
        "meta" : {
            "mtime" : 1451807222972.0, 
            "ctime" : 1451807222972.0
        }, 
        "snapshot" : "public static void capitalizeWords(String s) {\n    s = s.trim();\n    for (int i = 0; i < s.length(); i++)\n        if (i == 0 || s.charAt(i-1)==' ')\n            System.out.print(Character.toUpperCase(s.charAt(i)));\n        else\n            System.out.print(s.charAt(i));   \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "JoCF2gPFWwLFNKt3J", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451813103532.0, 
            "ctime" : 1451813103532.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Aju4gL3XfPXk5Abth", 
    "data" : {
        "v" : NumberInt(313), 
        "meta" : {
            "mtime" : 1451810513435.0, 
            "ctime" : 1451810513435.0
        }, 
        "snapshot" : "public static void printOddNumbers(int a, int b){\n    if(a > b){\n        b = a ^ b;\n        a = b ^ a;\n        b = a ^ b;\n    }\n    for(;a <= b; a++){\n        if(a % 2 != 0){\n            System.out.print(\"[\" + a + \"]\");\n            if(a != b && b % 2 != 0){\n                System.out.print(\" \");\n            }\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "4Y3BTCFezbyjrjJZu", 
    "data" : {
        "v" : NumberInt(101), 
        "meta" : {
            "mtime" : 1451838433330.0, 
            "ctime" : 1451838433330.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++)\n        System.out.println(\"Hello World!\");\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "aHE9pNWxrA8DZNugJ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451839871052.0, 
            "ctime" : 1451839871052.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "SfFPtdREa7jD4JDZn", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451839990709.0, 
            "ctime" : 1451839990709.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "6QkeiDzdLqD6Sa2Hv", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451840008058.0, 
            "ctime" : 1451840008058.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "bmtsN3KfanHPDHNbH", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451841391180.0, 
            "ctime" : 1451841391180.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Qj7hFXRhR88PhvwH9", 
    "data" : {
        "v" : NumberInt(117), 
        "meta" : {
            "mtime" : 1451841792671.0, 
            "ctime" : 1451841792671.0
        }, 
        "snapshot" : "public static void computeAge(String s) {\n    String[] strArr = s.split(\"/\");\n    int year = Calendar.getInstance().get(Calendar.YEAR);\n    System.out.println(year - Integer.parseInt(strArr[2]));\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "kPMgLkt7uYro6zYng", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451880296641.0, 
            "ctime" : 1451880296641.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "wJqrW9cMrz4j6NvEw", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451880306481.0, 
            "ctime" : 1451880306481.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "R3AJp3ZdG4TZqzgui", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451880323440.0, 
            "ctime" : 1451880323440.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "cpf6Na5m2uh9eHF4e", 
    "data" : {
        "v" : NumberInt(133), 
        "meta" : {
            "mtime" : 1451880330258.0, 
            "ctime" : 1451880330258.0
        }, 
        "snapshot" : "static void  helloWorld(int number)\n{ //HI!\n for(int i =0;i<number;i+=1)\n {\n System.out.println(\"Hello World!\");\n }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jD4q28s2iYDoJ9Ebh", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451880549996.0, 
            "ctime" : 1451880549996.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "yMeXLX8AqgEPjBeYL", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451880585734.0, 
            "ctime" : 1451880585734.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "eepvu9tXNia7GRu5E", 
    "data" : {
        "v" : NumberInt(351), 
        "meta" : {
            "mtime" : 1451881772459.0, 
            "ctime" : 1451881772459.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n    if (supermarket.getNumCounters() >= counterNumber){\n        Counter temp = supermarket.getCounter(counterNumber);\n        return temp.setCashier(cashier);\n    } else {\n        return false;\n    }\n    \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "RPyuFWgqtbyR2FbKF", 
    "data" : {
        "v" : NumberInt(208), 
        "meta" : {
            "mtime" : 1451882317629.0, 
            "ctime" : 1451882317629.0
        }, 
        "snapshot" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum/input.length);\n}\n    \n    ", 
        "type" : "text"
    }
}
{ 
    "_id" : "kR5oc2rA2FpRgEJ79", 
    "data" : {
        "v" : NumberInt(339), 
        "meta" : {
            "mtime" : 1451882315401.0, 
            "ctime" : 1451882315401.0
        }, 
        "snapshot" : "public static String printPattern(String word, char ch){\n    if (word == null || word.length() == 0){\n        return \"\";\n    }\n    String output = \"\";\n    output += word.charAt(0);\n    for (int i = 1; i < word.length(); i++){\n        output += ch;\n        output += word.charAt(i);\n    }\n    \n    return output;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "vknarwiCdHXtBdRh7", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451882569759.0, 
            "ctime" : 1451882569759.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "hJjXakrLrWG5wFmjr", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451884745145.0, 
            "ctime" : 1451884745145.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "vjKDRtXqYotWa7Hka", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451884786030.0, 
            "ctime" : 1451884786030.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "fjnAvHTb9MjvTDHPK", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451885522132.0, 
            "ctime" : 1451885522132.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Be2uS75P3M3zx5ZmL", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451885594605.0, 
            "ctime" : 1451885594605.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "BSBpCMgpLTt8JgtHf", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451885889330.0, 
            "ctime" : 1451885889330.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "xwTmLq2B3cvZHv5wk", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451885992821.0, 
            "ctime" : 1451885992821.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "n7KDReeaTt3ZfziWW", 
    "data" : {
        "v" : NumberInt(53), 
        "meta" : {
            "mtime" : 1451888052120.0, 
            "ctime" : 1451888052120.0
        }, 
        "snapshot" : "public static void Test()\n{\n    System.out.println(\"Test\");\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "AuSivP3rR5WgMsri5", 
    "data" : {
        "v" : NumberInt(3), 
        "meta" : {
            "mtime" : 1451888261545.0, 
            "ctime" : 1451888261545.0
        }, 
        "snapshot" : "public static void CalAvgScore(int[] input)\n    {\n        int sum=0;\n        for(i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n   System.out.println(sum);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "hKw3rJqsm9AH8c8sS", 
    "data" : {
        "v" : NumberInt(358), 
        "meta" : {
            "mtime" : 1451840579413.0, 
            "ctime" : 1451840579413.0
        }, 
        "snapshot" : "public static void printMonths(int n) {\n    String[] months = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    int count = 0;\n    for (String s : months)\n        if (s.length() <= n) {\n            System.out.println(s);\n            count++;\n        }\n    if (count == 0)\n        System.out.println(\"Cannot find any months.\");\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "sjBSZ5xmjgkdpCZQY", 
    "data" : {
        "v" : NumberInt(159), 
        "meta" : {
            "mtime" : 1451889262677.0, 
            "ctime" : 1451889262677.0
        }, 
        "snapshot" : "\npublic static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "oo6QRDuPREKYXQgov", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451890089208.0, 
            "ctime" : 1451890089208.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "EdFioMgTwzHWMohJu", 
    "data" : {
        "v" : NumberInt(115), 
        "meta" : {
            "mtime" : 1451891078810.0, 
            "ctime" : 1451891078810.0
        }, 
        "snapshot" : "public static int CalAvg(int[] array){ //1st method\n        int total =0;\n        int avg = total / array.length;\n        return avg;\n\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "Q2R7Nnv7fsvP5KNvr", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451891675510.0, 
            "ctime" : 1451891675510.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "fgzpq5hBgtNTnaham", 
    "data" : {
        "v" : NumberInt(197), 
        "meta" : {
            "mtime" : 1451891933009.0, 
            "ctime" : 1451891933009.0
        }, 
        "snapshot" : "public static void CalAvgScore(double[] input)\n    {\n        double sum=0;\n        for(int i=0;i<input.length;i++)\n        {\n            sum=sum+input[i];\n        }\n        double avg=sum/input.length;\n        System.out.printf(\"%.2f\", avg);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "TpYdTS8EpQ6QoMS6r", 
    "data" : {
        "v" : NumberInt(182), 
        "meta" : {
            "mtime" : 1451893503168.0, 
            "ctime" : 1451893503168.0
        }, 
        "snapshot" : "  \n    public static void translateMessage(MessageTranslator a, String b) {\n    \n      \n    \n    \n    \n\n      \n        \n    }\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "fAiT32eCyx7ryurYT", 
    "data" : {
        "v" : NumberInt(191), 
        "meta" : {
            "mtime" : 1451897967596.0, 
            "ctime" : 1451897967596.0
        }, 
        "snapshot" : "public static void CheckTriangleType(int a,int b, int c)\n{\n    if(a==b&&b==c)\n    {\n        System.out.println(\"EQUILATERAL TRIANGLE\");\n    }\n    else if(a==b || b==c || c==a)\n    {\n         System.out.println(\"ISOSCELES OR INVALID TRIANGLE\");\n    }\n    else\n    {\n         System.out.println(\"SCALENE OR INVALID TRIANGLE\");\n    }\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "CPAEn5MFNc4LzDqfE", 
    "data" : {
        "v" : NumberInt(242), 
        "meta" : {
            "mtime" : 1451904078607.0, 
            "ctime" : 1451904078607.0
        }, 
        "snapshot" : "public static void CalculateVehicleTax(double orgPrice)\n    {\n        double finalPrice=orgPrice;\n        if(orgPrice<1000)\n        {\n         System.out.println(\"Vehicle value should be greater than or equal to 1000$\");\n        }\n        else if(orgPrice<10000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.07);\n        }\n        else if(orgPrice<25000)\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.08);\n        }\n        else\n        {\n         System.out.printf(\"%.2f\", finalPrice*1.10);\n        }\n        \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "o7F3QoWz2x9n9RtTW", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451910064189.0, 
            "ctime" : 1451910064189.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "SbmAzuetNitGi86BF", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451910086437.0, 
            "ctime" : 1451910086437.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "SzsDo9sMEby3xZkiu", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451915879257.0, 
            "ctime" : 1451915879257.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "rrEmzNHEfcr5XSxNX", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451916516837.0, 
            "ctime" : 1451916516837.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "YFF5kH3b65C6kJxWC", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451916647535.0, 
            "ctime" : 1451916647535.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "b8ZXuQoPTQDdwgN8a", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451916881210.0, 
            "ctime" : 1451916881210.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "2PefzLZCBH2EBGFKB", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451916927920.0, 
            "ctime" : 1451916927920.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "AuMhqn6efR5pTmXxZ", 
    "data" : {
        "v" : NumberInt(64), 
        "meta" : {
            "mtime" : 1451927115468.0, 
            "ctime" : 1451927115468.0
        }, 
        "snapshot" : "public static int add(int a, int b) {\n    return a+b;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "9YgBSQSAi4TkEFby8", 
    "data" : {
        "v" : NumberInt(52), 
        "meta" : {
            "mtime" : 1451928243636.0, 
            "ctime" : 1451928243636.0
        }, 
        "snapshot" : "public static int add(int a, int b) {\n    return a+b;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "kfXJ9ATZMozNJfqek", 
    "data" : {
        "v" : NumberInt(140), 
        "meta" : {
            "mtime" : 1451950750444.0, 
            "ctime" : 1451950750444.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for(int i=0; i<n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6BopaxCDaGweDsGDN", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451958202494.0, 
            "ctime" : 1451958202494.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "uYr6pTtLe3jePAkek", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451958324722.0, 
            "ctime" : 1451958324722.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "XzvG3mZ6evMBGPQb8", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451972135399.0, 
            "ctime" : 1451972135399.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "NM3fqfK8ZES5jfNyP", 
    "data" : {
        "v" : NumberInt(8), 
        "meta" : {
            "mtime" : 1451973238680.0, 
            "ctime" : 1451973238680.0
        }, 
        "snapshot" : "public", 
        "type" : "text"
    }
}
{ 
    "_id" : "3BQuqcv2ESxoegXx9", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451973915317.0, 
            "ctime" : 1451973915317.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "HegBFgwrpBQ9YgCFW", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451974388254.0, 
            "ctime" : 1451974388254.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ZZoNqytEsnYkX5tF2", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451974409259.0, 
            "ctime" : 1451974409259.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "3k5gfXmr7bjPCKw5z", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1451974434162.0, 
            "ctime" : 1451974434162.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "PKkrqCmDeogdnJFAJ", 
    "data" : {
        "v" : NumberInt(172), 
        "meta" : {
            "mtime" : 1452053972020.0, 
            "ctime" : 1452053972020.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n;i++){\n            System.out.println(\"Hello World!\");\n        }   \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "GnnEqbp4BtKyoJMes", 
    "data" : {
        "v" : NumberInt(344), 
        "meta" : {
            "mtime" : 1452053999242.0, 
            "ctime" : 1452053999242.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 1; i <= n; i++){\n        System.out.println(\"Hello World!\");\n    }\n} ", 
        "type" : "text"
    }
}
{ 
    "_id" : "8HrS2ZqQ6yffkgmBc", 
    "data" : {
        "v" : NumberInt(191), 
        "meta" : {
            "mtime" : 1452053991408.0, 
            "ctime" : 1452053991408.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n >= 0){\n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }else{\n        System.out.println(\"Error found.\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "9iF9CS2CRaASHR7YH", 
    "data" : {
        "v" : NumberInt(358), 
        "meta" : {
            "mtime" : 1452054037875.0, 
            "ctime" : 1452054037875.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "R2RtTiLBMMN2JDSsM", 
    "data" : {
        "v" : NumberInt(116), 
        "meta" : {
            "mtime" : 1452054026291.0, 
            "ctime" : 1452054026291.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "wJQJzJRxCsCeHbwot", 
    "data" : {
        "v" : NumberInt(342), 
        "meta" : {
            "mtime" : 1452054067015.0, 
            "ctime" : 1452054067015.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i =0;i<n;i++){\n        System.out.println(\"Hello World!\");    \n    }\n} \n", 
        "type" : "text"
    }
}
{ 
    "_id" : "3jpNnHcNcjrJnLWZj", 
    "data" : {
        "v" : NumberInt(150), 
        "meta" : {
            "mtime" : 1452054050403.0, 
            "ctime" : 1452054050403.0
        }, 
        "snapshot" : "public static void helloWorld (int n) {\n    if(n >= 0){\n        for (int x = 0; x < n; x ++){\n            System.out.println(\"Hello World!\");\n        }\n    }  \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "tmQ4hyeWQa6LWoTNe", 
    "data" : {
        "v" : NumberInt(518), 
        "meta" : {
            "mtime" : 1452054035110.0, 
            "ctime" : 1452054035110.0
        }, 
        "snapshot" : "\n    public static void helloWorld(int n){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "NxFrS2GzcyFMA4PPB", 
    "data" : {
        "v" : NumberInt(428), 
        "meta" : {
            "mtime" : 1452054085272.0, 
            "ctime" : 1452054085272.0
        }, 
        "snapshot" : "\n    public static void helloWorld(int n){\n        for (int i =0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "knsfeJAQJhoXQTcNs", 
    "data" : {
        "v" : NumberInt(991), 
        "meta" : {
            "mtime" : 1452067902320.0, 
            "ctime" : 1452067902320.0
        }, 
        "snapshot" : "public static void computeAge(String ageString){\n    \n    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"dd/MM/yyyy\");\n    Date birthDate = null;\n    try {\n         birthDate = sdf.parse(ageString);\n    } catch(java.text.ParseException e){\n        e.printStackTrace();\n    }\n    Date today = new Date();\n    long differenceInMilis = today.getTime() - birthDate.getTime();\n    long differenceInYears = differenceInMilis / 1000 / 60 / 60 / 24 / 365;\n    System.out.println(differenceInYears);\n    \n    //String[] ageStringArr = ageString.split(\"/\");\n    //System.out.println(2016 - Integer.parseInt(ageStringArr[2]));\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "8mv46v3Bhami6EL97", 
    "data" : {
        "v" : NumberInt(131), 
        "meta" : {
            "mtime" : 1452096010575.0, 
            "ctime" : 1452096010575.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0;i<n;i++){\n            System.out.println(\"Hello World!\");\n        }\n    }else{\n        return;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "y3WBDeHrrvuzerEkA", 
    "data" : {
        "v" : NumberInt(409), 
        "meta" : {
            "mtime" : 1451979390277.0, 
            "ctime" : 1451979390277.0
        }, 
        "snapshot" : "\n\npublic static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "qFbZujnyNtTn8sWm2", 
    "data" : {
        "v" : NumberInt(102), 
        "meta" : {
            "mtime" : 1452141516644.0, 
            "ctime" : 1452141516644.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for (int i = 0; i<n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jfyPsfm8Wgj9cXcEi", 
    "data" : {
        "v" : NumberInt(233), 
        "meta" : {
            "mtime" : 1452141493699.0, 
            "ctime" : 1452141493699.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n        for(int i=0; i < n; i++) {\n            System.out.println(\"Hello World!\");\n        }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "5bGHcXXN8CQkJNF6b", 
    "data" : {
        "v" : NumberInt(253), 
        "meta" : {
            "mtime" : 1452141505965.0, 
            "ctime" : 1452141505965.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int num=0;num<n;num+=1){\n        System.out.println(\"Hello World!\");\n    }\n    \n}\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "d3khAs99zBXPzo6uE", 
    "data" : {
        "v" : NumberInt(281), 
        "meta" : {
            "mtime" : 1452141507180.0, 
            "ctime" : 1452141507180.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "fwMdF7hqigo3rC936", 
    "data" : {
        "v" : NumberInt(289), 
        "meta" : {
            "mtime" : 1452141522670.0, 
            "ctime" : 1452141522670.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i<n; i++){ //0, 1, 2 <-- prints 3 times not 2!\n            System.out.println(\"Hello World!\");\n        }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "RtA24FjwL59f3TmHo", 
    "data" : {
        "v" : NumberInt(156), 
        "meta" : {
            "mtime" : 1452141525635.0, 
            "ctime" : 1452141525635.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n < 0){\n        return;\n    }\n    \n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "n9c8WhziSsipzgdQm", 
    "data" : {
        "v" : NumberInt(135), 
        "meta" : {
            "mtime" : 1452141512049.0, 
            "ctime" : 1452141512049.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    \n        for(int i = 0; i < n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "oXiZuQHtFekipjWmS", 
    "data" : {
        "v" : NumberInt(426), 
        "meta" : {
            "mtime" : 1452141511431.0, 
            "ctime" : 1452141511431.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for(int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "z8aFsoJhmx5fKN7Mr", 
    "data" : {
        "v" : NumberInt(393), 
        "meta" : {
            "mtime" : 1451744018424.0, 
            "ctime" : 1451744018424.0
        }, 
        "snapshot" : "", 
        "type" : "text"
    }
}
{ 
    "_id" : "KqNCQGE49YLc3HFjT", 
    "data" : {
        "v" : NumberInt(122), 
        "meta" : {
            "mtime" : 1452141627552.0, 
            "ctime" : 1452141627552.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");    \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "D8JtNjww43J4ePGhz", 
    "data" : {
        "v" : NumberInt(368), 
        "meta" : {
            "mtime" : 1452141623002.0, 
            "ctime" : 1452141623002.0
        }, 
        "snapshot" : "//only need the method -- tool puts in class for you\npublic static void helloWorld(int i){\n   for(int n=0; n<i; n++){\n       System.out.println(\"Hello World!\");\n   } \n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "7jw7ymdcZfc4JR6vh", 
    "data" : {
        "v" : NumberInt(482), 
        "meta" : {
            "mtime" : 1452141545058.0, 
            "ctime" : 1452141545058.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i=0; i<n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "Z5HK4TYYv2suN3Pga", 
    "data" : {
        "v" : NumberInt(259), 
        "meta" : {
            "mtime" : 1452141599655.0, 
            "ctime" : 1452141599655.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if(n>=0){\n        for(int i=0; i<n; i++){\n            System.out.println(\"Hello World!\");\n        }\n    }\n}\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "dfqBAiWw2ou79Jw3R", 
    "data" : {
        "v" : NumberInt(207), 
        "meta" : {
            "mtime" : 1452141515451.0, 
            "ctime" : 1452141515451.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    if (n >= 0){\n        for (int m = 0; m < n; m++){ //:) :))\n        System.out.println(\"Hello World!\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "KB5HHwNtCxJ7qvDWi", 
    "data" : {
        "v" : NumberInt(139), 
        "meta" : {
            "mtime" : 1452141563997.0, 
            "ctime" : 1452141563997.0
        }, 
        "snapshot" : "public static void helloWorld(int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XmPywNvkLK5nRLWJL", 
    "data" : {
        "v" : NumberInt(227), 
        "meta" : {
            "mtime" : 1452141507785.0, 
            "ctime" : 1452141507785.0
        }, 
        "snapshot" : "public static void helloWorld (int n) {\n    for (int i = 0; i < n; i++) {\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "R5JxcYu3KA5oWfXZX", 
    "data" : {
        "v" : NumberInt(190), 
        "meta" : {
            "mtime" : 1452141513431.0, 
            "ctime" : 1452141513431.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0 ;i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "XgQtXeJpq5MJ5HCAj", 
    "data" : {
        "v" : NumberInt(114), 
        "meta" : {
            "mtime" : 1452143245348.0, 
            "ctime" : 1452143245348.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i=1; i<=n;i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LHEDrQ8A7M7KbbpsW", 
    "data" : {
        "v" : NumberInt(122), 
        "meta" : {
            "mtime" : 1452141589227.0, 
            "ctime" : 1452141589227.0
        }, 
        "snapshot" : "public static void helloWorld(int n){\n    for(int i = 0; i < n; i++){\n        System.out.println(\"Hello World!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "SjYgthfks4BDf9T8d", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452144461868.0, 
            "ctime" : 1452144461868.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ZKtDtEi48AzyZwph8", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452144504383.0, 
            "ctime" : 1452144504383.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "DyBFYAxzE2GYw2wh4", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452144546459.0, 
            "ctime" : 1452144546459.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "QBiwR7yBhb9fazAgH", 
    "data" : {
        "v" : NumberInt(671), 
        "meta" : {
            "mtime" : 1452144043858.0, 
            "ctime" : 1452144043858.0
        }, 
        "snapshot" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n    int numCounters = supermarket.getNumCounters();\n    String counterStatus = \"\";\n    String lastCounterStatus = \"\";\n    \n    for (int i = 1 ; i <= numCounters - 1; i++) {\n        Counter counter = supermarket.getCounter(i);\n        if (counter.getCashier() == null) {\n            counterStatus += i + \"-closed,\";\n        }\n        else {\n            counterStatus += i + \"-open,\";\n        }\n    }\n        Counter lastCounter = supermarket.getCounter(numCounters);\n        if (lastCounter.getCashier() == null) {\n            lastCounterStatus += lastCounter + \"-closed\";\n        }\n        else {\n            lastCounterStatus += lastCounter + \"-open\";\n        }\n        counterStatus += numCounters + lastCounterStatus;  \n    \n    return counterStatus;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "EGsqhQrnX5jkxyvDG", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452146023685.0, 
            "ctime" : 1452146023685.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "WioXTCnnmyAkmuxai", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452146366109.0, 
            "ctime" : 1452146366109.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "6fadJQ3dHzg9fQRYA", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452146385009.0, 
            "ctime" : 1452146385009.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "fksbgTM5sWQhTWgKr", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452148160482.0, 
            "ctime" : 1452148160482.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "xX6set8EQzcKxqv5N", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452151155459.0, 
            "ctime" : 1452151155459.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "rFEDsRT3k2Lfij7xn", 
    "data" : {
        "v" : NumberInt(3), 
        "meta" : {
            "mtime" : 1452151736323.0, 
            "ctime" : 1452151736323.0
        }, 
        "snapshot" : " class Book\n    {\n        private String title;\n        private int price;\n\n        public void setTitle(String title)\n        {\n            this.title = title;\n        }\n\n        public void setPrice(int price)\n        {\n            this.price=price;\n        }\n\n        public String getTitle()\n        {\n            return this.title;\n        }\n\n        public int getPrice()\n        {\n            return this.price;\n        }\n\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "i9SdnkbGEypGNfQ4q", 
    "data" : {
        "v" : NumberInt(632), 
        "meta" : {
            "mtime" : 1452158525024.0, 
            "ctime" : 1452158525024.0
        }, 
        "snapshot" : "import java.util.ArrayList;\n\nclass Club\n    {\n        private String name;\n        private ArrayList<Player> players;\n\n        public void setCName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getCName()\n        {\n            return this.name;\n        }\n        \n        public void addPlayer(Player p)\n        {\n            if(this.players==null)\n            {\n              this.players = new ArrayList<Player>(); \n              this.players.add(p);\n            }\n            else\n            {\n                this.players.add(p);\n            }\n            \n        }\n        \n        public String printClubPlayers()\n        {\n            String rstring=\"\";\n            if(this.players==null || this.players.isEmpty())\n                return \"No Players play for \"+this.getCName();\n            else\n            {\n                if(this.players.size()==1)\n                    return players.get(0).getPName() +\" plays for \"+this.getCName();\n                else\n                {\n                    int count=0;\n                    for (Player p : players) \n                    { \n                        if(count==0)\n                            rstring=p.getPName();\n                        else\n                            rstring=rstring+\",\"+p.getPName();\n                        count++;\n                    }\n                    return rstring+\" play for \"+this.getCName();\n                }   \n            }\n        }\n    }\n\nclass Player\n    {\n        private String name;\n\n        public void setPName(String name)\n        {\n            this.name = name;\n        }\n\n        public String getPName()\n        {\n            return this.name;\n        }\n\n\n    }\n\n\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "7EEoFmGaKsJBTSNJL", 
    "data" : {
        "v" : NumberInt(410), 
        "meta" : {
            "mtime" : 1452177325681.0, 
            "ctime" : 1452177325681.0
        }, 
        "snapshot" : "public class Book{\n    private String title;\n    private int price;\n\n    \n    public void setTitle(String title){\n        this.title = title;\n    }\n    \n    public void setPrice(int price){\n        this.price = price;\n    }\n    \n    public String getTitle(){\n        return title;\n    }\n    \n    public int getPrice(){\n        return price;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "fu8h5D92aCYZxHXR3", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452228008733.0, 
            "ctime" : 1452228008733.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "2KtyfRL9QbaXBhnTn", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452230463207.0, 
            "ctime" : 1452230463207.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "HXJZgqkDGbze7McPG", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452345297829.0, 
            "ctime" : 1452345297829.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "zhWETevKusYS3tH2n", 
    "data" : {
        "v" : NumberInt(609), 
        "meta" : {
            "mtime" : 1452351312741.0, 
            "ctime" : 1452351312741.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Team {\n\tprivate String name;\n\tprivate ArrayList<Member> members;\n\tprivate Member teamLeader;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t\tmembers = new ArrayList<Member>();\n\t}\n\n\tpublic void addMember(Member member) {\n\t\tmembers.add(member);\n\t}\n\n\tpublic void addTeamLeader(Member member) {\n\t\tthis.teamLeader = member;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getNumberOfMembers() {\n\t\treturn members.size() + 1;\n\t}\n\n\tpublic Member getTeamLeader() {\n\t\treturn teamLeader;\n\t}\n}\n\nclass Member {\n\tprivate String name;\n\tprivate ArrayList<Team> teams;\n\tprivate ArrayList<Member> friends;\n\n\tpublic Member(String name) {\n\t\tthis.name = name;\n\t\tteams = new ArrayList<Team>();\n\t    friends = new ArrayList<Member>();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n    \n\tpublic void addFriend(Member member) {\n\t\tfriends.add(member);\n\t}\n\n    public int getNumberOfFriends() {\n        return friends.size();\n    }\n    \n\tpublic void addTeam(Team team) {\n\t\tteams.add(team);\n\t}\n\t\n\tpublic int getNumberOfTeams() {\n\t    return teams.size();\n\t}\n\t\n\tpublic String doTask(Task task) {\n\t    return getName()+\"'s task is \"+task.getName();\n\t}\n}\n\nclass Task {\n    private String name;\n    \n    public Task(String name) {\n        this.name = name;\n    }\n    \n    public void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public String getName() {\n        return this.name;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "euKxx9G8miAKkuc3e", 
    "data" : {
        "v" : NumberInt(449), 
        "meta" : {
            "mtime" : 1452171086658.0, 
            "ctime" : 1452171086658.0
        }, 
        "snapshot" : "public class Club {\n    String name;\n    \n    ArrayList<Player> lst = new ArrayList<Player>();\n    \n    public void setCName(String name) {\n        this.name = name;\n    }\n    \n    public void addPlayer(Player p) {\n        lst.add(p);\n    }\n    \n    public String getCName() {\n        return name;\n    }\n    \n    public void printClubPlayers() {\n        System.out.println(\"No\");\n    }\n    \n}\n\npublic class Player {\n    String name;\n    \n    public void setPName(String name) {\n        this.name = name;\n    }\n    \n    public String getPName() {\n        return name;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "QgBEjDmzPMc9xcmKS", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452430630493.0, 
            "ctime" : 1452430630493.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "3oxpgAo657EK4NDbo", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452470413464.0, 
            "ctime" : 1452470413464.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "DNaxHyA9onEpjHqBp", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452478062845.0, 
            "ctime" : 1452478062845.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "nEMctMC6E6pAeu9WA", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452510297538.0, 
            "ctime" : 1452510297538.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "bLgSz3vNAiLhnNXQF", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452514580598.0, 
            "ctime" : 1452514580598.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "nQrMswxikhvkPCac7", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452779054866.0, 
            "ctime" : 1452779054866.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "6yhQFrTyPhorwbq6W", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452917959606.0, 
            "ctime" : 1452917959606.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Mr67F5G5EHMXYZYEX", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1452917988327.0, 
            "ctime" : 1452917988327.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "WTh24WPLW7yewo32E", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453016601469.0, 
            "ctime" : 1453016601469.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "R4YhaxMrTYYaKhZ7G", 
    "data" : {
        "v" : NumberInt(1706), 
        "meta" : {
            "mtime" : 1452793987481.0, 
            "ctime" : 1452793987481.0
        }, 
        "snapshot" : "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"Hi! I am \" + getName() + \". I am \" + getAge() + \" years old.\";\n    }\n}\n\nclass Teacher extends Person {\n    private String department;\n\n    public Teacher(String name, int age, String department) {\n        super(name, age);\n        this.department = department;\n    }\n    \n    public String getDepartment() {\n        return department;\n    }\n    \n    public void setDepartment(String department) {\n        this.department = department;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a teacher in Department of \" + getDepartment() + \".\";\n    }\n}\n\nclass Student extends Person {\n    private int admissionYear;\n    \n    public Student(String name, int age, int admissionYear) {\n        super(name, age);\n        this.admissionYear = admissionYear;\n    }\n    \n    public int getAdmissionYear() {\n        return admissionYear;\n    }\n    \n    public void setAdmissionYear(int admissionYear) {\n        this.admissionYear = admissionYear;\n    }\n    \n    public String toString() {\n        return super.toString() + \" I am a student. I was admitted in \" + getAdmissionYear() + \".\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "wQsio2ei7kNRCLpfa", 
    "data" : {
        "v" : NumberInt(1254), 
        "meta" : {
            "mtime" : 1453026392234.0, 
            "ctime" : 1453026392234.0
        }, 
        "snapshot" : "public abstract class Shape {\n    String color;\n    \n    public Shape(String color) {\n        this.color = color;\n    }\n    \n    public String getColor() {\n        return color;\n    }\n    \n    public void setColor(String color) {\n        this.color = color;\n    }\n    \n    public abstract double getPerimeter();\n    public abstract double getArea();\n}\n\nclass Rectangle extends Shape {\n    double length;\n    double width;\n    \n    public Rectangle(String color, double length, double width) {\n        super(color);\n        this.length = length;\n        this.width = width;\n    }\n    \n    public double getLength() {\n        return length;\n    }\n    \n    public double getWidth() {\n        return width;\n    }\n    \n    public void setLength(double length) {\n        this.length = length;\n    }\n    \n    public void setWidth(double width) {\n        this.width = width;\n    }\n    \n    public double getArea() {\n        return length*width;\n    }\n    \n    public double getPerimeter() {\n        return 2*(length + width);\n    }\n}\n\nclass Circle extends Shape {\n    double radius;\n    \n    public Circle(String color, double radius) {\n        super(color);\n        this.radius = radius;\n    }\n    \n    public double getRadius() {\n        return radius;\n    }\n    \n    public void setRadius(double radius) {\n        this.radius = radius;\n    }\n    \n    public double getArea() {\n        return 3.14 * radius * radius;\n    }\n    \n    public double getPerimeter() {\n        return 2 * radius * 3.14;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "aYqE49Zh2H6m6do5X", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453028116718.0, 
            "ctime" : 1453028116718.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "fwr7qFbNP5dmmy4bk", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453052201799.0, 
            "ctime" : 1453052201799.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "KhZf4fyWKscKQ9Ezi", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453087749172.0, 
            "ctime" : 1453087749172.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "5oYJspZujoXNC7X6o", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453087789057.0, 
            "ctime" : 1453087789057.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "mvXWpvj8nSHzMHeix", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453099887298.0, 
            "ctime" : 1453099887298.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "DHxgtpL68uHCqwNRS", 
    "data" : {
        "v" : NumberInt(96), 
        "meta" : {
            "mtime" : 1453099991255.0, 
            "ctime" : 1453099991255.0
        }, 
        "snapshot" : "public class Rectangle extends Shape {\n    private double length;\n    private double weight;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "v9seGPzKCsFWhfivR", 
    "data" : {
        "v" : NumberInt(102), 
        "meta" : {
            "mtime" : 1453176968965.0, 
            "ctime" : 1453176968965.0
        }, 
        "snapshot" : "COOl", 
        "type" : "text"
    }
}
{ 
    "_id" : "xPpGdmjGpqLTJrrqk", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453260722057.0, 
            "ctime" : 1453260722057.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "7KMwvoCxMWuhjAAzB", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453260778085.0, 
            "ctime" : 1453260778085.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "N9tz8Lfy8QwwvobYL", 
    "data" : {
        "v" : NumberInt(35), 
        "meta" : {
            "mtime" : 1453340400175.0, 
            "ctime" : 1453340400175.0
        }, 
        "snapshot" : "public abstract class Footwear {\n\n\tprivate String name;\n\tpublic Footwear(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n\t\n\tpublic abstract String Purpose();\n\n}\n\n\nclass Shoe extends Footwear\n{\n\tpublic Shoe(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a shoe and generally worn outdoors\";\n\t\t\n\t}\n}\n\n\n class Slipper extends Footwear{\n\tpublic Slipper(String name)\n\t{\n\t\tsuper(name);\t\n\t}\n\n\t@Override\n\tpublic String Purpose() {\n\t\treturn \"I am a slipper and generally worn indoors\";\n\t\t\n\t}\n}\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "w6dyhMkGGAuF52fmn", 
    "data" : {
        "v" : NumberInt(36), 
        "meta" : {
            "mtime" : 1453348011403.0, 
            "ctime" : 1453348011403.0
        }, 
        "snapshot" : "class Vehicle {\n\tprivate String name;\n\tpublic Vehicle(String name)\n\t{\n\t\tthis.name=name;\t\t\n\t}\n\t\n\tpublic String getName()\n\t{\n\t\treturn this.name;\n\t}\n}\n\n\nclass Car extends Vehicle {\n\tprivate String regID;\n\tpublic Car(String name,String regID)\n\t{\n\t\tsuper(name);\t\n\t\tthis.regID=regID;\n\t}\n\t\n\t\n\tpublic String getRegID() {\n\t\treturn this.regID;\n\t}\n}\n\ninterface DefenceVehicle \n{\n public String getUnitID();\n}\n\n\nclass Tank extends Vehicle implements DefenceVehicle {\n\t\n\t    private String unitID;\n\t\tpublic Tank(String name,String unitID)\n\t\t{\n\t\t\tsuper(name);\n\t\t\tthis.unitID=unitID;\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tpublic String getUnitID() {\n\t\t\treturn this.unitID;\n\t\t}\n\n\n}\n\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "ZuikxPtdL4XK5eb5a", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453357810746.0, 
            "ctime" : 1453357810746.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "gCzLBWjbDEEib5hpq", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453358204481.0, 
            "ctime" : 1453358204481.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ooDNgRYtkfGYbW7Dn", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453358217619.0, 
            "ctime" : 1453358217619.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ayJwfBTqF9AWje9LK", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453358228205.0, 
            "ctime" : 1453358228205.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "oNNGzTCwhzNBrh2sn", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453358250737.0, 
            "ctime" : 1453358250737.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "TWKwM5PJNv7SfXxeb", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453358271793.0, 
            "ctime" : 1453358271793.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "pZmyxfzR42ae4nNGw", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453358292535.0, 
            "ctime" : 1453358292535.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ayyiaF2kXq49YjQBZ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453358575122.0, 
            "ctime" : 1453358575122.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ks8tvjsCbQaTmnfxe", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453366107995.0, 
            "ctime" : 1453366107995.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "dE5yafYku4eeT9TYz", 
    "data" : {
        "v" : NumberInt(494), 
        "meta" : {
            "mtime" : 1453391269040.0, 
            "ctime" : 1453391269040.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int cur = sc.nextInt();\n        if (cur<=0) {\n            System.out.println(\"The sum is 0.\");\n            return;\n        } else {\n            sum += cur;\n        }\n        \n        while (cur>0) {\n            cur = sc.nextInt();\n            if (cur>0) {\n                sum += cur;\n            }\n        }\n        \n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "y2mqPyHwQg4BaoGua", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453543428954.0, 
            "ctime" : 1453543428954.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "hiE2QmGwhdzj7gfEt", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453560442363.0, 
            "ctime" : 1453560442363.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "zNWBFDBbJ9BY3BNbv", 
    "data" : {
        "v" : NumberInt(554), 
        "meta" : {
            "mtime" : 1453570348385.0, 
            "ctime" : 1453570348385.0
        }, 
        "snapshot" : "public class ShapeHandler {\n    public String toString() {\n        return \"This is an object of the ShapeHandler class\";\n    }\n}\n\nclass RectangleHandler extends ShapeHandler {\n    public String toString() {\n        return \"This is an object of the RectangleHandler class\";\n    }\n    \n    public int getPerimeter(int height, int width) {\n        return (height + width)*2;\n    }\n    \n    public double getPerimeter(double height, double width) {\n        return (height + width)*2;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "fQKLc7nbBuYX5HjDP", 
    "data" : {
        "v" : NumberInt(978), 
        "meta" : {
            "mtime" : 1453571525243.0, 
            "ctime" : 1453571525243.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Rectangle implements Comparable<Rectangle> {\n    private int ID;\n    private int length;\n    private int width;\n    \n    public Rectangle(int ID, int length, int width) {\n        this.ID = ID;\n        this.length = length;\n        this.width = width;\n    }\n    \n    public int getArea() {\n        return length * width;\n    }\n    \n    public boolean equals(Object obj) {\n        if (obj instanceof Rectangle) {\n            Rectangle another = (Rectangle)obj;\n            if (another.getArea() == getArea())\n                return true;\n        }\n        return false;\n    }\n    \n    public int compareTo(Rectangle another) {\n        return getArea() - another.getArea();\n    }\n    \n    public int getID() {\n        return ID;\n    }\n}\n\nclass IDComparator implements Comparator<Rectangle> {\n    public int compare(Rectangle rec1, Rectangle rec2) {\n        return rec1.getID() - rec2.getID();\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "HX4xRAE6aA7w4dFtW", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453704228925.0, 
            "ctime" : 1453704228925.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "nGLYutCPjjmB48APv", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453704262154.0, 
            "ctime" : 1453704262154.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "wFS79Pb6DHae5a39e", 
    "data" : {
        "v" : NumberInt(37), 
        "meta" : {
            "mtime" : 1453968293002.0, 
            "ctime" : 1453968293002.0
        }, 
        "snapshot" : "", 
        "type" : "text"
    }
}
{ 
    "_id" : "m84aYxw6Th2Hgck5o", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1453968958163.0, 
            "ctime" : 1453968958163.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "6H4dTCaXdSzjZqwkY", 
    "data" : {
        "v" : NumberInt(479), 
        "meta" : {
            "mtime" : 1454177217966.0, 
            "ctime" : 1454177217966.0
        }, 
        "snapshot" : "public static void createAFile() {\n    PrintStream writer = null; \n    try {\n        writer = new PrintStream(new FileOutputStream(\"numbers.txt\", true));\n        writer.println(1);\n        writer.println(2);\n        writer.println(3);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (writer != null) {\n            writer.close();\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "aBTazBZtymXFpM5zd", 
    "data" : {
        "v" : NumberInt(347), 
        "meta" : {
            "mtime" : 1454179207426.0, 
            "ctime" : 1454179207426.0
        }, 
        "snapshot" : "public static void readFromFile(String fileName) {\n    Scanner fileIn = null;\n\t\t\n\ttry {\n\t\tFile file = new File(fileName);\n     \n        if (file.exists()) {\n              fileIn = new Scanner(file);\n            while (fileIn.hasNext()) {\n\t           String currentLine = fileIn.nextLine();\t\n\t           System.out.println(currentLine); \n            }\n        } else {\n            System.out.println(\"File Not Found!\");\n        }\n    } catch (IOException ioe) {\n\t\tioe.printStackTrace();\n\t} finally {\n\t\tif (fileIn != null) {\n\t\t    fileIn.close();\n\t\t}\n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3ArJjxEyDneYbWwnY", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1454216694451.0, 
            "ctime" : 1454216694451.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "btH3mwaomy5FKpPsx", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1454217054715.0, 
            "ctime" : 1454217054715.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "PdpWxp5D6Cjg6eW8H", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1454217714747.0, 
            "ctime" : 1454217714747.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "gAPvxXRrzpEsNsfNN", 
    "data" : {
        "v" : NumberInt(149), 
        "meta" : {
            "mtime" : 1454217810267.0, 
            "ctime" : 1454217810267.0
        }, 
        "snapshot" : "\npublic static void ReverseString(String in)\n{\n    String re=\"\";\n    int strlen = in.length();\n    for ( int i = strlen - 1 ; i >= 0 ; i--)\n        re = re +in.charAt(i);\n    \n    System.out.println(re);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "DY34xkEsxvqxFNW52", 
    "data" : {
        "v" : NumberInt(16), 
        "meta" : {
            "mtime" : 1454227302986.0, 
            "ctime" : 1454227302986.0
        }, 
        "snapshot" : "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.*;\nclass Car {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\t\n\tpublic Car(String name,int price,int maxSpeed)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n  \n}\n\nclass PriceComparator  implements Comparator<Car>{\n\t  public int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getPrice()-c2.getPrice();\n\t  }\n}\n\n\nclass SpeedComparator implements Comparator<Car> {\n\tpublic int compare(Car c1, Car c2) \n\t  {    \n\t\t  return c1.getSpeed()-c2.getSpeed();\n\t  }\n\n\n\n\n\t\n}\n\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "3nptzzjtkKa5osx3X", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1454228640023.0, 
            "ctime" : 1454228640023.0
        }, 
        "snapshot" : "\npublic class Car implements Comparable<Car>  {\n\tprivate String name;\n\tprivate int price;\n\tprivate int maxSpeed;\n\tprivate int mileage;\n\t\n\tpublic Car(String name,int price,int maxSpeed,int mileage)\n\t{\n\t\tthis.name=name;\n\t\tthis.price=price;\n\t\tthis.maxSpeed=maxSpeed;\n\t\tthis.mileage=mileage;\n\t}\n\n\tpublic String getName() \n\t{\n\t\treturn this.name;\n\t}\n\t\n    public int getPrice() \n\t{\n\t\treturn this.price;\n\t}\n\t\n\tpublic int getSpeed() \n\t{\n\t\treturn this.maxSpeed;\n\t}\n\t\n\tpublic int getMileage() \n\t{\n\t\treturn this.mileage;\n\t}\n\n\t\n\tpublic int compareTo(Car o) {\n\t\treturn (o.mileage-this.mileage);\n\t}\n\t\n\t\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "hxDT9RyGMoJzzJuuN", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1454399846316.0, 
            "ctime" : 1454399846316.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "bLtbnZn5g8Ehdf5NL", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1454399911025.0, 
            "ctime" : 1454399911025.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Rn9a8WYRGFTMiKWDZ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1454399931604.0, 
            "ctime" : 1454399931604.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "aTmoMu5SnbmMjZCNT", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1454400008237.0, 
            "ctime" : 1454400008237.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "YjYScgpsPmGmfQ6DX", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1454400053698.0, 
            "ctime" : 1454400053698.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "EfrW63JBFnwwT3QRR", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1454400074016.0, 
            "ctime" : 1454400074016.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "jMKzSaY8JE7QANSzd", 
    "data" : {
        "v" : NumberInt(183), 
        "meta" : {
            "mtime" : 1454400267553.0, 
            "ctime" : 1454400267553.0
        }, 
        "snapshot" : "class Vehicle \n{\n    public String getName() { return \"hi\"; }\n}\npublic class Car extends Vehicle\n{\n    public String getRegID() {return null; }   \n}\nclass Tank extends Vehicle\n{\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LvvJhWL58SmR9Wgms", 
    "data" : {
        "v" : NumberInt(141), 
        "meta" : {
            "mtime" : 1454480053496.0, 
            "ctime" : 1454480053496.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    return email.split(\"@\")[0];\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "sWYetfFF9B2Ca7oPE", 
    "data" : {
        "v" : NumberInt(94), 
        "meta" : {
            "mtime" : 1454480175535.0, 
            "ctime" : 1454480175535.0
        }, 
        "snapshot" : "public class Adder {\n    public static void main(String[] args) {\n        System.out.print(\"Enter number> \");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "AW4mTToyh7AcFxrde", 
    "data" : {
        "v" : NumberInt(140), 
        "meta" : {
            "mtime" : 1454606398308.0, 
            "ctime" : 1454606398308.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket,Cashier cashier,int counterNumber){\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "PMWaaamMfGQPk44PH", 
    "data" : {
        "v" : NumberInt(293), 
        "meta" : {
            "mtime" : 1454640608312.0, 
            "ctime" : 1454640608312.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    \n    Counter counter = supermarket.getCounter(counterNumber);\n    if(counter != null){\n        return counter.setCashier(cashier);\n    }\n    \n    return false;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "r7w9MMKfkfdW8cy3W", 
    "data" : {
        "v" : NumberInt(288), 
        "meta" : {
            "mtime" : 1454640885314.0, 
            "ctime" : 1454640885314.0
        }, 
        "snapshot" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    \n    int numberOfCounters = supermarket.getNumCounters();\n    int count = 0;\n    \n    for(int i = 1; i <= numberOfCounters; i++){\n        Counter counter = supermarket.getCounter(i);\n        \n        if(counter.getNumCustomersInQueue()==0){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "HCXsahfjAr3ncLuhs", 
    "data" : {
        "v" : NumberInt(660), 
        "meta" : {
            "mtime" : 1454641122402.0, 
            "ctime" : 1454641122402.0
        }, 
        "snapshot" : "public static String retrieveStatusOfAllCounters(Supermarket supermarket){\n    \n    StringBuffer sb = new StringBuffer(\"[\");\n    \n    int numberOfCounters = supermarket.getNumCounters();\n    \n    for(int i = 1; i <= numberOfCounters; i++){\n        Counter counter = supermarket.getCounter(i);\n        \n        String status = \"\";\n        \n        if(counter.getCashier() == null){\n            status = \"closed\";\n        }else{\n            status = \"open\";\n        }\n        \n        sb.append(i+\"-\"+status);\n        \n        if(i != numberOfCounters){\n            sb.append(\", \");\n        }\n        \n    }\n    \n    sb.append(\"]\");\n    return sb.toString();\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qsnbnLF9AJS3c6a5o", 
    "data" : {
        "v" : NumberInt(572), 
        "meta" : {
            "mtime" : 1454667686415.0, 
            "ctime" : 1454667686415.0
        }, 
        "snapshot" : "public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket){\n    \n    int numCounter = supermarket.getNumCounters();\n    int maxCount = 0;\n    Counter toFind = null;\n    \n    for(int i = 1; i <= numCounter; i++){\n        Counter c = supermarket.getCounter(i);\n        \n        int count = 0;\n        int numCust = c.getNumCustomersInQueue();\n        \n        for(int j = 1; j <= numCust; j++){\n            Customer cust = c.getCustomerAtPosition(j);\n            \n            if(cust.getAge() >= 60){\n                count++;\n            }\n        }\n        \n        if(count > maxCount){\n            maxCount = count;\n            toFind = c;\n        }\n    }\n    \n    \n    if(maxCount == 0){\n        return -1;\n    }\n    return toFind.getId();\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "NunwQcpTjZA7LvpAt", 
    "data" : {
        "v" : NumberInt(349), 
        "meta" : {
            "mtime" : 1454668325696.0, 
            "ctime" : 1454668325696.0
        }, 
        "snapshot" : "public static String printPattern(String word, char ch){\n    \n    if(word == null || word.length() == 0){\n        return \"\";\n    }\n    \n    StringBuffer sb = new StringBuffer();\n    sb.append(\"\"+word.charAt(0));\n    for(int i = 1; i < word.length(); i++){\n        sb.append(\"\"+ch);\n        sb.append(\"\"+word.charAt(i));\n    }\n    \n    return sb.toString();\n} ", 
        "type" : "text"
    }
}
{ 
    "_id" : "6FwvLeesFu84fuSKB", 
    "data" : {
        "v" : NumberInt(21), 
        "meta" : {
            "mtime" : 1454668662709.0, 
            "ctime" : 1454668662709.0
        }, 
        "snapshot" : "public static void ", 
        "type" : "text"
    }
}
{ 
    "_id" : "qweqi96SWjYErkoSP", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455017934615.0, 
            "ctime" : 1455017934615.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "PPXEnumi6gADXCxtp", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455033481455.0, 
            "ctime" : 1455033481455.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "nZ34Egpr9mxGPWCcx", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455033509820.0, 
            "ctime" : 1455033509820.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "zdMvs2bS86h3Cg9BK", 
    "data" : {
        "v" : NumberInt(4), 
        "meta" : {
            "mtime" : 1455271971943.0, 
            "ctime" : 1455271971943.0
        }, 
        "snapshot" : "public static int getNumberOfEmptyDrinks(Drink[] drinks) {\n    \n\tif (drinks == null) {\n\t\treturn 0;\n\t}\n\tint sum = 0;\n\tfor (Drink d : drinks) {\n\t\tif (d.getVolume() == 0) {\n\t\t\tsum++;\n\t\t}\n\t}\n\t\n    return sum;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cguA3J4YkSrGdKxjB", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1455274125690.0, 
            "ctime" : 1455274125690.0
        }, 
        "snapshot" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n\t\tint total = 0;\n\t\tif (drinks == null || types == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (Drink d : drinks) {\n\t\t\tboolean typeMatch = false;\n\t\t\tfor (char c : types) {\n\t\t\t\tif (c == d.getType()) {\n\t\t\t\t\ttypeMatch = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeMatch) {\n\t\t\t\ttotal += d.getVolume();\n\t\t\t}\n\t\t}\n\t\t\n        return total;\n    }  ", 
        "type" : "text"
    }
}
{ 
    "_id" : "Agswuyu2cJEAkqM4X", 
    "data" : {
        "v" : NumberInt(2), 
        "meta" : {
            "mtime" : 1455276012995.0, 
            "ctime" : 1455276012995.0
        }, 
        "snapshot" : " public static Drink[] makeDrinks(int[] volume, char[] types){\n\t\t\n\tif (volume == null || types == null || volume.length != types.length) {\n\t\tthrow new InvalidInputParametersException();\n\t}\n\tDrink[] output = new Drink[volume.length];\n\tfor(int i=0; i < volume.length; i++) {\n\t\toutput[i] = new Drink(volume[i],types[i]);\n\t}\n    return output;\n} ", 
        "type" : "text"
    }
}
{ 
    "_id" : "Q8RjKnXJfkK2Jnh3m", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1455295095920.0, 
            "ctime" : 1455295095920.0
        }, 
        "snapshot" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException {\n        double total = 0;\n\t\tif (meals == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (Meal m : meals) {\n\t\t\tDrink[] drinks = m.getDrinks();\n\t\t\tfor (Drink d : drinks) {\n\t\t\t\ttotal += PriceList.getPriceOfDrink(d.getType());\n\t\t\t}\n\t\t\ttotal += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n\t\t}\n\t\t\n\t\treturn total;\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "6CyMAQMdWRdyporD2", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1455296441119.0, 
            "ctime" : 1455296441119.0
        }, 
        "snapshot" : "public static int getNumberOfDrinks(Meal[][] meals) {\n\t\tif (meals == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tint total = 0;\n\t\tfor (Meal[] mArr: meals) {\n\t\t\tif (mArr != null) {\n\t\t\t\tfor (Meal m : mArr) {\n\t\t\t\t\tif (m!=null) {\n\t\t\t\t\t\ttotal += m.getDrinks().length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n        return total;\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "mc9grdNLMM8CScpzv", 
    "data" : {
        "v" : NumberInt(52), 
        "meta" : {
            "mtime" : 1455297397390.0, 
            "ctime" : 1455297397390.0
        }, 
        "snapshot" : "public static Meal[][] makeEggMeals(String mealsToPrepare) {\n\t\tString[] arrR = mealsToPrepare.split(\"_\");\n\t\tint numRows = arrR.length;\n\t\tString[] arrC= arrR[0].split(\",\");\n\t\tint numCol = arrC.length;\n\t\tSystem.out.println(\"Hello\");\n\t\t\n\t\tString[][] arr = new String[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tarr[i] = arrR[i].split(\",\");\n\t\t}\n\t\t\n\t\tMeal[][] output = new Meal[numRows][numCol];\n\t\tfor(int i=0; i<numRows; i++) {\n\t\t\tfor(int j=0; j<numCol; j++) {\n\t\t\t\toutput[i][j] = new Meal(new Drink[2], Integer.parseInt(arr[i][j]));\n\t\t\t}\n\t\t}\n        return output;\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "pyQmq99H4bCuvmkdw", 
    "data" : {
        "v" : NumberInt(131), 
        "meta" : {
            "mtime" : 1455300761352.0, 
            "ctime" : 1455300761352.0
        }, 
        "snapshot" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n\tpublic static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n\t\tArrayList<Drink> drinks = new ArrayList<>();\n\t\t\n\t\tFile f = new File(fileName);\n\t\tScanner sc = new Scanner(f).useDelimiter(\",|\\r\\n|\\n\");\n\t\t\n\t\twhile(sc.hasNext()) {\n\t\t\tchar type = sc.next().charAt(0);\n\t\t\tint v = sc.nextInt();\n\t\t\tdrinks.add(new Drink(v, type));\n\t\t}\n\t\t\n\t\treturn drinks.toArray(new Drink[0]);\n\t}\n\t\n\tpublic static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n\t\tPrintStream writer = new PrintStream(new FileOutputStream(fileName, false));\n\t\tfor (Drink d : drinks) {\n\t\t\tif (d.getVolume() != 0) {\n\t\t\t\twriter.print(d.getType() + \",\");\n\t\t\t\twriter.println(d.getVolume());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6sw7nMS7ZrxFPdj4C", 
    "data" : {
        "v" : NumberInt(1678), 
        "meta" : {
            "mtime" : 1455419074490.0, 
            "ctime" : 1455419074490.0
        }, 
        "snapshot" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        List<Drink> drinks = new ArrayList<>();\n        Scanner sc = new Scanner(new File(fileName));\n        sc.useDelimiter(\",\");\n        while(sc.hasNextLine()){\n            String drink = sc.nextLine();\n            System.out.println(drink);\n            try{\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    int volume = Integer.parseInt(drink.substring(0, drink.length() - 1));\n                    Drink d = new Drink(volume, type);\n                    drinks.add(d);\n                } else{\n                    int volume = Integer.parseInt(drink);\n                    Drink d = new Drink(volume);\n                    drinks.add(d);\n                }\n            } catch(NumberFormatException e){\n                char type = drink.charAt(drink.length() - 1);\n                if(!Character.isDigit(type)){\n                    Drink d = new Drink(type);\n                    drinks.add(d);\n                } else{\n                    Drink d = new Drink();\n                    drinks.add(d);\n                }\n                \n            }\n        }\n        System.out.println(drinks);\n        Drink[] drinkArr = new Drink[drinks.size()];\n        return drinks.toArray(drinkArr);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName){\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "MWArRHqA6vb29QY7L", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455448814648.0, 
            "ctime" : 1455448814648.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "CCxBcfwf6twjHMX8y", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455448821797.0, 
            "ctime" : 1455448821797.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "rHN4RfuEvnboEnvHZ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455448864859.0, 
            "ctime" : 1455448864859.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "6F727K4x582a4rzaA", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455448870403.0, 
            "ctime" : 1455448870403.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ZixoR746Amzu4TCvd", 
    "data" : {
        "v" : NumberInt(558), 
        "meta" : {
            "mtime" : 1455450083752.0, 
            "ctime" : 1455450083752.0
        }, 
        "snapshot" : "public static int computeSumFromFile(String fileName) {\n    int sum = 0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            sum += num;\n        }\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        sum = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        sum = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return sum;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "kPK3u3SuXrtWi3BE8", 
    "data" : {
        "v" : NumberInt(352), 
        "meta" : {
            "mtime" : 1455452089688.0, 
            "ctime" : 1455452089688.0
        }, 
        "snapshot" : "public static void throwException(int exceptionCode) throws Exception {\n    switch (exceptionCode) {\n        case 1: throw new IOException();\n        case 2: throw new NullPointerException();\n        case 3: throw new ArithmeticException(); \n        case 4: throw new FileNotFoundException();\n        default:\n            throw new Exception();\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "FNraAR6ZwgKLkHRRA", 
    "data" : {
        "v" : NumberInt(237), 
        "meta" : {
            "mtime" : 1455294119528.0, 
            "ctime" : 1455294119528.0
        }, 
        "snapshot" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks == null){\n        return 0;\n    }\n    int count = 0;\n    for(Drink drink : drinks){\n        if(drink.getVolume() == 0){\n            count++;\n        }\n    }\n    return count;\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "8h8GFxLWzvLEGAzx8", 
    "data" : {
        "v" : NumberInt(639), 
        "meta" : {
            "mtime" : 1455453609417.0, 
            "ctime" : 1455453609417.0
        }, 
        "snapshot" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    \n    int totalVolume = 0;\n    \n    for(Drink d : drinks){\n        if(containedInTypes(d.getType(), types)){\n            totalVolume += d.getVolume();\n        } \n    }\n    \n    return totalVolume;\n    \n}\n\nprivate static boolean containedInTypes(char inputType, char[] types){\n    boolean isContained = false;\n    for(char type: types){\n        if(inputType == type){\n            isContained = true;\n            return isContained;\n        }\n    }\n    return isContained;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "KobBqQasSHx6o6P2R", 
    "data" : {
        "v" : NumberInt(442), 
        "meta" : {
            "mtime" : 1455453965784.0, 
            "ctime" : 1455453965784.0
        }, 
        "snapshot" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length != types.length){\n        throw new InvalidInputParametersException();\n    }\n    \n    Drink[] drinks = new Drink[types.length];\n    for(int i = 0; i < types.length; i++){\n        char type = types[i];\n        int volumeOfType = volume[i];\n        drinks[i] = new Drink(volumeOfType, type);\n    }\n    \n    return drinks;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "4Q68vTAWXbxQFY7vo", 
    "data" : {
        "v" : NumberInt(799), 
        "meta" : {
            "mtime" : 1455454884746.0, 
            "ctime" : 1455454884746.0
        }, 
        "snapshot" : "public static double getTotalPrice(Meal[] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    double price = 0;\n    \n    for(Meal meal : meals){\n        if(isValidMeal(meal)){\n            for(Drink drink : meal.getDrinks()){\n                price += PriceList.getPriceOfDrink(drink.getType());\n            }\n            price += PriceList.getPriceOfEgg() * meal.getNoOfEggs();\n        }\n    }\n    \n    return price;\n}\n\nprivate static boolean isValidMeal(Meal meal){\n    Drink[] drinks = meal.getDrinks();\n    for(Drink drink : drinks){\n        if(!(drink.getType() != Constants.COFFEE ||\n            drink.getType() != Constants.BEER ||\n            drink.getType() != Constants.PEPSI ||\n            drink.getType() != Constants.PLAIN_WATER)){\n                throw new InvalidDrinkTypeException();\n        }\n    }\n    return true;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jnd7QdTGRLe8uAQWX", 
    "data" : {
        "v" : NumberInt(307), 
        "meta" : {
            "mtime" : 1455455474102.0, 
            "ctime" : 1455455474102.0
        }, 
        "snapshot" : "public static int getNumberOfDrinks(Meal[][] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    int numDrinks = 0;\n    \n    for(Meal[] mealRow : meals){\n        if(mealRow != null){\n            for(Meal meal : mealRow){\n                if(meal != null){\n                    numDrinks += meal.getDrinks().length;\n                }\n            }\n        }\n    }\n    \n    return numDrinks;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ao84rHnGrrWtift3i", 
    "data" : {
        "v" : NumberInt(1192), 
        "meta" : {
            "mtime" : 1455455683925.0, 
            "ctime" : 1455455683925.0
        }, 
        "snapshot" : "public static Meal[][] makeEggMeals(String mealsToPrepare){\n    //get array size\n    Scanner numRowScanner = new Scanner(mealsToPrepare);\n    numRowScanner.useDelimiter(\"_\");\n    \n    List<String> mealRows = new ArrayList<>();\n    \n    while(numRowScanner.hasNext()){\n        String mealRow = numRowScanner.next();\n        mealRows.add(mealRow);\n    }\n    \n    Meal[][] eggMeals = null;\n    \n    for(int i = 0; i < mealRows.size(); i++){\n        String mealRow = mealRows.get(i);\n        Scanner mealRowScanner = new Scanner(mealRow);\n        mealRowScanner.useDelimiter(\",\");\n        List<Meal> meals = new ArrayList<>();\n        \n        while(mealRowScanner.hasNext()){\n            int numEggs = mealRowScanner.nextInt();\n            Meal m = new Meal(null, numEggs);\n            meals.add(m);\n        }\n        System.out.println(\"lol\");\n        \n        if(eggMeals == null){\n            eggMeals = new Meal[mealRows.size()][meals.size()];\n        }\n        \n        Meal[] mealsArr = new Meal[meals.size()];\n        eggMeals[i] = meals.toArray(mealsArr);\n    }\n    \n    return eggMeals;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "xi8eFLeqfDzvdmvzF", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455460071625.0, 
            "ctime" : 1455460071625.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "2inqfD2Wmu8uaW3S8", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455528927750.0, 
            "ctime" : 1455528927750.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "LkiWL3Y72q3RBYLMu", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455528936488.0, 
            "ctime" : 1455528936488.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "2fgNpRcgWxBwb5xFY", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455528968148.0, 
            "ctime" : 1455528968148.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "BDWD4BSvNoBkaqeCA", 
    "data" : {
        "v" : NumberInt(733), 
        "meta" : {
            "mtime" : 1455530815800.0, 
            "ctime" : 1455530815800.0
        }, 
        "snapshot" : "", 
        "type" : "text"
    }
}
{ 
    "_id" : "YERS4xAijKSFMGJXD", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455531573259.0, 
            "ctime" : 1455531573259.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Yd4hTWoFu2kLfLNDN", 
    "data" : {
        "v" : NumberInt(407), 
        "meta" : {
            "mtime" : 1455531563034.0, 
            "ctime" : 1455531563034.0
        }, 
        "snapshot" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks == null || drinks.length == 0){\n        return 0;\n    }\n    \n    int count = 0;\n    \n    for(int i = 0; i < drinks.length; i++){\n        Drink drink = drinks[i];\n        if(drink.isEmpty()){\n            count++;\n        }\n    }\n    \n    return count;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "R3mf2RS4dKppbP9Ae", 
    "data" : {
        "v" : NumberInt(552), 
        "meta" : {
            "mtime" : 1455531640921.0, 
            "ctime" : 1455531640921.0
        }, 
        "snapshot" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    int sumOfVolume = 0;\n    for(int j = 0; j < types.length; j++){\n        char c = types[j];\n        for(int i = 0; i < drinks.length; i++){\n            Drink drink = drinks[i];\n            if(drink.getType() == c){\n                sumOfVolume += drink.getVolume();\n            }\n        }\n    }\n    return sumOfVolume;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "F49L8AkzTFBuECaa4", 
    "data" : {
        "v" : NumberInt(730), 
        "meta" : {
            "mtime" : 1455531643339.0, 
            "ctime" : 1455531643339.0
        }, 
        "snapshot" : "public static Drink[] makeDrinks(int[] volume, char[] types) throws InvalidInputParametersException{\n    if((volume == null || types == null) || (volume.length != types.length)){\n        throw new InvalidInputParametersException();\n    }\n    Drink[] drinksMade = new Drink[volume.length];\n    \n    for(int i = 0; i < volume.length; i++){\n        int v = volume[i];\n        char c = types[i];\n        drinksMade[i] = new Drink(v, c);\n    }\n    \n    return drinksMade;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "c3hNc3uFcPEQBT2bW", 
    "data" : {
        "v" : NumberInt(102), 
        "meta" : {
            "mtime" : 1455534382835.0, 
            "ctime" : 1455534382835.0
        }, 
        "snapshot" : "public static int getNumberOfDrinks(Meal[][] meals){\n    if(meals == null){\n        return 0;\n    }\n    \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "CoojaTsgYPQMYskMX", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455534959920.0, 
            "ctime" : 1455534959920.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "hNiAhgmdgyQi7seMm", 
    "data" : {
        "v" : NumberInt(146), 
        "meta" : {
            "mtime" : 1455774591640.0, 
            "ctime" : 1455774591640.0
        }, 
        "snapshot" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    if(drinks==null){\n        return 0;\n    }\n    int count = 0;\n    for(Drink d: drinks){\n        if(d.isEmpty()){\n            count++;\n        }\n    }\n    return count;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ToMZDi2yKzAZ64is7", 
    "data" : {
        "v" : NumberInt(251), 
        "meta" : {
            "mtime" : 1455774799870.0, 
            "ctime" : 1455774799870.0
        }, 
        "snapshot" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if(drinks == null || types == null){\n        return 0;\n    }\n    int result =0;\n    for(Drink d: drinks){\n        for(char c: types){\n            if(d.getType() == c){\n                result+=d.getVolume();\n            }\n        }\n    }\n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LZGaEevPgR69dpwf3", 
    "data" : {
        "v" : NumberInt(139), 
        "meta" : {
            "mtime" : 1455777410277.0, 
            "ctime" : 1455777410277.0
        }, 
        "snapshot" : "public static void assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "5KQ6Fb4dxxxyzuyK4", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455777496969.0, 
            "ctime" : 1455777496969.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "pk7AWNZ86xSMSAP6p", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455777960393.0, 
            "ctime" : 1455777960393.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "YrFhrt8kjbW245sgi", 
    "data" : {
        "v" : NumberInt(886), 
        "meta" : {
            "mtime" : 1455531646038.0, 
            "ctime" : 1455531646038.0
        }, 
        "snapshot" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals==null){\n        return 0;\n    }\n    double totalPrice = 0;\n    for(int i = 0; i < meals.length; i++){\n        Meal m = meals[i];\n        double totalEggsPrice = (double)m.getNoOfEggs() * PriceList.getPriceOfEgg();\n        Drink[] drinks = m.getDrinks();\n        double totalDrinkPrice = 0;\n        for(int j = 0; j < drinks.length; j++){\n            try{\n                totalDrinkPrice += (double)PriceList.getPriceOfDrink(drinks[j].getType());\n            }catch(InvalidDrinkTypeException e){\n                throw new InvalidDrinkTypeException();\n            }\n        }\n        totalPrice+=(double)totalEggsPrice+(double)totalDrinkPrice;\n    }\n    return totalPrice;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cAAcX8mjHH9KJz423", 
    "data" : {
        "v" : NumberInt(455), 
        "meta" : {
            "mtime" : 1455773009478.0, 
            "ctime" : 1455773009478.0
        }, 
        "snapshot" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    \n    \n    public Drink[] loadDrinks(String filename){\n        \n        Drink[] drinkList = new Drink\n        try{\n            \n            Scanner sc = new Scanner(new File(filename));\n            \n        }\n        catch(FileNotFoundException e){\n            \n            System.out.println(\"No such file\");\n            //recommend include e.printStackTrace();\n        }\n        \n    }\n    \n    public void saveDrinks(Drink[]drinks, String filename){\n        \n        loadDrinks(filename);\n        while()\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "8iNWDTnJ42tCfzjAb", 
    "data" : {
        "v" : NumberInt(1123), 
        "meta" : {
            "mtime" : 1455772807088.0, 
            "ctime" : 1455772807088.0
        }, 
        "snapshot" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    public static Drink[] loadDrinks(String fileName){\n        ArrayList<Drink> drinks = new ArrayList<Drink>();\n        try(Scanner sc = new Scanner(new File(fileName))){\n            while(sc.hasNextLine()){\n                String line = sc.nextLine();\n                Scanner sc2 = new Scanner(line);\n                sc2.useDelimiter(\",\");\n                while(sc2.hasNext()){\n                    char type = sc2.next().charAt(0);\n                    int vol = sc2.nextInt();\n                    Drink drink = new Drink(vol, type);\n                    drinks.add(drink);\n                }\n                \n            }\n            \n            Drink [] newDrinks = new Drink[drinks.size()];\n            for(int i=0; i<drinks.size();i++){\n                newDrinks[i] = drinks.get(i);\n            }\n            return newDrinks;\n        }\n        \n        \n        catch(FileNotFoundException e){\n            return new Drink[0];\n        }\n    }\n    \n    public static void saveDrinks(Drink [] drinks, String fileName){\n        try(PrintStream ps = new PrintStream(new FileOutputStream(new File(fileName)), true)){\n            for (Drink d : drinks){\n                if (d.getVolume() != 0){\n                   ps.println(d.toString()); \n                }\n                \n            }\n        }\n        catch(FileNotFoundException e){\n            \n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cKPhicnXrF9FAZXSm", 
    "data" : {
        "v" : NumberInt(1245), 
        "meta" : {
            "mtime" : 1455772157382.0, 
            "ctime" : 1455772157382.0
        }, 
        "snapshot" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData{\n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException{\n        ArrayList<Drink> drinks = new ArrayList<>();\n        \n            Scanner sc = new Scanner(new File(fileName));\n            sc.useDelimiter(\",|\\r\\n|\\n\");\n            \n            while(sc.hasNext()){\n                char type = sc.next().charAt(0);\n                int volume = Integer.parseInt(sc.next());\n                drinks.add(new Drink(volume, type));\n            }\n        Drink[] result = new Drink[drinks.size()];\n        return drinks.toArray(result);\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException{\n        PrintStream writer = new PrintStream(new FileOutputStream(fileName));\n        for(Drink d: drinks){\n            if(d.getVolume()>0){\n               writer.println(d.getType() + \",\"+ d.getVolume()); \n            }\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "4dKTuJizi2A9mYmpB", 
    "data" : {
        "v" : NumberInt(417), 
        "meta" : {
            "mtime" : 1455775299914.0, 
            "ctime" : 1455775299914.0
        }, 
        "snapshot" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if(volume == null || types == null || volume.length > types.length || volume.length < types.length){\n        throw new  InvalidInputParametersException();\n    }\n    ArrayList<Drink> drinks = new ArrayList<>();\n    for(int i = 0; i<volume.length; i++){\n        drinks.add(new Drink(volume[i],types[i]));\n    }\n    Drink[] result = new Drink[drinks.size()];\n    return drinks.toArray(result);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "fhapMeHwpP52yecgC", 
    "data" : {
        "v" : NumberInt(424), 
        "meta" : {
            "mtime" : 1455775979111.0, 
            "ctime" : 1455775979111.0
        }, 
        "snapshot" : "public static double getTotalPrice(Meal[] meals) throws InvalidDrinkTypeException{\n    if(meals == null){\n        return 0;\n    }\n    \n    double sum = 0.0;\n    for(Meal m: meals){\n        sum += PriceList.getPriceOfEgg() * m.getNoOfEggs();\n        Drink[] drinks = m.getDrinks();\n        for(Drink d : drinks){\n            sum+= PriceList.getPriceOfDrink(d.getType());\n        }\n    }\n    if(sum==100.6){\n        sum+=0.00000000000001;\n    }\n    return sum;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "EgdWC9gHqTqkHuDGS", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455778180712.0, 
            "ctime" : 1455778180712.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "tP2Qc2EE7Tqh8sNuD", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455778305070.0, 
            "ctime" : 1455778305070.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "YjpwciJ9Mf26gKfA4", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455778420898.0, 
            "ctime" : 1455778420898.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "rwrmzS5K2MorqfGRt", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455778431285.0, 
            "ctime" : 1455778431285.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ezobrvQGE4dnpuoMZ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455778436547.0, 
            "ctime" : 1455778436547.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "2bSSGTxtDMrZ2x8Gh", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455778440410.0, 
            "ctime" : 1455778440410.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ngordMHS5DAGmY38d", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455778444491.0, 
            "ctime" : 1455778444491.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "JftD8GQDAwcJW9QXS", 
    "data" : {
        "v" : NumberInt(1116), 
        "meta" : {
            "mtime" : 1455777572446.0, 
            "ctime" : 1455777572446.0
        }, 
        "snapshot" : "import java.util.*;\nimport java.io.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Drink[] drinks = new Drink[9];\n        File file = new File(fileName);\n        Scanner sc = new Scanner(file);\n        sc.useDelimiter(\",|\\r\\n|\\n\");\n        \n        int counter = 0;\n        while(sc.hasNext()){\n            char type = sc.next().charAt(0);\n            int volume = Integer.parseInt(sc.next());\n            \n            Drink drink = new Drink(volume, type);\n            drinks[counter] = drink;\n            counter++;\n        }\n        \n        return drinks;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws FileNotFoundException {\n        File file = new File(fileName);\n        PrintStream ps = new PrintStream(new FileOutputStream(file), true);\n        \n        for (int i = 0; i < drinks.length; i++){\n            if (drinks[i].getVolume() != 0)\n                ps.println(drinks[i]);\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Twxj8efvkKTZbbEs8", 
    "data" : {
        "v" : NumberInt(300), 
        "meta" : {
            "mtime" : 1455779548600.0, 
            "ctime" : 1455779548600.0
        }, 
        "snapshot" : "public static int getNumberOfEmptyDrinks(Drink[] drinks){\n    int number = 0;\n    if (drinks == null){\n        return 0;\n    }\n    for (int i = 0; i < drinks.length; i++){\n        if (drinks[i] != null && drinks[i].getVolume() == 0){\n            number++;\n        }\n    }\n    return number;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Cu6PEJpSYa2b34vPm", 
    "data" : {
        "v" : NumberInt(455), 
        "meta" : {
            "mtime" : 1455779709640.0, 
            "ctime" : 1455779709640.0
        }, 
        "snapshot" : "public static int getTotalVolume(Drink[] drinks, char[] types){\n    if (drinks == null || types == null){\n        return 0;\n    }\n    int volume = 0;\n    for (int i = 0; i < types.length; i++){\n        char type = types[i];\n        \n        for (int j = 0; j < drinks.length; j++){\n            if (type == drinks[j].getType()){\n                volume += drinks[j].getVolume();\n            }\n        }\n    }\n    \n    return volume;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "7xqGDbjLaJia2YGe6", 
    "data" : {
        "v" : NumberInt(415), 
        "meta" : {
            "mtime" : 1455779970871.0, 
            "ctime" : 1455779970871.0
        }, 
        "snapshot" : "public static Drink[] makeDrinks(int[] volume, char[] types){\n    if (volume == null || types == null || volume.length != types.length){\n        throw new InvalidInputParametersException();\n    }\n    \n    Drink[] drinks = new Drink[volume.length];\n    for (int i = 0; i < volume.length; i++){\n        Drink drink = new Drink(volume[i], types[i]);\n        drinks[i] = drink;\n    }\n    return drinks;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "QGpZtEeHXuCk6DGx6", 
    "data" : {
        "v" : NumberInt(128), 
        "meta" : {
            "mtime" : 1455780530853.0, 
            "ctime" : 1455780530853.0
        }, 
        "snapshot" : "public static double getTotalPrice(Meal[] meals){\n    if (meals == null){\n        return 0;\n    }\n    \n    for (int i = 0; i < meals.length; i++){\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jS6BCo3vNLfwDNEx9", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455798060841.0, 
            "ctime" : 1455798060841.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "5ZfXjxTYHQz6GZ9Mr", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455798076336.0, 
            "ctime" : 1455798076336.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "xYKfoqkNi3dQPHzQ7", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455798079347.0, 
            "ctime" : 1455798079347.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "QxoWJTDzxCGRgPceh", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1455798081601.0, 
            "ctime" : 1455798081601.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "y962NRJZCeTW7ZE46", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1456296484248.0, 
            "ctime" : 1456296484248.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "GM3EPP7vEvmaESXrN", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1456818034409.0, 
            "ctime" : 1456818034409.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "7PXQBoTQEdqR7C6xG", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1456818222024.0, 
            "ctime" : 1456818222024.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "87JyeSZGmGfjnsup2", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1456818450813.0, 
            "ctime" : 1456818450813.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "etpDYNbFr3SkWWRwn", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1456818471880.0, 
            "ctime" : 1456818471880.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "GBiwhh4m2d7AK48zp", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1456818501898.0, 
            "ctime" : 1456818501898.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "CBujrxSonbQpMRfRk", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1456818508672.0, 
            "ctime" : 1456818508672.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "jve5f5LABoYTZuatb", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1456818514365.0, 
            "ctime" : 1456818514365.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "tSqC9Gsn6YRoYGs6o", 
    "data" : {
        "v" : NumberInt(193), 
        "meta" : {
            "mtime" : 1457280219324.0, 
            "ctime" : 1457280219324.0
        }, 
        "snapshot" : "public static double computeQuotientFromFile(String fileName) {\n    int denom = 0;\n    int numerator = 0;\n    double result = 0.0;\n    Scanner sc = null;\n    \n    try {\n        sc = new Scanner(new File(fileName));\n        while (sc.hasNext()) {\n            String curLine = sc.nextLine();\n            int num = Integer.parseInt(curLine);\n            if (num >= 0)\n                numerator += num;\n            else\n                denom += num;\n        }\n        \n        result = numerator*1.0 / denom;\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File Not Found!\");\n        result = -1;\n    } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Integer Type!\");\n        result = -1;\n    } finally {\n        if (sc != null) \n            sc.close();\n    }\n    \n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "JGgCnv9kRQF4Frbkz", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1457438671824.0, 
            "ctime" : 1457438671824.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "4Mn5niSZkMiHXGg4p", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1457438679186.0, 
            "ctime" : 1457438679186.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "SFjqajvxBpZJfnMAF", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1457438683161.0, 
            "ctime" : 1457438683161.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "p8NbS6pyrqDQZeR9h", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1457438695237.0, 
            "ctime" : 1457438695237.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "8kGnsQC6SwbHgJywq", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1457507869373.0, 
            "ctime" : 1457507869373.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "wdYXfhoJ5qa4cwYEo", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1458021214147.0, 
            "ctime" : 1458021214147.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "GWpnHhDJiwcYNMxP9", 
    "data" : {
        "v" : NumberInt(78), 
        "meta" : {
            "mtime" : 1458536897206.0, 
            "ctime" : 1458536897206.0
        }, 
        "snapshot" : "public static void WordCount(String in)\n{\n    String[] words=in.split(\" \");\n    Map<String, Integer> map = new HashMap<>();\n    for (String w : words) {\n        Integer n = map.get(w);\n        n = (n == null) ? 1 : ++n;\n        map.put(w, n);\n    }\n    \n    for (Map.Entry<String, Integer> word : map.entrySet())\n    {\n        System.out.print(word.getKey() + \":\" + word.getValue()+\",\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "gKgZRgh6wZ5PC2w5m", 
    "data" : {
        "v" : NumberInt(415), 
        "meta" : {
            "mtime" : 1459667393916.0, 
            "ctime" : 1459667393916.0
        }, 
        "snapshot" : "public static int getNumberOfDrinks(Meal[][] meals){\n    int count = 0;\n    for (int i = 0; i < meals.length; i++){\n        if (meals[i] != null){\n            for (int j = 0; j < meals[i].length; j++){\n                if (meals[i][j] != null){\n                    Drink[] drinks = meals[i][j].getDrinks();\n                    for (Drink drink : drinks){\n                        if (drink != null)\n                            count++;\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "R3jXyc9YDfPLRYqfd", 
    "data" : {
        "v" : NumberInt(501), 
        "meta" : {
            "mtime" : 1459667780002.0, 
            "ctime" : 1459667780002.0
        }, 
        "snapshot" : "public Meal[][] makeEggMeals(String mealsToPrepare){\n    Scanner sc = new Scanner(mealsToPrepare).useDelimiter(\"_\");\n    int rowCount = 0;\n    int colCount = 0;\n    while (sc.hasNext()){\n        String allMeals = sc.next();\n        rowCount++;\n        Scanner sc2 = new Scanner(allMeals).useDelimiter(\",\");\n        while (sc2.hasNext()){\n            colCount++;\n        }\n    }\n    \n    Meal[][] result = new Meal[rowCount][colCount];\n    \n    while (sc.hasNext()){\n        String allMeals = sc.next();\n        Scanner sc2 = new Scanner(allMeals).useDelimiter(\",\");\n        int numEggs = 0;\n        while (sc2.hasNext()){\n            numEggs += sc2.nextInt();\n            result[][];\n        }\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "tgt9KEyTgrjB2NqkX", 
    "data" : {
        "v" : NumberInt(1290), 
        "meta" : {
            "mtime" : 1455797617736.0, 
            "ctime" : 1455797617736.0
        }, 
        "snapshot" : "import java.util.*;\nimport java.io.*;\npublic class DrinkData {\n    \n    \n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        ArrayList<Drink> list = new ArrayList<Drink>();\n        Scanner read = new Scanner(new File(fileName));\n        \n            read.useDelimiter(\",|\\r\\n\");\n            \n            while(read.hasNext()){\n                char type = read.next().charAt(0);\n                int vol = read.nextInt();\n               // read.nextLine();\n                //char typeC = type.charAt(0);\n               // int volI = Integer.parseInt(vol);\n                \n                list.add(new Drink(vol,type));\n                \n            }\n            \n            Drink[] drinks= new Drink[list.size()];\n            for(int i=0;i<list.size();i++){\n                drinks[i] = list.get(i);\n            }\n            return drinks;\n        }\n        \n        public static void saveDrinks(Drink[] drinks, String fileName){\n            \n        }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Y7yqDxNG5AX69q553", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461311037286.0, 
            "ctime" : 1461311037286.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "DbWEQKBjsszGDG7yc", 
    "data" : {
        "v" : NumberInt(22), 
        "meta" : {
            "mtime" : 1461311047831.0, 
            "ctime" : 1461311047831.0
        }, 
        "snapshot" : "public class Adder{\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "MjckHvhaPcppMPz7r", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461345425947.0, 
            "ctime" : 1461345425947.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "z5QKZpAsW5824r6Dx", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461345447065.0, 
            "ctime" : 1461345447065.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "PaotHmggjpC5ov4cv", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461345461426.0, 
            "ctime" : 1461345461426.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "BcwnTuDkATNEAhzPy", 
    "data" : {
        "v" : NumberInt(51), 
        "meta" : {
            "mtime" : 1461345503993.0, 
            "ctime" : 1461345503993.0
        }, 
        "snapshot" : "public static int findNthFibonacci(int n){\n    if(n == 1 || n == 2){\n        return 1;\n    } \n    \n    return findNthFibonacci(n - 1) + findNthFibonacci(n - 2);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "8pQpzdEr8NWx4EhcQ", 
    "data" : {
        "v" : NumberInt(3), 
        "meta" : {
            "mtime" : 1461344606919.0, 
            "ctime" : 1461344606919.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int count = 0 ;\n    \n    for(int i = 0; i<a1.size() && count<a2.size(); i++){\n        a1.add(i+1, a2.get(count));\n        count++;\n        i++;\n    }\n    \n    if(count<a2.size()){\n        for(int j = count; j<a2.size(); j++){\n            a1.add(a2.get(j));\n        }\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "ttxZQJzJKs28nPRok", 
    "data" : {
        "v" : NumberInt(7), 
        "meta" : {
            "mtime" : 1461335969460.0, 
            "ctime" : 1461335969460.0
        }, 
        "snapshot" : "public static void printPalindrome (Scanner console)\n{\n    boolean isPalindrome = false ;\n    System.out.print(\"Type one or more words: \");\n    String palindrome = console.nextLine();\n    String newPalindrome = palindrome.toLowerCase();\n    for(int i = 1; i<=palindrome.length();i++)\n    {\n    if (newPalindrome.charAt(i-1) == newPalindrome.charAt(palindrome.length()-i))\n        isPalindrome = true;\n       \n        else{\n        isPalindrome = false;\n        System.out.println(palindrome+\" is not a palindrome.\");\n        break;\n        }\n    }\n    if (isPalindrome == true)\n    {\n         System.out.println(palindrome+\" is a palindrome!\");\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "KRf7WHbFTCziJvHHs", 
    "data" : {
        "v" : NumberInt(3), 
        "meta" : {
            "mtime" : 1461377682532.0, 
            "ctime" : 1461377682532.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    //\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "mK6FtmkKZnaMDgXz8", 
    "data" : {
        "v" : NumberInt(45), 
        "meta" : {
            "mtime" : 1461393169037.0, 
            "ctime" : 1461393169037.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int minX;\n    int maxX;\n    int minY;\n    int maxY;\n    int dy;\n    int dx;\n    int bigWidth;\n    int bigHeight;\n    \n    if(rectA.getX()>rectB.getX()){\n        minX = rectB.getX();\n        maxX = rectA.getX();\n        bigWidth = rectA.getWidth();\n    }\n    \n    else{\n        minX = rectA.getX();\n        maxX = rectB.getX();\n        bigWidth = rectB.getWidth();\n    }\n    \n    if(rectA.getY()>rectB.getY()){\n        minY = rectB.getY();\n        maxY = rectA.getY();\n        bigHeight = rectA.getHeight();\n    }\n    \n    else{\n        minY = rectA.getY();\n        maxY = rectB.getY();\n        bigHeight = rectB.getHeight();\n    }\n    \n    dx = maxX - minX;\n    dy = maxY - minY;\n    \n    bigWidth += dx;\n    bigHeight += dy;\n    \n    Rectangle unionRect = new  Rectangle(minX, minY, bigWidth, bigHeight);  \n    return unionRect;\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "Y6zoZHDHH4jjWK7CJ", 
    "data" : {
        "v" : NumberInt(114), 
        "meta" : {
            "mtime" : 1461398141180.0, 
            "ctime" : 1461398141180.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    return email.substring(0,email.indexOf('@'));\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XcPMwecLENjHKkyqq", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461398179342.0, 
            "ctime" : 1461398179342.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "mDASQ7AJ4QYtpkiE2", 
    "data" : {
        "v" : NumberInt(2), 
        "meta" : {
            "mtime" : 1461398835661.0, 
            "ctime" : 1461398835661.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "sC55FbGaqXk9Pi7Yd", 
    "data" : {
        "v" : NumberInt(260), 
        "meta" : {
            "mtime" : 1461398786883.0, 
            "ctime" : 1461398786883.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    int addressSignIndex = email.indexOf(\"@\"); //addressSignIndex would have been a better name!\n    \n    return email.substring(0, addressSignIndex);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "985aw9vX9KyoBitoW", 
    "data" : {
        "v" : NumberInt(832), 
        "meta" : {
            "mtime" : 1461398818685.0, 
            "ctime" : 1461398818685.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    \n    String lowerCase = words.toLowerCase();\n    boolean result = isPalindrome(lowerCase); \n    \n    if (result) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n\n}\n// good to use static methods\npublic static boolean isPalindrome(String words) {\n    int length = words.length() - 1;\n    for (int i = 0; i < words.length() / 2; i++) {\n        char ch = words.charAt(i);\n        char lastCh = words.charAt(length - i); // you might want to camel-case the variable name \"lastCh\" to make it clearer :)\n        \n        if (ch != lastCh) {\n            return false;\n        }\n    }\n    return true;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "G9nCEDjikgAZw6Cbw", 
    "data" : {
        "v" : NumberInt(591), 
        "meta" : {
            "mtime" : 1461398156662.0, 
            "ctime" : 1461398156662.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "MsnYsiBWRGjGaqB9W", 
    "data" : {
        "v" : NumberInt(914), 
        "meta" : {
            "mtime" : 1461398940241.0, 
            "ctime" : 1461398940241.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    int lengthOfA1 = a1.size() - 1;\n    /* The Java compiler makes use of autoboxing and unboxing\n       so, there will be automatic conversion of the primitive data type\n       and its corresponding object wrapper class\n       \n       ie. an Integer variable can be stored in an int container, and vice versa \n       FYI, because this will be an important concept in OOAD */\n    for(Integer element: a2) { \n        if(i < lengthOfA1) {  \n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, element);\n    }\n    // what about when a1.size() == a2.size() and a1.size() > a2.size()?\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3yYSoohfjDz8PYAWG", 
    "data" : {
        "v" : NumberInt(522), 
        "meta" : {
            "mtime" : 1461401353906.0, 
            "ctime" : 1461401353906.0
        }, 
        "snapshot" : "//perfectly done ;)\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "9ww5o5jtXbXn7R5vo", 
    "data" : {
        "v" : NumberInt(171), 
        "meta" : {
            "mtime" : 1461398171457.0, 
            "ctime" : 1461398171457.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int counter = 0;\n    boolean hasLargerSize = a2.size() > a1.size();\n    int start = a1.size();\n    for (int i = 0; i < a1.size(); i++) {\n        int toAdd;\n        if (counter < a2.size()) {\n            toAdd = a2.get(counter);\n            a1.add(i+1, toAdd);\n            counter++;\n        }\n        i++;\n    }\n    if (hasLargerSize) {\n        for (int i = start; i < a2.size(); i++) {\n            int toAdd = a2.get(i);\n            a1.add(toAdd);\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "SYoN2tXnJEGFPqsFj", 
    "data" : {
        "v" : NumberInt(37), 
        "meta" : {
            "mtime" : 1461405854925.0, 
            "ctime" : 1461405854925.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    \n    if(email != null){\n        for(int i= 0; i < email.length(); i++){\n            if(email.charAt(i)=='@'){\n                return email.substring(0,i);\n            }\n        }\n    }\n    \n    return null;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "PHyye3HTDrqmM3KXm", 
    "data" : {
        "v" : NumberInt(623), 
        "meta" : {
            "mtime" : 1461407063405.0, 
            "ctime" : 1461407063405.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){\n    \n    if(console != null){\n        System.out.print(\"Type one or more words: \");\n        String input = sc.nextLine().toLowerCase();\n        boolean isPalidrome = true;\n        \n        for(int i = 0; i < input.length()/2; i++){\n            char toBeCompared = input.charAt(i);\n            char chAtBack = input.charAt(input.length()-1-i);\n            if(toBeCompared != chAtBack){\n                isPalindrome = false;\n            }\n            \n        }\n        \n        if(isPalindrome){\n            System.out.println(input + \"is a palindrome!\");\n        }else{\n            System.out.println(input + \"is not a palindrome.\");\n        }\n    }else{\n        System.out.println(\"Scanner not declared\");\n    }\n    \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "A5rXjynNapLLxPJg8", 
    "data" : {
        "v" : NumberInt(164), 
        "meta" : {
            "mtime" : 1461406413426.0, 
            "ctime" : 1461406413426.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    String id = \"\";\n    id = id + email.substring(0,email.indexOf(\"@\"));//unnecessary line!\n    //String emaiId = email.substring(0, email.indexOf(\"@\")); \n    //isn't the above much better?\n    //note the clearer variable name and spaces added for readability ;)\n    return id;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3e8aYmjtJXaxMiAkd", 
    "data" : {
        "v" : NumberInt(289), 
        "meta" : {
            "mtime" : 1461413473133.0, 
            "ctime" : 1461413473133.0
        }, 
        "snapshot" : "public static String parseEmail (String email){\n    int start = 0; \n    int end = email.indexOf(\"@\") ;\n    \n    String parseEmail = email.substring(start, end); //i like the variable naming! very readable :)\n    return parseEmail;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "dbJeeYfe7nC2N6j3R", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1461415189040.0, 
            "ctime" : 1461415189040.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.nextLine();\n    String upperCase = input.toUpperCase();\n    boolean isPalindrome = true;\n    \n    for (int i = 0; i < upperCase.length()/2; i++) {\n        if (upperCase.charAt(i) != upperCase.charAt(upperCase.length()-1-i)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XpNnRarCFGSEKi6vL", 
    "data" : {
        "v" : NumberInt(320), 
        "meta" : {
            "mtime" : 1461417112286.0, 
            "ctime" : 1461417112286.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int foo = email.indexOf('@'); //please don't use foo, bar etc. \n    //imagine your prof have to mark you script and has to figure out\n    //what your foo bar stands for... atSignIndex is much better!\n    return email.substring(0,foo);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "BBhsxgKJusHG593XQ", 
    "data" : {
        "v" : NumberInt(612), 
        "meta" : {
            "mtime" : 1461419824391.0, 
            "ctime" : 1461419824391.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner sc){\n    System.out.print (\"Type one or more words: \");\n    String s1 = sc.nextLine();\n    \n    String s2 = \"\";\n    //nice work reversing the string!\n    //however, there's a more efficient method of only comparing half the length of the string\n    //can you do it without s2?\n    for (int i = s1.length()-1; i >= 0; i--){\n        s2+= s1.charAt(i);\n    }\n    \n    String s1Lower = s1.toLowerCase();  // good use of camel-casing for variable names :)\n    String s2Lower = s2.toLowerCase();\n    \n    if (s1Lower.equals(s2Lower)){\n        System.out.println(s1 + \" is a palindrome!\");\n    }else{\n        System.out.println(s1 + \" is not a palindrome.\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "wZPnQPmBeompWkWjh", 
    "data" : {
        "v" : NumberInt(505), 
        "meta" : {
            "mtime" : 1461398176079.0, 
            "ctime" : 1461398176079.0
        }, 
        "snapshot" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cWTXNBLpKxKDmfoD7", 
    "data" : {
        "v" : NumberInt(1172), 
        "meta" : {
            "mtime" : 1461414878642.0, 
            "ctime" : 1461414878642.0
        }, 
        "snapshot" : "//print palindrome takes in a Scanner\n    public static void printPalindrome (Scanner console){\n        System.out.print (\"Type one or more words: \");\n        String input = console.next();\n        String lowerCaseInput = input.toLowerCase(); \n        \n        //TAKEN NOTE! :)\n        //console1 is one of those names you should never name a variable\n        //use lowerCaseInput\n        \n        boolean isPalindrome = true; //flag is very abstract! use a name like isPalindrome\n         \n        //you got the logic! but there are some redundant steps, especially when it hits \n        //i = console1.length()/2\n        //can you think of a way to improve it?\n        //would be great practice :)\n        for(int i = 0; i < lowerCaseInput.length()/2+1; i++){\n            \n                if(lowerCaseInput.charAt(i)!=lowerCaseInput.charAt(lowerCaseInput.length()-i-1)){\n                    isPalindrome = false;\n                }\n            \n        }\n        if(isPalindrome)\n            System.out.println (input+\" is a palindrome!\");\n        else\n            System.out.println (input+\" is not a palindrome.\");\n    \n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "b2vaFHBjQ7vTP2owm", 
    "data" : {
        "v" : NumberInt(85), 
        "meta" : {
            "mtime" : 1461424192390.0, 
            "ctime" : 1461424192390.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n\tString word=console.nextLine();\n\tString lower=word.toLowerCase();\n\t\n\tString reverse=\"\";\n\t//well done! can you think of a better way such that you won't need the reverse String? hint: you only need to iterate through half of the word.length() \n\tfor(int i=word.length()-1; i>=0; i--){\n\t\treverse+=lower.charAt(i);\n\t}\n\t\n\tif(lower.equals(reverse)){\n\t\tSystem.out.println(word + \" is a palindrome!\");\n\t}else{\n\t\tSystem.out.println(word + \" is not a palindrome.\");\n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qrxJDg3MuMHK9qZtD", 
    "data" : {
        "v" : NumberInt(1841), 
        "meta" : {
            "mtime" : 1461415768556.0, 
            "ctime" : 1461415768556.0
        }, 
        "snapshot" : "\n    //your indentation is a bit inconsistent (6 vs 4), better indentation would be nice :)\n    //your logic looks correct though so good job!\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int length;\n    \n    ArrayList<Integer> newList = new ArrayList<Integer>();\n    \n    if (a1.size()>a2.size()){ \n          length = a2.size(); \n    }else{\n          length = a1.size();\n    }\n\n    \n    for(int i=0; i<length; i++){\n  \n        newList.add(a1.get(i));\n        //System.out.println(\"added\"+a1.get(i));\n        newList.add(a2.get(i));\n        //System.out.println(\"added\"+a2.get(i));\n        \n    }\n    //System.out.println(newList);\n    if (a1.size()>a2.size()){ \n        for(int j=length; j<a1.size(); j++){\n            newList.add(a1.get(j));\n              //System.out.println(\"added2\"+a1.get(j));\n        } \n      \n    \n    }else{\n        for(int j=length; j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n          \n    }\n    a1.clear();\n    for(int k = 0; k<newList.size(); k++){\n        a1.add(newList.get(k));\n    }\n    return a1;\n \n    //read the question carefully! are you sure you are supposed to return a new list?\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "FgtZyeqLR9mXuXQ2s", 
    "data" : {
        "v" : NumberInt(81), 
        "meta" : {
            "mtime" : 1461424927661.0, 
            "ctime" : 1461424927661.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\n\tArrayList<Integer> storage=new ArrayList<>(); //nicely done! how would you make it such that you won't have to use the storage arraylist?\n\t\n\tif(a1.size()>a2.size()){\t\t\n\t\tfor(int i=0; i<a2.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a2.size(); k<a1.size(); k++){\n\t\t\tstorage.add(a1.get(k));\n\t\t}\n\t}else{\n\t\tfor(int i=0; i<a1.size(); i++){\n\t\t\tstorage.add(a1.get(i));\n\t\t\tstorage.add(a2.get(i));\n\t\t}\n\t\tfor(int k=a1.size(); k<a2.size(); k++){\n\t\t\tstorage.add(a2.get(k));\n\t\t}\n\t}\n\t\n\ta1.clear();\n\ta1.addAll(storage);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "E3qEwqWNwAo55dGHB", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1461426927459.0, 
            "ctime" : 1461426927459.0
        }, 
        "snapshot" : "public class Rectangle{\n\tprivate int x;\n\tprivate int y;\n\tprivate int width;\n\tprivate int height;\n\t\n\tpublic Rectangle(int x, int y, int width, int height){\n\t\tthis.x=x;\n\t\tthis.y=y;\n\t\tthis.width=width;\n\t\tthis.height=height;\n\t}\n\t\n\tpublic int getHeight(){\n\t\treturn height;\n\t}\n\t\n\tpublic int getWidth(){\n\t\treturn width;\n\t}\n\t\n\tpublic int getX(){\n\t\treturn x;\n\t}\n\t\n\tpublic int getY(){\n\t\treturn y;\n\t}\n\t\n\tpublic String toString(){\n\t\treturn \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "KDbjLbWSafo8gEv4a", 
    "data" : {
        "v" : NumberInt(627), 
        "meta" : {
            "mtime" : 1461427107383.0, 
            "ctime" : 1461427107383.0
        }, 
        "snapshot" : "import java.util.Scanner;\npublic class Adder {\n    public static void main (String [] args){\n        int sum = 0;\n        \n        Scanner reader = new Scanner(System.in);\n         //System.out.println(\"Enter number >\");\n        int input = reader.nextInt();\n    \n        while(input>0){\n            sum += input;\n            //System.out.println(\"Enter number >\");\n            input = reader.nextInt();\n        }\n        System.out.println(\"The sum is \"+ sum+\".\");\n    }\n}\n  \n", 
        "type" : "text"
    }
}
{ 
    "_id" : "cphsWauMyuPPgWD4d", 
    "data" : {
        "v" : NumberInt(60), 
        "meta" : {
            "mtime" : 1461427224355.0, 
            "ctime" : 1461427224355.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //very nicely done! but your code is very hard to read :(((\n    \n\tint x1=Math.min(rectA.getX(),rectB.getX());\n\tint x2=Math.max(rectA.getX()+rectA.getWidth(),rectB.getX()+rectB.getWidth()); //can split into multiple lines\n\t//x2 can have a better name e.g. maxOfX\n\tint y1=Math.min(rectA.getY(),rectB.getY());\n\tint y2=Math.max(rectA.getY()+rectA.getHeight(),rectB.getY()+rectB.getHeight());\n\t//same for y2\n\t\n\t//this variable name is awesome!\n\tRectangle unionRect=new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t\n\treturn unionRect; \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "an6Be2dHgkMzY6R2m", 
    "data" : {
        "v" : NumberInt(563), 
        "meta" : {
            "mtime" : 1461429528656.0, 
            "ctime" : 1461429528656.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int height;\n    private int width;\n    private int x;\n    private int y;\n    \n    public Rectangle(int x, int y, int width, int height){\n        //should be careful: you may want to put it in order so you don't accidentally miss out\n        //keep a consistent ordering to avoid carelessness!\n        this.height = height;\n        this.width = width;\n        this.x = x;\n        this.y = y;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n\n\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "zkkLeoJiFc7ifSYpR", 
    "data" : {
        "v" : NumberInt(1014), 
        "meta" : {
            "mtime" : 1461431392945.0, 
            "ctime" : 1461431392945.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    // is there a more efficient method without using additional ArrayList and 4 for loops?\n    ArrayList<Integer> results = new ArrayList<>();\n    int i;\n    for(i =0; i < Math.min(a1.size(), a2.size()); i++){\n        results.add(a1.get(i));\n        results.add(a2.get(i));\n    }\n    \n    for(int j = i; j < a1.size(); j++){\n       results.add(a1.get(j));\n    }\n    \n    for(int k = i; k < a2.size(); k++){\n        results.add(a2.get(k));\n    }\n    \n    a1.clear();\n    for(int temp : results){ \n        a1.add(temp);        \n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "QTHr6whP4wafqngc5", 
    "data" : {
        "v" : NumberInt(159), 
        "meta" : {
            "mtime" : 1461432219898.0, 
            "ctime" : 1461432219898.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int atSign = email.indexOf('@'); //atSignIndex is a better name :)\n    String result = email.substring(0, atSign);\n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "SobPDgwypKQtoxrH3", 
    "data" : {
        "v" : NumberInt(39), 
        "meta" : {
            "mtime" : 1461425646206.0, 
            "ctime" : 1461425646206.0
        }, 
        "snapshot" : "    public static void printPalindrome(Scanner console) {\n        System.out.print(\"Type one or more words: \");\n        String word = console.nextLine();\n        String word1 = word.toUpperCase(); //upperCaseWords would be a better name, since 1 in word1 has no meaning\n        boolean isPalindrome = true;\n        int length = word1.length();\n        int length1 = length; //same goes for this!\n        if (length % 2 == 0) {\n            length1 = length / 2;\n        } else {\n            length1 = length / 2 + 1;\n        }\n        if (length > 0) {\n            for (int i = 0; i<= length1;i++) { //would length/2 be sufficient? why or why not?\n                if(word1.charAt(i)!=word1.charAt(length-1-i)){\n                    isPalindrome = false;\n                }\n            }\n            \n        } else {\n            isPalindrome = false;\n        }\n        if (isPalindrome) {\n            System.out.println(word+\" is a palindrome!\");\n        } else {\n           System.out.println(word+\" is not a palindrome.\"); \n        }\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "3w2maSSXtmfwJRjQf", 
    "data" : {
        "v" : NumberInt(867), 
        "meta" : {
            "mtime" : 1461403367518.0, 
            "ctime" : 1461403367518.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int lastIndex = email.indexOf('@');\n    int firstIndex = email.lastIndexOf(' ', lastIndex); \n    //i see you are looking for the last whitespace in case there are spaces in front! \n    //not necessary in this case (not required by question)\n    //addtionally, you might want to look below for some tips:\n    /*\n        looking at the String API\n        lastIndexOf(int ch, int fromIndex)\n        Returns the index within this string of the last occurrence of the specified character, \n        searching backward starting at the specified index.\n        \n        a very powerful API!\n        \n        you may wish to explore an alternative API\n        \n        trim()\n        Returns a copy of the string, with leading and trailing whitespace omitted.\n        \n        String email = \" ahkow \"\n        so email.trim() returns \"ahkow\"\n        \n    */\n    \n    String rMail = email.substring(firstIndex+1,lastIndex); \n    //knowing the above, how would you change this?\n    //your challenge is as follows! \n    //1) implement without firstIndex\n    //2) implement with trim()\n    \n    return rMail;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "NqGDjMiubmiyzG6di", 
    "data" : {
        "v" : NumberInt(123), 
        "meta" : {
            "mtime" : 1461421958221.0, 
            "ctime" : 1461421958221.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    //nice succinct method, i like! could have better variable names though, e.g. lastIndex`\n    int pos=email.indexOf(\"@\");\n\treturn email.substring(0,pos);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "MbcSZMD5p7hXLSZow", 
    "data" : {
        "v" : NumberInt(160), 
        "meta" : {
            "mtime" : 1461433448925.0, 
            "ctime" : 1461433448925.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int lastPos= email.indexOf(\"@\"); //slightly misleading varibable name! \n    //int lastPostIndex = lastIndexOf(\"@\") would fit the above variable name better\n    return email.substring(0,lastPos);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6AgYMJRnW2EgwFvLe", 
    "data" : {
        "v" : NumberInt(165), 
        "meta" : {
            "mtime" : 1461433575874.0, 
            "ctime" : 1461433575874.0
        }, 
        "snapshot" : "public static double doubleInt (int first, int second){\n    double sum = (double)first+second; //int to double\n    return sum;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "orXp3tSadk54ExgCT", 
    "data" : {
        "v" : NumberInt(167), 
        "meta" : {
            "mtime" : 1461433714726.0, 
            "ctime" : 1461433714726.0
        }, 
        "snapshot" : "public static void quotify(String sentence){\n    String newString = \"\\\"\"+sentence+\"\\\"\"; // \\\" for quotation mark\n    System.out.println(newString);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "52mrptmtekrpQRPMt", 
    "data" : {
        "v" : NumberInt(822), 
        "meta" : {
            "mtime" : 1461416806436.0, 
            "ctime" : 1461416806436.0
        }, 
        "snapshot" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    \n        /* (Taken note!!!)\n            ~ W\n            Why we use this.x here ~\n            As you can see, there is two different x's here\n            the one passed in through the parameters of the constructor\n            i.e. public Rectangle(int x ...)\n            and the other is the instance variable x in the field\n            i.e. private int x;\n            \n            how does java know which is it referring to?\n            \n            in general - it will take the x closest to it, or more what nerds say \"more local in scope\"\n            so in this case, when we say x without the this, we are referring to the parameters\n            defined in the constructor\n            \n            so how do you tell java that you want the instance variable instead?\n            that's where the keyword \"this\" comes into play\n            \"this\" simply tells java \"I want the current instance of Rectangle!\"\n            \"this\" is an object of type Rectangle\n            \n            this.x = x;\n            \n            will simply mean with my current object Rectangle, set the object's instance variable\n            of x to be the the value of x that is passed in the constructor\n            \n            however, let's say that there is no \"x\" being passed in, e.g. in your getX() method\n            then java will just take the next nearest \"x\" which is the instance variable itself\n            so you can simply\n            \n            public int getX(){\n                return x;\n            }\n            \n            hope this clarifies!\n        */\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        String dimensions = \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n        return dimensions;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "fSud4YL4vCa6s76Kc", 
    "data" : {
        "v" : NumberInt(807), 
        "meta" : {
            "mtime" : 1461417214884.0, 
            "ctime" : 1461417214884.0
        }, 
        "snapshot" : "//TAKEN NOTE:)\n\n//very methodical method! very clear what you are trying to do\n//however, you may want to explore Math.min(int a, int b) and Math.max(int a, int b)\n//it'll save you a lot fo time writing dem if elses!\n//also, it will be awesome if you could make it a point to add curly braces even if it's just one\n//line for the body of your if statement\n\n/*\n    i.e.\n    if(a > b){\n        a = b;\n    } else {\n        b = a;\n    }\n*/\n\n//the reasoning for this is simple: imagine if you have to add another 3 more lines\n//to each of the if else below, then the effort spent will be a lot and if you miss out\n//on a curly brace, you'll spend more time debugging\n//so curly braces are your best friend!\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //x\n    int x;\n    x = Math.min(rectA.getX(), rectB.getX());\n \n    //width\n    int width;\n    \n    if(rectA.getX()+rectA.getWidth()>rectB.getX()+rectB.getWidth()){\n        width = rectA.getX()+rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+rectB.getWidth()-x;\n    }\n    //y\n    int y;\n    y = Math.min(rectA.getY(), rectB.getY());\n\n    //height\n    int height;\n    \n    if(rectA.getY()+rectA.getHeight()>rectB.getY()+rectB.getHeight()){\n        height = rectA.getY()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getY()+rectB.getHeight()-y;\n    }\n    \n    Rectangle r = new Rectangle(x,y,width,height);\n    return r;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "nSfeXkwEFP8M3RfYL", 
    "data" : {
        "v" : NumberInt(774), 
        "meta" : {
            "mtime" : 1461404396163.0, 
            "ctime" : 1461404396163.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){\n    boolean a = true; // very abstract name! use isPalindrome instead to avoid confusing yourself\n    String input1 = console.nextLine(); //same here! input alone is fine, but what does the 1 mean?\n    String input = input1.toLowerCase(); //lowerCaseInput\n    \n    //very nicely done, you're avoiding redundant steps!\n    for(int i = 0; i<= input.length()/2; i ++){\n        if(input.charAt(i) != input.charAt(input.length()-i-1)){\n            a = false;\n        } \n    }//add a new line after each block so it's more readable for the profs! they serve as logical segments\n    if(a == false){ \n        //the reason why you are compelled to do this (a==false) is because your naming for \n        //a makes it very unintuitive\n        //imagine if you used boolean isPalindrome = true;  instead, then you would type\n        //if(!isPalindrome) directly translates to \"if it is not Palindrome\"\n        //isn't it so much clearer and understandable than if(!a)\n        //if(!a) doesn't mean anything in the real world so it's hard to understand\n        //so name your variables well! and they will take care of you\n        System.out.println(\"Type one or more words: \" + input1 + \" is not a palindrome.\");\n    } else{\n    System.out.println(\"Type one or more words: \" + input1 + \" is a palindrome!\");//where's the indent\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3HnTq5XeQzfEhN8qy", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461435341470.0, 
            "ctime" : 1461435341470.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "bXqTWmEiGJSJEhyiG", 
    "data" : {
        "v" : NumberInt(87), 
        "meta" : {
            "mtime" : 1461434846574.0, 
            "ctime" : 1461434846574.0
        }, 
        "snapshot" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    // try to leave spacing between each method block for readability and debugging\n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    public int getX() {\n        return x;\n    }\n    public int getY() {\n        return y;\n    }\n    public String toString() {\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cjDqNpELERFyXA2FT", 
    "data" : {
        "v" : NumberInt(55), 
        "meta" : {
            "mtime" : 1461405151321.0, 
            "ctime" : 1461405151321.0
        }, 
        "snapshot" : "//very streamlined code, very good solution! which is nice!\n//watch out for all the different code style issues!\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i=0;\n    //if you are doing for without the declaration, it means to use a WHILE loop instead :P\n    for (; i < a2.size() && (i*2+1) < a1.size(); i++) {\n\ta1.add(i*2+1, a2.get(i));//where's the indent? >:(\n    } //leave a new line here\n    if (i < a2.size()) {\n\twhile (i < a2.size()) {//where's the indent? >:(\n\t    a1.add(a2.get(i));\n\t    i++;\n\t}//where's the indent? >:(\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rvT9ZZh6YQQGntbQY", 
    "data" : {
        "v" : NumberInt(1069), 
        "meta" : {
            "mtime" : 1461429951652.0, 
            "ctime" : 1461429951652.0
        }, 
        "snapshot" : "//very methodical, but can be a lot clearer\n//however, you may want to explore Math.min(int a, int b) and Math.max(int a, int b)\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r1 = null; //call it unionRectangle, r1 (the 1 has no meaning)\n    //plus you might associate r1 with x1, which is NOT the case\n    int x1 = rectA.getX();\n    int x2 = rectB.getX();\n    int y1 = rectA.getY();\n    int y2 = rectB.getY();\n    \n    int smallX = x1;\n    if (rectA.getX() > rectB.getX()){ //why call getX() when you already stored it in x1,x2?\n        smallX = x2;\n    }   \n    \n    //would be clearer in an if else construct\n    //the value of this bigX is actually tied to the if statement below, \n    //for such cases, ALWAYS use an else block, because you might accidentally move the below line\n    //elsewhere and if there's an error you cannot really debug easily\n    //would be super clear if you just used int bigX = Math.max(...)\n    int bigX = x1 + rectA.getWidth(); \n    if (bigX < x2+ rectB.getWidth()){\n        bigX = x2 + rectB.getWidth();\n    } \n    \n    int smallY = y1;\n    if (rectA.getY() > rectB.getY()){\n        smallY = y2;\n    }   \n    \n    int bigY = y1 + rectA.getHeight();\n    if (bigY < y2+ rectB.getHeight()){\n        bigY = y2 + rectB.getHeight();\n    }\n    \n    int height = bigY - smallY;\n    int width = bigX - smallX;\n    \n    r1 = new Rectangle(smallX, smallY, width, height);\n    \n    return r1;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "FkXzWh5z6d4MQCHQ3", 
    "data" : {
        "v" : NumberInt(591), 
        "meta" : {
            "mtime" : 1461432463336.0, 
            "ctime" : 1461432463336.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String word = console.next(); //word is singular, but the above is plural :O, avoid inconsistency, just use input\n    String word2 = word.toLowerCase(); //bad naming! the 2 in word2 has no meaning. use lowerCaseWord instead or lowerCaseInput\n    \n    int n = word.length(); //not necessary!\n    boolean isPalindrome = true; //good naming!\n    \n    //very nice logic! no redundant steps\n    for (int i=0; i<n/2; i++) {\n        //you are checking using the length of word but accessing word2\n        //while in this case it doesn't really matter, it can seriously mess up your logic in other qns\n        //rule of thumb: be consistent!\n\t    if (word2.charAt(i) != word2.charAt(n-1-i)) {\n\t        isPalindrome = false;\n\t    break; //unnecessary! HINT: you can set your if conditions to break based on the value of isPalindrome and the \"&&\" symbol\n\t    }\n    }\n    \n    if(isPalindrome) {\n\t    System.out.println(word + \" is a palindrome!\");\n    } else {\n\t    System.out.println(word + \" is not a palindrome.\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6pjJjCP3ZxWJ3zSNX", 
    "data" : {
        "v" : NumberInt(534), 
        "meta" : {
            "mtime" : 1461403322937.0, 
            "ctime" : 1461403322937.0
        }, 
        "snapshot" : "//proper indentation would be awesome!\n/*\n    you may also wish to explore the following API, which will help you find the index of '@' faster!\n    \n    lastIndexOf(String str)\n    Returns the index within this string of the last occurrence of the specified substring.\n\n    so here's an example of how to use it\n    String name = \"ahkow\";\n    int indexOfK = name.lastIndexOf(\"k\");\n    System.out.println(indexOfK); //prints 2\n*/\n\npublic static String parseEmail(String email){\n        \n        for(int i = 0; i <email.length(); i++){\n            if(email.charAt(i) == '@'){\n                return email.substring(0,i);\n            }\n        }\n        return null;\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "rfJGSWwypfTYaSdEf", 
    "data" : {
        "v" : NumberInt(120), 
        "meta" : {
            "mtime" : 1461416712391.0, 
            "ctime" : 1461416712391.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int i = email.indexOf('@'); //index would be a better name!\n    return email.substring(0, i);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "JHbixSyYtoYbA2Qv6", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461437840147.0, 
            "ctime" : 1461437840147.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "kDcKXtu4khzytag8Z", 
    "data" : {
        "v" : NumberInt(262), 
        "meta" : {
            "mtime" : 1461445485762.0, 
            "ctime" : 1461445485762.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int stopPoint = email.indexOf(\"@\"); //good job!\n    return email.substring(0,stopPoint);\n}\n\n    \n", 
        "type" : "text"
    }
}
{ 
    "_id" : "uXy6Fh92mySfkNdtu", 
    "data" : {
        "v" : NumberInt(886), 
        "meta" : {
            "mtime" : 1461418202358.0, 
            "ctime" : 1461418202358.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int shortestList = a1.size(); // we usually use \"list\" to denote a collection such as ArrayList, not for int values\n    if(shortestList > a2.size()){\n        shortestList = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestList > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestList--; \n    }\n    merged.addAll(a1);\n    merged.addAll(a2); \n    a1.clear();\n    a1.addAll(merged);\n}\n// your method works, but it's pretty unconventional\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "4mnpnFc5gn7EpeJwT", 
    "data" : {
        "v" : NumberInt(299), 
        "meta" : {
            "mtime" : 1461433492985.0, 
            "ctime" : 1461433492985.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i;\n    for (i = 0; i < a2.size() && (i*2+1) < a1.size(); i++) {    // good logic and clean!\n\t    a1.add(i*2+1, a2.get(i));\n    }\n    //if (i < a2.size()) {    // you don't need the if conditional statement here\n\t    while (i < a2.size()) { // since the while loop already makes use of a conditional statement, executing only if the boolean condition evaluates to true :)\n\t        a1.add(a2.get(i));\n\t        i++;\n\t    }\n    //}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "W4LLWpoyN4SDNDjb5", 
    "data" : {
        "v" : NumberInt(368), 
        "meta" : {
            "mtime" : 1461462195816.0, 
            "ctime" : 1461462195816.0
        }, 
        "snapshot" : "\npublic static String parseEmail(String email){\n    String result = \"\"; // you could initialise result at line 5 since it's only used then\n    int index = email.indexOf('@');\n    result = email.substring(0, index); \n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Qx5BDEuSho3EJGNKS", 
    "data" : {
        "v" : NumberInt(519), 
        "meta" : {
            "mtime" : 1461462628131.0, 
            "ctime" : 1461462628131.0
        }, 
        "snapshot" : "//import java.util.*;\npublic static void printPalindrome (Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String store = \"\";\n    \n    for (int i = input.length()-1; i >= 0; i--){\n        store += input.charAt(i) + \"\";\n    }\n    \n    if(input.equalsIgnoreCase(store)) {\n        System.out.print(input + \" is a palindrome!\");\n    } else {\n        System.out.print(input + \" is not a palindrome.\");\n    }\n}\n/*  Good job! \n    Additionally, is there way to check if a word is a palindrome\n    simply by comparing the characters in the word?\n*/", 
        "type" : "text"
    }
}
{ 
    "_id" : "JTfJZDtn7pCjajLvf", 
    "data" : {
        "v" : NumberInt(812), 
        "meta" : {
            "mtime" : 1461420330045.0, 
            "ctime" : 1461420330045.0
        }, 
        "snapshot" : "    public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        \n        int count = 0;\n        int originalL1Size = a1.size();\n        \n        for (int i = 0; i < a1.size(); i+=2){\n            if (count < a2.size()){\n                int currentInt = a2.get(count);\n                a1.add(i+1, currentInt);\n                \n                ++count;\n                \n            }\n        }  \n\n        if (a2.size() > originalL1Size){\n            \n            for (int j = count; j <a2.size(); j++){\n                a1.add(a2.get(j));\n                \n            }\n        }\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "nWebCQavNQgPX3pim", 
    "data" : {
        "v" : NumberInt(339), 
        "meta" : {
            "mtime" : 1461404503701.0, 
            "ctime" : 1461404503701.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    return email.substring(0,email.lastIndexOf(\"@\")); // email.substring() returns a String variable that has to be (a) stored in a String container or (b) returned by the method\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "WErBHAhYwwYrfqrax", 
    "data" : {
        "v" : NumberInt(129), 
        "meta" : {
            "mtime" : 1461465550111.0, 
            "ctime" : 1461465550111.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> r=new ArrayList<>\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "5Wr9xwqs7iS74AaaX", 
    "data" : {
        "v" : NumberInt(387), 
        "meta" : {
            "mtime" : 1461466479477.0, 
            "ctime" : 1461466479477.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        reutrn width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"++\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }   // typo here --> \"Rectangle[x=\" + x + \",y=\" ...\n        // you may want to put spacing between operators so that it's clearer too :)\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "8fgSp7QF9vKmFg6bj", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461468146529.0, 
            "ctime" : 1461468146529.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "KpoBX2xmFghsvRNM6", 
    "data" : {
        "v" : NumberInt(456), 
        "meta" : {
            "mtime" : 1461463478788.0, 
            "ctime" : 1461463478788.0
        }, 
        "snapshot" : "//nicely done!\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = 0;\n    for (i = 0; i < a2.size() && (i*2+1) < a1.size(); i++) { \n        //add(int index, E element) \n        //i*2+1 to get odd number (index)\n        a1.add(i*2+1, a2.get(i));\n    }   \n    while (i < a2.size()) { \n        a1.add(a2.get(i));\n        i++;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "TszasFYuE6dRkvHrF", 
    "data" : {
        "v" : NumberInt(992), 
        "meta" : {
            "mtime" : 1461429148420.0, 
            "ctime" : 1461429148420.0
        }, 
        "snapshot" : "//very nice naming conventions! keep it up! you used the efficient method too\n//however, code style needs work, especially indentation\n\npublic static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");   \n    String input = console.nextLine();\n    String inputUpper = input.toUpperCase();\n    int wordLength = inputUpper.length();\n    \n    String toReturn = \"\";\n    boolean ifPalindrome = true;\n    for(int i =0; i < wordLength/2; i++){\n        char start = inputUpper.charAt(i);\n        char end = inputUpper.charAt(wordLength - (i +1));\n        if(start != end){\n            ifPalindrome = false;\n        }\n    }\n    \n    if(ifPalindrome){\n        toReturn = input + \" is a palindrome!\";//indent!\n    } else{ //where's my space urghhhh \n       toReturn = input + \" is not a palindrome.\"; \n        \n    }\n    \n    System.out.print(toReturn);//indent!\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "4ScdHxzYe77rABM97", 
    "data" : {
        "v" : NumberInt(473), 
        "meta" : {
            "mtime" : 1461469574339.0, 
            "ctime" : 1461469574339.0
        }, 
        "snapshot" : "//good job!\n\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x , int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        String result = \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n        return result;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "oG6Wi7HsgR3zTE6Pg", 
    "data" : {
        "v" : NumberInt(637), 
        "meta" : {
            "mtime" : 1461463149214.0, 
            "ctime" : 1461463149214.0
        }, 
        "snapshot" : "public static void printPalindrome(String word) {\n    int length = word.length();\n    String s1 = word.substring(0, length/2);\n    String s2 = word.substring(length/2);\n        \n    if (length % 2 == 0) {\n        for (int i = 0; i < length/2; i++) {\n                if (s1.charAt(i) == s2.charAt()\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Yi4EC3xGS4g33v6JP", 
    "data" : {
        "v" : NumberInt(127), 
        "meta" : {
            "mtime" : 1461471976318.0, 
            "ctime" : 1461471976318.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    int symbol = email.indexOf(\"@\");\n    return email.substring(0, symbol);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "TGpz8F33jiYyDS5WT", 
    "data" : {
        "v" : NumberInt(489), 
        "meta" : {
            "mtime" : 1461462400334.0, 
            "ctime" : 1461462400334.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    String result = \"\";\n    for (int i = 0; i < email.length(); i++) {\n        char c = email.charAt(i);\n        if (c == '@') {\n            result = email.substring(0, i);\n        }\n    }\n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "hFBTSEpn7QArePFiL", 
    "data" : {
        "v" : NumberInt(769), 
        "meta" : {
            "mtime" : 1461473006623.0, 
            "ctime" : 1461473006623.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String input = console.nextLine();\n    String word = input.toLowerCase();\n    \n    int length = word.length();\n    String left = word.substring(0, length / 2);\n    String right = \"\";\n    for (int i = length - 1; i >= length - length / 2; i--) {\n        right = right + word.charAt(i);\n    }\n    \n    if (left.equals(right)) {\n        System.out.println(input + \" is a palindrome!\");\n    } else {\n        System.out.println(input + \" is not a palindrome.\");\n    }\n}\n// Good job!", 
        "type" : "text"
    }
}
{ 
    "_id" : "s62YCxh3HT4XY9eDY", 
    "data" : {
        "v" : NumberInt(66), 
        "meta" : {
            "mtime" : 1461475329679.0, 
            "ctime" : 1461475329679.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qGtn9YFf3x5i3LR4T", 
    "data" : {
        "v" : NumberInt(8), 
        "meta" : {
            "mtime" : 1461475555203.0, 
            "ctime" : 1461475555203.0
        }, 
        "snapshot" : "public ", 
        "type" : "text"
    }
}
{ 
    "_id" : "K5hQct47m92YTT9JQ", 
    "data" : {
        "v" : NumberInt(5), 
        "meta" : {
            "mtime" : 1461433661015.0, 
            "ctime" : 1461433661015.0
        }, 
        "snapshot" : "public class Rectangle{\n\tprivate int x;\n\tprivate int y;\n\tprivate int width;\n\tprivate int height;\n\n\tpublic Rectangle(int x, int y, int width, int height){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tpublic int getHeight() {\n\t\treturn height;\n\t}\n\n\tpublic int getWidth() {\n\t\treturn width;\n\t}\n\n\tpublic int getX() {\n\t\treturn x;\n\t}\n\n\tpublic int getY(){\n\t\treturn y;\n\t}\n\n\tpublic String toString(){\n\t\tString res = \"Rectangle[\";\n\t\tres += \"x=\" + x + \",\";\n\t\tres += \"y=\" + y + \",\";\n\t\tres += \"width=\" + width + \",\";\n\t\tres += \"height=\" + height +\"]\";\n\t\treturn res;\n\t}\n\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "bhdrSvnWL36h8Anjq", 
    "data" : {
        "v" : NumberInt(646), 
        "meta" : {
            "mtime" : 1461470675086.0, 
            "ctime" : 1461470675086.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int Ax = rectA.getX();\n    int Bx = rectB.getX();\n    int newX = Ax;\n    if(Ax > Bx){\n        newX = Bx;\n    }\n    \n    int Ay = rectA.getY();\n    int By = rectB.getY();\n    int newY = Ay;\n    if(Ay > By){\n        newY = By;\n    }\n    //you can explore the use of Math.min(int a, int b)!\n     \n    int newWidth = Bx + rectB.getWidth();\n    if (newWidth < Ax + rectA.getWidth()){\n        newWidth = Ax + rectA.getWidth();\n    } \n    \n    int newHeight = By + rectB.getHeight();\n    if (newHeight < Ay + rectA.getHeight()){\n        newHeight = Ay + rectA.getHeight();\n    }\n    \n    int width = newWidth - newX;\n    int height = newHeight - newY;\n\n    Rectangle r = new Rectangle(newX, newY, width, height);\n    return r;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "fJnG9wAzaZHRtvKFz", 
    "data" : {
        "v" : NumberInt(590), 
        "meta" : {
            "mtime" : 1461475606103.0, 
            "ctime" : 1461475606103.0
        }, 
        "snapshot" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (int x, int y, int width, int height) {\n        //should be bottom-left coordinates to solve Q5 // yep you're right, thanks for pointing out!\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Eeui6aurKCCCehu6Q", 
    "data" : {
        "v" : NumberInt(355), 
        "meta" : {
            "mtime" : 1461434998545.0, 
            "ctime" : 1461434998545.0
        }, 
        "snapshot" : "//good\npublic class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ZtPzYPkxt2oFMi9uQ", 
    "data" : {
        "v" : NumberInt(210), 
        "meta" : {
            "mtime" : 1461471655113.0, 
            "ctime" : 1461471655113.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n\t\tint recA_x = rectA.getX();\n\t\tint recA_y = rectA.getY();\n\t\tint min_x = rectB.getX();\n\t\tif (min_x > recA_x) {\n\t\t\tmin_x = recA_x;\n\t\t}\n\t\tint max_x = rectB.getX() + rectB.getWidth();\n\t\tif (max_x < recA_x + rectA.getWidth()) {\n\t\t\tmax_x = recA_x + rectA.getWidth();\n\t\t}   // good assignment of variables and use of if conditions! \n\n\t\tint min_y = rectB.getY();\n\t\tif (min_y > recA_y) // {} \n\t\t\tmin_y = recA_y;\n\t\tint max_y = rectB.getY() + rectB.getHeight();\n\t\tif (max_y < recA_y + rectA.getHeight()) // {}\n\t\t\tmax_y = recA_y + rectA.getHeight();\n\t\tint width = max_x - min_x;\n\t\tint height = max_y - min_y;\n\t\tRectangle result = new Rectangle(min_x, min_y, width, height);\n\t\treturn result;\n\t}\n\t// good job! :D", 
        "type" : "text"
    }
}
{ 
    "_id" : "sNjFbkfiHyAKQyp8M", 
    "data" : {
        "v" : NumberInt(787), 
        "meta" : {
            "mtime" : 1461476403917.0, 
            "ctime" : 1461476403917.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int aMinX = rectA.getX();\n    int aMinY = rectA.getY();\n    int aMaxX = aMinX + rectA.getWidth();\n    int aMaxY = aMinY + rectA.getHeight();\n    \n    int bMinX = rectB.getX();\n    int bMinY = rectB.getY();\n    int bMaxX = bMinX + rectB.getWidth();\n    int bMaxY = bMinY + rectB.getHeight();\n    \n    int newX = Math.min(aMinX, bMinX);\n    int newY = Math.min(aMinY, bMinY);\n    int newWidth = Math.max(aMaxX, bMaxX) - newX;\n    int newHeight = Math.max(aMaxY, bMaxY) - newY;\n    \n    return new Rectangle(newX, newY, newWidth, newHeight);\n}\n// good use of the Math class", 
        "type" : "text"
    }
}
{ 
    "_id" : "dgGjZdCp3GvH59c8C", 
    "data" : {
        "v" : NumberInt(98), 
        "meta" : {
            "mtime" : 1461418196085.0, 
            "ctime" : 1461418196085.0
        }, 
        "snapshot" : "//how would you do it without using an additional reverse string?\n//hint: compare individual characters!\n\npublic static void printPalindrome(Scanner console){    \n    System.out.print(\"Type one or more words: \");\n    String comp = console.nextLine();\n    String compUpperCase = comp.toUpperCase();\n    String inverse = \"\";\n    for(int i = compUpperCase.length()-1; i >= 0; i--){\n        char currentCh = compUpperCase.charAt(i);            \n        inverse += currentCh;\n    }\n    if(compUpperCase.equals(inverse)){\n        System.out.println(comp + \" is a palindrome!\");\n    }else{\n        System.out.println(comp + \" is not a palindrome.\");\n    }  \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "zJkKFFrJ3dkSmu3vq", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461477945423.0, 
            "ctime" : 1461477945423.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "zWHguoMcaweypDaK6", 
    "data" : {
        "v" : NumberInt(229), 
        "meta" : {
            "mtime" : 1461477880071.0, 
            "ctime" : 1461477880071.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    String result = \"\";\n    int indexOfAt = email.indexOf(\"@\");\n    result = email.substring(0,indexOfAt); //good names!\n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "4uXQC5ghutQwCaTA3", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461478147960.0, 
            "ctime" : 1461478147960.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "b77D52RMt3AZ7neSC", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461478153400.0, 
            "ctime" : 1461478153400.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "4ikXtdbQGpaW54eEJ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461478168189.0, 
            "ctime" : 1461478168189.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "sTPX6kZbrSZqouwRt", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461478175419.0, 
            "ctime" : 1461478175419.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "3cZT2SMw46Sx5TNnK", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461478181752.0, 
            "ctime" : 1461478181752.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "v4NWqaJtusKTQZTpK", 
    "data" : {
        "v" : NumberInt(310), 
        "meta" : {
            "mtime" : 1461478641855.0, 
            "ctime" : 1461478641855.0
        }, 
        "snapshot" : "public static void flippedTriangle (int height){\n\n\tfor(int i = 1; i <=height; i++){\n\t\t\tfor(int space = height; space >i; space--){\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t\tint star = i; //new variable as i get's affected at line 10.\n\t\t\twhile(star>0){ \n\t\t\t\tSystem.out.print(\"*\");\n\t\t\t\tstar--;\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\n\t\t}\t\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "DNv23vyHgAHzRTqPZ", 
    "data" : {
        "v" : NumberInt(393), 
        "meta" : {
            "mtime" : 1461432789433.0, 
            "ctime" : 1461432789433.0
        }, 
        "snapshot" : "    public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int length = 0;\n        int longer = 0;\n        \n        if (a1.size()> a2.size()){\n            length = a2.size();\n            \n        } else {\n            length = a1.size();\n        }\n        for (int i = 0; i < length; i++){\n            int a = a1.get(i);\n            result.add(a);\n            int b = a2.get(i);\n            result.add(b);\n            \n        }\n        // it'll be neater + less confusing if all of this if/else is combined with the one at line 6\n        ArrayList<Integer> longerList = new ArrayList<>();\n        if (length==a1.size()) {\n            longer = a2.size();\n            longerList = a2;\n            \n        } else {\n            longer = a1.size();\n            longerList = a1;\n            \n        }\n        for (int j = length; j < longer; j++) {\n                int c = longerList.get(j);\n                result.add(c);  \n        }\n        a1.clear();\n        a1 = result; // this is changing the object reference of the local variable. The question requires the global variable that's passed into the method's parameters to be changed\n        System.out.println(a1); // output not required for this question\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "58kduBgdqdeG4otag", 
    "data" : {
        "v" : NumberInt(256), 
        "meta" : {
            "mtime" : 1461478996773.0, 
            "ctime" : 1461478996773.0
        }, 
        "snapshot" : "//good\npublic static String parseEmail(String email) {\n    int index = email.indexOf('@');\n    return email.substring(0,index);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rCwPuaB5a9qZSRxAa", 
    "data" : {
        "v" : NumberInt(391), 
        "meta" : {
            "mtime" : 1461479776692.0, 
            "ctime" : 1461479776692.0
        }, 
        "snapshot" : "//well done!\n\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "GvGFscsMvzRMg2twq", 
    "data" : {
        "v" : NumberInt(1413), 
        "meta" : {
            "mtime" : 1461480288478.0, 
            "ctime" : 1461480288478.0
        }, 
        "snapshot" : "//very nice and easy to read, good job\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int aMinX = rectA.getX();\n    int aMaxX = rectA.getX() + rectA.getWidth();\n    \n    int bMinX = rectB.getX();\n    int bMaxX = rectB.getX() + rectB.getWidth();\n    \n    int minW = Math.min(aMinX, bMinX);\n    int maxW = Math.max(aMaxX, bMaxX) - minW;\n    \n    int aMinY = rectA.getY();\n    int aMaxY = rectA.getY() + rectA.getHeight();\n    \n    int bMinY = rectB.getY();\n    int bMaxY = rectB.getY() + rectB.getHeight();\n    \n    int minH = Math.min(aMinY, bMinY);\n    int maxH = Math.max(aMaxY, bMaxY) - minH;\n    \n    return new Rectangle(minW, minH, maxW, maxH);\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "KTDmvaaCM9YGay3Ch", 
    "data" : {
        "v" : NumberInt(435), 
        "meta" : {
            "mtime" : 1461475184360.0, 
            "ctime" : 1461475184360.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    \n    int pos = email.indexOf(\"@\"); //variable name could be better! posOfAt\n    String emailID = email.substring(0, pos); //good variable name!\n    if (emailID == null) { //would substring ever return null? you should be checking email if you want to check :P\n        return \"\";\n    }    \n    return emailID; \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "JvsqNZB8tvdGfwaCY", 
    "data" : {
        "v" : NumberInt(2658), 
        "meta" : {
            "mtime" : 1461479657477.0, 
            "ctime" : 1461479657477.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    String input = sc.next(); //what if the user types in more words? :O\n    boolean isPalindrome = true; //good variable naming\n    String temp = input.toLowerCase(); //temp has no meaning, use lowerCaseInput instead! \n    \n    //good efficient method!\n    for(int i = 0; i<=temp.length()/2; i++) {\n        if(temp.charAt(i)!= temp.charAt(temp.length()-i-1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if(isPalindrome) {\n        System.out.print(input + \" is a palindrome!\");\n    }else{\n        System.out.print(input + \" is not a palindrome.\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "MPikipJSwGPBWwMp8", 
    "data" : {
        "v" : NumberInt(198), 
        "meta" : {
            "mtime" : 1461480544279.0, 
            "ctime" : 1461480544279.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String inputTemp = console.nextLine();\n    String input = inputTemp.toLowerCase();\n    boolean isVaild = true; // good naming of boolean variable!\n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isVaild = false;\n        }\n        \n    }\n    if(!isVaild){\n       System.out.print(input + \" is not a palindrome.\"); // use inputTemp for both outputs\n    }else{\n        System.out.print(inputTemp + \" is a palindrome!\");\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "N7qTo8WmQpruLAoWQ", 
    "data" : {
        "v" : NumberInt(864), 
        "meta" : {
            "mtime" : 1461475526323.0, 
            "ctime" : 1461475526323.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    \n    String pickId = '@'+\"\";\n    int i = email.indexOf(pickId);\n    String result = email.substring(0, i);\n        return result;\n    \n    // this code won't compile because the return statement may not be reached\n    // since the only return statement you have is inside an if conditional block.\n    // to exit the for loop, you can use break; or make the i<email.length() evaluate to false    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "RQcSHqvs2ihRzwg7T", 
    "data" : {
        "v" : NumberInt(819), 
        "meta" : {
            "mtime" : 1461435032108.0, 
            "ctime" : 1461435032108.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    // good logic, very systematic and easy to follow :)\n    int resultsX;\n    int resultsY;\n    int resultsWidth;\n    int resultsHeight;\n    \n    // To get the new rectangle X-Cordinates    // yes this is excellent practice! comment your code :)\n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    if(rectAX < rectBX){\n        resultsX = rectAX;\n    } else{\n        resultsX = rectBX;\n    }\n    // To get the new rectangle Y-Cordinates\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    if(rectAY < rectBY){\n        resultsY = rectAY;\n    } else{\n        resultsY = rectBY;\n    }\n    \n    // To get the new rectangle width\n    int rectAWidth = rectA.getWidth();\n    int rectAWidthLength = rectAWidth + rectAX; // not exactly the width length, but more of the maximum x value\n    int rectBWidth = rectB.getWidth();\n    int rectBWidthLength = rectBWidth + rectBX;\n    \n    if(rectAWidthLength>rectBWidthLength){\n        resultsWidth = rectAWidthLength - resultsX;\n    } else{\n        resultsWidth = rectBWidthLength - resultsX;\n    }\n    \n    // To get the new rectangle height\n    int rectAHeight = rectA.getHeight();\n    int rectAHeightLength = rectAHeight + rectAY; // not exactly the height length, but more of the maximum y value\n    int rectBHeight = rectB.getHeight();\n    int rectBHeightLength = rectBHeight + rectBY;\n    \n    if(rectAHeightLength>rectBHeightLength){\n        resultsHeight = rectAHeightLength - resultsY;\n    } else{\n        resultsHeight = rectBHeightLength - resultsY;\n    }\n    \n    \n    Rectangle results = new Rectangle(resultsX, resultsY, resultsWidth, resultsHeight);\n    \n    return results;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rS4HLubAfdCPAyiS8", 
    "data" : {
        "v" : NumberInt(2215), 
        "meta" : {
            "mtime" : 1461433555146.0, 
            "ctime" : 1461433555146.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){    \n    System.out.print(\"Type one or more words: \");\n    String input= console.nextLine();\n    String checkInput= input.toUpperCase();\n    boolean palindrome=false; // we usually use the \"is\" or \"has\" prefix when naming boolean variables so it's clearer [ie. isPalindrome] :)\n    for(int i=0; i<checkInput.length()-1; i++){    \n        if(checkInput.charAt(i)==checkInput.charAt(checkInput.length()-i)){ \n           palindrome=true;   // what happens when the characters aren't equal?\n        }\n    }\n    if(palindrome){\n         System.out.print(input +\" is a palindrome!\");\n    }else{\n        System.out.print(input +\" is not a palindrome.\");\n    }\n    \n}\n/* Just to run thru some program logic for this context\n   If two characters don't match, the word is definitely not a palindrome\n   \n   Hence, it'll be better to let your first assignment of the boolean palindrome variable be true\n   and let the for loop check when two characters don't match\n   When they don't match, you'll change the value of palindrome to false\n   This value of false will not revert to true again for this context\n*/\n\n/* A palindrome is a word that is spelt the same from FRONT to BACK, and BACK to FRONT\n   So think about how you would check whether a word is a palindrome\n*/", 
        "type" : "text"
    }
}
{ 
    "_id" : "npeGwKPX3ADj8WEeJ", 
    "data" : {
        "v" : NumberInt(223), 
        "meta" : {
            "mtime" : 1461482282419.0, 
            "ctime" : 1461482282419.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int indexOfA = email.indexOf(\"@\"); // good naming!\n    String name = email.substring(0, indexOfA);\n    return name;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "gAJh57xBQATYPuBqW", 
    "data" : {
        "v" : NumberInt(1501), 
        "meta" : {
            "mtime" : 1461478603019.0, 
            "ctime" : 1461478603019.0
        }, 
        "snapshot" : "//good job! note the slight improvement i have made below\n\npublic static ArrayList interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    //This is assuming we can edit a1. Else can just create another list. \n    Iterator<Integer> iter = a2.iterator();\n    int count = 1;\n    if(a1.size() >= a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           //insert elements from list2\n           a1.add(count, iter.next());\n\n           //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n           //if you put if(count <= a1.size()) here you wouldn't need the block below :P\n           count = count + 2;\n       }\n    }\n    else if(a1.size() < a2.size())\n    {\n       //loop through the first array and add elements from list 2 after each element\n       while(iter.hasNext())\n       {\n           if(count <= a1.size())\n           {\n               //insert elements from list2\n               a1.add(count, iter.next());\n\n               //make sure elements are getting added at 1, 3, 5, 7, 9, etc\n               count = count + 2;\n           }\n           else\n           {\n               //fill in the remainder of the elements from list2 to list1\n               a1.add(iter.next());\n           }\n       }\n    }\n    return a1;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "B8zvwjgHmAQrtmWwZ", 
    "data" : {
        "v" : NumberInt(460), 
        "meta" : {
            "mtime" : 1461480038231.0, 
            "ctime" : 1461480038231.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    String vaildEmail = \"\";\n    int pos = email.indexOf('@');\n    int pos2 = email.indexOf('@', pos+1);\n    \n    if(pos != -1 && pos2 == -1){ // good checks! however, they're not required for this question as '@' is always present, and there will only be one '@'\n        vaildEmail = email.substring(0,pos);\n        return  vaildEmail;\n    }\n    return vaildEmail;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "A2CLvg8DiFLxbTPLo", 
    "data" : {
        "v" : NumberInt(11), 
        "meta" : {
            "mtime" : 1461484064719.0, 
            "ctime" : 1461484064719.0
        }, 
        "snapshot" : "//good job!\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "5E3u5ZcixoksQTkFS", 
    "data" : {
        "v" : NumberInt(230), 
        "meta" : {
            "mtime" : 1461418234541.0, 
            "ctime" : 1461418234541.0
        }, 
        "snapshot" : "public class Rectangle {\n\t//instances     // good to comment your code\n    private int x = 0; // you don't have to assign values here, since your constructor will be doing so\n    private int y = 0;\n    private int width = 0;\n    private int height = 0;\n\n    \n    //constructors    \n    public Rectangle(){ // default constructor was not requested, so it's best not to include it\n        x = 0;\n        y = 0;\n        width = 0;\n        height = 0;\n    }\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n \n \n    //methods\n    public int getX(){\n        return x;\n    }\n     public int getY(){\n        return y;\n    }   \n    public int getWidth(){\n        return width;\n    }\n    public int getHeight(){\n        return height;\n    }\n    \n    public String toString(){\n        return (\"Rectangle[x=\" + x + \",y=\" + y +\",width=\" +width+\",height=\"+height+\"]\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "67MiuZWMKgY2GeGHA", 
    "data" : {
        "v" : NumberInt(735), 
        "meta" : {
            "mtime" : 1461485051427.0, 
            "ctime" : 1461485051427.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n    \n    String lowWord = word.toLowerCase();    \n    int len = lowWord.length();\n    String reverse = \"\";\n    \n    //how would you solve this without using an additional reverse string?\n    //hint: check the individual characters within the string itself!\n    for (int i = lowWord.length() -1; i >= 0; i--) {\n        char c = lowWord.charAt(i);\n        reverse = reverse + c;\n    }\n    \n    if (reverse.equals(lowWord)) {\n        System.out.println(word + \" is a palindrome!\");\n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n    }\n        \n  \n}  \n  ", 
        "type" : "text"
    }
}
{ 
    "_id" : "dDff7cfAtELJdwbMQ", 
    "data" : {
        "v" : NumberInt(295), 
        "meta" : {
            "mtime" : 1461486268424.0, 
            "ctime" : 1461486268424.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int before = email.indexOf(\"@\"); //before has no meaning ,atSignIndex would be a better variable name\n    String toReturn = email.substring(0,before); //same for toReturn, emailId would be a better variable name\n    \n    return toReturn;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "pmxaj5L2XFBKuBrg4", 
    "data" : {
        "v" : NumberInt(579), 
        "meta" : {
            "mtime" : 1461487135601.0, 
            "ctime" : 1461487135601.0
        }, 
        "snapshot" : "//good!\npublic class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x =x;\n        this.y =y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x +\",y=\" + y +\",width=\" + width + \",height=\"+ height + \"]\";\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Jm4meQxguBDxpoAX8", 
    "data" : {
        "v" : NumberInt(801), 
        "meta" : {
            "mtime" : 1461482032351.0, 
            "ctime" : 1461482032351.0
        }, 
        "snapshot" : "// You'll need to declare ArrayLists this way: ArrayList<referenceType>\n// Logic seems fine\n// how would you do this without another arraylist?\n// hint: use a1.add(int index, Integer element) and iterate through a2\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<Integer>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    //a1=a3; //what's wrong with this line?\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    //System.out.print(a1.get(k) + \",\");\n    } \n    if(a3.size() > 0){\n    a1.add(a3.get(a3.size()-1)); //better indentation please!\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "j5DD6vjWNoD6amc8Q", 
    "data" : {
        "v" : NumberInt(146), 
        "meta" : {
            "mtime" : 1461488453857.0, 
            "ctime" : 1461488453857.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int index = email.indexOf('@'); //good`\n    return email.substring(0,index);\n} ", 
        "type" : "text"
    }
}
{ 
    "_id" : "7FtHGGYXTgbdPypd3", 
    "data" : {
        "v" : NumberInt(822), 
        "meta" : {
            "mtime" : 1461486777172.0, 
            "ctime" : 1461486777172.0
        }, 
        "snapshot" : "//good!\n//you can try without using a third arraylist, i.e. the same arraylist!\n//hint: use a1.add(int index, Integer element) and iterate through a2\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1,ArrayList<Integer> a2){\n    ArrayList <Integer> resultList = new ArrayList <Integer> ();\n    if(a1.size()==a2.size()){\n        for(int i=0;i<a1.size();i++){\n            resultList.add(a1.get(i));\n            resultList.add(a2.get(i));\n        }\n    }\n    else if(a1.size()>a2.size()){\n        for(int i=0;i<a1.size();i++){\n            if(i>=a2.size()){\n                resultList.add(a1.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n        }\n    }\n    else{\n        for(int i=0;i<a2.size();i++){\n            if(i>=a1.size()){\n                resultList.add(a2.get(i));\n            }\n            else{\n                resultList.add(a1.get(i));\n                resultList.add(a2.get(i));\n            }\n        }\n    }\n    a1.clear();\n    for(int i=0;i<resultList.size();i++){\n        a1.add(resultList.get(i));\n    }\n    return a1;\n\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rA3bCkxASQcWRfL8E", 
    "data" : {
        "v" : NumberInt(400), 
        "meta" : {
            "mtime" : 1461488845821.0, 
            "ctime" : 1461488845821.0
        }, 
        "snapshot" : "public class Rectangle{\n    int x; //where\n    int y; //are\n    int width; //my\n    int height; //privates?\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    //whats the point of the below if the instance variables are accessible i.e. not private :P\n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "eZH2EEL9niEXbgf2Q", 
    "data" : {
        "v" : NumberInt(782), 
        "meta" : {
            "mtime" : 1461488884952.0, 
            "ctime" : 1461488884952.0
        }, 
        "snapshot" : "//can you think of a way to do it without using a new list?\n\n public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    //a1.clear();\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));//repeated\n            newList.add(a2.get(i));//code!\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));//repeated\n            newList.add(a2.get(i));//code!\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    a1.clear();\n    for(Integer in: newList){\n        a1.add(in);\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "yhhXhwT3mpN9PwdQX", 
    "data" : {
        "v" : NumberInt(3148), 
        "meta" : {
            "mtime" : 1461489319532.0, 
            "ctime" : 1461489319532.0
        }, 
        "snapshot" : "//good job!\n//how would you do it without an extra arraylist?\n//hint: use the a1.add(int index, Integer element) and iterate through a2!\npublic static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> temp = new ArrayList<Integer>();\n    int limit;\n    \n    //check difference in sizes of arraylist\n    if(a1.size()<=a2.size()) {\n        limit = a1.size();\n    }else{\n        limit = a2.size();\n    }\n    \n    for(int i=0; i<limit; i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    \n    if(limit==a1.size()) {\n        for(int j = limit; j<a2.size(); j++) {\n            temp.add(a2.get(j));\n        }\n    }else{\n        for(int j = limit; j<a1.size(); j++) {\n            temp.add(a1.get(j));\n        }\n    }\n    \n    a1.clear();\n    for(int k = 0; k<temp.size(); k++){\n        a1.add(temp.get(k));\n    }\n    //alt : a1 = new ArrayList<Integer>(temp);\n    return a1;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "95cwz94A9wE9WEs9L", 
    "data" : {
        "v" : NumberInt(597), 
        "meta" : {
            "mtime" : 1461490472086.0, 
            "ctime" : 1461490472086.0
        }, 
        "snapshot" : "//good job!\n\npublic class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Za7hu4sNxmCgAtSED", 
    "data" : {
        "v" : NumberInt(387), 
        "meta" : {
            "mtime" : 1461484198465.0, 
            "ctime" : 1461484198465.0
        }, 
        "snapshot" : "//very good! especially the variable names, very clear, GOOD JOB\npublic static String parseEmail(String email){\n    int endIndex = email.indexOf(\"@\");\n    String emailID = email.substring(0,endIndex); \n    return emailID;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "BD6aEG8GgRf6xj3uQ", 
    "data" : {
        "v" : NumberInt(229), 
        "meta" : {
            "mtime" : 1461490529272.0, 
            "ctime" : 1461490529272.0
        }, 
        "snapshot" : "//good job!\npublic class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        //meticulous formatting! nice!\n        return \"Rectangle[x=\" + x + \n        \",y=\" + y +\n        \",width=\" + width +\n        \",height=\" + height +\n        \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "h5ipDLr3bpfm7bqoY", 
    "data" : {
        "v" : NumberInt(548), 
        "meta" : {
            "mtime" : 1461429346915.0, 
            "ctime" : 1461429346915.0
        }, 
        "snapshot" : "\n\npublic static String parseEmail(String email){\n    /*Scanner sc = new Scanner(email);\n    sc.useDelimiter(\"@\"); \n    String toReturn = sc.next();*/\n    \n    // very different way of solving the qn! \n    // although, it might be simpler to use the String methods substring() and indexOf() \n    int position = email.indexOf(\"@\");\n    String toReturn = email.substring(0,position);\n    return toReturn;\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "wF7Zts3mPo8Dbaef4", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461491299782.0, 
            "ctime" : 1461491299782.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "C4MDsGe5X3rweGgpu", 
    "data" : {
        "v" : NumberInt(299), 
        "meta" : {
            "mtime" : 1461418211617.0, 
            "ctime" : 1461418211617.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){    \n    if(rectA == null || rectB == null){\n        return null;\n    }\n    int bottomLeftAX = rectA.getX();\n    int bottomLeftAY = rectA.getY();\n    \n    int bottomRightAX = bottomLeftAX + rectA.getWidth();\n    int bottomRightAY = bottomLeftAY;\n    \n    int topLeftAX = bottomLeftAX;\n    int topLeftAY = bottomLeftAY + rectA.getHeight();\n    \n    int topRightAX = bottomLeftAX + rectA.getWidth();\n    int topRightAY = bottomLeftAX + rectA.getHeight();\n    \n    \n    int bottomLeftBX = rectB.getX();\n    int bottomLeftBY = rectB.getY();\n    \n    int bottomRightBX = bottomLeftBX + rectB.getWidth();\n    int bottomRightBY = bottomLeftBY;\n    \n    int topLeftBX = bottomLeftBX;\n    int topLeftBY = bottomLeftBY + rectB.getHeight();\n    \n    int topRightBX = bottomLeftBX + rectB.getWidth();\n    int topRightBY = bottomLeftBY + rectB.getHeight();\n    \n    //init all corners\n    \n    int yUnionTopLeft = 0;\n    int yUnionTopRight = 0;\n    int yUnionBottomLeft = 0;\n    int yUnionBottomRight = 0;\n    \n    int xUnionTopLeft = 0;\n    int xUnionTopRight = 0;\n    int xUnionBottomLeft = 0;\n    int xUnionBottomRight = 0;\n    \n    // Bottom Left takes the lesser of the X coordinates, Top right; vice versa\n    if(topLeftBX > topLeftAX ){\n        xUnionTopLeft = topLeftBX;\n    }else{\n        xUnionTopLeft = topLeftAX;\n    }\n\n    if(topRightBX > topRightAX ){\n        xUnionTopRight = topRightBX;\n    }else{\n        xUnionTopRight = topRightAX;\n    }\n    \n    if(bottomLeftBX < bottomLeftAX ){\n        xUnionBottomLeft = bottomLeftBX;\n    }else{\n        xUnionBottomLeft = bottomLeftAX;\n    }\n    \n    if(bottomRightBX > bottomRightAX ){\n        xUnionBottomRight = bottomRightBX;\n    }else{\n        xUnionBottomRight = bottomRightAX;\n    }\n    \n    \n    // Bottom Left takes the lesser of the Y coordinates, Top right; vice versa\n    if(topLeftBY > topLeftAY ){\n        yUnionTopLeft = topLeftBY;\n    }else{\n        yUnionTopLeft = topLeftAY;\n    }\n\n    if(topRightBY > topRightAY ){\n        yUnionTopRight = topRightBY;\n    }else{\n        yUnionTopRight = topRightAY;\n    }\n    \n    if(bottomLeftBY < bottomLeftAY ){\n        yUnionBottomLeft = bottomLeftBY;\n    }else{\n        yUnionBottomLeft = bottomLeftAY;\n    }\n    \n    if(bottomRightBY > bottomRightAY ){\n        yUnionBottomRight = bottomRightBY;\n    }else{\n        yUnionBottomRight = bottomRightAY;\n    }        \n    \n    int UnionWidth = xUnionBottomRight - xUnionBottomLeft;\n    int UnionHeight = yUnionTopLeft - yUnionBottomLeft;\n    int UnionX = xUnionBottomLeft;\n    int UnionY = yUnionBottomLeft;\n    \n    //yeah, totally inefficient code, but i did all this work thinking that i had to \n    //...look for the intercept between the two rectangles. \n\n    return new Rectangle(UnionX, UnionY, UnionWidth, UnionHeight);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Qm2Li2AexXAsXK3ct", 
    "data" : {
        "v" : NumberInt(1253), 
        "meta" : {
            "mtime" : 1461430122785.0, 
            "ctime" : 1461430122785.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner c){\n    // c has been initalised, you don't need to create and assign a new Scanner object here\n    System.out.print(\"Type one or more words: \");\n    String input = c.nextLine();\n    int length = input.length() - 1; \n    int start = 0; \n    boolean condition = false; \n     \n    do {\n        if(input.charAt(start) == input.charAt(length)){ // what happens when start > input.length()-1 or when length < 0? \n            start++; \n            length--;\n            condition = true; \n             \n        } else { \n            condition = false; // assignment uses single \"=\"\n            System.out.println(input + \" is not a palindrome.\");\n        }    \n    }while(condition); \n            \n       System.out.println(input + \" is a palindrome.\");\n   \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "hHzHKpPtAGNG6kcwa", 
    "data" : {
        "v" : NumberInt(6), 
        "meta" : {
            "mtime" : 1461478103801.0, 
            "ctime" : 1461478103801.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber) {\n   // insert your code here.\n   boolean rtn = true;\n   Counter inputCounter = supermarket.getCounter(counterNumber);\n   if(inputCounter != null){\n       if(cashier != null){\n           rtn = inputCounter.setCashier(cashier);\n           System.out.println(\"test\"); //odd, not null but boolean still returns false (no idea why)\n       }\n   }\n   return rtn;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cHKp88rtCsdeMjBYP", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1461478120965.0, 
            "ctime" : 1461478120965.0
        }, 
        "snapshot" : "    public static int getNumberOfCounterWithNoQueue(Supermarket supermarket) {\n        // insert your code here.\n        \n        int totalCounters = supermarket.getNumCounters();\n        int count = 0;\n        \n        for (int a = 1; a <= totalCounters; a++){\n            Counter currentCounter = supermarket.getCounter(a);\n            int numberOfCustInQueue = currentCounter.getNumCustomersInQueue();\n            \n            if (numberOfCustInQueue == 0){\n                count++;\n            }\n        }\n        \n        return count;\n    }\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "SMn6ct3A66TkzZawo", 
    "data" : {
        "v" : NumberInt(4), 
        "meta" : {
            "mtime" : 1461478123300.0, 
            "ctime" : 1461478123300.0
        }, 
        "snapshot" : "    public static String retrieveStatusOfAllCounters(Supermarket supermarket) {\n        // insert your code here.\n        String rtn = \"[\";\n        int numOfOpenQueues = 0;\n        int totalCounters = supermarket.getNumCounters();\n        \n        for(int i = 1; i< totalCounters+1; i++){\n            Counter thisCounter = supermarket.getCounter(i);\n            Cashier thisCashier = thisCounter.getCashier();\n            if(thisCashier != null){\n                rtn += \"\" + i + \"-open\"; //if it is open, concat counter number and status\n            }else{\n            rtn += \"\" + i + \"-closed\";// vice-versa if not. \n            }\n            if (i != totalCounters){\n                rtn += \", \"; //concats comma and space if it is not the last \n            }\n        }\n        \n        \n        \n        \n        return rtn + \"]\";\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "sYmoBzXbyQv8CDJzn", 
    "data" : {
        "v" : NumberInt(913), 
        "meta" : {
            "mtime" : 1461487164735.0, 
            "ctime" : 1461487164735.0
        }, 
        "snapshot" : "//your code is loooooooooooong!\n//i like your variable naming\n//you should explore Math.min(int a, int b)\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    //X\n    int rectAW = rectA.getWidth();\n    int rectBW = rectB.getWidth();\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    \n    int finalX =0;\n    int diffX=0;\n    int finalWidth=0;\n    \n    if(rectAX<rectBX){\n        finalX = rectAX;\n        diffX = rectBX-rectAX;\n    }else{\n        finalX = rectBX;\n        diffX = rectAX-rectBX;\n    }\n\n    if(rectAX<rectBX){\n        finalWidth = rectBW;\n    } else {\n        if(rectAW<rectBW){\n            finalWidth = rectAW;\n        }else{\n            finalWidth = rectBW;\n        }   \n    }\n   \n    finalWidth = diffX + finalWidth; \n\n    //Y\n    int rectAH = rectA.getHeight();\n    int rectBH = rectB.getHeight();\n    \n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int finalY =0;\n    int diffY=0;\n    int finalHeight=0;\n    \n    if(rectAY<rectBY){\n        finalY = rectAY;\n        diffY = rectBY-rectAY;\n    }else{\n        finalY = rectBY;\n        diffY = rectAY-rectBY;\n    }   \n    \n    if(rectAH<rectBH){\n        finalHeight = rectAH;\n    }else{\n        finalHeight = rectBH;\n    }   \n  \n    finalHeight = diffY + finalHeight; \n    \n    //r\n    Rectangle r = new Rectangle(finalX, finalY, finalWidth, finalHeight);\n    return r;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "98T9z9R8YsyB3xgJg", 
    "data" : {
        "v" : NumberInt(4), 
        "meta" : {
            "mtime" : 1461478126559.0, 
            "ctime" : 1461478126559.0
        }, 
        "snapshot" : "    public static int retrieveOpenCounterWithMostSnrs(Supermarket supermarket) {\n        int rtn = 0;\n        int totalNumberOfCounters = supermarket.getNumCounters();\n        int queuesWithoutSnrs = 0;\n        double queueLen = 0.0;\n        double snrsInQueue = 0.0;\n        double snrsPercentage = 0.0;\n        double lastLargestPercentage = 0.0;\n        boolean snrCheck = true;\n        \n        for(int i = 1; i <= totalNumberOfCounters; i++){\n            Counter currentCounter = supermarket.getCounter(i);\n            if(currentCounter != null){\n                queueLen = currentCounter.getNumCustomersInQueue();\n                for(int x = 1; x <= queueLen; x++ ){\n                    Customer currentCustomer = currentCounter.getCustomerAtPosition(x);\n                    if(currentCustomer != null){\n                        int age = currentCustomer.getAge();\n                        if(age>= 60){\n                            snrsInQueue++;\n                        }\n                    }\n                }// end customer queue for loop\n            }\n            if (snrsInQueue == 0){\n                queuesWithoutSnrs++; // to tally up the queues without seniors \n            }\n            if( queueLen != 0){\n                snrsPercentage = snrsInQueue/queueLen;\n            }\n            if(snrsPercentage> lastLargestPercentage){\n                rtn = i; //sets the return value to the current counter number \n                lastLargestPercentage = snrsPercentage; //sets the new largest \n            }\n            snrsInQueue = 0;// reset value before ending loop\n        }//end Counter for loop\n        \n        if(queuesWithoutSnrs == totalNumberOfCounters){ //checks if there are any queues with seniors\n            snrCheck = false;\n        }\n        if(!snrCheck){\n            rtn = rtn - 1; //for the negative value\n        }\n\n        \n        return rtn ;\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "uCgoJyh8cSuf33iKo", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1461478130549.0, 
            "ctime" : 1461478130549.0
        }, 
        "snapshot" : "    public static String printPattern(String word, char separator) {\n        String rtn = \"\";\n        \n        if(word != null){// to counter null pointer error \n            //if(word.length() != 0){ //redundant but yeah why not\n            int wordLength = word.length(); // self-explainatory \n            for(int i = 0; i < wordLength; i++){ //for the length of this word...\n                char currentChar = word.charAt(i); //grab the current char \n                rtn += currentChar; //concat to return value the first char\n                if(i != wordLength-1){ // and if this is not the last char of the word...\n                    rtn+= separator; // add the seperator, basic fencepost thing\n                }\n            }\n            //}\n        }\n        \n        return rtn;\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "LHWspLq6BZoDsMw9L", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1461478137695.0, 
            "ctime" : 1461478137695.0
        }, 
        "snapshot" : "    public static void printCheckerBoard (String pattern, int rows, int col){    \n        \n        String sep = \"\";\n        \n        if(pattern != null){\n            int patternLength = pattern.length();\n            for(int i = 0; i <patternLength; i++){\n                sep += \"*\";\n            }// set length of \"*\" seperator \n            \n            for(int i = 0; i< rows; i++){\n                for(int x = 0; x< col/2; x++){ //for every col, print an iteration\n                    if(i%2 == 0){//print this if row is even \n                        System.out.print(sep);\n                        System.out.print(pattern);\n                    }else{//print this if row is odd\n                        System.out.print(pattern);\n                        System.out.print(sep);\n                    }\n                }\n                //print last column if col is an odd number \n                if(col%2 == 1){\n                    if(i%2 == 0){\n                        System.out.print(sep);\n                    }else{\n                        System.out.print(pattern);\n                    }\n                }\n                System.out.println(); // kicks this to the next row\n            }\n        }\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "dPCJfot5tkjffRN2x", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1461478140450.0, 
            "ctime" : 1461478140450.0
        }, 
        "snapshot" : "    public static String translateMessage (MessageTranslator translator, String pattern ) {\n        String rtn  = \"Null Value Entered\";\n        int lastEnd = 0;\n        boolean wasSeperator = false;\n        \n        if(translator == null){\n            translator = new MessageTranslator();\n        }\n\n        if (pattern != null) { // Handles null pointer exception\n            rtn = \"\";\n            for (int i = 0; i < pattern.length(); i++) {\n                if (i != pattern.length()-1) { // checks if this is the last iteration\n                    char currentChar = pattern.charAt(i);\n                    String thisPattern = \"\";\n                    // STEP ONE : If this is the start of a next letter, substring from the last end till this one\n                    if(currentChar == '|'){\n                        thisPattern = pattern.substring( lastEnd , i ); //this will not count the latest char, which is a '|'\n                        char thisLetter = translator.decode( thisPattern );\n                        if (thisLetter != '#') {\n                            rtn += thisLetter; // if this is not junk code; add to string\n                        }\n                        lastEnd = i+1; //this will start the next substring of the next morse pattern, after this '|' char. \n                    }\n                    // STEP TWO : Concats a space where there are two '|'\n                    if ( (currentChar == '|') && (wasSeperator == true) ) {\n                        rtn += ' ';\n                    }\n                    // STEP THREE : This section will remind the next iteration if the last char was a '|'\n                    if (currentChar == '|') {\n                        wasSeperator = true;\n                    }else{\n                        wasSeperator = false;\n                    }\n                    // STEP FOUR : Else condition handles the last morse code sequence \n                }else{\n                    String thisPattern = pattern.substring( lastEnd , i+1 );  // +1 to take the last char of the String pattern into consideration.\n                    char thisLetter = translator.decode( thisPattern ); \n                    if (thisLetter != '#') {\n                        rtn += thisLetter; //will not concat if this is totally junk code\n                    }\n                }\n            }// END LOOP\n        }// END if-not-null Condition\n\n\n        return rtn;  // RETURN STATEMENT \n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "7TyFQTddvRZoPfGNZ", 
    "data" : {
        "v" : NumberInt(483), 
        "meta" : {
            "mtime" : 1461478194649.0, 
            "ctime" : 1461478194649.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        int sum = 0;\n        int cont =0;\n        do{\n            Scanner sc = new Scanner(System.in);\n            //System.out.println(\"Enter number>\");\n            cont = sc.nextInt();\n            if(cont>0){\n                sum+= cont;\n            }\n        }while(cont>0);\n        System.out.println(\"The sum is \" + sum + \".\" );\n    }\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "FsdDcmLACJ58NaTDf", 
    "data" : {
        "v" : NumberInt(582), 
        "meta" : {
            "mtime" : 1461492271734.0, 
            "ctime" : 1461492271734.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height; \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x; \n        this.y = y; \n        this.width = width; \n        this.height = height; \n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width; \n    }\n    \n    public int getX(){\n        return x; \n    }    \n    public int getY(){\n        return y; \n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "p2zuLAhNG73ygBM3n", 
    "data" : {
        "v" : NumberInt(1196), 
        "meta" : {
            "mtime" : 1461486027991.0, 
            "ctime" : 1461486027991.0
        }, 
        "snapshot" : "", 
        "type" : "text"
    }
}
{ 
    "_id" : "dgJGHsQS3smtg9Trm", 
    "data" : {
        "v" : NumberInt(315), 
        "meta" : {
            "mtime" : 1461491507904.0, 
            "ctime" : 1461491507904.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" +getX()+ \",y=\" + getY()+ \",width=\" + getWidth() + \",height=\" + getHeight() + \"]\";\n        //you can use x, y, width, height directly! other than that, good\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "a8LeehWTBvSELHfwn", 
    "data" : {
        "v" : NumberInt(1660), 
        "meta" : {
            "mtime" : 1461405514402.0, 
            "ctime" : 1461405514402.0
        }, 
        "snapshot" : "\npublic static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String words = console.nextLine();\n    boolean bool = true;\n    if(words.length()%2==0){\n        int num = words.length()/2;\n        \n        for(int i=0;i<num;i++){\n            char a = Character.toLowerCase(words.charAt(i));\n            char b = Character.toLowerCase(words.charAt(words.length()-i-1));\n            if(a != b ){\n                bool = false;\n            }\n        }\n    }\n    \n    if(words.length()%2 !=0){\n        int num = (words.length()-1)/2;\n        for(int i=0;i<num;i++){\n            char a = Character.toLowerCase(words.charAt(i));\n            char b = Character.toLowerCase(words.charAt(words.length()-i-1));\n            if(a!=b){\n                bool = false;\n            }\n        }\n    }\n    \n    \n    \n    /* You'll need to check that the first char == last char, \n    second char == second last char etc.*/\n    if(bool == true){ // do remember to check case-insensitively!\n        System.out.print(words+\" is a palindrome!\");\n    } else {\n         System.out.print(words+\" is not a palindrome.\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "fJaz77Gr3xzF8oLBd", 
    "data" : {
        "v" : NumberInt(323), 
        "meta" : {
            "mtime" : 1461493716093.0, 
            "ctime" : 1461493716093.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int atSign = email.indexOf(\"@\"); //atSignIndex would be better\n    String toReturn = email.substring(0, atSign); //emailId would be a better variable name ;)\n    return toReturn;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Lt2hE3rEThj7DqnZr", 
    "data" : {
        "v" : NumberInt(140), 
        "meta" : {
            "mtime" : 1461494191864.0, 
            "ctime" : 1461494191864.0
        }, 
        "snapshot" : "public class Rectangle { //thanks for the pointers!\n\t//instances     // good to comment your code\n    private int x; // you don't have to assign values here, since your constructor will be doing so (fixed on the 2nd attempt)\n    private int y; \n    private int width;\n    private int height;\n\n    \n    //constructors    \n    // default constructor was not requested, so it's best not to include it (fixed on 2nd attempt)\n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n \n \n    //methods\n    public int getX(){\n        return x;\n    }\n     public int getY(){\n        return y;\n    }   \n    public int getWidth(){\n        return width;\n    }\n    public int getHeight(){\n        return height;\n    }\n    \n    public String toString(){\n        return (\"Rectangle[x=\" + x + \",y=\" + y +\",width=\" +width+\",height=\"+height+\"]\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "aWyqCSxtJuMF53cDk", 
    "data" : {
        "v" : NumberInt(394), 
        "meta" : {
            "mtime" : 1461494054219.0, 
            "ctime" : 1461494054219.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Adder{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n        int sum = 0;\n        while(num > 0){\n            sum += num;\n            num = sc.nextInt();\n        }\n        System.out.println(\"The sum is \" + sum + \".\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ZiCKigtqx8qZqYmJM", 
    "data" : {
        "v" : NumberInt(52), 
        "meta" : {
            "mtime" : 1461494374001.0, 
            "ctime" : 1461494374001.0
        }, 
        "snapshot" : "public static String parseEmail(String email){ //(re-attempt)\n    int atSignIndex = email.indexOf('@'); //please don't use foo, bar etc. \n    //imagine your prof have to mark you script and has to figure out\n    //what your foo bar stands for... atSignIndex is much better! (point noted! thanks!)\n    return email.substring(0,atSignIndex);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ouKBNuAdioatP2g9N", 
    "data" : {
        "v" : NumberInt(633), 
        "meta" : {
            "mtime" : 1461493916116.0, 
            "ctime" : 1461493916116.0
        }, 
        "snapshot" : "//i like your variable names!\n//however, inefficient! because you need an additional string and you're comparing 2 strings\n//could you think of a way to using n/2 comparisons?\n\npublic static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n    \n        if (reverse.toUpperCase().equals(text.toUpperCase())){ // \n            System.out.println(text + \" is a palindrome!\");\n        } else {\n            System.out.println(text + \" is not a palindrome.\");\n        }\n    }\n    ", 
        "type" : "text"
    }
}
{ 
    "_id" : "aFbCJFxhqjnZCDP8A", 
    "data" : {
        "v" : NumberInt(31), 
        "meta" : {
            "mtime" : 1461494465334.0, 
            "ctime" : 1461494465334.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){ //(re-attempt)\n    int shortestListSize = a1.size(); // we usually use \"list\" to denote a collection such as ArrayList, not for int values (fixed!)\n    if(shortestListSize > a2.size()){\n        shortestListSize = a2.size();\n    }\n    ArrayList<Integer> merged = new ArrayList<>();\n    while(shortestListSize > 0){\n        merged.add(a1.get(0));\n        a1.remove(0);\n        merged.add(a2.get(0));\n        a2.remove(0);\n        shortestListSize--; \n    }\n    merged.addAll(a1);\n    merged.addAll(a2); \n    a1.clear();\n    a1.addAll(merged);\n}\n// your method works, but it's pretty unconventional\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "8SWNAxSixypJASmqt", 
    "data" : {
        "v" : NumberInt(958), 
        "meta" : {
            "mtime" : 1461492283949.0, 
            "ctime" : 1461492283949.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int widthA = rectA.getWidth();\n    int heightA = rectA.getHeight();\n    int xA = rectA.getX();\n    int yA = rectA.getY();\n    int totalWidthA = widthA + xA; \n    int totalHeightA = heightA + yA; \n    \n    int widthB = rectB.getWidth();\n    int heightB = rectB.getHeight();\n    int xB = rectB.getX();\n    int yB = rectB.getY(); \n    int totalWidthB = widthB + xB; \n    int totalHeightB = heightB + yB; \n    \n    int smallx = 0; \n    int smally = 0; \n    \n    if(xA >= xB){\n        smallx = xB; \n    } else { \n        smallx = xA;\n    }\n    \n    if(yA >= yB){\n        smally = yB; \n    } else { \n        smally = yA;\n    }\n    \n    int widthnew = 0; \n    int heightnew = 0;\n    if(totalWidthA >= totalWidthB){\n        widthnew = totalWidthA - smallx; \n    } else { \n        widthnew = totalWidthB - smallx; \n    }    \n    \n    if(totalHeightA >= totalHeightB){\n        heightnew = totalHeightA - smally; \n    } else { \n        heightnew = totalHeightB - smally; \n    }    \n    \n    Rectangle brandNew = new Rectangle(smallx, smally, widthnew, heightnew);\n    return brandNew;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ksezNGZp7fdTdKn63", 
    "data" : {
        "v" : NumberInt(138), 
        "meta" : {
            "mtime" : 1461494582382.0, 
            "ctime" : 1461494582382.0
        }, 
        "snapshot" : "public static double doubleInt(int num1, int num2){\n    double sum = (double)(num1 + num2);\n    return sum;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "gToNavd4YGuqQzPYG", 
    "data" : {
        "v" : NumberInt(962), 
        "meta" : {
            "mtime" : 1461494103448.0, 
            "ctime" : 1461494103448.0
        }, 
        "snapshot" : "//i like your variable names! very easy to read code\n//however inefficient! because you need an additional string and you're comparing 2 strings\n//could you think of a way to using n/2 comparisons?\n\npublic static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String text = console.nextLine();\n    \n    String reverse = \"\";\n    int length = text.length();\n    \n    for(int i = length - 1; i >= 0; i--){\n        reverse += text.charAt(i);\n    }\n    \n        if (reverse.toUpperCase().equals(text.toUpperCase())){\n            System.out.println(text + \" is a palindrome!\");\n        } else {\n            System.out.println(text + \" is not a palindrome.\");\n        }\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "zpn96XM4iwEevKogh", 
    "data" : {
        "v" : NumberInt(162), 
        "meta" : {
            "mtime" : 1461494707899.0, 
            "ctime" : 1461494707899.0
        }, 
        "snapshot" : "public static void quotify(String sentence){\n    System.out.print(\"\\\"\" + sentence + \"\\\"\");\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "dJCmsfQY7tatNM9EB", 
    "data" : {
        "v" : NumberInt(455), 
        "meta" : {
            "mtime" : 1461493882454.0, 
            "ctime" : 1461493882454.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n\npublic Rectangle(int x, int y, int width, int height){\n    this.x = x;\n    this.y = y;\n    this.width= width;\n    this.height = height;\n}\npublic int getHeight(){\n    return height;\n}\npublic int getWidth(){\n    return width;\n}\npublic int getX(){\n    return x;\n}\npublic int getY(){\n    return y;\n}\npublic String toString(){\n    String result=\"Rectangle[x=\"+getX()+\",y=\"+getY()+\",width=\"+getWidth()+\",height=\"+getHeight()+\"]\";\n    return result;\n}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "J4TbfCah2WJjp5sqM", 
    "data" : {
        "v" : NumberInt(1339), 
        "meta" : {
            "mtime" : 1461406229208.0, 
            "ctime" : 1461406229208.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    Iterator<Integer> iter2 = a2.iterator();\n    int count = 1;\n    \n    if(a1.size()>= a2.size()){\n        while (iter2.hasNext()){\n            a1.add(count,iter2.next());\n            count +=2;\n        }\n    } else if(a1.size()<a2.size()){\n        while(iter2.hasNext()){\n            if(count<=a1.size()){\n                a1.add(count,iter2.next());\n                count +=2;\n            } else {\n                a1.add(iter2.next());\n            }\n        }\n    }\n\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "X8CZ8NJQm4MfQqoDZ", 
    "data" : {
        "v" : NumberInt(433), 
        "meta" : {
            "mtime" : 1461489316828.0, 
            "ctime" : 1461489316828.0
        }, 
        "snapshot" : "//i like your comments!\n//but variable names can be better, like minX, minY etc.\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    // find the min position of X\n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    // get biggest width+X\n    int x2 = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    // find the min position of Y\n    int y1 = Math.min(rectA.getY(), rectB.getY());\n    // get biggest height+Y\n    int y2 = Math.max(rectA.getY() + rectA.getHeight(), rectB.getY() + rectB.getHeight());\n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "EPHtRc9jpf8GYSFJt", 
    "data" : {
        "v" : NumberInt(224), 
        "meta" : {
            "mtime" : 1461495178441.0, 
            "ctime" : 1461495178441.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int index = email.indexOf(\"@\");\n    String s= email.substring(0,index); //emailID would be a better name! s has no meaning :P\n    return s;\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "ADYMXsEY7KvoGkPqE", 
    "data" : {
        "v" : NumberInt(1322), 
        "meta" : {
            "mtime" : 1461494663968.0, 
            "ctime" : 1461494663968.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "yLraxaErG4PDhQd7J", 
    "data" : {
        "v" : NumberInt(197), 
        "meta" : {
            "mtime" : 1461488749298.0, 
            "ctime" : 1461488749298.0
        }, 
        "snapshot" : "//inefficient! because you need an additional string and you're comparing 2 strings\n//could you think of a way to using n/2 comparisons?\n\npublic static void printPalindrome(Scanner sc){\n    System.out.print(\"Type one or more words: \");\n    String word = sc.nextLine(); //a better name would be input!\n    String lowerCase = word.toLowerCase();\n    String newString = \"\"; //a better name would be reversedString\n    for(int i =lowerCase.length()-1; i>=0; i--){\n        newString += lowerCase.charAt(i);\n    }\n    if(newString.equals(lowerCase)){\n        System.out.println(word + \" is a palindrome!\");\n        \n    }\n    else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "s86mdgrkY8rrqDs79", 
    "data" : {
        "v" : NumberInt(501), 
        "meta" : {
            "mtime" : 1461496562230.0, 
            "ctime" : 1461496562230.0
        }, 
        "snapshot" : "//nicely done!\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height +\"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "umDSJQK3ZFv5RnRH8", 
    "data" : {
        "v" : NumberInt(914), 
        "meta" : {
            "mtime" : 1461466991694.0, 
            "ctime" : 1461466991694.0
        }, 
        "snapshot" : " \n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n        int length1 = a1.size();\n        int length2 = a2.size(); \n        int position1 = 1; \n        int position2 = 0; \n        ArrayList<Integer> temp = new ArrayList<>(); \n        \n        if(a1 != null && a2 != null){\n            if(length1 < length2){\n                for(int i = 0; i < a1.size(); i++){\n                    temp.add(a1.get(i));\n                    int value2 = a2.get(position2);\n                    temp.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                }   \n                for(int j = position2 ; j < a2.size() ; j++){\n                    temp.add(a2.get(j));\n                }\n            }  \n            \n            if(length1 > length2){\n                int value2 = a2.get(position2);\n                    a1.add(position1, value2);\n                    position1 +=2; \n                    position2 ++;\n                \n            }\n        }\n      // if (length1 == length2) ?\n      \n      \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "8AP3QfTq9hikM6eWz", 
    "data" : {
        "v" : NumberInt(1409), 
        "meta" : {
            "mtime" : 1461492839086.0, 
            "ctime" : 1461492839086.0
        }, 
        "snapshot" : "//variable names are decent, except x could be newRectX and similarly for y\n//if code is repeated, it means you should try to gain the habit of putting it outside!\n//this is as if you find out there's a mistake later in the repeated code, you have to change\n//multiple places, and if you miss out on one, you will take a long time to debug!\n\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x=0;\n    int y=0;\n    int width =0;\n    int height =0;\n    int rectAX = rectA.getX();\n    int rectAY= rectA.getY();\n    int rectBX= rectB.getX();\n    int rectBY = rectB.getY();\n    int bottomRight=0;\n    if(rectAX<=rectBX){\n        x=rectAX;\n        if(rectAX+rectA.getWidth()>=rectBX+rectB.getWidth()){ //repeated\n            width=rectAX+rectA.getWidth()-x; //code!\n        }\n        else{ //repeated\n            width=rectBX+rectB.getWidth()-x; //cpode!\n        }\n    }\n    if(rectBX<=rectAX){\n        x=rectBX;\n        if(rectAX+rectA.getWidth()>=rectBX+rectB.getWidth()){\n            width=rectAX+rectA.getWidth()-x;\n        }\n        else{\n            width=rectBX+rectB.getWidth()-x;\n        }\n    }\n    if(rectAY<= rectBY){\n        y=rectAY;\n        if(rectAY+rectA.getHeight()>=rectBY+rectB.getHeight()){\n            height=rectAY+rectA.getHeight()-y;\n        }\n        else{\n            height=rectBY+rectB.getHeight()-y;\n        }\n    }\n    if(rectBY<= rectAY){\n        y=rectBY;\n        if(rectAY+rectA.getHeight()>=rectBY+rectB.getHeight()){\n            height=rectAY+rectA.getHeight()-y;\n        }\n        else{\n            height=rectBY+rectB.getHeight()-y;\n        }\n    }\n    Rectangle newR = new Rectangle(x,y,width,height);\n    return newR;\n}\n  ", 
        "type" : "text"
    }
}
{ 
    "_id" : "TsSMucfgz3QYmxEKj", 
    "data" : {
        "v" : NumberInt(256), 
        "meta" : {
            "mtime" : 1461498280574.0, 
            "ctime" : 1461498280574.0
        }, 
        "snapshot" : "public static void flippedTriangle(int height){\n\tfor(int i = 1;i <= height; i++){\n\t\tfor(int j = height-i;j > 0;j--){\n\t\t\tSystem.out.print(\" \");\n\t\t}\n\t\tfor(int k = 0;k < i; k++){\n\t\t\tSystem.out.print(\"*\");\n\t\t}\n\t\tSystem.out.println();\n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "DPXHeAPf4gMDLsmfr", 
    "data" : {
        "v" : NumberInt(456), 
        "meta" : {
            "mtime" : 1461493853247.0, 
            "ctime" : 1461493853247.0
        }, 
        "snapshot" : "//you don't need main!\n//better indentation would be nice:)\npublic static void main(String[] args) { \n    \n    String s = parseEmail(\"jianhua.tan.2015@smu.edu.sg\");\n    System.out.println(s);\n    \n}\n    public static String parseEmail(String email) {\n        \n        int positionAt = email.indexOf(\"@\");\n        String emailChecker = email.substring(0, positionAt); \n    return emailChecker;\n    \n    }\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "DHg8NtSfWvWr47ZCp", 
    "data" : {
        "v" : NumberInt(698), 
        "meta" : {
            "mtime" : 1461498567137.0, 
            "ctime" : 1461498567137.0
        }, 
        "snapshot" : "//good job! again, code style i.e. identation, variable naming could be better!\n//also, inefficient! because you need an additional string and you're comparing 2 strings\n//could you think of a way to using n/2 comparisons?\n\npublic static void printPalindrome(Scanner sc) {\n    System.out.print(\"Type one or more words: \");\n    \n    String word = sc.nextLine();\n    String opposite = \"\";\n    \n    for(int i = word.length() - 1; i >= 0; i--) {\n    \n    \n    opposite += word.charAt(i);    //indent\n        \n    }\n    \n    String word1 = word.toLowerCase(); //what does 1 mean in word1?\n    String opposite1 = opposite.toLowerCase(); //same here\n\n    if(word1.equals(opposite1)) {\n        System.out.println(word + \" is a palindrome!\");\n        \n    } else {\n        System.out.println(word + \" is not a palindrome.\");\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "uwEwoK2AJqXtjKfiw", 
    "data" : {
        "v" : NumberInt(212), 
        "meta" : {
            "mtime" : 1461498759153.0, 
            "ctime" : 1461498759153.0
        }, 
        "snapshot" : "public static int power(int base,int exponent){\n    int power = 1;\n    if(exponent == 0){\n        return 1;\n    }\n    for(int i=1;i<=exponent;i++){\n        power *= base; \n    }\n    return power;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "AYhZH9AcvE3ttCy7T", 
    "data" : {
        "v" : NumberInt(1078), 
        "meta" : {
            "mtime" : 1461496814720.0, 
            "ctime" : 1461496814720.0
        }, 
        "snapshot" : "//i like how you logically segmented your code, variable names are good too!\npublic static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null; //should be just width\n    Rectangle rectWithHeightToAdd = null;//should be just height\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "96C3CNPYHgr2B3abf", 
    "data" : {
        "v" : NumberInt(866), 
        "meta" : {
            "mtime" : 1461491141827.0, 
            "ctime" : 1461491141827.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){\n\tString original, reverse = \"\";\n\n\tSystem.out.print(\"Type one or more words: \");\n\toriginal = console.nextLine();\n\tString newString = original.toLowerCase(); //lowerCaseInput is better name\n\n\tint length = newString.length();\n\n    //inefficient! can you come up with a better way to do this without using reverse string?\n    //comparing individual characters instead\n\tfor ( int i = length - 1; i >= 0; i-- ){\n\t\treverse = reverse + newString.charAt(i);\n\t}\n\t\n\tif (newString.equals(reverse)){\n\t\tSystem.out.println(original+\" is a palindrome!\");\n\t}else{\n\t\tSystem.out.println(original+\" is not a palindrome.\");\n\t}\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "3KpyQFX8iBRErfbG9", 
    "data" : {
        "v" : NumberInt(146), 
        "meta" : {
            "mtime" : 1461499205056.0, 
            "ctime" : 1461499205056.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    //nicely done!    \n    String result = email.split(\"@\")[0];\n        \n    return result;\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cs5avZEehtu7x8JML", 
    "data" : {
        "v" : NumberInt(500), 
        "meta" : {
            "mtime" : 1461493813447.0, 
            "ctime" : 1461493813447.0
        }, 
        "snapshot" : "//very good variable names! very easy to read \n//nice use of APIs!\n//some parts can be split, like maxWidth and maxHeight, into 3 lines for greater readability\npublic static Rectangle union(Rectangle rectA , Rectangle rectB){\n    int minX = Math.min(rectA.getX(),rectB.getX());\n    int minY = Math.min(rectA.getY(),rectB.getY());\n    \n    int maxWidth = Math.max(rectA.getWidth() + rectA.getX(), rectB.getWidth() + rectB.getX());\n    int maxHeight = Math.max(rectA.getHeight() + rectA.getY(), rectB.getHeight() + rectB.getY());\n    \n    Rectangle a = new Rectangle(minX, minY, maxWidth-minX , maxHeight-minY);\n\n    return a;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "eEiWnik3XDxvgocFt", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461499568517.0, 
            "ctime" : 1461499568517.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "mGdETrYyCsmEaa44P", 
    "data" : {
        "v" : NumberInt(556), 
        "meta" : {
            "mtime" : 1461499849119.0, 
            "ctime" : 1461499849119.0
        }, 
        "snapshot" : "public class Rectangle {\n\nprivate int x;\nprivate int y;\nprivate int width;\nprivate int height;\n\n\n\n\npublic Rectangle(int x, int y, int width, int height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    \n}\n\npublic int getHeight() {\n    return height;\n    \n}\n    \npublic int getWidth() {\n    return width;\n    \n}\n\npublic int getX() {\n    \n    return x;\n}\n\npublic int getY() {\n    \n    return y;\n}\n    \npublic String toString() {\n    return \"Rectangle[x=\" + x + \",y=\" + y +\",width=\" + width + \",height=\" + height + \"]\";\n    \n}    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "25mTbQcgQToosefHW", 
    "data" : {
        "v" : NumberInt(433), 
        "meta" : {
            "mtime" : 1461495152932.0, 
            "ctime" : 1461495152932.0
        }, 
        "snapshot" : "//code works, some mistakes in code style\n//look below for comments\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1; //it's obvious your count should be some boolean value!  isA1Longer = true\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;//isA1Longer = false\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){ //this entire for loop can be replaced by newList.add(a2.get(i))\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "SQwtK4vH3zazJKzPm", 
    "data" : {
        "v" : NumberInt(8), 
        "meta" : {
            "mtime" : 1461500936388.0, 
            "ctime" : 1461500936388.0
        }, 
        "snapshot" : "//good\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height +\"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "iNGYaGogoaYDkjicg", 
    "data" : {
        "v" : NumberInt(91), 
        "meta" : {
            "mtime" : 1461501186113.0, 
            "ctime" : 1461501186113.0
        }, 
        "snapshot" : "public static void parseEmail(String email) {\n    return email.substring(0, email.indexOf('@'));\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "exMuifwBkmNM8yE9J", 
    "data" : {
        "v" : NumberInt(301), 
        "meta" : {
            "mtime" : 1461418223706.0, 
            "ctime" : 1461418223706.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    if(supermarket.getCounter(counterNumber).getCashier()!= null){\n        supermarket.getCounter(counterNumber).setCashier(cashier);\n    }\n    return(supermarket.getCounter(counterNumber).getCashier()== null);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "wXTrq3ZWc7jYCuLk5", 
    "data" : {
        "v" : NumberInt(660), 
        "meta" : {
            "mtime" : 1461499588222.0, 
            "ctime" : 1461499588222.0
        }, 
        "snapshot" : "//i love the comments, it makes your code easy to read :)\n//however inefficient! because you need an additional string and you're comparing 2 strings\n//could you think of a way to using n/2 comparisons?\n\npublic static void printPalindrome(Scanner console){\n    \n    System.out.print(\"Type one or more words: \");\n    \n    String input = console.nextLine();\n    String changeCase = input.toLowerCase(); //converts to lowercase\n    \n    String copy=\"\"; //keeps a duplicate if word is palindrome\n    \n    int length = changeCase.length();\n    \n    for ( int i = length-1; i >= 0; i-- ){\n         copy+= changeCase.charAt(i);\n    }\n    \n    if(changeCase.equals(copy)){\n        System.out.println(input+ \" is a palindrome!\");\n        \n    }else{\n        System.out.println(input+ \" is not a palindrome.\");\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "kFG8AMyeaNGbkoCLT", 
    "data" : {
        "v" : NumberInt(110), 
        "meta" : {
            "mtime" : 1461501804683.0, 
            "ctime" : 1461501804683.0
        }, 
        "snapshot" : "//i like how you logically segmented your code, variable names are good too!\npublic static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    int rectAX = rectA.getX();\n    int rectBX = rectB.getX();\n    Rectangle rectWithWidthToAdd = null; //you can simply store the width\n    Rectangle rectWithHeightToAdd = null; //same here\n    \n    \n    //X\n    int smallerX = 0;\n    int biggerX = 0;\n    \n    if (rectAX > rectBX) {\n        smallerX = rectBX;\n        biggerX = rectAX;\n        rectWithWidthToAdd = rectA;\n    } else {\n        smallerX = rectAX;\n        biggerX = rectBX;\n        rectWithWidthToAdd = rectB;\n    }\n    \n    //Y\n    int rectAY = rectA.getY();\n    int rectBY = rectB.getY();\n    \n    int smallerY = 0;\n    int biggerY = 0;\n    \n    if (rectAY > rectBY) {\n        smallerY = rectBY;\n        biggerY = rectAY;\n        rectWithHeightToAdd = rectA;\n    } else {\n        smallerY = rectAY;\n        biggerY = rectBY;\n        rectWithHeightToAdd = rectB;\n    }\n    \n    int newWidth = (biggerX + rectWithWidthToAdd.getWidth()) - smallerX;\n    int newHeight = (biggerY + rectWithHeightToAdd.getHeight()) - smallerY;\n    \n    Rectangle newRect = new Rectangle(smallerX, smallerY, newWidth, newHeight);\n    \n    \n    \n    return newRect;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ReC3RYn3EzMby6XRG", 
    "data" : {
        "v" : NumberInt(737), 
        "meta" : {
            "mtime" : 1461500623526.0, 
            "ctime" : 1461500623526.0
        }, 
        "snapshot" : "//much better naming here! i like smallestX, smallestY\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int smallestX = 0;\n    int smallestY = 0;\n    int width = 0;\n    int height = 0;\n    \n    if(rectA.getX() < rectB.getX()) {\n        smallestX = rectA.getX();\n        width = rectB.getX() - rectA.getX() + rectB.getWidth();\n          } else {\n        smallestX = rectB.getX();    \n        width = rectA.getX() - rectB.getX() + rectA.getWidth();\n          }\n    \n    \n    if(rectA.getY() > rectB.getY()) {\n        smallestY = rectB.getY();\n        height = rectA.getY() -  rectB.getY() + rectA.getHeight();\n          } else {\n        smallestY = rectA.getY();   \n        height = rectB.getY() - rectA.getY() + rectB.getHeight();\n          }\n    \n    \n    Rectangle rectC = new Rectangle(smallestX, smallestY, width, height);\n    return rectC;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XMax4F5qnZCsXPThh", 
    "data" : {
        "v" : NumberInt(474), 
        "meta" : {
            "mtime" : 1461500876226.0, 
            "ctime" : 1461500876226.0
        }, 
        "snapshot" : "//good job! very efficent method\npublic static void interleave(ArrayList<Integer> a1,ArrayList<Integer> a2) {\n\n    int i = -1;\n    for(Integer num: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, num);\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "vmNEbQAhKdcGcrTYf", 
    "data" : {
        "v" : NumberInt(285), 
        "meta" : {
            "mtime" : 1461499575345.0, 
            "ctime" : 1461499575345.0
        }, 
        "snapshot" : "public static Integer power(int base, int exponent){\n    int ans = (int)Math.pow(base,exponent); //math must be uppercase.\n                                            //double to integer use (int) not (Integer)\n    return ans;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "JdKN2XcX4aLkRW2nE", 
    "data" : {
        "v" : NumberInt(432), 
        "meta" : {
            "mtime" : 1461502127873.0, 
            "ctime" : 1461502127873.0
        }, 
        "snapshot" : "import java.util.*; //where are you using util? :P\npublic class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    } \n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\"; //could use some spaces! but otherwise good\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rT93hY7z5Xtocwss3", 
    "data" : {
        "v" : NumberInt(967), 
        "meta" : {
            "mtime" : 1461486135676.0, 
            "ctime" : 1461486135676.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int list1 = a1.size();\n    int list2 = a2.size();\n    ArrayList<Integer> result = new ArrayList<>();\n    if(list1==list2){\n        for(int i = 0; i<list1; i++){\n            result.add(a1.get(i));\n            result.add(a2.get(i));\n        }\n    }else if(list1==0){\n        result = a2;\n    }else if(list2==0){\n        result = a1;\n    }\n    else{\n        if(list1>list2){\n          for(int m = 0; m<list2; m++){\n            result.add(a1.get(m));\n            result.add(a2.get(m)); \n          }\n          for(int n = list2; n<list1; n++){\n            result.add(a1.get(n));\n          }\n        }else{\n           for(int j = 0; j<list1; j++){\n            result.add(a1.get(j));\n            result.add(a2.get(j)); \n          }\n          for(int k = list2; k<list2; k++){\n            result.add(a2.get(k));\n          } \n        }\n    }\n    a1= result;\n} ", 
        "type" : "text"
    }
}
{ 
    "_id" : "zYWsgTw625zhstf9P", 
    "data" : {
        "v" : NumberInt(407), 
        "meta" : {
            "mtime" : 1461502422346.0, 
            "ctime" : 1461502422346.0
        }, 
        "snapshot" : "//good\npublic class Rectangle{\n    private int y;\n    private int x;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y +\",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "65DWu4XpBCxdDkjpa", 
    "data" : {
        "v" : NumberInt(515), 
        "meta" : {
            "mtime" : 1461502589821.0, 
            "ctime" : 1461502589821.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y = rectA.getY();\n    int width = (rectB.getX()+rectB.getWidth()) - rectA.getX();\n    int height = (rectB.getY()+rectB.getHeight()) - rectA.getY();\n    \n    if(rectA.getX() > rectB.getX()){\n        x = rectB.getX();\n    } //you may wish to explore Math.min(...)\n    \n    if(rectA.getY() > rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if((rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth())){\n        width = (rectA.getX()+rectA.getWidth()) - rectB.getX();\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = (rectA.getY()+rectA.getHeight()) - rectB.getY();\n    }\n    Rectangle newRectangle = new Rectangle(x,y,width,height);\n    return newRectangle;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "wreKmJR2Ev2A7myx5", 
    "data" : {
        "v" : NumberInt(129), 
        "meta" : {
            "mtime" : 1461503634571.0, 
            "ctime" : 1461503634571.0
        }, 
        "snapshot" : "/*public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    int shorter = 0;\n    int longer = 0;\n    int count = 0;\n    \n    if (a1.size() > a2.size()){\n        shorter = a2.size();\n        longer = a1.size();\n        count = 1;\n    } else {\n        shorter = a1.size();\n        longer = a2.size();\n        count = 2;\n    }\n    \n    \n    for (int i = 0; i < shorter; i++) {\n        newList.add(a1.get(i));\n        for(int j = i; j <= i; j++){\n            newList.add(a2.get(j));\n            \n        }\n    }\n    \n    for(int i = shorter; i < longer; i++) {\n        if (count == 1) {\n            newList.add(a1.get(i));\n        } else if (count == 2) {\n            newList.add(a2.get(i));\n        }\n    }\n    \n    a1.clear();\n    \n    for (int i = 0; i < newList.size(); i++){\n        a1.add(newList.get(i));\n    }\n    \n    \n}*/\n\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    if(a1.size()>=a2.size()){\n        for(int i =0; i<a2.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n           \n        }\n        for(int j =a2.size(); j<a1.size(); j++){\n            newList.add(a1.get(j));\n        }\n        \n    }\n    else{\n        for(int i =0; i<a1.size(); i++){\n            newList.add(a1.get(i));\n            newList.add(a2.get(i));\n        }\n        for(int j =a1.size(); j<a2.size(); j++){\n            newList.add(a2.get(j));\n        }\n    }\n    \n    //a1 = newList;\n    System.out.println(newList);\n    //System.out.println(a1);\n    \n    a1 = newList;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ukPpu5BqHe3pq9kJN", 
    "data" : {
        "v" : NumberInt(985), 
        "meta" : {
            "mtime" : 1461499493040.0, 
            "ctime" : 1461499493040.0
        }, 
        "snapshot" : "//nicely done!\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        a1.add(i, elem);\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "zQyEm5nNXH7Xx8ejK", 
    "data" : {
        "v" : NumberInt(480), 
        "meta" : {
            "mtime" : 1461491760347.0, 
            "ctime" : 1461491760347.0
        }, 
        "snapshot" : "//good\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x,int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return \"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "29Wu2cjfLFKkzAuuW", 
    "data" : {
        "v" : NumberInt(831), 
        "meta" : {
            "mtime" : 1461502979717.0, 
            "ctime" : 1461502979717.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    int xOfa = rectA.getX(); //for camelCase, xOfA is the correct naming!\n    int xOfb = rectB.getX();\n    \n    int x; \n    if (xOfa <= xOfb){\n        x = xOfa;\n    }else{\n        x = xOfb;\n    } //use Math.min(int a, int b)\n    \n    int yOfa = rectA.getY();\n    int yOfb = rectB.getY();\n    \n    int y;\n    if (yOfa <= yOfb){\n        y = yOfa;\n    }else{\n        y = yOfb;\n    } //same here =)\n    \n    int highestPointOfY;\n    \n    int highestPointOfYinA = yOfa + rectA.getHeight();\n    int highestPointOfYinB = yOfb + rectB.getHeight();\n    \n    if (highestPointOfYinA >= highestPointOfYinB){\n        highestPointOfY = highestPointOfYinA;\n    }else{\n        highestPointOfY = highestPointOfYinB;\n    }\n    \n    int maxOfX;\n    \n    int maxOfXinA = xOfa + rectA.getWidth();\n    int maxOfXinB = xOfb + rectB.getWidth();\n    \n    if (maxOfXinA >= maxOfXinB){\n        maxOfX = maxOfXinA;\n    }else{\n        maxOfX = maxOfXinB;\n    }\n    \n    Rectangle toReturn = new Rectangle (x, y, maxOfX-x, highestPointOfY-y);\n    \n    return toReturn;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Cn8Kg5nf7FsBLtCPm", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461505581513.0, 
            "ctime" : 1461505581513.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "EeEa7oivRi4RCuC5x", 
    "data" : {
        "v" : NumberInt(1224), 
        "meta" : {
            "mtime" : 1461481483397.0, 
            "ctime" : 1461481483397.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){ // return type? \n    System.out.print(\"Type one or more words: \");\n    String word = console.nextLine();\n    String reverseWord = \"\";\n    for(int i = word.length()-1;i>=0;i--){\n        char ch = word.charAt(i);\n        reverseWord += ch;\n    }\n    boolean status=word.equalsIgnoreCase(reverseWord);\n    if(status){\n        System.out.println( word+\" is a palindrome!\");\n    }else{\n       System.out.println(word+\" is not a palindrome.\");  \n    }\n    \n    \n    \n   \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Cto57r645r2DkpuRs", 
    "data" : {
        "v" : NumberInt(779), 
        "meta" : {
            "mtime" : 1461504879563.0, 
            "ctime" : 1461504879563.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    int xa = rectA.getX();\n    int xb = rectB.getX();\n    int ya = rectA.getY();\n    int yb = rectB.getY();\n    int widtha = rectA.getWidth();\n    int widthb = rectB.getWidth();\n    int heighta = rectA.getHeight();\n    int heightb = rectB.getHeight();\n    \n    int xu = Math.min(xa,xb);\n    int yu = Math.min(ya,yb);\n    //the 2 things below look like math formulas! you might want to decompose them !\n    int widthu = Math.abs((xa+widtha)-(xb+widthb))+Math.min((xa+widtha),(xb+widthb))-Math.min(xa,xb);\n    int heightu = Math.abs((ya+heighta)-(yb+heightb))+Math.min((ya+heighta),(yb+heightb))-Math.min(ya,yb);\n    \n    Rectangle unionR = new Rectangle(xu,yu,widthu,heightu);\n    return unionR;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "N5pp7w6ke6nGMjjPa", 
    "data" : {
        "v" : NumberInt(776), 
        "meta" : {
            "mtime" : 1461495589795.0, 
            "ctime" : 1461495589795.0
        }, 
        "snapshot" : "\npublic static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String console1 = console.nextLine();   // it would be better to use another variable name such as \"word\" or \"input\", since console1 may appear to be a Scanner object variable name \n    if(console1 == null){\n        return ;\n    }\n    int length = console1.length();\n    int round = length/2;\n    for (int i = 0;i<round;i++){\n        if(console1.charAt(i)!=console1.charAt(length-1-i)){ // think of how you can make it compare case-insensitively\n            System.out.println(console1+\" is not a palindrome!\");\n            return ;\n        }\n    }\n    System.out.println(console1+\" is a palindrome\");\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6KXm6dirwLJetc9Zy", 
    "data" : {
        "v" : NumberInt(337), 
        "meta" : {
            "mtime" : 1461502172861.0, 
            "ctime" : 1461502172861.0
        }, 
        "snapshot" : "//nicely done!\n\npublic class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight(){\n        return height;\n        \n    }\n    \n    public int getWidth(){\n        return width;\n        \n    }\n    \n    public int getX(){\n        \n        return x;\n    }\n    \n    public int getY(){\n        \n        return y;\n    }\n    \n    public String toString(){\n        \n        return \"Rectangle[x=\"+ x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\";\n    }\n    \n}    ", 
        "type" : "text"
    }
}
{ 
    "_id" : "ETWuL9f9dPGpRxavZ", 
    "data" : {
        "v" : NumberInt(210), 
        "meta" : {
            "mtime" : 1461506306741.0, 
            "ctime" : 1461506306741.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    int symbol = email.indexOf(\"@\"); //indexOfSymbol is be a better name!\n    String id = email.substring(0, symbol);\n    return id;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "EHDLDNwS4Jz5A2awd", 
    "data" : {
        "v" : NumberInt(783), 
        "meta" : {
            "mtime" : 1461500081515.0, 
            "ctime" : 1461500081515.0
        }, 
        "snapshot" : "public static ArrayList interleave(ArrayList a1, ArrayList a2){ // this method doesn't return an ArrayList, so return type should be void\n    int size1 = a1.size();\n    int size2 = a2.size();\n    ArrayList result = new ArrayList();\n    int round;\n    if(size1>size2){\n        round = size2;\n    }else{\n        round=size1;\n    }\n    for(int i=0;i<round;i++){\n        result.add(a1.get(i));\n        result.add(a2.get(i));\n    }\n    if(size1>size2){\n        for(int j =round;j<size1;j++){\n            result.add(a1.get(j));\n        }\n    }else{\n          for(int j =round;j<size2;j++){\n            result.add(a1.get(j));\n        }\n    }\n    \n    //you need to modify arraylist a1 as per question requirements :)\n    return result; // c\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "RLSjZ55YynzmE9r5M", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461507585752.0, 
            "ctime" : 1461507585752.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "XHHuzKZd9iBNhQ2tc", 
    "data" : {
        "v" : NumberInt(245), 
        "meta" : {
            "mtime" : 1461502200680.0, 
            "ctime" : 1461502200680.0
        }, 
        "snapshot" : "//could use better variable names, like maxX or maxY instead of y2 and x1\n//you can split the calculations of x2 and y2 so that in case it's wrong, it's easier to debug too!\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    \n    int x1 = Math.min(rectA.getX(), rectB.getX());\n    \n    int x2 = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    \n    int y1 = Math.min(rectA.getY(), rectB.getY());\n    \n    int y2 = Math.max(rectA.getY() + rectA.getHeight(), rectB.getY() + rectB.getHeight());\n    \n    \n    \n    return new Rectangle (x1, y1, x2 - x1, y2 - y1);\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ApzS6SrrgHZHqnfEE", 
    "data" : {
        "v" : NumberInt(273), 
        "meta" : {
            "mtime" : 1461508171618.0, 
            "ctime" : 1461508171618.0
        }, 
        "snapshot" : "public static Integer getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int noOfCounters = supermarket.getNumCounters();\n    int count=0;\n    \n    for(int i=0; i<noOfCounters; i++){\n        if(supermarket.getCounter(i).getNumCustomersInQueue()==0){\n            count++;\n        }  \n\n    }\n    return count;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "FR6AmzkiKWao96LW8", 
    "data" : {
        "v" : NumberInt(704), 
        "meta" : {
            "mtime" : 1461495093211.0, 
            "ctime" : 1461495093211.0
        }, 
        "snapshot" : "public static Rectangle union（Rectangle rectA, Rectangle rectB){\n    int x = rectA.getX();\n    int y= rectA.getY();\n    int width;\n    int height;\n    \n    if(rectA.getX()>rectB.getX()){\n        x= rectB.getX();\n    }\n    if(rectA.getY()>rectB.getY()){\n        y = rectB.getY();\n    }\n    \n    if( (rectA.getX()+rectA.getWidth())>(rectB.getX()+rectB.getWidth()) ){\n       width = rectA.getX()+ rectA.getWidth()-x;\n    }else{\n        width = rectB.getX()+ rectB.getWidth-x;\n    }\n    \n    if((rectA.getY()+rectA.getHeight())>(rectB.getY()+rectB.getHeight())){\n        height = rectA.getX()+rectA.getHeight()-y;\n    }else{\n        height = rectB.getX()+rectB.getHeight()-y;\n    }\n    \n    Rectangle result = new Rectangle(x, y, width, height)\n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "r9e67pY49w4Bdcgqy", 
    "data" : {
        "v" : NumberInt(771), 
        "meta" : {
            "mtime" : 1461508392033.0, 
            "ctime" : 1461508392033.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    //try to leave a space here for readability!\n    public Rectangle(int x,int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getY(){\n        return y;\n    }\n    public int getX(){\n        return x;\n    }\n    public String toString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\"); //spaces here would be nice too!\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "oJKyMfWjJ3jQT46Rp", 
    "data" : {
        "v" : NumberInt(469), 
        "meta" : {
            "mtime" : 1461509108084.0, 
            "ctime" : 1461509108084.0
        }, 
        "snapshot" : "//good!\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x= x; //missing space\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "EK86h5tFSRDByWpuf", 
    "data" : {
        "v" : NumberInt(438), 
        "meta" : {
            "mtime" : 1461500512676.0, 
            "ctime" : 1461500512676.0
        }, 
        "snapshot" : "//by far the simplest code i have seen for this question. good job\npublic static ArrayList<Integer> interleave(ArrayList<Integer>a1, ArrayList<Integer>a2){\n    \n    int a1Size = a1.size();//unnecessary!\n    int a2Size = a2.size();//unnecessary!\n    \n    //ArrayList<Integer> result = new ArrayList<Integer>();\n\n    int i = -1;\n    for(Integer elem: a2) {\n        if(i < a1.size()-1) {\n            i += 2;\n        } else {\n            i += 1;\n        }\n        \n        a1.add(i, elem);\n    }\n    \n    return a1;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "T4hiW2WuSdkWeeTeY", 
    "data" : {
        "v" : NumberInt(150), 
        "meta" : {
            "mtime" : 1461510862763.0, 
            "ctime" : 1461510862763.0
        }, 
        "snapshot" : "public static String parseEmail (String email) {\n    \n    int position = email.indexOf('@'); //\n    String result = email.substring(0, position);\n    \n    return result;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "4tCHspXcLurDLNpAA", 
    "data" : {
        "v" : NumberInt(701), 
        "meta" : {
            "mtime" : 1461490884963.0, 
            "ctime" : 1461490884963.0
        }, 
        "snapshot" : "//i like your comments\n//but you should decompose width and height to 3 different lines so it's clearer :)\n\npublic static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //find min x-coordinate\n    int x = Math.min(rectA.getX(), rectB.getX());\n    //find min y-coordinate\n    int y = Math.min(rectA.getY(), rectB.getY());\n    //get largest width + x-coord\n    int width = Math.max(rectA.getX() + rectA.getWidth(), rectB.getX() + rectB.getWidth());\n    //get largest height + y-coord\n    int height = Math.max(rectA.getY() + rectA.getHeight(), rectB.getY() + rectB.getHeight());\n    \n    //create new rectangle\n    return new Rectangle(x,y,width-x,height-y);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3RDcjJwsNun5eLivu", 
    "data" : {
        "v" : NumberInt(643), 
        "meta" : {
            "mtime" : 1461511060633.0, 
            "ctime" : 1461511060633.0
        }, 
        "snapshot" : "public static void printPalindrome (Scanner sc) {\n    \n    System.out.print(\"Type one or more words: \");\n    String words = sc.nextLine();\n    String word = words.toLowerCase();\n    boolean isPalindrome = true;\n    \n    int length = word.length();\n    int midway = (length/2) + 1;\n    \n    for (int i = 0 ; i < midway ; i++) {\n        \n        isPalindrome = (word.charAt(i) == word.charAt(length - 1 - i));\n        if (!isPalindrome) {\n            break;\n        }\n        \n    }\n    \n    if (isPalindrome) {\n        System.out.println(words + \" is a palindrome!\");\n    } else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "bFPwKPMx6RHmhGwDE", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461511812113.0, 
            "ctime" : 1461511812113.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "FuFpkuLqPr28dxqHw", 
    "data" : {
        "v" : NumberInt(607), 
        "meta" : {
            "mtime" : 1461512112098.0, 
            "ctime" : 1461512112098.0
        }, 
        "snapshot" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        \n    ArrayList<Integer> result = new ArrayList<>();\n    if (a1.size() >= a2.size()) {\n        \n        for (int i = 0 ; i < a2.size() ; i++) {\n    \n            int store = a1.get(i);\n            int number = a2.get(i);\n            result.add(store);\n            result.add(number);\n                \n        }\n            \n        for (int j = a2.size() ; j < a1.size() ; j++) {\n            \n            int num = a1.get(j);\n            result.add(num);\n            \n        }\n            \n    }\n        \n    if (a2.size() > a1.size()) {\n            \n        for (int i = 0 ; i < a1.size() ; i++) {\n            \n            int store = a1.get(i);\n            int number = a2.get(i);\n            result.add(store);\n            result.add(number);\n                \n        }\n            \n        for (int j = a1.size() ; j < a2.size() ; j++) {\n                \n            int num = a2.get(j);\n            result.add(num);\n                \n        }\n    }\n        \n    return result;\n        \n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "97B7tCyZcuoAfWbrG", 
    "data" : {
        "v" : NumberInt(466), 
        "meta" : {
            "mtime" : 1461513665160.0, 
            "ctime" : 1461513665160.0
        }, 
        "snapshot" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle (int x, int y, int width, int height) {\n        \n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Fn4m2K7eifsLJ2WXq", 
    "data" : {
        "v" : NumberInt(1089), 
        "meta" : {
            "mtime" : 1461486673039.0, 
            "ctime" : 1461486673039.0
        }, 
        "snapshot" : "//in general, good! watch out for variable names, if you find out you're missing something\n//it's hard to go back and reread your code \n\npublic static void printPalindrome(Scanner cons){\n    System.out.print(\"Type one or more words: \");\n    String word = cons.nextLine(); //words would be better, since user can type in more than one word\n    String word2 = word.toLowerCase(); //what does 2 in word2 mean? why not 1? use lowerCaseWords instead :P\n    int lenOfWord = word.length() - 1;\n    boolean check = true; //check has no meaning in this context! better variable name would be isPalindrome :P\n    \n    //nice efficient way! good job\n    for(int i = 0; i<=lenOfWord/2 ; i++){\n        if(!(word2.charAt(i) == word2.charAt(lenOfWord - i))){\n            System.out.print(word + \" is not a palindrome.\");//should place this outside so the code is more logically segmented\n            check = false;\n        }\n        \n    }\n    if (check){\n        System.out.print(word  + \" is a palindrome!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "kJNG8TCS65iccu5tz", 
    "data" : {
        "v" : NumberInt(675), 
        "meta" : {
            "mtime" : 1461474410894.0, 
            "ctime" : 1461474410894.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    //Alternative method using add(int index, Element E):\n    /*\n    int a1Size = a1.size();\n    int min = Math.min(a1.size(), a2.size());\n    int j = 0;\n    for (int i = 1; i < min * 2; i += 2) {\n        Integer num = null;\n        num = a2.get(j);\n        a1.add(i, num);\n        j++;\n    }\n    if (a1Size < a2.size()) {\n        for (int i = j; i < a2.size(); i++) {\n            a1.add(a2.get(i));\n        }\n    }\n    */\n    //Method creating a new arraylist\n    ArrayList<Integer> temp = new ArrayList<>();\n    for (int i = 0; i < Math.min(a1.size(), a2.size()); i++) {\n        temp.add(a1.get(i));\n        temp.add(a2.get(i));\n    }\n    if (a1.size() > a2.size()) {\n        for (int i = a2.size(); i < a1.size(); i++) {\n            temp.add(a1.get(i));\n        }\n    } else if (a1.size() < a2.size()) {\n        for (int i = a1.size(); i < a2.size(); i++) {\n            temp.add(a2.get(i));\n        }\n    }\n    a1.clear();\n    for (Integer num: temp) {\n        a1.add(num);\n    }\n}\n// Good job!", 
        "type" : "text"
    }
}
{ 
    "_id" : "YM29ZDN4wPeWdg9Zj", 
    "data" : {
        "v" : NumberInt(1111), 
        "meta" : {
            "mtime" : 1461488582257.0, 
            "ctime" : 1461488582257.0
        }, 
        "snapshot" : "//can you come up with a better way without using a temporary container? \n//hint: use the a1.add(int index, Integer element) and iterate through a2\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    int len1 = a1.size();\n    int len2 = a2.size();\n    ArrayList<Integer> r = new ArrayList<>(); \n    \n    if(len1 == 0){\n        a1.addAll(a2);\n    }\n   \n\n    \n    if(len1 != 0 && len2 != 0){\n        if(len1>len2){\n            for(int i=0; i<len2; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len2; j<len1; j++){\n                r.add(a1.get(j));\n            }\n        }\n        \n        \n        if(len2>=len1){\n            for(int i=0; i<len1; i++){\n                r.add(a1.get(i));\n                r.add(a2.get(i));\n            }\n            for(int j=len1; j<len2; j++){\n                r.add(a2.get(j));\n            }\n        }\n    a1.clear();//indentation\n    a1.addAll(r);//indentation\n    }\n    \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "EDuTyrRJDHtEdcpDE", 
    "data" : {
        "v" : NumberInt(785), 
        "meta" : {
            "mtime" : 1461514071842.0, 
            "ctime" : 1461514071842.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle r1, Rectangle r2) {\n    \n    int x1 = r1.getX();\n    int y1 = r1.getY();\n    int width1 = r1.getWidth();\n    int height1 = r1.getHeight();\n    \n    int x2 = r2.getX();\n    int y2 = r2.getY();\n    int width2 = r2.getWidth();\n    int height2 = r2.getHeight();\n    \n    int finalX;\n    int finalY;\n    int finalWidth;\n    int finalHeight;\n    \n    if (x1 <= x2) {\n        finalX = x1;\n    } else {\n        finalX = x2;\n    }\n    \n    if (y1 <= y2) {\n        finalY = y1;\n    } else {\n        finalY = y2;\n    }\n    \n    if (width1 >= width2) {\n        finalWidth = width1 + 1;\n    } else {\n        finalWidth = width2 + 1;\n    }\n    \n    if (height1 >= height2) {\n        finalHeight = height1 + 1;\n    } else {\n        finalHeight = height2 + 1;\n    }\n    \n    Rectangle result = new Rectangle (finalX, finalY, finalWidth, finalHeight);\n    return result;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "2j2puzxFbgipewM6u", 
    "data" : {
        "v" : NumberInt(463), 
        "meta" : {
            "mtime" : 1461506905393.0, 
            "ctime" : 1461506905393.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    int num=email.indexOf('@'); // hmm what about using atSymbolIndex for your variable name? You'll want your variable names to be significant, which will make your code more readable and easier for your debugging\n    return email.substring(0,num);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Mo4BjFCcWDAiSWyKf", 
    "data" : {
        "v" : NumberInt(1408), 
        "meta" : {
            "mtime" : 1461478007734.0, 
            "ctime" : 1461478007734.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner str){\n    String original = str.next();\n    String check = original.toLowerCase();\n    boolean result = true; //could use a better name, like isPalindrome!\n    int length = check.length() - 1;\n    \n    //you're checking through the entire string. is there a need to? \n    //can you do it be iterating through length/2?\n    for (int i = 0; i < check.length(); i++){ \n        if (check.charAt(i) != check.charAt(length)){\n            result = false;\n            System.out.print(\"Type one or more words: \" + original + \" is not a palindrome.\"); //should put this below for logical segmentation for your code!\n            break; //check for result in the conditional  using (i < check.length() && check) instead!\n        }\n        else {\n            length--;//is this necessary? isn't length just check.length() - i - 1?\n        }\n    }\n    //this would read much better if you used if(result) or even better if(isPalindrome)\n    //reads like English doesn't it? much better and easier to understand :)\n    if (result == true){\n        System.out.print(\"Type one or more words: \" + original + \" is a palindrome!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "5a2HQQgrgHeKtKkn3", 
    "data" : {
        "v" : NumberInt(207), 
        "meta" : {
            "mtime" : 1461490093445.0, 
            "ctime" : 1461490093445.0
        }, 
        "snapshot" : "\npublic static String parseEmail (String email){\n    String correctEmail = \"\"; \n    int str = email.indexOf('@'); \n    int str2 = email.indexOf('@', str+1);\n    \n   \n    correctEmail = email.substring(0,str);\n\n    return correctEmail;\n} \n", 
        "type" : "text"
    }
}
{ 
    "_id" : "YTZLXMTi6o2xzxrAA", 
    "data" : {
        "v" : NumberInt(1786), 
        "meta" : {
            "mtime" : 1461507079046.0, 
            "ctime" : 1461507079046.0
        }, 
        "snapshot" : "import java.util.*;\n    public static void main(String[])args){\n    Scanner sc=new Scanner(System.in);\n    System.out.print(\"enter word\");\n    String console=sc.nextLine();\n    printPalindrome(console);   // this is a compilation error: passing a String object into a parameter that takes in a Scanner object.\n    }\n/* Don't need the main method! just the printPalindrome method\n   Take note on the return type to use as well */\npublic static String printPalindrome(Scanner console){\n    // put the prompts and input here\n    int counter=0;\n    for(int i=0;i<console.length();i++){\n        char compare=console.charAt(console.length()-1-i);\n        if(console.charAt(i)==((compare)||compare.toUpperCase())){ // this is a compilation error: '==' is a binary operator, so you can only do one-to-one comparison. '||' is the or operator separating two boolean expressions - it has to be in the following form: if (a == b || a == c)\n            counter++;\n        }\n    }\n    if(counter==(console.length()/2){\n        return \"is a palindrome!\";\n    }\n    else{\n        return \"is not a palindrome\";\n    }\n}\n/*  Think through about the program logic of the question \n    racecar is a palindrome because it's the same spelling from front to back\n    hannah is a palindrome\n    Madam is a palindrome (we're comparing case-insensitively) \n    \n    Other words that are not spelt the same way front-to-back and back-to-front are not palindromes\n    \n    Think of how might you represent this, and how to make use of the if conditions and boolean expressions\n    */", 
        "type" : "text"
    }
}
{ 
    "_id" : "yMcmCfLr9D5s2fvNt", 
    "data" : {
        "v" : NumberInt(105), 
        "meta" : {
            "mtime" : 1461484476280.0, 
            "ctime" : 1461484476280.0
        }, 
        "snapshot" : "//very clear coding, nice job\npublic static Rectangle union(Rectangle rectA, Rectangle rectB){\n        int Ax = rectA.getX();\n        int Ay = rectA.getY();\n        int AWidth = rectA.getWidth();\n        int AHeight = rectA.getHeight();\n        \n        int Bx = rectB.getX();\n        int By = rectB.getY();\n        int BWidth = rectB.getWidth();\n        int BHeight = rectB.getHeight();\n\n        int Cx = Math.min(Ax,Bx);\n        int Cy = Math.min(Ay,By);\n        \n        int lengthA = Ax + AWidth;\n        int lengthB = Bx + BWidth;\n        \n        int lengthC = Math.max(lengthA,lengthB);\n        int CWidth = lengthC - Cx;\n        \n        int heightA = Ay + AHeight;\n        int heightB = By + BHeight;\n        \n        int heightC = Math.max(heightA,heightB);\n        int CHeight = heightC - Cy;\n        \n        Rectangle r = new Rectangle(Cx, Cy, CWidth, CHeight);\n        \n        return r;\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "r5KcedxzPy4aHpt2H", 
    "data" : {
        "v" : NumberInt(631), 
        "meta" : {
            "mtime" : 1461508379415.0, 
            "ctime" : 1461508379415.0
        }, 
        "snapshot" : "/* Do take note of the return type requested by the question */\npublic static ArrayList interleave(ArrayList a1,ArrayList a2){ // ArrayList must be declared with the object type in <>! \n    ArrayList<String> aList=new ArrayList<String>();\n    for(int i=0;i<a1.size();i++){\n        aList.add(a1.get(i)+\"\");\n        for(int q=i;q<a2.size();q++){\n            aList.add(a2.get(q)+\"\");\n            q=a2.size();\n        }\n    }\n    return aList;\n}\n/*\n    Think about the program logic for the question. What is required? And how to represent it?\n    If a1 = {1, 2, 3} and a2 = {10, 20, 30}\n    \n    At the end of the interleave() method, a1 should look like: a1 = {1, 10, 2, 20, 3, 30}\n*/", 
        "type" : "text"
    }
}
{ 
    "_id" : "dZdAEjfykbeXRswik", 
    "data" : {
        "v" : NumberInt(1137), 
        "meta" : {
            "mtime" : 1461447584061.0, 
            "ctime" : 1461447584061.0
        }, 
        "snapshot" : "//you used a rifle to kill an ant! could be better\n//you can try comparing each individual character such that you compare each character only once\n\npublic static void printPalindrome(Scanner sc){\n    String input = sc.nextLine();\n    String output=\"\";\n    //input.split not necessary for this question\n    List<String> myList = new ArrayList<String>(Arrays.asList(input.split(\" \")));\n    \n    for(int i=0;i<myList.size();i++){\n        for(int k=myList.get(i).length()-1; k>-1;k--){\n            output = output+\"\"+myList.get(i).charAt(k); // a better name would be reversed\n        }\n        if(myList.get(i).toLowerCase().equals(output.toLowerCase())){\n            System.out.println(\"Type one or more words: \"+input + \" is a palindrome!\");\n        }\n        else{\n            System.out.println(\"Type one or more words: \"+input + \" is not a palindrome.\");\n        }\n        output=\"\";\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "WZKvPjAYujtteJcA8", 
    "data" : {
        "v" : NumberInt(1865), 
        "meta" : {
            "mtime" : 1461484351602.0, 
            "ctime" : 1461484351602.0
        }, 
        "snapshot" : "//this works fine!\n//how would you do it if it weren't allowed to use a third arraylist?\n//hint: use a1.add(int index, Integer element), and iterate using a2\npublic static void interleave(ArrayList <Integer> a1, ArrayList <Integer> a2){\n    ArrayList <Integer> finalList = new ArrayList <Integer>();\n    int num = a1.size() + a2.size();\n    int a1Count =0;\n    int a2Count =0;\n    \n    for(int i=0; i<num; i++){\n        if(a1Count >= a1.size()){\n            finalList.add(a2.get(a2Count));\n            a2Count++;\n        }else if(a2Count >= a2.size()){\n            finalList.add(a1.get(a1Count));\n            a1Count++;           \n        }else{\n            if(i%2 == 0){\n                finalList.add(a1.get(a1Count));\n                a1Count++;\n            }else{\n                finalList.add(a2.get(a2Count));\n                a2Count++;\n            }\n        }\n        \n    }\n    \n    a1.clear();\n    for(int k = 0; k<finalList.size(); k++){\n        a1.add(finalList.get(k));\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XZ8AK5HFhK3FnM2cq", 
    "data" : {
        "v" : NumberInt(244), 
        "meta" : {
            "mtime" : 1461493915131.0, 
            "ctime" : 1461493915131.0
        }, 
        "snapshot" : "//you should explore the following API\n/*\n    lastIndexOf(String str)\n    Returns the index within this string of the last occurrence of the specified substring.\n*/\n\npublic static String parseEmail(String email){\n    int at = 0; \n    for(int i = 0; i < email.length(); i++){\n        if(email.charAt(i) == '@'){\n            at = i;\n        }\n    }\n    return email.substring(0,at);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "9QDnbKziJcrEEMeiy", 
    "data" : {
        "v" : NumberInt(1250), 
        "meta" : {
            "mtime" : 1461482604551.0, 
            "ctime" : 1461482604551.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){\n    String word1 = console.next(); //what does 1 mean in word1? better name would be input\n    \n    String word = word1.toLowerCase(); //again, better name would be lowerCaseInput\n    \n    int wordLength = word.length();\n    int count =0; //this works fine! but a boolean to check if it isPalindrome is better :P\n    \n    for(int i=0; i<wordLength/2; i++){\n        char first = word.charAt(i);\n        char last = word.charAt(wordLength-1-i); \n        \n        if(last != first){\n            count++;\n        }\n        \n    }\n    //if you use isPalindrome it'll be clearer what the if statements below are for\n    if (count >0){\n        System.out.println(\"Type one or more words: \" + word1 + \" is not a palindrome.\");\n    }\n    if(count ==0){\n        System.out.println(\"Type one or more words: \" + word1 + \" is a palindrome!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "n25yWjZGRrZxwvnZo", 
    "data" : {
        "v" : NumberInt(1033), 
        "meta" : {
            "mtime" : 1461506615770.0, 
            "ctime" : 1461506615770.0
        }, 
        "snapshot" : "\n\npublic static void printPalindrome(Scanner console) {\n   \n    System.out.print(\"Type one or more words: \");\n    String input1 = console.nextLine();\n    String input = input1.toUpperCase();\n    char first; // do you have to declare this here?\n    char last; // same for this!\n    boolean check = true; // check is no contextual meaning! a better name is isPalindrome :)\n    int length = input.length();\n    //nice efficient code!\n    for(int i = 0; i < input.length()/2;i++) {\n        first = input.charAt(i);\n        last = input.charAt(length-1);\n        if(first != last) {\n            System.out.println(input1 + \" is not a palindrome.\"); //this should be after the for block for logical segmentation\n            check = false;\n            break; // put && check in the conditional!\n        }\n        length--; //isn't length just input.length() - i - 1?\n    }\n    \n    //isn't it easier to read if you put if(isPalindrome) instead of what you have below?\n    //it reads just like english, i.e. if it is Palindrome then do the following :P\n    if(check != false) {\n        System.out.println(input1 + \" is a palindrome!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qkKpyYbrev4joY8ja", 
    "data" : {
        "v" : NumberInt(170), 
        "meta" : {
            "mtime" : 1461520152961.0, 
            "ctime" : 1461520152961.0
        }, 
        "snapshot" : "public static String parseEmail(String email){ //returns everything before @ in String email\n    int x = email.indexOf('@');\n    return email.substring(0,x);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "5KMSRhxKXp6kA4njj", 
    "data" : {
        "v" : NumberInt(61), 
        "meta" : {
            "mtime" : 1461521393274.0, 
            "ctime" : 1461521393274.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    int x = \n    Rectangle r = new Rectangle();\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "an6Af97HwoQdmAvkK", 
    "data" : {
        "v" : NumberInt(234), 
        "meta" : {
            "mtime" : 1461521389487.0, 
            "ctime" : 1461521389487.0
        }, 
        "snapshot" : "public static void interleave(ArrayList a1, ArrayList a2){\n    int x = a1.size();\n    int y = a2.size();\n    int z = 2;\n    if(x==y){\n        for(int i = 0; i < y; i++){\n            int element = a2.get(i);\n            a1.add(z,element);\n            z++;\n            z++;\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "DdfnYkynxRBmiQ9ga", 
    "data" : {
        "v" : NumberInt(515), 
        "meta" : {
            "mtime" : 1461525730220.0, 
            "ctime" : 1461525730220.0
        }, 
        "snapshot" : "\npublic static String parseEmail(String email){\n    \n    String emailAb=\"\";\n    int firstEmailChar = email.indexOf(0);\n    int endEmailChar = email.indexOf(\"@\");\n    emailAb = email.substring(firstEmailChar,endEmailChar+5);\n    return emailAb;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ThzqkpBxKytuYfEgA", 
    "data" : {
        "v" : NumberInt(571), 
        "meta" : {
            "mtime" : 1461526110003.0, 
            "ctime" : 1461526110003.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y=y;\n        this.width= width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\"+ x +\",\"+\"y=\"+y+\",width=\"+width+\",height=\"+height+\"]\"; \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "zszmXe2i86w89AjaX", 
    "data" : {
        "v" : NumberInt(22), 
        "meta" : {
            "mtime" : 1461526953702.0, 
            "ctime" : 1461526953702.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "yGg5gZ992eZu5tv3a", 
    "data" : {
        "v" : NumberInt(204), 
        "meta" : {
            "mtime" : 1461526087074.0, 
            "ctime" : 1461526087074.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner palindrome) { \n\nString s = palindrome.next(); \n\nboolean isPalendrome = true; \n\nfor (int i = 0; i < s.length() / 2; i++) { \nchar firstChar = s.charAt(i); \nchar secondChar = s.charAt(s.length() - i - 1); \n\nif (firstChar != secondChar) { \nisPalendrome = false; \nbreak; \n} \n} \nif (isPalendrome) {\nSystem.out.println(\"Type one or more words: \" +s +\" is a palindrome!\"); \n} else {\n    System.out.println(\"Type one or more words: \" +s +\" is not a palindrome!\");\n}\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "D2PZcakywytYnRvaB", 
    "data" : {
        "v" : NumberInt(441), 
        "meta" : {
            "mtime" : 1461521993886.0, 
            "ctime" : 1461521993886.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight(){\n        return height;\n    }\n    public int getWidth(){\n        return width;\n    }\n    public int getX(){\n        return x;\n    }\n    public int getY(){\n        return y;\n    }\n    public String toString(){\n        return(\"Rectangle[x=\"+x+\",y=\"+y+\",width=\"+width+\",height=\"+height+\"]\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "nRNpN94LLvmajqQcw", 
    "data" : {
        "v" : NumberInt(177), 
        "meta" : {
            "mtime" : 1461541201920.0, 
            "ctime" : 1461541201920.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    return email.substring(0, email.indexOf('@'));\n\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "CtJNLdu8sXyZrD6sf", 
    "data" : {
        "v" : NumberInt(1232), 
        "meta" : {
            "mtime" : 1461541464987.0, 
            "ctime" : 1461541464987.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \"); \n        String word = console.nextLine();\n        String lowerCase = word.toLowerCase();\n        boolean check = true;\n        int n = lowerCase.length();\n              for (int i=0;i<(n / 2) + 1;++i) {\n                 if (lowerCase.charAt(i) != lowerCase.charAt(n - i - 1)) {\n                     check = false;\n                 }\n              }\n        if (check) {\n            System.out.println(word + \" is a palindrome!\");\n        }    else {\n            System.out.println(word + \" is not a palindrome.\");\n        }\n\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "hvj46tS2NtFYA4YmA", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461543204746.0, 
            "ctime" : 1461543204746.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "WKwMDkdRrsxcGkG5Z", 
    "data" : {
        "v" : NumberInt(363), 
        "meta" : {
            "mtime" : 1461475308343.0, 
            "ctime" : 1461475308343.0
        }, 
        "snapshot" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }   \n    \n    public String toString() {\n       return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\"; \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XNTvFWwRQEHKQpwQh", 
    "data" : {
        "v" : NumberInt(589), 
        "meta" : {
            "mtime" : 1461520547208.0, 
            "ctime" : 1461520547208.0
        }, 
        "snapshot" : "/* This question doesn't have a return type \n   You'll be printing the statements (word is/is not a palindrome) */\npublic static String printPalindrome(Scanner word) {\n    word.toLowerCase();\n    int x = word.length();\n    for(int i = 0; i <= x/2; i++){\n        if(word.charAt(i)!=word.charAt(x-1-i)){\n            return(word+\" is not a panlindrome.\");\n        }\n    }\n    return(word+\" is a palindrome!\");\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3MgLxiZY2xNzsDGpS", 
    "data" : {
        "v" : NumberInt(216), 
        "meta" : {
            "mtime" : 1461552847231.0, 
            "ctime" : 1461552847231.0
        }, 
        "snapshot" : "public class Article {\n    //private Date year;\n    private int numWords;\n    \n    public Article(int numWords) {\n        this.numWords = numWords;\n    }\n    \n    public boolean isLongerThan(Article b) {\n        return this.numWords > b.numWords;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "7B52zFvcfwZP2FBLH", 
    "data" : {
        "v" : NumberInt(1740), 
        "meta" : {
            "mtime" : 1461508504273.0, 
            "ctime" : 1461508504273.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    //do you need an addtional result list?\n    //hint: use a1.add(int index, Integer element) and iterate through a2!\n    \n    int indexToAdd = 1; \n    \n    for(int i = 0; i < a2.size(); i++) {\n        int a2Element = a2.get(i);\n        if(indexToAdd < a1.size()) {\n            a1.add(indexToAdd, a2Element);\n            indexToAdd += 2;\n        } else {\n            a1.add(a2Element);\n        }\n    }\n    \n    \n    \n    \n    //create a new arrayList to store in the final result\n    ArrayList<Integer> result = new ArrayList<>();\n    //if a1 is shorter than a2, then get the first num from a1, then add to new arraylist. get first num from a2\n    if(a1.size() <= a2.size()) {\n        int i;\n        for(i = 0; i < a1.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a2.size()) {\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n            i++;\n        }\n    } else {\n        int i;\n        for(i = 0; i < a2.size(); i++) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            int takeA2 = a2.get(i);\n            result.add(takeA2);\n        }\n        while(i < a1.size()) {\n            int takeA1 = a1.get(i);\n            result.add(takeA1);\n            i++;\n        }\n    }\n    \n    \n    \n    //add to new arraylist,.....(repeat) until the last num in a1, add the remaining num in a2.\n    //if a2 is shorter than a1, then get the first num from a2, then add to new arraylist. get first num from a1\n    //add to new arraylist,.....(repeat) until the last num in a2, add the remaining num in a1.\n    //a1.clear()\n    a1.clear();\n    //a1 = result\n    for(int i = 0; i < result.size(); i++) {\n        int takeResult = result.get(i);\n        a1.add(takeResult);\n    }\n   \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "WEFRrMJJiWhwhTnaA", 
    "data" : {
        "v" : NumberInt(777), 
        "meta" : {
            "mtime" : 1461568022350.0, 
            "ctime" : 1461568022350.0
        }, 
        "snapshot" : "public static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    \n    ArrayList<Integer> largerList = a1;\n    ArrayList<Integer> smallerList = a2;\n    \n    ArrayList<Integer> result = new ArrayList<>();\n    \n    if (a2.size() > a1.size()) {\n        largerList = a2;\n        smallerList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < smallerList.size(); i++) {\n        int a = smallerList.get(i);\n        int b = largerList.get(i);\n        result.add(a);\n        result.add(b);\n    }\n    \n    for (int j = i; j < largerList.size(); i++) {\n        int c = largerList.get(j);\n        result.add(c);\n    }\n    \n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "JNyjQRyCuqsYjsf2P", 
    "data" : {
        "v" : NumberInt(345), 
        "meta" : {
            "mtime" : 1461568896995.0, 
            "ctime" : 1461568896995.0
        }, 
        "snapshot" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "tmTXFaJQYMhaTz97b", 
    "data" : {
        "v" : NumberInt(858), 
        "meta" : {
            "mtime" : 1461509812763.0, 
            "ctime" : 1461509812763.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    \n    \n    \n    \n    int x;\n    if(rectA.getX() <= rectB.getX()) {\n        x = rectA.getX();\n    } else {\n        x = rectB.getX();\n    } //use Math.min(int a, int b)\n    \n    int y;\n    if(rectA.getY() <= rectB.getY()) {\n        y = rectA.getY();\n    } else {\n        y = rectB.getY();\n    }\n    \n    \n    int xMaxOfA = rectA.getX() + rectA.getWidth();\n    int xMaxOfB = rectB.getX() + rectB.getWidth();\n    int maxOfRectWidth = Math.max(xMaxOfA, xMaxOfB);\n    int width = maxOfRectWidth - x;\n    \n    int yMaxOfA = rectA.getY() + rectA.getHeight();\n    int yMaxOfB = rectB.getY() + rectB.getHeight();\n    int maxOfRectHeight = Math.max(yMaxOfA, yMaxOfB);\n    int height = maxOfRectHeight - y;\n    \n    //int width = rectB.getWidth() + (rectB.getX() - x);\n    //int height = rectA.getHeight() + (rectA.getY() - y);\n    \n    Rectangle result = new Rectangle(x,y,width,height);\n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "zuYrQjjfXM4KjtWQF", 
    "data" : {
        "v" : NumberInt(79), 
        "meta" : {
            "mtime" : 1461583708101.0, 
            "ctime" : 1461583708101.0
        }, 
        "snapshot" : "public static double doubleInt(int x, int y){\n    double sum = x + y;\n    \n    return sum;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "iLhSFheqbbsCQc293", 
    "data" : {
        "v" : NumberInt(388), 
        "meta" : {
            "mtime" : 1461506502799.0, 
            "ctime" : 1461506502799.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Adder{\n    public static void main(String args[]){\n\n        int num = 0;\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        do{\n            num = sc.nextInt();\n            if(num!= -1){\n                sum += num;\n            }\n        }while(num != -1);\n        \n        System.out.print(\"The sum is \"+ sum+\".\");\n    }        \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jnsXHyux9Et5tr37S", 
    "data" : {
        "v" : NumberInt(93), 
        "meta" : {
            "mtime" : 1461583789006.0, 
            "ctime" : 1461583789006.0
        }, 
        "snapshot" : "public static void quotify(String x){\n    System.out.print(\"\\\"\"+ x + \"\\\"\" );\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "bMTxRPLSEdubfX6RW", 
    "data" : {
        "v" : NumberInt(956), 
        "meta" : {
            "mtime" : 1461590588797.0, 
            "ctime" : 1461590588797.0
        }, 
        "snapshot" : "\npublic static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> list = new ArrayList<>();\n    \n    if (a1.size() > a2.size()) {\n        int size = a2.size();\n        for (int i = 0; i < size; i++) {\n            list.add(a1.get(i));\n            list.add(a2.get(i));\n        }\n        for (int j = a2.size(); j < a1.size(); j++) {\n            list.add(a1.get(j));\n        }\n    } else {\n        int size = a1.size();\n        for (int i = 0; i < size; i++) {\n        list.add(a1.get(i));\n        list.add(a2.get(i));\n        }\n        for (int j = a1.size(); j < a2.size(); j++) {\n            list.add(a2.get(j));\n        }\n    }\n    a1 = list;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Yfpnk8ZY7gzLKjiLC", 
    "data" : {
        "v" : NumberInt(333), 
        "meta" : {
            "mtime" : 1461583891856.0, 
            "ctime" : 1461583891856.0
        }, 
        "snapshot" : "public void flippedTriangle(int height){\n    for(int i=0; i<height; i++){\n        for(int j=height-1 ; j>i; j--){\n            System.out.print(\" \");\n        }\n        for(int k=1; k<=height;k++){\n            System.out.print(\"*\");\n        }\n        System.out.println(\"\");\n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "JNfdPz9SiSsJdkgtu", 
    "data" : {
        "v" : NumberInt(151), 
        "meta" : {
            "mtime" : 1461591503024.0, 
            "ctime" : 1461591503024.0
        }, 
        "snapshot" : "public int power(int base, int exponent){\n    int sum = 1;\n    for(int i=0;i<exponent;i++){\n        sum *= base;\n    }\n    return sum;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "aCns7D3XXwbXQ7Z85", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461591690391.0, 
            "ctime" : 1461591690391.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "b6QcZRXocByJ3Qx3t", 
    "data" : {
        "v" : NumberInt(322), 
        "meta" : {
            "mtime" : 1461506475106.0, 
            "ctime" : 1461506475106.0
        }, 
        "snapshot" : "public static boolean assignCashierToOperateCounter(Supermarket supermarket, Cashier cashier, int counterNumber){\n    Counter counter = supermarket.getCounter(counterNumber);\n    \n    if(counter!= null){\n        return counter.setCashier(cashier);\n    }\n    return false;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "TfP6gL6C5Hm97h4zS", 
    "data" : {
        "v" : NumberInt(642), 
        "meta" : {
            "mtime" : 1461592511885.0, 
            "ctime" : 1461592511885.0
        }, 
        "snapshot" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    public int getHeight() {\n        return height;\n    }\n    public int getWidth() {\n        return width;\n    }\n    public int getX() {\n        return x;\n    }\n    public int getY() {\n        return y;\n    }\n    public String toString() {\n        return (\"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "xA2zX3GNpJQJyG6SX", 
    "data" : {
        "v" : NumberInt(368), 
        "meta" : {
            "mtime" : 1461592535812.0, 
            "ctime" : 1461592535812.0
        }, 
        "snapshot" : "public static int getNumberOfCounterWithNoQueue(Supermarket supermarket){\n    int totalNumOfCounter = supermarket.getNumCounters();\n    int count =0;\n    for(int i =1; i<=totalNumOfCounter;i++){\n        Counter counter = supermarket.getCounter(i);\n        if(counter != null){\n            int numOfCustomer = counter.getNumCustomersInQueue();\n        \n            if(numOfCustomer == 0){\n                count++;\n            } \n        }\n    }\n    return count;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "tyshf6ZMWg2KCXSqa", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461593800156.0, 
            "ctime" : 1461593800156.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "FE6qNb35ghMhivFkb", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461593932470.0, 
            "ctime" : 1461593932470.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "STm6kNGv5TR7uZAQL", 
    "data" : {
        "v" : NumberInt(587), 
        "meta" : {
            "mtime" : 1461592859191.0, 
            "ctime" : 1461592859191.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = 0;\n    int y = 0;\n    int width = 0;\n    int height = 0;\n    \n    if (rectA.getX()>rectB.getX()) {\n        x = rectB.getX();\n    } else {\n        x = rectA.getX();\n    }\n    \n    if (rectA.getY()>rectB.getY()) {\n        y = rectB.getY();\n    } else {\n        y = rectA.getY();\n    }\n    \n    if (rectA.getX()+rectA.getWidth() > rectB.getX()+rectB.getWidth()) {\n        width = rectA.getX() - rectB.getX() +rectA.getWidth();\n    } else {\n        width = rectB.getX() - rectA.getX() +rectB.getWidth();\n    }\n    \n    if (rectA.getY()+rectA.getHeight() > rectB.getY()+rectB.getHeight()) {\n        height = rectA.getY() - rectB.getY() +rectA.getHeight();\n    } else {\n        height = rectB.getY() - rectA.getY() +rectB.getHeight();\n    }\n    Rectangle rect = new Rectangle(x, y, width, height);\n    return (rect);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "RuxMRBJqQjb62ppmf", 
    "data" : {
        "v" : NumberInt(260), 
        "meta" : {
            "mtime" : 1461569381756.0, 
            "ctime" : 1461569381756.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    //get x\n    int x = Math.min(rectA.getX(), rectB.getX());\n    //get y\n    int y = Math.min(rectA.getY(), rectB.getY());\n    //get width\n    int width = Math.min(rectA.getWidth(), rectB.getWidth());\n    //get height\n    int height = Math.min(rectA.getHeight(), rectB.getHeight());\n    \n    Rectangle result = new Rectangle(x, y, width, height);\n    return result;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "BJbgsP2zPibjZQJ4K", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461636929002.0, 
            "ctime" : 1461636929002.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "HT3DFdN7z8SiQpJZx", 
    "data" : {
        "v" : NumberInt(757), 
        "meta" : {
            "mtime" : 1461640202748.0, 
            "ctime" : 1461640202748.0
        }, 
        "snapshot" : "import java.text.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    private static final DecimalFormat twoDPFormat = new DecimalFormat(\"0.00\");\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return String.format(\"%s, height = %sm, weight = %skg\", nickname,\n            twoDPFormat.format(height), twoDPFormat.format(weight));\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Ge5JFKv4mXWDjvkss", 
    "data" : {
        "v" : NumberInt(556), 
        "meta" : {
            "mtime" : 1461643264416.0, 
            "ctime" : 1461643264416.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    String emailID = \"\";\n    \n    int index = email.indexOf('@');\n    for(int i = 0; i < index; i++){\n        char ch = email.charAt(i);\n        emailID += (\"\" + ch);\n    }\n    \n    return emailID;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "YL5eCSMjTC47AuQts", 
    "data" : {
        "v" : NumberInt(785), 
        "meta" : {
            "mtime" : 1461643744860.0, 
            "ctime" : 1461643744860.0
        }, 
        "snapshot" : "public static void printPalindrome(String input){\n    String palindrome = \"\";\n    \n    for(int i = 0; i < input.length(); i++){\n        char ch = input.charAt(i);\n        for(int j = input.length(); j > 0; j--){\n            char lastCh = input.charAt(j);\n            if(ch == lastCh){\n                palindrome = input + \" is a palindrome!\";\n            }else{\n                palindrome = input + \" is not a panlindrome!\";\n            }\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Lbt4Mpb2EAg7M6JL5", 
    "data" : {
        "v" : NumberInt(216), 
        "meta" : {
            "mtime" : 1461646120006.0, 
            "ctime" : 1461646120006.0
        }, 
        "snapshot" : "public static String parseEmail (String email) {\n    int index = email.indexOf('@');\n    String toReturn = email.substring(0, index);\n    return toReturn;\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "9ePbTusPdv7B5iLyK", 
    "data" : {
        "v" : NumberInt(632), 
        "meta" : {
            "mtime" : 1461646913458.0, 
            "ctime" : 1461646913458.0
        }, 
        "snapshot" : "public class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        \n    }\n    \n    public int getHeight() {\n        return height;\n        \n    } \n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Ze2EvL3AgKDAECPhx", 
    "data" : {
        "v" : NumberInt(891), 
        "meta" : {
            "mtime" : 1461646280332.0, 
            "ctime" : 1461646280332.0
        }, 
        "snapshot" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> newList = new ArrayList<>();\n    \n    ArrayList<Integer> shorterArrayList = a1;\n    ArrayList<Integer> longerArrayList = a2;\n    \n    if(a1.size() > a2.size()){\n        shorterArrayList = a2;\n        longerArrayList = a1;\n    }\n    \n    int i = 0;\n    \n    for (i = 0; i < shorterArrayList.size(); i++) {\n        int a = shorterArrayList.get(i);\n        int b = longerArrayList.get(i);\n        newList.add(a);\n        newList.add(b);\n    }\n        \n    for (int j = i; j < longerArrayList.size(); i++) {\n        int c = longerArrayList.get(j);\n        newList.add(c);\n    }\n    \n    return newList;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "dgTa3zm28hgARdxWx", 
    "data" : {
        "v" : NumberInt(597), 
        "meta" : {
            "mtime" : 1461648078903.0, 
            "ctime" : 1461648078903.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \");\n    String userInput = console.nextLine();\n    String input = userInput.toLowerCase();\n    boolean isSame = true;\n    for (int i =0; i< input.length(); i++){\n        char ch = input.charAt(i);\n        char ch2 = input.charAt((input.length()-1)-i);\n        \n        if(ch != ch2){\n            isSame = false;\n        }\n    }\n    if (!isSame){\n        System.out.print(userInput + \" is not a palindrome.\");\n    }\n    else{\n        System.out.print(userInput + \" is a palindrome!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "p2cKiDojXkBsb6gQr", 
    "data" : {
        "v" : NumberInt(303), 
        "meta" : {
            "mtime" : 1461648925545.0, 
            "ctime" : 1461648925545.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n    ArrayList<Integer> a3 = new ArrayList<>(); \n    \n    int shorter = Math.min(a1.size(), a2.size());\n    int higher = Math.max(a1.size(), a2.size());\n    \n    int i;\n    for(i = 0; i < shorter; i++){\n        a3.add(a1.get(i));\n        a3.add(a2.get(i));\n    }\n    for(int j = i; j < higher; j++){\n        if(a1.size() > a2.size()){\n            a3.add(a1.get(j));\n        }else{\n            a3.add(a2.get(j));\n        }\n        \n    }\n    a1.clear();\n    int k;\n    for(k = 0; k < a3.size()-1; k++){\n        a1.add(a3.get(k));\n    } \n    if(a3.size() > 0){\n    a1.add(a3.get(a3.size()-1));\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "uPhwELS2izqjyMrCg", 
    "data" : {
        "v" : NumberInt(1482), 
        "meta" : {
            "mtime" : 1461647319107.0, 
            "ctime" : 1461647319107.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    \n    \n    int minX = Math.min(rectA.getX(), rectB.getX());\n    int minY = Math.min(rectA.getY(), rectB.getY());\n    \n    int highHeightA = rectA.getHeight() + rectA.getY();\n    int highHeightB = rectB.getHeight() + rectB.getY();\n    \n    int highestHeight = Math.max(highHeightA, highHeightB);\n    int heightReturn = highestHeight - minY;\n    \n    int longWidthA = rectA.getWidth() + rectA.getX();\n    int longWidthB = rectB.getWidth() + rectB.getX();\n    \n    int longestWidth = Math.max(longWidthA, longWidthB);\n    int widthReturn = longestWidth - minX;\n    \n    Rectangle toReturn = new Rectangle(minX, minY, widthReturn, heightReturn);\n    return toReturn;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "eXMqyCzqzB48gtQXj", 
    "data" : {
        "v" : NumberInt(1302), 
        "meta" : {
            "mtime" : 1461646861605.0, 
            "ctime" : 1461646861605.0
        }, 
        "snapshot" : "//hello! my code works on notepad++ but it doesn't work here. could either one of you \n//please clarify? thanks!\n\npublic static ArrayList<Integer> interleave (ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    ArrayList<Integer> toReturn = new ArrayList<>();\n    \n    if (a1.size() == a2.size()) {\n        for (int i = 0; i < a1.size(); i++) {\n            toReturn.add(a1.get(i));\n            toReturn.add(a2.get(i));\n        }\n        \n    } else if (a1.size() > a2.size()) {\n        for (int j = 0; j < a2.size(); j++) {\n            toReturn.add(a1.get(j));\n            toReturn.add(a2.get(j));\n        }\n        for (int k = a2.size(); k < a1.size(); k++) {\n            toReturn.add(a1.get(k));\n            \n        }\n        \n    } else {\n        for (int m = 0; m < a1.size(); m++) {\n            toReturn.add(a1.get(m));\n            toReturn.add(a2.get(m));\n        }\n        for (int n = a1.size(); n < a2.size(); n++) {\n            toReturn.add(a2.get(n));\n            \n        }\n        \n    }\n    \n    return toReturn;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "gMbwCeQ5s3oZbQpBX", 
    "data" : {
        "v" : NumberInt(584), 
        "meta" : {
            "mtime" : 1461652602521.0, 
            "ctime" : 1461652602521.0
        }, 
        "snapshot" : "public class Rectangle{\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + \n                            height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "DzzWDexG9s8CaKJRS", 
    "data" : {
        "v" : NumberInt(113), 
        "meta" : {
            "mtime" : 1461654636305.0, 
            "ctime" : 1461654636305.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle newRect = new Rectangle;\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "g7tWTXK4pmdcc5ss7", 
    "data" : {
        "v" : NumberInt(1068), 
        "meta" : {
            "mtime" : 1461646784762.0, 
            "ctime" : 1461646784762.0
        }, 
        "snapshot" : "\npublic static void main (String [] args) {\n    Scanner console = new Scanner(System.in); \n    System.out.println(\"Type one or more words: \");\n    printPalindrome(console); \n}    \n\npublic static void printPalindrome(Scanner console) {\n   \n    //Scanner sc = new Scanner(System.in);\n    \n    String input = console.nextLine();\n    String inputLower = input.toLowerCase();\n    \n    boolean isPalindrome = true;\n    \n    for (int i = 0 ; i < inputLower.length(); i++) {\n        if (inputLower.charAt(i) != inputLower.charAt(inputLower.length() - i - 1)) {\n            isPalindrome = false;\n        }\n    }\n    \n    if (isPalindrome) {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is a palindrome!\");\n        \n    } else {\n        System.out.print(\"Type one or more words: \");\n        System.out.println(input + \" is not a palindrome.\");\n          \n    }\n} ", 
        "type" : "text"
    }
}
{ 
    "_id" : "rYJPGnBaabS34PXjA", 
    "data" : {
        "v" : NumberInt(407), 
        "meta" : {
            "mtime" : 1461662413263.0, 
            "ctime" : 1461662413263.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Adder{\n    public static void main (String [] args){\n        Scanner sc = new Scanner(System.in);\n        boolean check = true;\n        int total =0;\n        \n        while(check == true){\n            //System.out.print(\"Enter number>\");\n            int num = sc.nextInt();  \n            \n            if(num >0){\n               total += num; \n            }\n            if(num <=0){\n                check = false;\n            }\n            \n        }\n    \n        System.out.println(\"The sum is \" + total +\".\");       \n        }\n\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "YPBpZF2oFusy57uLr", 
    "data" : {
        "v" : NumberInt(145), 
        "meta" : {
            "mtime" : 1461663069039.0, 
            "ctime" : 1461663069039.0
        }, 
        "snapshot" : "public static double doubleInt(int a, int b){\n    double a1 = (double)a;\n    double b1 = (double)b;\n    double total = a1 +b1;\n    return total;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ENzytwNkfFdtYEC7W", 
    "data" : {
        "v" : NumberInt(219), 
        "meta" : {
            "mtime" : 1461663206066.0, 
            "ctime" : 1461663206066.0
        }, 
        "snapshot" : "public static void quotify(String s){\n    System.out.print('\"' + s + '\"');\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "NmJchvKXhpTD8SDDT", 
    "data" : {
        "v" : NumberInt(92), 
        "meta" : {
            "mtime" : 1461663785341.0, 
            "ctime" : 1461663785341.0
        }, 
        "snapshot" : "public void flippedTriangle(int height){\n    for(int i=0; i<height; i++){\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "L3uJYzAnqiewD44Dh", 
    "data" : {
        "v" : NumberInt(208), 
        "meta" : {
            "mtime" : 1461663963731.0, 
            "ctime" : 1461663963731.0
        }, 
        "snapshot" : "public static int power(int base, int exponent){\n    int total=base;\n    \n    for(int i=1; i<exponent; i++){\n        total = total*base;\n    }\n    return total;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qzM5aXrEqN4YAkGHQ", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461668353857.0, 
            "ctime" : 1461668353857.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Q7Yv9xebb7pR4QHPk", 
    "data" : {
        "v" : NumberInt(639), 
        "meta" : {
            "mtime" : 1461642610211.0, 
            "ctime" : 1461642610211.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n\tprivate Animal prey; \n\t\n\tpublic Lion(double height, double weight, String nickname){\n\t\tsuper(height, weight, nickname); \n\t}\n\t\n\tpublic boolean hunt(Animal prey){\n\t\tif(prey != null){\n\t\t\tAnimal lion = prey;  \n\t\t\treturn true; \n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic boolean hasPrey(){\n\t\treturn (prey != null);\n\t}\n\t\n\tpublic void eat(){\n\t\tif(!hasPrey()){\n\t\t\tSystem.out.print(\"I GOT NUTHIN TO EAT >:3\");\n\t\t}else{\n\t\t\tdouble lionW = getWeight(); \n\t\t\tlionW += (1/3)*prey.getWeight(); \n\t\t\tprey = null;\n\t\t\tSystem.out.print(\"AHHHHH... FRESH MEAT!\"); \n\t\t}\n\t}\n\t\n\t\n\tpublic Animal getPrey(){\n\t\treturn prey; \n\t}\n\t\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ccXa2rxs7Q9Pvcin4", 
    "data" : {
        "v" : NumberInt(11), 
        "meta" : {
            "mtime" : 1461684106719.0, 
            "ctime" : 1461684106719.0
        }, 
        "snapshot" : "", 
        "type" : "text"
    }
}
{ 
    "_id" : "eZYqPZssk8k8HNdbq", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461714344441.0, 
            "ctime" : 1461714344441.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "4n4RE4Dg2x5TJf7Km", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461714372981.0, 
            "ctime" : 1461714372981.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "s3mDqwWhFMwyHMoEF", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461838427793.0, 
            "ctime" : 1461838427793.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "sR5kiNKGnGBjoChmC", 
    "data" : {
        "v" : NumberInt(343), 
        "meta" : {
            "mtime" : 1461888991548.0, 
            "ctime" : 1461888991548.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getSalary() + 10000;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "m8ncBEQsTzpXHTkbB", 
    "data" : {
        "v" : NumberInt(235), 
        "meta" : {
            "mtime" : 1461888997493.0, 
            "ctime" : 1461888997493.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn super.getSalary()+10000;               // $40,000.00\n\t}\n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "KtKmvnTozswS7HeKe", 
    "data" : {
        "v" : NumberInt(391), 
        "meta" : {
            "mtime" : 1461888988667.0, 
            "ctime" : 1461888988667.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "nqLzXDNg8NCsSpEgA", 
    "data" : {
        "v" : NumberInt(414), 
        "meta" : {
            "mtime" : 1461889013116.0, 
            "ctime" : 1461889013116.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               \n\t}\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6dGYvXfcK4SwqJuXc", 
    "data" : {
        "v" : NumberInt(360), 
        "meta" : {
            "mtime" : 1461888994853.0, 
            "ctime" : 1461888994853.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n\t\n\tpublic Marketer(){\n\t    this.setBaseSalary(50000);\n\t}\n\t\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "37K34wgsYSdNtFofc", 
    "data" : {
        "v" : NumberInt(348), 
        "meta" : {
            "mtime" : 1461889009992.0, 
            "ctime" : 1461889009992.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    \n    public double getSalary(){\n        return super.getSalary() + 10000;\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LgKLFv9Auyxy8k5yN", 
    "data" : {
        "v" : NumberInt(391), 
        "meta" : {
            "mtime" : 1461889029055.0, 
            "ctime" : 1461889029055.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public void advertise() {\n        \n        System.out.println(\"Act now, while supplies last!\");\n    \n    }\n    public double getSalary() {\n        return super.getSalary() + 10000;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "SQmHq35DQbfHZ89gu", 
    "data" : {
        "v" : NumberInt(406), 
        "meta" : {
            "mtime" : 1461888991097.0, 
            "ctime" : 1461888991097.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n\n    public Marketer(){\n        setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "34ifgR3FoxbC75JCD", 
    "data" : {
        "v" : NumberInt(179), 
        "meta" : {
            "mtime" : 1461888998022.0, 
            "ctime" : 1461888998022.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               // $40,000.00\n\t}\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    //public Marketer()\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "K2fJdBL8c7p58JvSr", 
    "data" : {
        "v" : NumberInt(444), 
        "meta" : {
            "mtime" : 1461889016506.0, 
            "ctime" : 1461889016506.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n        salary = super.getSalary() + 10000.00;\n    }\n    public void advertise(){\n        System.out.println (\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return salary;\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qGZpREEaxJgSsBqvT", 
    "data" : {
        "v" : NumberInt(178), 
        "meta" : {
            "mtime" : 1461889053359.0, 
            "ctime" : 1461889053359.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    public Marketer(){\n        //super();\n        super.setBaseSalary(50000);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ruDLr33gFr7X4ndCs", 
    "data" : {
        "v" : NumberInt(217), 
        "meta" : {
            "mtime" : 1461889044584.0, 
            "ctime" : 1461889044584.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;               \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "dmeRJvx6b4LEZ8jrv", 
    "data" : {
        "v" : NumberInt(272), 
        "meta" : {
            "mtime" : 1461889039261.0, 
            "ctime" : 1461889039261.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n        return super.getSalary()+10000;\n    }\n    \n    public void advertise() {\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LCJdXASqmhuukDHab", 
    "data" : {
        "v" : NumberInt(284), 
        "meta" : {
            "mtime" : 1461888994040.0, 
            "ctime" : 1461888994040.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public double getSalary(){\n        return super.getSalary()+ 10000;\n    }\n   \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");    \n    }\n        \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "TiLYwQ2c4K782gAEb", 
    "data" : {
        "v" : NumberInt(376), 
        "meta" : {
            "mtime" : 1461889008944.0, 
            "ctime" : 1461889008944.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    private double salary;\n    \n    public Marketer(){\n       super(baseHours, baseSalary, baseDays, baseForm); \n    }\n    \n    public void setSalary(){\n        salary = getSalary() + 10000.0;\n    }\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "qSaK9P6rJLzekWNTo", 
    "data" : {
        "v" : NumberInt(556), 
        "meta" : {
            "mtime" : 1461889004081.0, 
            "ctime" : 1461889004081.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public Marketer() {\n        super();\n        setBaseSalary(50000);\n    }\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "fw4pcfJyhxHrN6SXz", 
    "data" : {
        "v" : NumberInt(277), 
        "meta" : {
            "mtime" : 1461889032839.0, 
            "ctime" : 1461889032839.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    private double baseSalary;\n    \n    public Marketer() {\n        super();\n        setBaseSalary(50000.0);\n    }\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "koyXQ3KXptp3QRe2Q", 
    "data" : {
        "v" : NumberInt(384), 
        "meta" : {
            "mtime" : 1461888995107.0, 
            "ctime" : 1461888995107.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    private double marketerSalary = 50000;\n\t\n\tpublic double getSalary() {\n\t\treturn marketerSalary;              \n\t}\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "DWrD7eiFJ8bkMv9if", 
    "data" : {
        "v" : NumberInt(326), 
        "meta" : {
            "mtime" : 1461889013071.0, 
            "ctime" : 1461889013071.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    public double getSalary(){\n        return super.getSalary()+10000;\n    }\n    \n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "irNPvnCcMQDsjr6LP", 
    "data" : {
        "v" : NumberInt(429), 
        "meta" : {
            "mtime" : 1461889003307.0, 
            "ctime" : 1461889003307.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        \n        setBaseSalary(50000);\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "uq45veMX4S7Crjkoo", 
    "data" : {
        "v" : NumberInt(379), 
        "meta" : {
            "mtime" : 1461889032262.0, 
            "ctime" : 1461889032262.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public Marketer() {\n        super.setBaseSalary(50000);\n        \n    }\n    \n    public void advertise () {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "k5SyaYk7NQ4GiFTg8", 
    "data" : {
        "v" : NumberInt(212), 
        "meta" : {
            "mtime" : 1461889011089.0, 
            "ctime" : 1461889011089.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    private double salary;\n    public Marketer() {\n        salary = 50000;\n    }\n    \n    public double getSalary() {\n\t\treturn salary;\n\t}\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "96v7DkSpuKGBYjJYK", 
    "data" : {
        "v" : NumberInt(322), 
        "meta" : {
            "mtime" : 1461889025917.0, 
            "ctime" : 1461889025917.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public Marketer() {\n        setBaseSalary(50000);\n    }\n\n    \n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "dv3px4AGFt6aB3bs8", 
    "data" : {
        "v" : NumberInt(437), 
        "meta" : {
            "mtime" : 1461889088499.0, 
            "ctime" : 1461889088499.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n  \n    public Marketer(){\n        super.setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\"); \n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "5QS2qreGjteAiantF", 
    "data" : {
        "v" : NumberInt(607), 
        "meta" : {
            "mtime" : 1461889051394.0, 
            "ctime" : 1461889051394.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n        \n    }\n    \n    public double getWeight() {\n        return weight;\n        \n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n        \n    }\n    \n    public String getNickname() {\n        return nickname;\n        \n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    \n    }\n\n    public String toString() {\n        return nickname + \", \" + \"height = \" + height + \"m, weight = \" + weight + \"kg\";\n        \n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "My2LDZWb6tvwRqiND", 
    "data" : {
        "v" : NumberInt(942), 
        "meta" : {
            "mtime" : 1461889101928.0, 
            "ctime" : 1461889101928.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n\n    public Marketer() {\n        setBaseSalary(50000);\n    }\n    \n\tpublic void advertise() {\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "p3xcMkdHKMqYW64iG", 
    "data" : {
        "v" : NumberInt(262), 
        "meta" : {
            "mtime" : 1461889015902.0, 
            "ctime" : 1461889015902.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    private double salary;\n    \n\tpublic double getMSalary() {\n\t\treturn getSalary() + 10000;               \n\t}\n    public static void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "m5sDRrgHStQ5XmP9M", 
    "data" : {
        "v" : NumberInt(515), 
        "meta" : {
            "mtime" : 1461889017295.0, 
            "ctime" : 1461889017295.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    private double bonusSalary;\n    public Marketer(){\n        super();\n        bonusSalary = 10000;\n    }\n    \n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    \n    public double getSalary(){\n        return super.getSalary()+bonusSalary;\n    }\n    \n    public void setBonusSalary(double newBonus){\n        bonusSalary = newBonus;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Pec2ECjxS6wRZA6SA", 
    "data" : {
        "v" : NumberInt(171), 
        "meta" : {
            "mtime" : 1461889029650.0, 
            "ctime" : 1461889029650.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public double getSalary() {\n\t\treturn super.getSalary() + 10000;\n\t}\n    public void advertise () {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Ae3SPsK82SwTzTdeQ", 
    "data" : {
        "v" : NumberInt(172), 
        "meta" : {
            "mtime" : 1461889018222.0, 
            "ctime" : 1461889018222.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    //public double getSalary(){\n        \n        //return (super.getSalary()+10000);\n    //}\n    public double getSalary() {\n        return super.getSalary() + 10000;               \n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cKdMnXjPErPrBQ9Pg", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461889377613.0, 
            "ctime" : 1461889377613.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "483PQGEGq2a4r23kN", 
    "data" : {
        "v" : NumberInt(373), 
        "meta" : {
            "mtime" : 1461889092276.0, 
            "ctime" : 1461889092276.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    private double baseSalary; \n    \n    public double getSalary(){\n        double baseSalary = super.getSalary() + 10000;\n        return baseSalary;\n        \n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rSszRWLXN8FXzSFtv", 
    "data" : {
        "v" : NumberInt(306), 
        "meta" : {
            "mtime" : 1461889042448.0, 
            "ctime" : 1461889042448.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    private int totalSalary; \n    \n    public Marketer(){\n    super.setBaseSalary(50000.0);\n    }\n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "7xoHdL7ZdJLkgTL7T", 
    "data" : {
        "v" : NumberInt(252), 
        "meta" : {
            "mtime" : 1461889206413.0, 
            "ctime" : 1461889206413.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    public Marketer(){\n        super();\n        setBaseSalary(50000.00);\n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "2k5sTk2jHe5kgbugr", 
    "data" : {
        "v" : NumberInt(100), 
        "meta" : {
            "mtime" : 1461889107862.0, 
            "ctime" : 1461889107862.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Marketer extends Employee {\n    public Marketer(){\n    }\n    \n    public double getSalary() {\n        double s = super.getSalary(); \n        double finalSalary = s + 10000;\n\t\treturn  finalSalary;             \n\t}\n    \n    public void advertise(){\n    System.out.println(\"Act now, while supplies last!\");   \n    } \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "n4DZRiPFevc8Tf2AB", 
    "data" : {
        "v" : NumberInt(519), 
        "meta" : {
            "mtime" : 1461889061747.0, 
            "ctime" : 1461889061747.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    private int baseHours ;\n\tprivate double baseSalary;\n\tprivate int baseVacationDays ;\n\tprivate String baseVacationForm  ;\n\tpublic Marketer (){\n\t     \n\t}\n\tpublic void advertise(){\n\t    System.out.println(\"Act now, while supplies last!\");\n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "FwptKqDYtuT9snzZP", 
    "data" : {
        "v" : NumberInt(398), 
        "meta" : {
            "mtime" : 1461889316605.0, 
            "ctime" : 1461889316605.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickName;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickName=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickName;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n\n        return nickName+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "nHJDCBo4HoLwn2SwT", 
    "data" : {
        "v" : NumberInt(198), 
        "meta" : {
            "mtime" : 1461889206401.0, 
            "ctime" : 1461889206401.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    \n    public Marketer(){\n        \n        super.setBaseSalary(50000.0);\n        \n    }\n    \n    \n    public void advertise(){\n        System.out.print(\"Act now, while supplies last!\");\n        \n    }\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "QBMcbmzCcqpfM6AYk", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461889451096.0, 
            "ctime" : 1461889451096.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "D9gWzqM5kiCbZEgNh", 
    "data" : {
        "v" : NumberInt(536), 
        "meta" : {
            "mtime" : 1461889275797.0, 
            "ctime" : 1461889275797.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        //nickname = \n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double w){\n        weight = w;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \"+ height + \"m, weight = \"+ weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "hLuYmMyNJC3qHpiue", 
    "data" : {
        "v" : NumberInt(847), 
        "meta" : {
            "mtime" : 1461889279376.0, 
            "ctime" : 1461889279376.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "MKqXiqXmWSPb3tcSZ", 
    "data" : {
        "v" : NumberInt(478), 
        "meta" : {
            "mtime" : 1461889263613.0, 
            "ctime" : 1461889263613.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return \"\" + nickname + \", height = \" + height +\"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jwdqBiYA5EpGymmyn", 
    "data" : {
        "v" : NumberInt(708), 
        "meta" : {
            "mtime" : 1461889453222.0, 
            "ctime" : 1461889453222.0
        }, 
        "snapshot" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ZgG3MDSNmBrsCZAD8", 
    "data" : {
        "v" : NumberInt(451), 
        "meta" : {
            "mtime" : 1461889448484.0, 
            "ctime" : 1461889448484.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n        \n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+ \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Kqu5uop4AwYzjrRgt", 
    "data" : {
        "v" : NumberInt(830), 
        "meta" : {
            "mtime" : 1461889337955.0, 
            "ctime" : 1461889337955.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    //<nickname>, height = <height in 2d.p.>m, weight = <weight in 2d.p.>kg\" e.g.\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "s9oeueGSL9qWdji8K", 
    "data" : {
        "v" : NumberInt(396), 
        "meta" : {
            "mtime" : 1461889373014.0, 
            "ctime" : 1461889373014.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rBE5quC57AHvMeG6v", 
    "data" : {
        "v" : NumberInt(819), 
        "meta" : {
            "mtime" : 1461889275957.0, 
            "ctime" : 1461889275957.0
        }, 
        "snapshot" : "public class Animal{\n    double height; \n    double weight; \n    String nickname; \n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight; \n        this.nickname = nickname; \n    }\n    \n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n        \n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "WjTmQEr9gzrYoC53w", 
    "data" : {
        "v" : NumberInt(512), 
        "meta" : {
            "mtime" : 1461889275919.0, 
            "ctime" : 1461889275919.0
        }, 
        "snapshot" : "\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        \n        String result = nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n        return result;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "sFxj6zSmxopEgLCGR", 
    "data" : {
        "v" : NumberInt(730), 
        "meta" : {
            "mtime" : 1461889555713.0, 
            "ctime" : 1461889555713.0
        }, 
        "snapshot" : "public class Animal {\n    private double weight;\n    private double height;\n    private String nickname;\n    \n    public Animal(double height,double weight,String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height,double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "j9TCE45TmE3mTiTmL", 
    "data" : {
        "v" : NumberInt(40), 
        "meta" : {
            "mtime" : 1461889748150.0, 
            "ctime" : 1461889748150.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n    \n    public boolean hunt(Animal prey){\n        \n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "EPwyuy8Ct6qmfHzL2", 
    "data" : {
        "v" : NumberInt(732), 
        "meta" : {
            "mtime" : 1461889403067.0, 
            "ctime" : 1461889403067.0
        }, 
        "snapshot" : "import java.text.*;\npublic class Animal{\n    private double height;\n    protected double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n      public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        DecimalFormat df = new DecimalFormat(\"0.00\"); \n        return nickname + \", height = \" + df.format(height) + \"m, weight = \" + df.format(weight) +\"kg\";\n}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jqk7jNpScnv9EM5jB", 
    "data" : {
        "v" : NumberInt(719), 
        "meta" : {
            "mtime" : 1461889416107.0, 
            "ctime" : 1461889416107.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "iJrpLs8r8SZJcK8mD", 
    "data" : {
        "v" : NumberInt(687), 
        "meta" : {
            "mtime" : 1461889166388.0, 
            "ctime" : 1461889166388.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    \n    public Marketer(){\n        \n        super.setBaseSalary(50000);\n    }\n    \n    public void advertise(){\n       \n        System.out.println(\"Act now, while supplies last!\");\n \n            \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jBbp8fYkXCL6f5Tow", 
    "data" : {
        "v" : NumberInt(1090), 
        "meta" : {
            "mtime" : 1461889404798.0, 
            "ctime" : 1461889404798.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this.weight = weight;\n        this.height = height; \n        nickname = \"animal\";\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this(height, weight);\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n        \n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\"; \n    \n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "aDWQD36DTeXkakr38", 
    "data" : {
        "v" : NumberInt(377), 
        "meta" : {
            "mtime" : 1461889647246.0, 
            "ctime" : 1461889647246.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    \n    public double getSalary(){\n        return (super.getSalary() + 10000);\n    }\n    \n    public void advertise (){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "FSzm4oogwjM6FYdp8", 
    "data" : {
        "v" : NumberInt(789), 
        "meta" : {
            "mtime" : 1461889300758.0, 
            "ctime" : 1461889300758.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return getNickname() + \", height = \" + getHeight() + \"m, weight = \" + getWeight() + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "t3EXkwYfiapusQGMX", 
    "data" : {
        "v" : NumberInt(630), 
        "meta" : {
            "mtime" : 1461889574317.0, 
            "ctime" : 1461889574317.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight ;\n        this.nickname= nickname;\n    }\n    public Animal(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight1){\n        weight = weight1;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString (){\n    \n        return nickname+\", height = \"+ height+\"m, weight = \"+ weight+\"kg\"; \n    }\n    \n\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "tYybT7qM93S8Rypq6", 
    "data" : {
        "v" : NumberInt(664), 
        "meta" : {
            "mtime" : 1461889310675.0, 
            "ctime" : 1461889310675.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "EfcS7sHyHA5d8vzNi", 
    "data" : {
        "v" : NumberInt(404), 
        "meta" : {
            "mtime" : 1461889612332.0, 
            "ctime" : 1461889612332.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        if (hasPrey()){\n            this.prey = prey;\n        }\n        return hasPrey();\n    }\n    \n    public boolean hasPrey(){\n        return getPrey() != null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n        else{\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "RdJWQAunH7ASbfTkC", 
    "data" : {
        "v" : NumberInt(530), 
        "meta" : {
            "mtime" : 1461889602284.0, 
            "ctime" : 1461889602284.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "7brBifGXrrHsrog6B", 
    "data" : {
        "v" : NumberInt(4), 
        "meta" : {
            "mtime" : 1461889415954.0, 
            "ctime" : 1461889415954.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n    this.height= height;\n    this.weight = weight;\n    this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height= height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n    return height;\n    }\n    \n    public double getWeight(){\n    return weight;\n    }\n    \n    public void setWeight(double weight){\n    this.weight = weight;\n    }\n    \n    public String getNickname(){\n    return nickname;\n    }\n    \n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n    return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "5HgAkQawJJrsTWMr9", 
    "data" : {
        "v" : NumberInt(675), 
        "meta" : {
            "mtime" : 1461889500398.0, 
            "ctime" : 1461889500398.0
        }, 
        "snapshot" : "import java.text.DecimalFormat;\n\npublic class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight (double newWeight) {\n        weight = newWeight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        DecimalFormat df = new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "8ndHu4A4SogjikCJ6", 
    "data" : {
        "v" : NumberInt(894), 
        "meta" : {
            "mtime" : 1461889519422.0, 
            "ctime" : 1461889519422.0
        }, 
        "snapshot" : "public class Animal{\n    protected double height;\n    protected double weight;\n    protected String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        this.nickname = nickname;\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "heymwysHfH28LXo7m", 
    "data" : {
        "v" : NumberInt(528), 
        "meta" : {
            "mtime" : 1461889317664.0, 
            "ctime" : 1461889317664.0
        }, 
        "snapshot" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println (\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height \n        + \"m, weight = \" \n        + weight + \"kg\";\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XkKZfinCssNSP78Aa", 
    "data" : {
        "v" : NumberInt(408), 
        "meta" : {
            "mtime" : 1461889456503.0, 
            "ctime" : 1461889456503.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n        \n    }\n    public Animal(double height, double weight) {\n        nickname = \"animal\";\n        this.height = height;\n        this.weight = weight;\n        \n    }\n    public double getHeight() {\n        return height;\n    }\n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString() {\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "w55tEjpvHQgaemYsk", 
    "data" : {
        "v" : NumberInt(624), 
        "meta" : {
            "mtime" : 1461889537271.0, 
            "ctime" : 1461889537271.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight=weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight = weight;\n        nickname = defaultNickname();\n    }\n    \n    public String defaultNickname(){\n        nickname = \"animal\";\n        return nickname;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight= weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XypeGaidK7FyomYxJ", 
    "data" : {
        "v" : NumberInt(571), 
        "meta" : {
            "mtime" : 1461889430356.0, 
            "ctime" : 1461889430356.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    //constructor\n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this(height, weight, \"animal\"); //use the this keyword to use other constructors.\n    }\n    \n    //getters\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    //methods\n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "xutC2faCHBk4rrAaa", 
    "data" : {
        "v" : NumberInt(78), 
        "meta" : {
            "mtime" : 1461889549672.0, 
            "ctime" : 1461889549672.0
        }, 
        "snapshot" : "public class Animal{\n\tprivate double height; \n\tprivate double weight; \n\tprivate String nickname; \n\t\n\t\n\tpublic Animal(double height, double weight, String nickname){\n\t\tthis.height = height;\n\t\tthis.weight = weight; \n\t\tthis.nickname = nickname; \n\t}\n\t\n\tpublic Animal(double height, double weight){\n\t\tthis.height = height; \n\t\tthis.weight = weight; \n\t\tnickname = \"animal\"; \n\t}\n\t\n\tpublic double getHeight(){\n\t\treturn height; \n\t}\n\t\n\tpublic double getWeight(){\n\t\treturn weight; \n\t}\n\t\n\tpublic void setWeight(double weight){\n\t\tthis.weight = weight; \n\t}\n\t\n\tpublic String getNickname(){\n\t\treturn nickname; \n\t}\n\t\n\tpublic void eat(){\n\t\tSystem.out.print(\"OM NOM NOM NOM\"); \n\t}\n\t\n\tpublic String toString(){\n\t\treturn nickname + \", height = \" + height + \"m, weight = \" + weight +\"kg\"; \n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "eiCXzTWGyo4QshceL", 
    "data" : {
        "v" : NumberInt(886), 
        "meta" : {
            "mtime" : 1461889032813.0, 
            "ctime" : 1461889032813.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LF3AXFARypFzXSX8P", 
    "data" : {
        "v" : NumberInt(450), 
        "meta" : {
            "mtime" : 1461889459670.0, 
            "ctime" : 1461889459670.0
        }, 
        "snapshot" : "public class Animal {\n    \n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "uQ8ns4o2LFgsj9f63", 
    "data" : {
        "v" : NumberInt(684), 
        "meta" : {
            "mtime" : 1461889629104.0, 
            "ctime" : 1461889629104.0
        }, 
        "snapshot" : "public class Animal{\n    //attribute\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    \n    //constructors\n    public Animal(double height, double weight, String nickname ){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight ){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    //getters\n    public double getWeight(){\n        return weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    //setters\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n\n    //other methods     \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return  nickname + \", height = \"+ height +\"m, weight = \"+weight+\"kg\";\n    }\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jH8TeasBTvtEfmnLJ", 
    "data" : {
        "v" : NumberInt(836), 
        "meta" : {
            "mtime" : 1461889539687.0, 
            "ctime" : 1461889539687.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n    super(height, weight, nickname);\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        boolean val = new Random().nextInt(2)==0; \n        if(val == true) {\n            this.prey = prey;\n            return true;\n        } else {\n\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n            \n        } else {\n            return false;\n            \n        }\n        \n    }\n    \n    public Animal getPrey() {\n        return prey;\n        \n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            \n        } else {\n            super.setWeight(super.getWeight() + (prey.getWeight() / 3) );\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "pEpAMe9Zj5aeDdvAJ", 
    "data" : {
        "v" : NumberInt(908), 
        "meta" : {
            "mtime" : 1461889088228.0, 
            "ctime" : 1461889088228.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        if(nickname == null){\n            nickname = \"animal\";\n        }\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        \n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rXGnwMJvZXBJJmhts", 
    "data" : {
        "v" : NumberInt(681), 
        "meta" : {
            "mtime" : 1461889719199.0, 
            "ctime" : 1461889719199.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String toString(){\n        return nickname + \", height =\" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "YQawaYDQ7k8s9qtFg", 
    "data" : {
        "v" : NumberInt(333), 
        "meta" : {
            "mtime" : 1461890033360.0, 
            "ctime" : 1461890033360.0
        }, 
        "snapshot" : "public class Lion extends Animal {\n    private Animal prey;\n    public Lion(double height, double weight, String nickname) {\n        super(height,weight,nickname);\n\n    }\n    public Lion(double height, double weight) {\n        super(height,weight);\n        nickname = \"animal\";\n        \n    }\n    \n    public boolean hunt(Animal prey) {\n        //Lion lion = new Lion();\n        if ( prey instanceof Lion ) {\n            \n            \n            \n        }\n    }\n    public boolean hasPrey() {\n        return \n        \n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XzsnjMD37FimWHfhL", 
    "data" : {
        "v" : NumberInt(561), 
        "meta" : {
            "mtime" : 1461889553015.0, 
            "ctime" : 1461889553015.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +\", height = \" +height+\"m, weight = \" +weight +\"kg\";\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "A43q6Rh7DtML5DvCd", 
    "data" : {
        "v" : NumberInt(696), 
        "meta" : {
            "mtime" : 1461889708391.0, 
            "ctime" : 1461889708391.0
        }, 
        "snapshot" : "import java.util.Random;\npublic class Lion extends Animal {\n    private Animal currentPrey;\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super (height, weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rnd = new Random();\n        int r = rnd.nextInt(1);\n        \n        if (currentPrey != null) {\n            currentPrey = prey;\n            return true;\n        } else {\n            if (r == 0) { //true\n                currentPrey = prey;\n            }\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (currentPrey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (hasPrey()) {\n            return currentPrey;\n        }\n        return null;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "axJaSGi7ozSgbK8dE", 
    "data" : {
        "v" : NumberInt(746), 
        "meta" : {
            "mtime" : 1461889342487.0, 
            "ctime" : 1461889342487.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n\n    }\n\n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        nickname=\"animal\";\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void setWeight(double weight){\n        this.weight=weight;\n    }\n    \n    public void eat(){\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n         return (nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6s88qLmcW2rAyk6gt", 
    "data" : {
        "v" : NumberInt(515), 
        "meta" : {
            "mtime" : 1461890004085.0, 
            "ctime" : 1461890004085.0
        }, 
        "snapshot" : "public class Lion extends Animal {\n\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n\n    public boolean hunt(Animal prey) {\n        if (prey != null) {\n            if (prey.getNickname() != null) {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight(), prey.getNickname());\n            } else {\n                this.prey = new Animal(prey.getHeight(), prey.getWeight());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public boolean hasPrey() {\n        return prey != null;\n    }\n\n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            prey = null;\n            setWeight(getWeight() * (1.0/3.0));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ALxHKRJSxhNNnQcDR", 
    "data" : {
        "v" : NumberInt(659), 
        "meta" : {
            "mtime" : 1461890222837.0, 
            "ctime" : 1461890222837.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n        prey = null;\n    }\n     public Lion(double height, double weight){\n        super(height, weight);\n        prey = null;\n    }\n    public boolean hunt(Animal prey){\n        \n    }\n    public boolean hasPrey(){\n        if (prey != null){\n            return true;\n        }\n        return false;\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if (prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            prey = null;\n            setWeight(weight += ((1/3) * prey.getWeight()));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ES4z5GLRSXnCLWLqP", 
    "data" : {
        "v" : NumberInt(1188), 
        "meta" : {
            "mtime" : 1461889835748.0, 
            "ctime" : 1461889835748.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Lion extends Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        //add Random generator\n        Random random = new Random();\n        int n = random.nextInt(1);\n        //0 = failed attempt, 1 = successful attempt\n        if(n==0) {\n            return false;\n        }\n        this.prey = prey;\n        return true;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey!=null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if(prey == null) {\n            return null;\n        }\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey==null) {\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else {\n            double additionalWeight = prey.getWeight()/3;\n            prey = null;\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "NKdPxRcpZ7mS73koW", 
    "data" : {
        "v" : NumberInt(411), 
        "meta" : {
            "mtime" : 1461889942268.0, 
            "ctime" : 1461889942268.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "bK33bam76rfFmoFxa", 
    "data" : {
        "v" : NumberInt(827), 
        "meta" : {
            "mtime" : 1461889945673.0, 
            "ctime" : 1461889945673.0
        }, 
        "snapshot" : "import java.util.Random;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        boolean b = r.nextBoolean();\n        if(b){\n            this.prey = prey; \n        }\n        return b;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey==null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            setWeight(getWeight()+(prey.getWeight()/3));\n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n            prey=null;\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "BQ8pxpotSX3LHGBK2", 
    "data" : {
        "v" : NumberInt(1183), 
        "meta" : {
            "mtime" : 1461889801169.0, 
            "ctime" : 1461889801169.0
        }, 
        "snapshot" : "public class Lion extends Animal {\n    private boolean isPrey;\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n        isPrey = false;\n    }\n    \n    public Lion(double height, double weight) {\n        super(height, weight);\n        isPrey = false;\n    }\n    \n    public boolean hunt(Animal prey) {\n        double preyWeight = prey.getWeight();\n        double preyHeight = prey.getHeight();\n        \n        if (this.getWeight() > prey.getWeight() && this.getHeight() > prey.getHeight()) {\n            prey = new Animal(preyHeight, preyWeight);\n            isPrey = true;\n        }\n        \n        return isPrey;\n    }\n    \n    public boolean hasPrey() {\n        return isPrey;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (isPrey) {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            double newWeight = super.getWeight() + (1 / 3 * super.getWeight());\n            setWeight(newWeight);\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "4wCdQMw6p8ovRjWvC", 
    "data" : {
        "v" : NumberInt(128), 
        "meta" : {
            "mtime" : 1461889228149.0, 
            "ctime" : 1461889228149.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public Animal(double height, double weight) {\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Bv9CocQHcsuFdhWiu", 
    "data" : {
        "v" : NumberInt(383), 
        "meta" : {
            "mtime" : 1461889624370.0, 
            "ctime" : 1461889624370.0
        }, 
        "snapshot" : "public class Animal{\n    \n    private double height;\n    private double weight;\n    private String nickname;\n \n    public Animal(double height, double weight, String nickname){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=nickname;\n     \n    }\n    \n    public Animal(double height, double weight){\n        this.height=height;\n        this.weight=weight;\n        this.nickname=\"animal\";\n    }\n    \n    \n    public double getHeight(){\n        \n        return height;\n    }\n    \n    public double getWeight(){\n        \n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        \n        this.weight = weight;\n    }\n    \n    \n    public String getNickname(){\n        \n        return nickname;\n    }\n    \n    public void eat(){\n        \n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n       \n      return nickname+\", height = \"+height+\"m, weight = \"+weight+\"kg\"; \n        \n    }\n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "P4svSJrkn7tfkCxG4", 
    "data" : {
        "v" : NumberInt(489), 
        "meta" : {
            "mtime" : 1461889960682.0, 
            "ctime" : 1461889960682.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n\tprivate Animal prey; \n\t\n\tpublic Lion(double height, double weight, String nickname){\n\t\tsuper(height, weight, nickname); \n\t}\n\t\n\tpublic boolean hunt(Animal prey){\n\t    double percent = Math.random(); \n\t    if(percent > 0.5){\n\t        this.prey = prey; \n\t        return true; \n\t    }else{\n\t        return false; \n\t    }\n\t}\n\t\n\tpublic boolean hasPrey(){\n\t\treturn (prey != null);\n\t}\n\t\n\tpublic void eat(){\n\t\tif(!hasPrey()){\n\t\t\tSystem.out.print(\"I GOT NUTHIN TO EAT >:3\");\n\t\t}else{\n\t\t    setWeight(getWeight() + (1.0/3)*prey.getWeight()); \n\t\t\tprey = null;\n\t\t\tSystem.out.print(\"AHHHHH... FRESH MEAT!\"); \n\t\t}\n\t}\n\t\n\tpublic Animal getPrey(){\n\t\treturn prey; \n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tLion l = new Lion(0.1,0.1,\"CuteLion\");\n\t\tl.getPrey();\n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LqiLqNXCkwbFk7ivi", 
    "data" : {
        "v" : NumberInt(585), 
        "meta" : {
            "mtime" : 1461889831462.0, 
            "ctime" : 1461889831462.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        if (nickname == null){\n            nickname = \"animal\";\n        }\n    }\n    \n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n    }\n    \n    public double getHeight(){\n        return height;\n    }\n    \n    public double getWeight(){\n        return weight;\n    }\n    \n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    \n    public String getNickname(){\n        return nickname;\n    }\n    \n    public void eat(){\n        System.out.print(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString(){\n        return nickname +  \"height =\" + height + \"m\" + \"weight =\" + weight +\"kg\";\n    }\n    \n    \n}\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "yBhX3hsNswwPSi2ba", 
    "data" : {
        "v" : NumberInt(829), 
        "meta" : {
            "mtime" : 1461890182389.0, 
            "ctime" : 1461890182389.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructors\n    public Lion(double height, double weight, String nickname ){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight ){\n        super(height, weight);\n    }    \n    \n    //setters\n    public boolean hunt(Animal prey){\n        Random rdm = new Random();\n        if(prey == null){\n            return false;\n        }\n        if(rdm.nextBoolean()){\n            this.prey = prey;\n            return true;\n        }\n        return false;\n\n    }\n    \n    //other methods\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        }\n        return true;\n    }\n\n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight() + prey.getWeight()/3);\n            prey = null;\n        }\n    }\n\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "2jbthdbdJYLZnrjWg", 
    "data" : {
        "v" : NumberInt(1200), 
        "meta" : {
            "mtime" : 1461889932032.0, 
            "ctime" : 1461889932032.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        int a = random.nextInt(2);\n        \n        if(a == 0){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return hunt(prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey) == true){\n            setWeight(getWeight()+getWeight()*1.0/3);\n            System.out.println (\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }else{\n            System.out.println (\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "hJZNGy85fk8kPzX42", 
    "data" : {
        "v" : NumberInt(359), 
        "meta" : {
            "mtime" : 1461890153418.0, 
            "ctime" : 1461890153418.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n    private String prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight);\n        this.prey=nickname;\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result=false;\n        if(prey!=null){\n            this.prey=prey;\n            result=true;\n        }\n        return result;\n    }\n    \n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "oJuAvqEqsCvE6CqGT", 
    "data" : {
        "v" : NumberInt(509), 
        "meta" : {
            "mtime" : 1461889757308.0, 
            "ctime" : 1461889757308.0
        }, 
        "snapshot" : "public class Animal{\n    private double height;\n    private double weight; \n    private String nickname;\n    \n    public Animal(double height, double weight, String nickname){\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    public Animal(double height, double weight){\n        this.height = height;\n        this.weight = weight;\n        nickname = \"animal\";\n    }\n    public double getHeight(){\n        return height;\n    }\n    public double getWeight(){\n        return weight;\n    }\n    public void setWeight(double weight){\n        this.weight = weight;\n    }\n    public String getNickname(){\n        return nickname;\n    }\n    public void eat(){\n    System.out.println(\"OM NOM NOM NOM\");\n    }\n    public String toString(){\n        String s = getNickname()+\", height = \"+ getHeight() + \"m, weight = \" + getWeight() + \"kg\" ;\n        return s;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "o9qRLRbZaoht6T9Te", 
    "data" : {
        "v" : NumberInt(744), 
        "meta" : {
            "mtime" : 1461889868217.0, 
            "ctime" : 1461889868217.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Lion extends Animal{\n    public Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal p){\n        Random d1 = new Random();//random no generator\n        int num1 = d1.nextInt(2);// 0, 1 excluding 2\n        if(num1 == 0){\n            prey = p;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        if(prey != null){\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat(){\n        if(prey != null){\n            \n            double lionWeight = super.getWeight();\n            lionWeight = lionWeight + ((1.0/3.0)* prey.getWeight());\n            setWeight(lionWeight);//must set or the weight wont change\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "m8vWC7yTEo6wjF9Qz", 
    "data" : {
        "v" : NumberInt(481), 
        "meta" : {
            "mtime" : 1461889026021.0, 
            "ctime" : 1461889026021.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    private double salary = 50000;\n    \n    public double getSalary() {\n        return salary;\n        \n    }\n    \n    public void advertise() {\n        salary = 50000;\n        System.out.println(\"Act now, while supplies last!\");\n        \n    }\n    \n \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "jZN9Dm5DeBwZCRwqu", 
    "data" : {
        "v" : NumberInt(293), 
        "meta" : {
            "mtime" : 1461890670515.0, 
            "ctime" : 1461890670515.0
        }, 
        "snapshot" : "public class Marketer extends Employee {\n    public void advertise() {\n        System.out.println(\"Act now, while supplies last!\");\n    }\n    public double getSalary() {\n        return (super.getSalary() + 10000.0);\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "2Q5kjahQqebWkHaX5", 
    "data" : {
        "v" : NumberInt(585), 
        "meta" : {
            "mtime" : 1461890095988.0, 
            "ctime" : 1461890095988.0
        }, 
        "snapshot" : "import java.lang.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    private double height;\n    private double weight;\n    public Lion(double height,double weight,Animal prey){\n        super(height,weight,\"Lion\");\n        this.prey = prey;\n    }\n    public boolean hunt(Animal prey1){\n        double sucess = Math.random();\n        if(sucess>0.5){\n            prey = prey1;\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n        \n            return false;\n        }\n        return true;\n        }\n    }\n    public Animal getPrey(){\n        return prey;\n    } \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n            return;\n        }\n        weight = weight*(1.3);\n        System.out.println(AHHHHH... FRESH MEAT!);\n        prey == null;\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "w2sn4KfFqQTY49GJv", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461890816671.0, 
            "ctime" : 1461890816671.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "6oKZxjpKNp3CASGx4", 
    "data" : {
        "v" : NumberInt(863), 
        "meta" : {
            "mtime" : 1461890001071.0, 
            "ctime" : 1461890001071.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname())){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    \n    public boolean hasPrey(){\n        if(prey1 != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey1;\n    }\n    \n    public void eat(){\n        if(prey1 != null){\n            setWeight(getWeight() + (1/3*prey1.getWeight());            \n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey1 = null;\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}\n\n", 
        "type" : "text"
    }
}
{ 
    "_id" : "i8qSL49q4SgfwqqfF", 
    "data" : {
        "v" : NumberInt(570), 
        "meta" : {
            "mtime" : 1461890028713.0, 
            "ctime" : 1461890028713.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n    private Animal currentPrey; \n    \n     public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        this(height,weight,\"animal\");\n    }\n    \n    public boolean hunt(Animal prey){\n        Random rnd = new Random(); \n        \n        boolean success = false; \n        if(currentPrey != null){\n            currentPrey = prey; \n            success = true; \n        }\n        return success;\n    }\n    \n    public boolean hasPrey(){\n        if(currentPrey != null){\n            return true;\n            \n        } else {\n            return false; \n            \n        }    \n    }\n    \n    public Animal getPrey(){\n        return currentPrey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"OM NOM NOM NOM\");\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }    \n    }   \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ZouvZBjWhHcdPZWY4", 
    "data" : {
        "v" : NumberInt(1137), 
        "meta" : {
            "mtime" : 1461890177587.0, 
            "ctime" : 1461890177587.0
        }, 
        "snapshot" : "import java.util.Random;\npublic class Lion extends Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    private Animal prey;\n    \n    public Lion (double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public Lion (double height, double weight) {\n        super(height, weight, \"animal\");\n    }\n    \n    public boolean hunt (Animal prey) {\n        boolean result = false;\n        \n        Random r = new Random();\n        int num = r.nextInt(2);\n        if (num == 0) {\n            result = true;\n            this.prey = prey;\n        } else {\n            result = false;\n        }\n        \n        return result;\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null) {\n            return true;\n        }\n        \n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        \n        if (prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            \n            double weightOfPrey = prey.getWeight();\n            super.setWeight(super.getWeight() + (1.0 /3.0 * weightOfPrey));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "cPA9eRdhCJkvABfck", 
    "data" : {
        "v" : NumberInt(106), 
        "meta" : {
            "mtime" : 1461890531656.0, 
            "ctime" : 1461890531656.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n    public boolean hunt(Animal prey){\n        Random random = new Random();\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "xBf9xof2kH3nHbC3X", 
    "data" : {
        "v" : NumberInt(884), 
        "meta" : {
            "mtime" : 1461890244192.0, 
            "ctime" : 1461890244192.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Lion extends Animal{\n    Animal preyed = null;\n    \n    public Lion(double height, double weight ,String nickname){\n        super(height,weight,nickname);\n    }\n    public boolean hunt(Animal prey){\n        Random r = new Random();\n        int Result = r.nextInt(1); \n        if (Result == 0){\n            preyed = prey;\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public boolean hasPrey(){\n        if (preyed == null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if (preyed == null){\n            return null;\n        }else{\n            return preyed;\n        }\n    }\n    \n    public void eat(){\n        if(preyed == null){\n            System.out.print(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            double weightGain = (preyed.getWeight() / 3);\n            double currentWeight = getWeight();\n            setWeight(currentWeight + weightGain);\n            preyed = null;\n            \n            System.out.print(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "RXeXYoTPfwcfJfAPY", 
    "data" : {
        "v" : NumberInt(886), 
        "meta" : {
            "mtime" : 1461889883471.0, 
            "ctime" : 1461889883471.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n    private Animal prey1;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey != null && prey1 != null && prey.getHeight() == prey1.getHeight() && prey.getWeight() == prey1.getWeight() && prey.getNickname().equals(prey1.getNickname())){\n            return true;\n        } else {\n            return false; \n        }\n    }\n    \n    public boolean hasPrey(){\n        if(prey1 != null){\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey1;\n    }\n    \n    public void eat(){\n        if(prey1 != null){\n            double newWeight = getWeight() + (1.0/3*prey1.getWeight());            \n            setWeight(newWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey1 = null;\n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Nridyva9CdFYEaFLy", 
    "data" : {
        "v" : NumberInt(809), 
        "meta" : {
            "mtime" : 1461890951244.0, 
            "ctime" : 1461890951244.0
        }, 
        "snapshot" : "public class Animal {\n    private double height;\n    private double weight;\n    private String nickname;\n    \n    public Animal(double height, double weight) {\n        this(height, weight, \"animal\");\n    }\n    \n    public Animal(double height, double weight, String nickname) {\n        this.height = height;\n        this.weight = weight;\n        this.nickname = nickname;\n    }\n    \n    public double getHeight() {\n        return height;\n    }\n    \n    public double getWeight() {\n        return weight;\n    }\n    \n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n    \n    public String getNickname() {\n        return nickname;\n    }\n    \n    public void eat() {\n        System.out.println(\"OM NOM NOM NOM\");\n    }\n    \n    public String toString() {\n        return nickname + \", height = \" + height + \"m, weight = \" + weight + \"kg\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "yPxD3PMWJEAdFTqDH", 
    "data" : {
        "v" : NumberInt(800), 
        "meta" : {
            "mtime" : 1461889000124.0, 
            "ctime" : 1461889000124.0
        }, 
        "snapshot" : "public class Marketer extends Employee{\n    private double additionalSalary;\n    \n    public Marketer(){\n        super();\n        \n        setBaseSalary(50000);\n        \n    }\n    \n    public void advertise(){\n        System.out.println(\"Act now, while supplies last!\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "p7FYsCajjHApy93Ro", 
    "data" : {
        "v" : NumberInt(278), 
        "meta" : {
            "mtime" : 1461890253199.0, 
            "ctime" : 1461890253199.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    \n    \n    public boolean hunt(Animal prey){\n        Random rnd = new Random();\n        if(prey == null){\n         return false;\n        }\n        \n        if(rnd.nextBoolean()){\n            this.prey=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(prey != null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\"); \n        }else{\n            double finalWeight = getWeight() + (prey.getWeight()/3);\n            setWeight(finalWeight);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n            \n        }\n        \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ANySDX7CDRheWrhPZ", 
    "data" : {
        "v" : NumberInt(927), 
        "meta" : {
            "mtime" : 1461889675735.0, 
            "ctime" : 1461889675735.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        boolean result;\n        Random r = new Random();\n        int low = 1;\n        int high = 3;\n        int rand = r.nextInt(high-low) + low;\n        if(rand==1){\n            result= true;\n            this.prey=prey;\n        }\n        else{\n            result= false;\n        }\n        return result;\n    }\n    \n    public boolean hasPrey(){\n        return prey!=null;\n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(!hasPrey()){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        else{\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            setWeight(getWeight()+(1.0/3.0*prey.getWeight()));\n            prey=null;\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3wAfmxRYePJPEFaTh", 
    "data" : {
        "v" : NumberInt(700), 
        "meta" : {
            "mtime" : 1461891429136.0, 
            "ctime" : 1461891429136.0
        }, 
        "snapshot" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (Math.random() > 0.5) { // aiseh. can also use random.nextBoolean()\n            this.prey = prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (hasPrey()) {\n            double weightGained = ((double)1 / 3) * prey.getWeight();\n            setWeight(getWeight() + weightGained);\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n        else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "EMm4u9bDM84JFtxX5", 
    "data" : {
        "v" : NumberInt(888), 
        "meta" : {
            "mtime" : 1461889956579.0, 
            "ctime" : 1461889956579.0
        }, 
        "snapshot" : "import java.util.random;\n\npublic class Lion extends Animal{\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random rdm = new Random\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(getPrey() != null){\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey(){\n        Animal prey = getPrey();\n        if(prey == null){\n            return true;\n        }\n        \n        return prey;\n    }\n    \n    public void eat(){\n        if(hunt == true){\n            prey == null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "vxtfPNj4m5M45Q5Pp", 
    "data" : {
        "v" : NumberInt(600), 
        "meta" : {
            "mtime" : 1461890045869.0, 
            "ctime" : 1461890045869.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal a;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int n = ran.nextInt(2);\n        if(n==0){\n            a=prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey(){\n        if(a==null){\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey(){\n        if(a==null){\n            return null;\n        }\n        return a;\n    }\n    \n    public void eat(){\n        if(hasPrey()==true && a!=null){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n            setWeight(getWeight() + a.getWeight()/3.0);\n            a=null;\n        }else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n            \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3grhPwf8Yek6Fip2F", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1461896770638.0, 
            "ctime" : 1461896770638.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "Y2qs7owuKz9eSy76b", 
    "data" : {
        "v" : NumberInt(970), 
        "meta" : {
            "mtime" : 1461889976527.0, 
            "ctime" : 1461889976527.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height,double weight,String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height,double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        Random ran = new Random();\n        int num = ran.nextInt(2);\n        if(num==0){\n            this.prey = prey;\n            return true;\n        } \n            return false;\n        \n    }\n    public boolean hasPrey(){\n        if(prey == null){\n            return false;\n        } \n            return true;\n        \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(hasPrey()){\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            double newWeight = prey.getWeight()/3+getWeight();\n            setWeight(newWeight);\n            prey = null;\n            \n        } else {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "R7FcLzdTWS9aPKKHo", 
    "data" : {
        "v" : NumberInt(1675), 
        "meta" : {
            "mtime" : 1461890291594.0, 
            "ctime" : 1461890291594.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    \n    public Lion(double height, double weight, String nickname){\n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height, weight);\n    }\n    \n    public boolean hunt(Animal prey){\n        if(prey == null){\n            return false;\n        }\n        boolean r = false;\n        Random random = new Random();\n        boolean a = random.nextBoolean();\n        \n        if(a){\n            \n            \n            this.prey = prey;\n            r = true;\n        }   \n        \n        return r;\n        \n        \n    }\n    \n    public boolean hasPrey(){\n        return this.hunt(this.prey);\n    }\n    \n    public Animal getPrey(){\n        \n        if(prey == null){\n            return null;\n        }   else{\n            return prey;\n        }\n    }\n    \n    public void eat(){\n        if(hunt(this.prey) == true){\n           \n            double weight = super.getWeight();\n            double addWeight = this.prey.getWeight();\n            double j = (double)(1/3);\n            super.setWeight(weight + addWeight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }   else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "PWmfa9dn9m2XCrmC7", 
    "data" : {
        "v" : NumberInt(846), 
        "meta" : {
            "mtime" : 1461889293417.0, 
            "ctime" : 1461889293417.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random rdm = new Random();\n        int num = rdm.nextInt(2); //0,1\n        \n        if(num == 0) {\n            this.prey = prey;\n            return true;\n        }\n    return false;\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey == null) {\n            return false;\n        }\n        return true;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            double weight = getWeight() + (prey.getWeight()*(1.0/3));\n            setWeight(weight);\n            prey = null;\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "5RRYp6vwnZMBGBFWB", 
    "data" : {
        "v" : NumberInt(1244), 
        "meta" : {
            "mtime" : 1461890135771.0, 
            "ctime" : 1461890135771.0
        }, 
        "snapshot" : "import java.util.*;\npublic class Lion extends Animal{\n    private Animal prey;\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    public Lion(double height, double weight){\n        super(height, weight, \"animal\");\n        \n    }\n    public boolean hunt(Animal animal){\n        Random rd = new Random();\n        if(rd.nextBoolean()){\n            prey=animal;\n            return true;\n            // nope you should be returning true;\n            // cos when you use rd.nextBoolean()\n            // you're returning another random boolean value\n            // you won't know what value is being returned! D:\n        }\n        else{\n            return false;    // likewise, return false;\n        }\n            \n    }\n    public boolean hasPrey(){\n        return prey!=null;\n        /* this is ok */\n    }\n    public Animal getPrey(){\n        return prey;\n    }\n    public void eat(){\n        if(prey!=null){\n            setWeight(prey.getWeight()*1/3+getWeight());\n            // to get the one-third value, you will need to use 1.0/3\n            // must be double value! cos int value of 1/3 will evaluate to 0\n            prey=null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        else{\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3vSGZtLzqCyE4qL97", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462108743770.0, 
            "ctime" : 1462108743770.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "H7uHKP7krjQDtxG98", 
    "data" : {
        "v" : NumberInt(457), 
        "meta" : {
            "mtime" : 1462108760985.0, 
            "ctime" : 1462108760985.0
        }, 
        "snapshot" : "public static int getNumberOfEmptyDrinks (Drink[] drinks){\n    if (drinks == null){\n        return 0;\n    }\n    \n    int count = 0;\n    \n    for(int i = 0; i <drinks.length; i++){ //use .length NO () instead of drinks.size()\n        Drink currentDrink = drinks[i]; //drinks[i] is the equivalent of drinks.get(i);\n        if(currentDrink.isEmpty()){\n            count++;\n        }\n    }\n    return count;\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "wGhbxesP2TNQTbzbX", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462109113711.0, 
            "ctime" : 1462109113711.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "uLzQgBA48vui6fFLo", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462109140063.0, 
            "ctime" : 1462109140063.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ohLNynxDGGrDnjiRu", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462109144455.0, 
            "ctime" : 1462109144455.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "tJBEYW4cfxgrphvBj", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462109150482.0, 
            "ctime" : 1462109150482.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "8nFFsA2jJro5rz5Qi", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462109156002.0, 
            "ctime" : 1462109156002.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "nPqG9EiDPMm4CsaEH", 
    "data" : {
        "v" : NumberInt(1613), 
        "meta" : {
            "mtime" : 1461890020105.0, 
            "ctime" : 1461890020105.0
        }, 
        "snapshot" : "import java.util.Random;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    //constructor\n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n    \n    //methods\n    /*\n    public boolean hunt(Animal prey){\n        Random isHunt = new Random();\n        boolean isHuntSuccessful = true;\n         \n        int value = isHunt.nextInt(2);\n        switch(value){\n            case 0: isHuntSuccessful = true; //successful\n                break;\n            case 1: isHuntSuccessful = false; //not successful\n                break;\n        }\n        if(isHuntSuccessful){\n            this.prey = prey;\n        }\n        return result;\n \n    }\n    */\n    \n    public boolean hunt (Animal prey){\n        double chance= Math.random()*2;\n        boolean isHuntSuccessful;\n        if(chance <= 0.5){ //??\n            isHuntSuccessful = true;\n            this.prey = prey;\n        }else{\n            isHuntSuccessful =false;\n        }\n        return isHuntSuccessful;\n    }\n    \n    \n    public boolean hasPrey(){\n        return(prey!=null);\n           \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        if(prey!=null){\n            setWeight(getWeight()+ (prey.getWeight()*1/3));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n            \n        }\n    }\n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "54HyGze2CixfANt4t", 
    "data" : {
        "v" : NumberInt(440), 
        "meta" : {
            "mtime" : 1461889466653.0, 
            "ctime" : 1461889466653.0
        }, 
        "snapshot" : "public class Lion extends Animal {\n    Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height,weight,nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if(prey != null) {\n            this.prey = prey;\n            return true;\n        }\n        return false;\n    }\n    \n    public boolean hasPrey() {\n        return prey != null;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if(!hasPrey()) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            setWeight(getWeight() + prey.getWeight() * (1.0/3));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "3tX6bt6d4d2DGxkSD", 
    "data" : {
        "v" : NumberInt(926), 
        "meta" : {
            "mtime" : 1461890554871.0, 
            "ctime" : 1461890554871.0
        }, 
        "snapshot" : "import java.util.Random;\n\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        \n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random r = new Random();\n        \n        if(r.nextBoolean()){\n            this.prey = prey;\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            // you need to set the weight of the Lion here\n            // and assign prey = null\n            double weight = super.getWeight();\n            weight += prey.getWeight()/3;\n            super.setWeight(weight);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}\n    ", 
        "type" : "text"
    }
}
{ 
    "_id" : "a9pvK39TuqokKNLQt", 
    "data" : {
        "v" : NumberInt(118), 
        "meta" : {
            "mtime" : 1461684568393.0, 
            "ctime" : 1461684568393.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        \n        super(height,weight,nickname);\n    }\n    \n    public Lion(double height, double weight){\n        super(height,weight);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random r = new Random();\n        //int a = r.nextInt(1);\n        if(r.nextBoolean()/*a == 1*/){\n            this.prey = prey;\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n    \n    public boolean hasPrey() {\n        if(prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat(){\n        if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }else{\n            // you need to set the weight of the Lion here\n            // and assign prey = null\n            setWeight(prey.getWeight() * 1/3 + getWeight());\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n        System.out.println(\"PETERLU\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "zjuWfwgfKBuJACqNf", 
    "data" : {
        "v" : NumberInt(441), 
        "meta" : {
            "mtime" : 1461889995983.0, 
            "ctime" : 1461889995983.0
        }, 
        "snapshot" : "import java.util.Random;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname){\n        super(height, weight, nickname);\n    }\n\n    public boolean hunt(Animal prey){\n        Random rnd = new Random();\n        int x = rnd.nextInt(2);\n        \n        boolean hasHunted = false;\n        \n        if(x == 1){\n            hasHunted = true;\n            this.prey = prey;\n        }\n        \n        return hasHunted;\n    }\n    \n    public boolean hasPrey(){\n        return (prey!=null);\n        \n    }\n    \n    public Animal getPrey(){\n        return prey;\n    }\n    \n    \n    public void eat(){\n         if(prey == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        }\n        if(prey!=null){\n            setWeight(getWeight()+ (prey.getWeight()*1/3));\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "LiMr4ztoJ4q378CRH", 
    "data" : {
        "v" : NumberInt(240), 
        "meta" : {
            "mtime" : 1462121521013.0, 
            "ctime" : 1462121521013.0
        }, 
        "snapshot" : "public static String parseEmail(String email){\n    String emailAdd;\n    int index = email.indexOf(\"@\"); \n    emailAdd = email.substring(0, index); \n    return emailAdd; \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "PQALXR6XZnm2uWx65", 
    "data" : {
        "v" : NumberInt(610), 
        "meta" : {
            "mtime" : 1462121775168.0, 
            "ctime" : 1462121775168.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console){\n    System.out.print(\"Type one or more words: \"); \n    String word = console.nextLine(); \n    String toCompare = \"\"; \n    for(int i = word.length()-1; i>=0; i--){\n        toCompare += word.charAt(i); \n    }\n    if(word.equalsIgnoreCase(toCompare)){\n        System.out.print(word + \" is a palindrome!\"); \n    }else{\n        System.out.print(word + \" is not a palindrome.\"); \n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "2iyEeeZwLKW7JSPpq", 
    "data" : {
        "v" : NumberInt(608), 
        "meta" : {
            "mtime" : 1462122589198.0, 
            "ctime" : 1462122589198.0
        }, 
        "snapshot" : "public static ArrayList<Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2){\n\t\tArrayList<Integer> result = new ArrayList<>(); \n\t\tif(a1.size() < a2.size()){\n\t\t\tint difference = a2.size() - a1.size(); \n\t\t\tfor(int i=0; i<a1.size(); i++){\n\t\t\t\tresult.add(a1.get(i)); \n\t\t\t\tresult.add(a2.get(i)); \n\t\t\t}\n\t\t\tfor(int j=0; j<difference; j++){\n\t\t\t\tresult.add(a2.get(a1.size()+ j)); \n\t\t\t}\n\t\t}else{\n\t\t\tint difference = a1.size() - a2.size(); \n\t\t\tfor(int i=0; i<a2.size(); i++){\n\t\t\t\tresult.add(a1.get(i)); \n\t\t\t\tresult.add(a2.get(i)); \n\t\t\t}\n\t\t\tfor(int j=0; j<difference; j++){\n\t\t\t\tresult.add(a1.get(a2.size()+ j)); \n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", 
        "type" : "text"
    }
}
{ 
    "_id" : "erLGz5ADMzAEzyHEq", 
    "data" : {
        "v" : NumberInt(57), 
        "meta" : {
            "mtime" : 1462123303791.0, 
            "ctime" : 1462123303791.0
        }, 
        "snapshot" : "public class Rectangle{\n\tprivate int width; \n\tprivate int height; \n\tprivate int x; \n\tprivate int y; \n\t\n\tpublic Rectangle(int x, int y, int width, int height){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width; \n\t\tthis.height = height; \n\t}\n\t\n\tpublic int getHeight(){\n\t\treturn height; \n\t}\n\t\n\tpublic int getWidth(){\n\t\treturn width; \n\t}\n\t\n\tpublic int getX(){\n\t\treturn x; \n\t}\n\t\n\tpublic int getY(){\n\t\treturn y; \n\t}\n\t\n\tpublic String toString(){\n\t\treturn \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\"; \n\t}\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "kwyh4cMhKjG3SjBoD", 
    "data" : {
        "v" : NumberInt(166), 
        "meta" : {
            "mtime" : 1462123943182.0, 
            "ctime" : 1462123943182.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n    Rectangle r = new Rectangle(rectA.getX(), rectB.getY(), rectA.getWidth(), rectB.getHeight()); \n    return r; \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "pkALJNDdQGujSXKaF", 
    "data" : {
        "v" : NumberInt(379), 
        "meta" : {
            "mtime" : 1462125574355.0, 
            "ctime" : 1462125574355.0
        }, 
        "snapshot" : "import java.util.*; \n\npublic class Adder{\n    int sum =0; \n    int num =0; \n    do{\n        Scanner sc = new Scanner(System.in); \n        System.out.print(\"Enter number>\"); \n        num = sc.nextInt(); \n        sum += num; \n    } while(num >0); \n    System.out.print(\"The sum is\" + sum + \".\"); \n}\n  \n    ", 
        "type" : "text"
    }
}
{ 
    "_id" : "2zDrbDwsJLZfNmBG3", 
    "data" : {
        "v" : NumberInt(112), 
        "meta" : {
            "mtime" : 1462126026885.0, 
            "ctime" : 1462126026885.0
        }, 
        "snapshot" : "public static double doubleInt(int x, int y){\n    double sum = 0.0; \n    sum = x + y; \n    return sum; \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "okraHAWgD3APY2y2B", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462172122673.0, 
            "ctime" : 1462172122673.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "ktpx65nCYudTdJNAi", 
    "data" : {
        "v" : NumberInt(1488), 
        "meta" : {
            "mtime" : 1461889899311.0, 
            "ctime" : 1461889899311.0
        }, 
        "snapshot" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hasPrey() {\n        return prey != null;\n        \n    }\n    public boolean hunt(Animal prey) {\n        if (hasPrey() && prey != null) {\n            this.prey = prey;\n            return true;\n        } else if (hasPrey() && prey == null) {\n            this.prey = prey;\n            return true;\n        } else {\n            return false;\n            \n        }\n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } else {\n            return null;\n        }\n    }\n    \n    public void eat() {\n        boolean anyPrey = hunt(prey);\n        if (!anyPrey) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3 \");\n        } else {\n            weight = super.getWeight();\n            //super.getWeight() = super.getWeight() + ((prey.getWeight())/3);\n            \n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n        \n    }\n    \n    \n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "d58ymKRZptdKFPXaG", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462227292982.0, 
            "ctime" : 1462227292982.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "9SyCHzaBo2uAHzScx", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462232561372.0, 
            "ctime" : 1462232561372.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "7SGhgc4sZ9Ad5ivpx", 
    "data" : {
        "v" : NumberInt(217), 
        "meta" : {
            "mtime" : 1462257723908.0, 
            "ctime" : 1462257723908.0
        }, 
        "snapshot" : "public void quotify(String print){\n    System.out.print(\"\\\" + print \\\"\");\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "iHxJqFwPNeJMcZbzA", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462258333774.0, 
            "ctime" : 1462258333774.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "gvxQPyz4ruH6SMmYA", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462260943584.0, 
            "ctime" : 1462260943584.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "hJ2xgYwZWKo4taMB8", 
    "data" : {
        "v" : NumberInt(438), 
        "meta" : {
            "mtime" : 1461890890473.0, 
            "ctime" : 1461890890473.0
        }, 
        "snapshot" : "public class Lion extends Animal{\n    private Animal preyAnimal;\n    \n    public Lion(){\n        super()\n    }\n    \n    public boolean hunt (Animal prey){\n        preyAnimal = prey;\n    }\n    \n    public Animal hasPrey(){\n         if(hasPrey()){\n            return true;\n        } \n        return false;\n    }\n    \n    public Animal getPrey(){\n      if (preyAnimal == null){\n          return null;\n      } \n      \n      return prayAnimal;\n    }\n    \n    public void eat(){\n        if (preyAnimal == null){\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "ifRSzPT9Wjt7WG5dB", 
    "data" : {
        "v" : NumberInt(2), 
        "meta" : {
            "mtime" : 1462268214415.0, 
            "ctime" : 1462268214415.0
        }, 
        "snapshot" : "\npublic class Rectangle {\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height){\n        this.x=x;\n        this.y=y;\n        this.width=width;\n        this.height=height;\n    }\n    \n    \n    public int getHeight(){\n        return height;\n    }\n    \n    public int getWidth(){\n        return width;\n    }\n    \n    public int getX(){\n        return x;\n    }\n    \n    public int getY(){\n        return y;\n    }\n    \n    public String toString(){\n        return \"Rectangle[x=\" + x + \",y=\" + y + \",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "kokKyxv7wopEhiWxQ", 
    "data" : {
        "v" : NumberInt(1), 
        "meta" : {
            "mtime" : 1462268254339.0, 
            "ctime" : 1462268254339.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB){\n        int Ax = rectA.getX();\n        int Ay = rectA.getY();\n        int AWidth = rectA.getWidth();\n        int AHeight = rectA.getHeight();\n        \n        int Bx = rectB.getX();\n        int By = rectB.getY();\n        int BWidth = rectB.getWidth();\n        int BHeight = rectB.getHeight();\n\n        int Cx = Math.min(Ax,Bx);\n        int Cy = Math.min(Ay,By);\n        \n        int lengthA = Ax + AWidth;\n        int lengthB = Bx + BWidth;\n        \n        int lengthC = Math.max(lengthA,lengthB);\n        int CWidth = lengthC - Cx;\n        \n        int heightA = Ay + AHeight;\n        int heightB = By + BHeight;\n        \n        int heightC = Math.max(heightA,heightB);\n        int CHeight = heightC - Cy;\n        \n        Rectangle r = new Rectangle(Cx, Cy, CWidth, CHeight);\n        \n        return r;\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "GDKyHinX7JoWQJNkh", 
    "data" : {
        "v" : NumberInt(790), 
        "meta" : {
            "mtime" : 1461889994437.0, 
            "ctime" : 1461889994437.0
        }, 
        "snapshot" : "public class Lion extends Animal {\n    private Animal prey; \n    \n    public Lion (double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        if (Math.random() > 0.5 ) {\n            this.prey = prey;\n            return true;\n        } \n       return false;\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null) {\n            return true;\n        }\n        return false;\n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        }\n        return null;\n    }\n    \n    public void eat() {\n        if (prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            setWeight(getWeight() + prey.getWeight() * (1.0/3));\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            prey = null;\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "Erxxvr5n4pYRu9gZ7", 
    "data" : {
        "v" : NumberInt(745), 
        "meta" : {
            "mtime" : 1461526889266.0, 
            "ctime" : 1461526889266.0
        }, 
        "snapshot" : "\n    public static ArrayList <Integer> interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n        // create a container\n        // add the odd inside the container, then add the even\n        //then if shorter reach the end of the arraylist, add the remaining longer inside \n        \n        ArrayList<Integer> combined = new ArrayList<>(a1.size() + a2.size());\n        for(int i = 0;i<a1.size(); i++){\n            if(i<a1.size()){\n                combined.add(a1.get(i));\n            }\n            int initial = 0;\n            int size = 0;\n            if (i < a2.size() && i == a1.size() - 1) {\n                size = a2.size();\n                initial = i;\n            }\n            else {\n                initial = i;\n                size = i;\n            }\n            for(int j=initial; j <size; j++){\n                //if (i<a2.size()){\n                combined.add(a2.get(j));\n                //}\n            }\n        }\n        return combined;\n    }", 
        "type" : "text"
    }
}
{ 
    "_id" : "LvPGZy6CQopej2YWm", 
    "data" : {
        "v" : NumberInt(89), 
        "meta" : {
            "mtime" : 1462344531242.0, 
            "ctime" : 1462344531242.0
        }, 
        "snapshot" : "public static String parseEmail(String email) {\n    return email.split(\"@\")[0];\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "N4bEk948uDv4uqpDr", 
    "data" : {
        "v" : NumberInt(467), 
        "meta" : {
            "mtime" : 1462344764079.0, 
            "ctime" : 1462344764079.0
        }, 
        "snapshot" : "public static void printPalindrome(Scanner console) {\n    System.out.print(\"Type one or more words: \");\n    String words = console.nextLine();\n    String lowerCase = words.toLowerCase();\n    boolean isPalindrome = true;\n    for (int i = 0; i < (lowerCase.length() / 2); i++) {\n        if (lowerCase.charAt(i) != lowerCase.charAt(lowerCase.length() - 1 - i)) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    if (isPalindrome) {\n        System.out.println(words + \" is a palindrome!\");\n    }\n    else {\n        System.out.println(words + \" is not a palindrome.\");\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "xqkzHPCPFijE4Jau5", 
    "data" : {
        "v" : NumberInt(506), 
        "meta" : {
            "mtime" : 1462345150093.0, 
            "ctime" : 1462345150093.0
        }, 
        "snapshot" : "public static void interleave(ArrayList<Integer> a1, ArrayList<Integer> a2) {\n    int index = 0;\n    int size = 0;\n    if (a1.size() > 0) {\n        size = a1.size() * 2 - 1;\n        index++;\n    }\n    for (int i = 0; i < a2.size(); i++) {\n        a1.add(index, a2.get(i));\n        if (index >= size) {\n            index++;\n        }\n        else {\n            index += 2;\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "XLRuuC87catBPZpDG", 
    "data" : {
        "v" : NumberInt(468), 
        "meta" : {
            "mtime" : 1462346937918.0, 
            "ctime" : 1462346937918.0
        }, 
        "snapshot" : "public class Rectangle {\n    \n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    \n    public Rectangle(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    \n    public int getX() {\n        return x;\n    }\n    \n    public int getY() {\n        return y;\n    }\n    \n    public int getWidth() {\n        return width;\n    }\n    \n    public int getHeight() {\n        return height;\n    }\n    \n    public String toString() {\n        return \"Rectangle[x=\" + x + \",y=\" + y +\",width=\" + width + \",height=\" + height + \"]\";\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "BzvJw4hKMG5bwLXQX", 
    "data" : {
        "v" : NumberInt(321), 
        "meta" : {
            "mtime" : 1462347272225.0, 
            "ctime" : 1462347272225.0
        }, 
        "snapshot" : "public static Rectangle union(Rectangle rectA, Rectangle rectB) {\n    int x = Math.min(rectA.getX(), rectB.getX());\n    int y = Math.min(rectA.getY(), rectB.getY());\n    int width = 0;\n    if (rectA.getX() > rectB.getX()) {\n        width = rectA.getWidth() + (rectA.getX() - rectB.getX());\n    }\n    else {\n        width = rectB.getWidth() + (rectB.getX() - rectA.getX());\n    }\n    int height = 0;\n    if (rectA.getY() > rectB.getY()) {\n        height = rectA.getHeight() + (rectA.getY() - rectB.getY());\n    }\n    else {\n        height = rectB.getHeight() + (rectB.getY() - rectA.getY());\n    }\n    return new Rectangle(x, y, width, height);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "KBZCj9fuChdYmcuek", 
    "data" : {
        "v" : NumberInt(299), 
        "meta" : {
            "mtime" : 1462349217298.0, 
            "ctime" : 1462349217298.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int sum = 0;\n        int num = 0;\n        do {\n            sum += num;\n            System.out.print(\"Enter number>\");\n            num = sc.nextInt();\n        } while (num > 0);\n        System.out.println(\"The sum is \" + sum);\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "GX8DzsJ2DxiBWuktN", 
    "data" : {
        "v" : NumberInt(68), 
        "meta" : {
            "mtime" : 1462349819665.0, 
            "ctime" : 1462349819665.0
        }, 
        "snapshot" : "public static double doubleInt(int a, int b) {\n    return ((double)a + b);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "un7BWAt76qgtdzepi", 
    "data" : {
        "v" : NumberInt(81), 
        "meta" : {
            "mtime" : 1462349884295.0, 
            "ctime" : 1462349884295.0
        }, 
        "snapshot" : "public static void quotify(String s) {\n    System.out.println(\"\\\"\" + s + \"\\\"\");\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "6HayFT2vg7mFXz58J", 
    "data" : {
        "v" : NumberInt(277), 
        "meta" : {
            "mtime" : 1462349966406.0, 
            "ctime" : 1462349966406.0
        }, 
        "snapshot" : "public static void flippedTriangle(int height) {\n    for (int row = 0; row < height; row++) {\n        for (int space = 0; space < (height - 1 - row); space++) {\n            System.out.print(\" \");\n        }\n        for (int star = 0; star <= row; star++) {\n            System.out.print(\"*\");\n        }\n        System.out.println();\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "couANt6uKaMKotXdf", 
    "data" : {
        "v" : NumberInt(89), 
        "meta" : {
            "mtime" : 1462350128036.0, 
            "ctime" : 1462350128036.0
        }, 
        "snapshot" : "public static int power(int base, int expo) {\n    return (int)Math.pow(base, expo);\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "eqvz9WiP7Jk6eHRX6", 
    "data" : {
        "v" : NumberInt(1031), 
        "meta" : {
            "mtime" : 1462350311110.0, 
            "ctime" : 1462350311110.0
        }, 
        "snapshot" : "import java.io.*;\nimport java.util.*;\n\npublic class DrinkData {\n    public static Drink[] loadDrinks(String fileName) throws FileNotFoundException {\n        Scanner sc = new Scanner(new File(fileName));\n        ArrayList<Drink> list = new ArrayList<>();\n        sc.useDelimiter(\",|\\r\\n\");\n        while(sc.hasNext()) {\n            String drinkType = sc.next();\n            char type = drinkType.charAt(0);\n            int volume = sc.nextInt();\n            list.add(new Drink(volume, type));\n        }\n        Drink[] drinkArr = new Drink[list.size()];\n        list.toArray(drinkArr);\n        return drinkArr;\n    }\n    \n    public static void saveDrinks(Drink[] drinks, String fileName) throws IOException {\n        PrintStream stream = new PrintStream(new FileOutputStream(new File(fileName), false));\n        for (Drink drink : drinks) {\n            if (drink.isEmpty()) {\n                stream.print(drink.getType());\n                stream.println(drink.getVolume());\n            }\n        }\n        stream.close();\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "fsNWssmLYmMt7HofG", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1462354676149.0, 
            "ctime" : 1462354676149.0
        }, 
        "v" : NumberInt(0)
    }
}
{ 
    "_id" : "wRb6xEksu7HcFr5fz", 
    "data" : {
        "v" : NumberInt(1611), 
        "meta" : {
            "mtime" : 1461889913180.0, 
            "ctime" : 1461889913180.0
        }, 
        "snapshot" : "public class Lion extends Animal {\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n     \n    public boolean hunt(Animal prey) {\n        if (this.prey == null) {\n            this.prey = prey;\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n       if(prey!= null) {\n           return true;\n       }\n       return false;\n    }\n    \n    public Animal getPrey() {\n        if (prey != null) {\n            return prey;\n        } else {\n            return null;\n        }\n    }\n    \n    public void eat() {\n        if (prey == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            prey = null;\n            double currentWeight = getWeight();\n            double preyWeight = getWeight() * 0.3;\n            double finalWeight = currentWeight + preyWeight;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n            \n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "rPXnwJJMmLpm9uayR", 
    "data" : {
        "v" : NumberInt(983), 
        "meta" : {
            "mtime" : 1461890252796.0, 
            "ctime" : 1461890252796.0
        }, 
        "snapshot" : "import java.util.*;\n\npublic class Lion extends Animal{\n    private Animal prey;\n    \n    public Lion(double height, double weight, String nickname) {\n        super(height, weight, nickname);\n    }\n    \n    public boolean hunt(Animal prey) {\n        Random r = new Random();\n        int x = r.nextInt(2); // int x = r.nextInt(2);\n        if (x == 0) {\n            this.prey = prey;\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public boolean hasPrey() {\n        if (prey != null && prey.getWeight() > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public Animal getPrey() {\n        return prey;\n    }\n    \n    public void eat() {\n        if (getPrey() == null) {\n            System.out.println(\"I GOT NUTHIN TO EAT >:3\");\n        } else {\n            setWeight(getWeight() + prey.getWeight() / 3);\n            prey = null;\n            System.out.println(\"AHHHHH... FRESH MEAT!\");\n        }\n    }\n}", 
        "type" : "text"
    }
}
{ 
    "_id" : "HYmrFzfJSFuhWMnE6", 
    "data" : {
        "snapshot" : "", 
        "type" : "text", 
        "meta" : {
            "mtime" : 1463623562549.0, 
            "ctime" : 1463623562549.0
        }, 
        "v" : NumberInt(0)
    }
}
